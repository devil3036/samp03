/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/*
||===============================================||
|| Nombre: INFRANET - RP 2017                    ||
|| Rol: Los Santos.                              ||
|| Version: 4.0.  (Actividad)                    ||
|| Base: Aldershot - ZC - Tu Vida Virtual        ||
|| Se precisa FS llamado "GM" para funcionar.    ||
||===============================================||
*/
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
//Includes
#include <a_samp>
#include <RobosGR>
#include <a_actor>
#include <streamer>
#include <yom_buttons>
#include <keypad>
#include <YSI\y_ini>
#include <YSI\y_timers>
#include <djson>
#include <sscanf2>
#include <progress>
#include <foreach>
#include <zcmd>
#include <a_zones>
#include <string>
#include <mxINI>
#include <mSelection>
#include <CleoFuck>
#include <dof2>
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
//Version Actual Del Servidor
#define SERVER_GM_TEXT "4.0"

//**************************************
static gTeam[MAX_PLAYERS];
#pragma 			tabsize 					(0)
//*******************tazer quitar armas*******************
static qArmas[MAX_PLAYERS][13][2];
//*******************Limites*******************
// Speedo nuevo:
#define VehicleHealthYellow 700
#define VehicleHealthRed 400
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
//#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1)) *%3*1.6)
////////////////////////////////////////////////////////////////////////////// COLORES /////////////////////
#define				COL_WHITE 					"{FFFFFF}"
#define 			COL_HOUSET					"{3FA0EF}"
#define 			COL_GENERAL					"{BE81F7}"
#define 			COL_RED 					"{F81414}"
////////////////////////////////////////////////////////////
#define 			REMOVE_BULLET_TIME 			(30)
#define 			USE_STREAMER
#define 			MAX_BULLETS					(500)
#define 			OBJECT_BULLET				(3101)
#if defined 		USE_STREAMER
#tryinclude 		<streamer>
#endif
#define 			AntiBot			 			1 // Para desactivar el Anti Bot, simplemente coloque "0" en la línea.
#define 			AntiJoin 					1 // Para desactivar el Anti Join Flood, simplemente coloque "0" en la línea.
#define 			AntiCrash 					1 // Para desactivar el Anti Car Crash, simplemente coloque "0" en la línea.
#define 			AntiArmas 					0 // Para desactivar el Anti Armas prohibidas, simplemente coloque "0" en la línea.
#define 			AntiCleo 					1 // Para desactivar el Anti Cleo Hack, simplemente coloque "0" en la línea.
#define 			AntiScore 					1 // Para desactivar el Anti Score Hack, simplemente coloque "0" en la línea.
#define             ACEPTAR_MULTA               20
#define             ACEPTAR_TER                 21
#define             LISTA_FACC                  22
#define             ACEPTAR_ROBO                23
#define 			VV 							(175)
#undef 				MAX_PLAYERS
#define 			MAX_PLAYERS 				(100) // 500
#define 			MAX_FACTION 				(18) // 30
#define             MAX_LEADERS              	(19) //20
#define 			MAX_vCAMERAS  				(20) // Speed.
#define 			MAX_AD 						(40)
#define 			MAX_PING 					(1500)
#define 			MAX_FAMILY 					(10) // 15
#define 			MAX_HOUSES  				(800)
#define 			MAX_PROPIEDADES				(50)
#define 			MAX_FURNITURE 				(20)
#define             MAX_GARAGES              	(100) //35
#define             MAX_ACTORES              	(100)
//#define             BUSINESS_VIRTUAL_WORLD     	(30000)
//#define             GARAGES_VIRTUAL_WORLD     	(30001)
#define             AplicaAnim                  ApplyAnimation
#define				MAX_BARRICADES 				(30)
#define 			MAX_POINTS 					(9)
#define 			NEW_VULNERABLE 				(24)
#define 			MAX_DDOORS 					(500)
#define 			MAX_PLAYERTOYS 				(15)
#define 			MAX_TIMERS 					(11)
#define 			MAX_PLAYERVEHICLES 			(10) // 15
#define 			MAX_MODS 					(15)
#define 			MAX_GANG_VEHICLES 			(6)
#define 			MAX_DEALERSHIPVEHICLES 		(15)
#define 			MAX_NEGOCIOS            	(50)
#define 			MAX_PORTONES            	(50)
#define             Message 					SendClientMessage
#define 			QUIT_EXTORTION  			(962)
#define 			MAX_CARDEALERSHIPS 			(8) // 7
#define 			TIME_RESPAWN 				(1800) // 30 Minutos. [7.200 = 2 Horas.]
#define 			TIME_TO_TAKEOVER			(5)
#define 			INVALID_HOUSE_ID 			(-1)
#define 			INVALID_PLAYER_VEHICLE_ID 	(0)
#define 			CHECKPOINT_NONE 			(0)
#define 			CHECKPOINT_LOADTRUCK 		(97651)
#define 			CHECKPOINT_RETURNTRUCK 		(97652)
#define 			NOOB_SKIN 					(289)
#define				TYPE_GIVEWEAPONTIMER 		(0)
#define 			TYPE_FLOODPROTECTION 		(1)
#define 			TYPE_PAYTIMER        		(2)
#define				TYPE_ARMSTIMER 		 		(3)
#define 			TYPE_TPPIZZARUNTIMER 		(4)
#define 			TYPE_PIZZATIMER      		(5)
#define				TYPE_TPTRUCKRUNTIMER   		(6)
#define				TYPE_TPDRUGRUNTIMER 		(11)
#define 			TYPE_TPMATRUNTIMER 			(12)
#define 			TYPE_GUARDTIMER				(13)
#define 		    MAX_ARMAS                    200
#define 			MenorTiempo   				10000
#define 			Logueos     				2
//***sistema de fire***
#define 			TIEMPOFIRE					900// Tiempo en aparecer incendio (en segundos). // 60 - Ahora son 15 minutos, antes 1 minuto.
#define 			APAGARFIRE 					300 // Tiempo dado al bombero para apagar el incendio (en segundos). // 120 - Ahora son 5 minutos.
#define 			USERFILE 					"CUENTAS/%s.ini"
#define 			USERFILEOLD 				"BACKUP/%s.ini"
#define 			INFINITY_HEALTH 			Float:0x7F800000
#define 			ACTORES_FILE 				"ACTORES/%d.ini"
#define 			LIDERES_FILE 				"FACCIONES/%d.ini"
#define 			NEGOCIOS_FILE 				"NEGOCIOS/%d.ini"
#define 			GARAGES_FILE 				"GARAGES/%d.ini"
#define 			PORTONES_FILE 				"PORTONES/%d.ini"
#define 	        SPRAYTAG_FOLDER 			"GRAFFITIS/%s.ini"
#define 	        PROPIEDADES_FILE 			"PROPIEDADES/%d.ini"
//*******************Defines FaceAngles*******************
#define 			SUR 						(180)
#define				NORTE 						(0)
#define 			OESTE 						(90)
#define 			ESTE 						(270)
//*******************Defines / Macros*******************
#define 			function%0(%1) 							forward %0(%1); public %0(%1)
#define 			PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define 			SendFormattedMessage(%0,%1,%2) do{new _str[128]; format(_str,128,%2); SendClientMessageEx(%0,%1,_str);}while(FALSE)
#define 			def(%0,%1)							    (format(text,sizeof(text),%0,%1),text)
#define 			GetVehicleName(%0) 						VehicleName[GetVehicleModel(%0)-400]
#define 			GetPlayerCash(%0) 						GetPVarInt(%0, "Cash")
#define 			SetPVarInt(%0,%1,0); 					DeletePVar(%0,%1);
#define 			PlayerToPoint(%1,%2,%3,%4,%5)  			IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define 			Skin        						    SetPlayerSkin
#define 			SpeedCheck(%0,%1,%2,%3,%4)  			floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define 			SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) 	SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define 			StopPlayerHoldingObject(%1) 			RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 			IsPlayerHoldingObject(%1) 				IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 			SendRequest(%1,%2)  					SafeDialogEx(%1, PETITION_DIALOG, DIALOG_STYLE_MSGBOX, "Petición", %2, "Aceptar", "Rechazar")+
#define 			COLOR_FUCK 								Info[playerid][pAdminZC] = 6000;
//***sistema de fire***
#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))

#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
//*******************Colores*******************
#define 			Gris 						0xC0C0C0AA
#define             COLOR_DIALOGO1              0x960707FF
#define             COLOR_AZULL                 0xFF0000FF
#define 			c1_color 					0xFFFFFFFF
#define 			c2_color 					0xFFFFC7FF
#define 			c3_color 					0xFFFF72FF
#define 			c4_color 					0xFFFF00FF
#define 			c5_color 					0xFFA600FF
#define 			c6_color 					0xFF0000FF
#define             NEGATIVO                    0xFF0000FF
#define             POSITIVO                    0x00FF00FF
#define             COLOR_ORANGE                0xFFA500FF
#define             COLOR_SYSTEM                0xFFFFFFFF
#define             COLOR_YELLOW3d              0xFFFF00FF
#define 			FIND_COLOR					0xB90000FF
#define 			COLOR_GENERAL 				0xFF8409FF
#define             COLOR_MAGENTA               0xFF00FFFF
#define 			COLOR_LIYELLOW 				0xFFFF80FF
#define 			COLOR_POINTGEN 				0xF5CB38FF
#define 			COLOR_BLUED 				0x23A9D6FF
#define 			COLOR_VIP 					0xC93CCE00
#define 			TEAM_FBI_COLOR 				0x8D8DFF00
#define 			TEAM_NEWS_COLOR 			0x049C7100
#define 			TEAM_MED_COLOR 				0xFF828200
#define 			COLOR_NG 					0x9ACD3200
#define 			TEAM_GOBIERNO_COLOR	        0xFFB72AFF
#define 			TEAM_SISTEMAJUDICIAL_COLOR	0xB7CD8FFF
#define 			TEAM_BOMBEROS_COLOR	        0xFF0000FF
#define 			TEAM_TAXI_COLOR 			0xF2FF0000
#define 			COLOR_NEWBIE 				0x7DAEFFFF
#define 			COLOR_TWWHITE 				0xFFFFFFAA
#define 			COLOR_TWYELLOW 				0xFFFF00AA
#define 			COLOR_TWPINK 				0xE75480AA
#define 			COLOR_TWRED 				0xFF0000AA
#define 			COLOR_TWBROWN 				0x654321AA
#define 			COLOR_TWGRAY 				0x808080AA
#define 			COLOR_TWOLIVE 				0x808000AA
#define 			COLOR_TWPURPLE 				0x800080AA
#define 			COLOR_TWTAN 				0xD2B48CAA
#define 			COLOR_TWAQUA 				0x00FFFFAA
#define 			COLOR_TWORANGE 				0xFF8C00AA
#define 			COLOR_TWAZURE 				0x007FFFAA
#define 			COLOR_TWGREEN 				0x008000AA
#define 			COLOR_TWBLUE 				0x0000FFAA
#define 			COLOR_TWBLACK 				0x000000AA
#define 			TEAM_APRISON_COLOR 			0x9C791200
#define 			PUBLICRADIO_COLOR 			0x6DFB6DFF
#define				COLOR_REPORT				0xFFFF91FF
#define 			COLOR_HELPERCHAT  			0x0BBD5FEC8
#define 			COLOR_COMBINEDCHAT 			0x6CEFF0FF
#define 			COLOR_TITLE 				0xFCCA03FF
#define 			COLOR_TEORY     			0xFFFF91FF
#define 			COLOR_QUESTION  			0xFFB18CFF
#define 			COLOR_YES       			0x00CC00FF
#define 			COLOR_DUDA      			0xD86356FF
#define 			COLOR_NO        			0xFF8080FF
#define 			COLOR_ASKQ 					0xFF0000FF
#define 			COLOR_DUTY 					0x00CA00FF
#define 			COLOR_NEGATIVE 				0xFF6A6AFF
#define 			WANTED_COLOR 				0xBF6000FF
#define 			COLOR_MEGAPHONE 			0xFF9B6AFF
#define 			COLOR_GRAD1 				0xB4B5B7FF
#define 			COLOR_GRAD2 				0xBFC0C2FF
#define 			COLOR_GRAD3 				0xCBCCCEFF
#define 			COLOR_GRAD4 				0xD8D8D8FF
#define 			COLOR_GRAD5 				0xE3E3E3FF
#define 			COLOR_GRAD6 				0xF0F0F0FF
#define 			COLOR_GREY 					0xAFAFAFAA
#define 			COLOR_GREEN 				0x9EC73DAA
#define 			COLOR_GREEN2 				0x9EC73DAA
#define 			COLOR_GROVE 				0x00FF00FF
#define 			COLOR_RED 					0xAA3333AA
#define             COLOR_CMDAA                 0x0000EFFF // Canal /n.
#define             COLOR_CMDAA2                0x848484FF // Canal /b.
#define             COLOR_CMDAA3                0xFA5858FF // Canal /aa.
#define 			COLOR_REALRED 				0xFF0606FF
#define 			COLOR_RED2 					0xFF6F6FFF
#define 			COLOR_LIGHTRED 				0xFF6347AA
#define 			COLOR_LIGHTBLUE 			0x33CCFFAA
#define 			COLOR_LIGHTGREEN			0x9ACD32AA
#define 			COLOR_CMDA 					0xFFFF00AA
#define 			COLOR_YELLOW 				0xFFFF00AA
#define 			COLOR_YELLOW2 				0xF5DEB3AA
#define 			COLOR_WHITE 				0xFFFFFFAA
#define 			COLOR_FADE 					0xE6E6E6E6
#define 			COLOR_FADE1 				0xE6E6E6E6
#define 			COLOR_FADE2 				0xC8C8C8C8
#define 			COLOR_FADE3 				0xAAAAAAAA
#define 			COLOR_FADE4 				0x8C8C8C8C
#define 			COLOR_FADE5 				0x6E6E6E6E
#define 			COLOR_PURPLE 				0xC2A2DAAA
#define 			COLOR_DBLUE 				0x2641FEAA
#define				COLOR_ALLDEPT 				0xFF8282AA
#define				COLOR_ALLDEPTOOC			0xAC58FAFF
#define 			COLOR_NEWS 					0x458E1DAA
#define             Color_Rojo	                0xE60000FF
#define 			COLOR_NEWS2 				0xFFA500AA
#define 			COLOR_OOC 					0x66FFFFFF
#define 			OBJECTIVE_COLOR 			0x64000064
#define 			TEAM_GREEN_COLOR 			0xFFFFFFAA
#define 			TEAM_JOB_COLOR 				0xFFB6C1AA
#define 			TEAM_HIT_COLOR 				0xFFFFFF00
#define 			TEAM_BLUE_COLOR 			0x8D8DFF00
#define 			TEAM_RADIO_COLOR2 			0xF2D068FF
#define 			TEAM_RADIO_COLOR 			0x9B9BFFFF
#define 			COLOR_ADD 					0x63FF60AA
#define 			TEAM_GROVE_COLOR 			0x00D900C8
#define 			TEAM_VAGOS_COLOR 			0xFFC801C8
#define 			TEAM_BALLAS_COLOR 			0xD900D3C8
#define 			TEAM_AZTECAS_COLOR 			0x01FCFFC8
#define 			TEAM_CYAN_COLOR 			0xFF8282AA
#define 			TEAM_ORANGE_COLOR 			0xFF830000
#define 			TEAM_COR_COLOR 				0x39393900
#define 			TEAM_BAR_COLOR 				0x00D90000
#define 			TEAM_TAT_COLOR 				0xBDCB9200
#define 			TEAM_CUN_COLOR 				0xD900D300
#define 			TEAM_STR_COLOR 				0x01FCFF00
#define 			TEAM_ADMIN_COLOR 			0x00808000
#define 			COLOR_INVIS 				0xAFAFAF00
#define 			COLOR_SPEC 					0xBFC0C200
#define 			COLOR_BLUE 					0x2641FEAA
#define 			COLOR_DARKNICERED 			0x9D000096
#define 			COLOR_LIGHT_BLUE 			0x9FB1EEAA
#define 			TRY_GREEN   				0x00BF60FF
#define 			ROJO_ADMIN 					0xDC092FFF
#define 			COLOR_SHOP 					0xE7E784FF
#define 			VERDE_ADMIN 				0x41FF2FFF
#define 			CELESTE_ADMIN 				0x41FFECFF
#define 			AMARILLO_ADMIN 				0xFFFF00FF
#define 			CREMA_ADMIN 				0xFFFFD4D4
#define 			ROSADO_ADMIN 				0xFF4FD4D4
#define 			MORADO_ADMIN 				0x9600FF2E
#define 			ORANGE_ADMIN 				0xFF7617FF
#define 			PAINTBALL_TEAM_RED 			0xFF000000
#define 			PAINTBALL_TEAM_BLUE 		0x2641FE00

//*******************Dialogos*******************
//Muebles
#define 			WEAPON_TYPE_NONE 			(0)
#define 			WEAPON_TYPE_HEAVY   		(1)
#define 			WEAPON_TYPE_LIGHT   		(2)
#define 			WEAPON_TYPE_MELEE   		(3)
#define             TimerTextDrawLocY           2
#define             TimeOfHorseRaceHours        1
#define             TimeOfHorseRaceMinutes      20
#define             CashLowerBounds             100
#define             CashHigherBounds            5000
#define             RealMilisecondsPerIGMinute  2000
#define 			ResetMoneyBar 				ResetPlayerMoney
#define 			UpdateMoneyBar 				GivePlayerMoney
#define 			INVALID_DIALOG      		(500)
#define 			SPEEDGUN					(43)
#define 			EQUIPO_DOC  				(6)
#define 			EQUIPO_HITMAN  				(7)
#define             EQUIPO_CDG             		(9)
#define 			CPASS 						 14
#define 			DIALOGUNDI   				(15)
#define 			DIALOG_HIT     				(25)
#define 			DIALOG_EDITOBJECT           (43)
#define 			RENT_BIKE 					(44)
#define 			JOBHELPMENU 				(45)
#define 			DRINKDIALOG 				(47)
#define 			DRINKLISTDIALOG				(46)
#define 			TIPDIALOG 					(49)
#define 			EQUIPO_GOB 					(50)
#define 			IPAD 						(51)
#define 			EQUIPO_CNN 					(53)
#define 			TELEPORTS_FACCIONES 		(54)
#define             EQUIPO_LK                   (55)
#define 			EQUIPO_SistemaJ 			(56)
#define             EQUIPO_BALLAS               (57)
#define             EQUIPO_GROOVE               (58)
#define             EQUIPO_SURENOS              (59)
#define             EQUIPO_LCN                  (60)
#define             EQUIPO_RUSA                 (61)
#define             EQUIPO_SANTANA              (62)
#define             EQUIPO_YAKUZA               (63)
#define             EQUIPO_MECANICO             (64)
#define             EQUIPO_ALQAEDA              (67)
#define             BANCO_MENU                  68
#define             BANCO_SACAR                 69
#define             BANCO_DEPOSITAR             70
#define             BANCO_TRANSFERIR            71
#define             BANCO_TRANSFERIR2           72
#define             GOOGLE                      (73)
#define		  		CMDSTAFF    				82 // Comandos Staff (/ah).
#define 			FSTATS		      			83 // Stats familias.
#define 			FSTATS2		      			84 // Stats familias (Miembros).
#define 			CASCO_DIALOG	      		85
#define 			PSTATS		      			86 // Player.
#define 			STATS2			      		87 // Stats facciones. (Materiales, dinero)
#define 			STATS			      		88 // Stats facciones.
#define 			CAMARAS_DIALOGO      		89
#define             MAPINTERES                  90
#define  			D_SPEEDCAMRANGE				(91)
#define  			D_SPEEDCAMLIMIT				(92)
#define  			D_SPEEDCAMSTATUS			(93)
#define				D_SPEEDCAMFINE              (94)
#define 			PB_MENU 					(4000)
// -= Estado =- //
#define 			DIALOG_ESTADO   			930
#define 			DIALOG_REG_ESTADO   		931
//***sistema Muebles***
#define				COLOCAR_M          			3510
#define 			COLOCAR_M1 					3511
#define 			COLOCAR_M2 					3512
#define 			COLOCAR_M3 					5513
#define 			MENU_CASA 					5514
#define 			MENU_CASA1      			5515
#define 			MENU_CASA2 					5516
#define 			MENU_CASA3 					5517
#define 			MENU_CASA4 					5518
#define 			MENU_CASA5 					5519
#define 			MENU_CASA6 					5520
#define 			MENU_CASA7          		5521
///////// Sistema de muebles: Nuevo.
#define 			INVALID_HOUSE_ID 			(-1)
#define 			INVALID_PLAYER_VEHICLE_ID 	(0)
#define 			INVALID_FURNITURE_ID 		(0)
#define 			DIALOG_ARMARIO				(5512)
#define 			DIALOG_ROPEROMENU			(5522)
/// Diálogos.
#define 			DIALOG_EDIT_FURNITURE 		(5523)
#define 			DIALOG_SELL_FURNITURE 		(5524)
#define 			DIALOG_BUY_FURNITURE 		(5525)
#define 			DIALOG_MENU_FURNITURE 		(5526)
#define 			DIALOG_FURNITURE_BOUGHT 	(5527)
#define 			DIALOG_FURNITURE_KEEPSELL 	(5528)
// Casa.
#define 			HOUSE_OPTIONS    			(174)
#define 			HOUSE_DINERO    			(175)
#define 			HOUSE_RETIRAR    			(176)
#define 			HOUSE_DEPOSITAR				(177)
#define 			HOUSE_ITEM 		 			(178)
// Materiales, droga y crack.
#define 			HOUSE_ITEM_MAT   			(179)
#define 			HOUSE_ITEM_POT 	 			(180)
#define 			HOUSE_ITEM_CRACK 			(181)
// Materiales.
#define 			HOUSE_ITEM_MAT_D 			(182)
#define 			HOUSE_ITEM_MAT_R 			(183)
// Droga.
#define 			HOUSE_ITEM_POT_D 			(184)
#define 			HOUSE_ITEM_POT_R 			(185)
// Crack.
#define 			HOUSE_ITEM_CRACK_D 			(186)
#define 			HOUSE_ITEM_CRACK_R 			(187)
#define 			HOUSE_OBJECTS    			(188)
//*********************
#define 			PB_SARENA 					(4001)
#define 			PB_BUYFI 					(4002)
#define				PB_SCORE 					(4003)
#define 			PB_FICHAS 					(4004)
#define 			DUTY_OPTIONS 				(4412)
#define 			Rojo						5877
#define 			Azul						5878
#define 			Verde						5879
#define 			Amarillo					5880
#define 			Cyan						5881
#define 			Rosado						5882
#define 			Blanco						5883
#define 			Negro						5884
#define 			DUTYMENU2 					(4413)
#define 			DUTYMENU3 					(4414)
#define 			DUTYMENU4 					(4415)
#define 			DUTYMENU5 					(4416)
#define 			TRAFICDRUGS 				(4417)
#define 			ADMUTE 						(4418)
#define 			DOORLOCK 					(4419)
#define 			CARSPAWN 					(4420)
#define 			DIALOG_CDEDIT 				(1329)
#define 			DIALOG_CDUPGRADE 			(1328)
#define 			DIALOG_CDTILL 				(1327)
#define 			DIALOG_CDEDITCARS 			(1326)
#define 			DIALOG_CDEDITONE 			(1325)
#define 			DIALOG_CDEDITMODEL 			(1324)
#define 			DIALOG_CDEDITCOST 			(1323)
#define 			DIALOG_CDEDITPARK 			(1322)
#define 			DIALOG_CDDELVEH 			(1321)
#define 			DIALOG_CDNEWVEH 			(1320)
#define 			DIALOG_CDRADIUS 			(1319)
#define             DIALOG_CDNAME 		(1318)
#define             DIALOG_CDPRICE 		(1317)
#define             DIALOG_CDBUY 		(1316)
#define             DIALOG_CDWITHDRAW 	(1315)
#define             DIALOG_CDDEPOSIT 	(1314)
#define             DIALOG_CDSELL 		(1313)
#define             DIALOG_ADMAIN		(32700)
#define             DIALOG_ADPLACE		(32701)
#define             DIALOG_ADPLACEP		(32702)
#define 			DIALOG_ADPLACEP2	(32703)
#define 			DIALOG_ADPLACEP3	(32704)
#define 			DIALOG_ADPLACEP4	(32705)
#define             PB_CHOOSE 			4005
#define             PBJOINTEAM 			4006
#define             PB_ARMAS 			4007
#define             PB_CANJE1 			4008
#define             PBARENASCORES 		4009
#define	            MPSPAYTICKETS 		4010
#define             REMOVEKEYS 			4395
#define             GIVEKEYS 			4394
#define             GOTOPLAYERCAR 		4396
#define             DIALOG_CDLOCKBUY 	1312
#define             DIALOG_CDLOCKMENU 	1311
#define             DIALOG_CDGLOCKBUY 	1310
#define             DIALOG_CDGLOCKMENU 	1309
#define             DIALOG_NUMBER_PLATE 8221
#define             DIALOG_NUMBERPLATE 	8220
#define             UNMODCARMENU 		8222
#define             WELCOME 			522
#define             REG_AGE 			505
#define             REG_SEX 			506
#define             DIALOG_REG_MSN 		507
#define             DIALOG_REG_MSNC 	508
#define             DIALOG_REG_TUT 		509
// Sistema de Negocios:
#define             DIALOG_MYBUSINESS           (224) // Negocios.
#define             DIALOG_MYBUSINESS_RET       (225) // Retirar.
#define             DIALOG_MYBUSINESS_DEP       (226) // Sacar.
#define             DIALOG_MYBUSINESS_STO       (227) // Productos.
#define             DIALOG_MYBUSINESS_PSTO      (228) // Productos 2.
#define             DIALOG_MYBUSINESS_NAME     	(229) // Aviso Cliente.

// Más tutorial.
#define             REG_NAC		 		510
#define             DINFO   			530
#define             TIENDA_MENU 		550
#define             TIENDA_ELEC 		551
#define             TIENDA_EROS 		552
#define             TIENDA_GAS    		570
#define             ASCENMENU           560
#define             LOTTO_BUY       	559
#define             FSTYLE_DIALOG   	563
#define             DIALOG_AMMU     	566
#define             BAR_MENU 			578
#define             BAR_MENU_TAPAS 		579
#define             BAR_MENU_BEBIDAS    580
#define             TimerTextDrawLocX   547
#define             DLOGIN 				501
#define             DREGISTER       	504
#define             MECANICO_MENU   	584
#define             MMENU_REPARACION    585
#define             MMENUTUNING_G 		586
#define             TUNING_WAA  		587
#define             TUNING_LOC  		588
#define             TUNING_MENU_RUEDAS 	589
#define             TUNING_MENU_NEON    590
#define             ADMIN_MENU          591
#define             REQF_ACCEPT 		910
#define             PETITION_DIALOG 	911
#define             ENTER_LSTV 			916
//#define 			MENUAYUDA 		   (1000)
#define 			MENUMC 			   (1001)
#define             MAX_REPORTS  		50
#define             INVALID_REPORT_ID 	-1
#define             REPORTSMENU  		48
#define 			DIALOG_BOOMBOX  	3650
#define				DIALOG_BOOMBOX1 	3651
#define 			DIALOG_BOOMBOX2 	3652
#define 			DIALOG_BOOMBOX3 	3653
#define 			DIALOG_BOOMBOX4 	3654
#define 			DIALOG_BOOMBOX5 	3655
#define 			DIALOG_BOOMBOX6		3656
#define		 		DIALOG_BOOMBOX7 	3657
#define             HQENTRANCE 			4397
#define             HQEXIT 				4398
#define             HQCUSTOMINT 		4399
#define             HQDELETE 			4400
#define             PAYDAY1 			4403
#define             DIALOG_LICENSE_BUY 	4404
#define             DIALOG_IDIOMA_BUY 	4504
#define             JOBFINDMENU 		4405
#define             DIALOG_HITMAN 		4407
#define             FDUTYMENU 			4408
#define             FDUTYMENU2 			4409
#define             FDUTYMENU3 			4410
#define             DUTYMENU 			4411
#define             TIPRE 				7955
#define             REBUG 				7956
#define             DIALOG_VIPLOCKER	7483
#define             DIALOG_VIPJOB    	7484
#define             DIALOG_VIPJOB2    	7485
#define             DIALOG_VIPCOLOR		7486
#define             DIALOG_VIPWEAPONS	7487
#define             DIALOG_VIPCLOTHES	3496
#define             DIALOG_CREATEGUN    3497
#define             DIALOG_LOADTRUCK	18301
#define             DIALOG_LOADTRUCKL 	18302
#define             DIALOG_LOADTRUCKI 	18303
#define             TOYS        		10131
#define             DELETETOY       	10132
#define             WEARTOY         	10133
#define             BUYTOYS         	10134
#define             BUYTOYS2       		10135
#define             BUYTOYS3        	10136
#define             BUYTOYSGOLD     	10137
#define             BUYTOYSGOLD2    	10138
#define             BUYTOYSGOLD3    	10139
#define             EDITTOYS        	10140
#define             EDITTOYS2       	10141
#define             EDITTOYSBONE    	10142
#define             EDITTOYSPX      	10143
#define             EDITTOYSPY      	10144
#define             EDITTOYSPZ      	10145
#define             EDITTOYSRX      	10146
#define             EDITTOYSRY      	10147
#define             EDITTOYSRZ      	10148
#define             BUYTOYSCOP      	10149
#define             BUYTOYSCOP2     	10150
#define             BUYTOYSCOP3     	10151
#define             EDITTOYSIZX     	10199
#define             EDITTOYSIZY      	10200
#define             EDITTOYSIZZ      	10201
#define             NGMENU          	10202
#define             NGMENUWEP       	10203
#define             NGMENUSKIN      	10204
#define             FDUTYMENU4 			10205
#define             DIALOG_SHOPFISH 	10160
//DIALOGS LIBRETA
#define 			DIALOG_LIBRETAMENU 			12450
#define 			DIALOG_LIBRETACONTACTO 		12451
#define 			DIALOG_AGENDARCONTACTO 		12452
#define 			DIALOG_NOMBRECONTACTO 		12453
#define 			Tienda_OOC 	 		15634
#define             ELEVATOR 			18456
#define             ELEVATOR2 			18455
#define             ELEVATOR3 			18457
#define             ELEVATOR4 			18460
#define             ELEVATOR5 			18458
#define             ELEVATOR7 			18459
#define             GPSX                19100
#define             TRACKCAR 			19101
#define             GTRACKCAR 			19102
#define             SELLCAR 			19103
#define 			DIALOG_GMX          19104 // Reinicio.
#define 			DIALOG_GPS          19105 // Búsqueda GPS de Casas y negocios.
#define             DIALOG_DUDAS 		20001
#define             DIALOG_DUDAS2 		20002
#define 			D_Musica 			20003 					//Se me ocurrió éste número .
#define 			D_Musica2 	        20004
#define 			D_Musica3 	        20005
#define 			D_MusicaX 			20013 					//Se me ocurrió éste número .
#define 			D_MusicaX2 	        20014
#define 			D_MusicaX3 	        20015
#define 			IPAD_Musica	        20016
#pragma             dynamic 			5000000
#define 			MAX_OBJ 			100 //Maximo de armas en suelo.
// Sistema de graffitis
#define 	MAX_PLAYERS_TAGS 			(5) 					// Graffiti's que pueden crear.
#define 	SPRAY_TAG_TIMER 			(5) 					// Segundos para crear el graffiti.
#define 	SPRAY_TAG_OBJECT 			(11359)     			// ID del objeto.
#define 	SPRAY_TAG_OBJECT_DISTANCE 	(200.0) 				// Distancía en la que se ve el graffiti
#define 	TYPE_LIST_MENU 				(3000)
#define 	TYPE_LIST_EDIT 				(3001)
#define 	TYPE_LIST_CREATE 			(3002)
#define 	TYPE_LIST_TAGS 				(3003)
#define 	TYPE_LIST_TAGS_DELETE 		(3004)
#define 	TYPE_LIST_TAGS_CREATE 		(3005)
#define 	TYPE_LIST_TAGS_FIND 		(3006)
#define 	SPRAYTAG_MENU 				(9800)
#define 	SPRAYTAG_DELETE 			(9801)
#define 	SPRAYTAG_CREATE 			(9802)
#define 	SPRAYTAG_CREATE_MAIN 		(9803)
#define 	SPRAYTAG_CREATE_TEXT 		(9804)
#define 	SPRAYTAG_CREATE_FONT 		(9805)
#define 	SPRAYTAG_CREATE_SIZE 		(9806)
#define 	SPRAYTAG_CREATE_COLOR 		(9807)
#define 	SPRAYTAG_CREATE_FINISH 		(9808)
#define 	SPRAYTAG_EDIT_MAIN 			(9809)
#define 	SPRAYTAG_EDIT_TEXT 			(9810)
#define 	SPRAYTAG_EDIT_FONT 			(9811)
#define 	SPRAYTAG_EDIT_SIZE 			(9812)
#define 	SPRAYTAG_EDIT_COLOR 		(9813)
#define 	SPRAYTAG_EDIT_FINISH 		(9814)
#define 	SPRAYTAG_EDIT_LIST 			(9815)
#define 	SPRAYTAG_FIND				(9816)
#define 	SPRAYTAG_DIALOG_RETURN		(9817)
//////// LSPD - Ascensor Norte y Sur.
#define DIALOG_LSPD_ELEVATOR1   7621 // Zona Sur
#define DIALOG_LSPD_ELEVATOR2   7622 // Zona Norte
#define DIALOG_PJ               7623 // Poder Judicial.
#define DIALOG_FBI              7624 // Federales.
/////// KEYPAD - PANELES DE ACCESO /////////////////////////
// Puerta testeo (Garage detrás de LSPD) La pass será 6969.
#define KEYPAD_BLACKDOOR 1

//*******************ADO[K]1NG*******************
new ZLMensaje[][] =
{
   	"Bienvenido a INFRANET - RP, disfruta de esta gran comunidad.",
	"Recuerda registrarte en foro: infranet.foroactivo.com. Su cuenta sera aceptada rapidamente.",
	"Para ver los tiempos de jail USA: /tiempojail. Los tiempos han sido aumentados.",
	"Si su duda no fue atendida, pueden usar el CMD /soporte, /duda y /re.",
	"Invita a tus amigos para que haya mas rol en el Servidor y te recompensaremos.",
	"Si te encuentras bug usa /desbug o /desbugmanos. Si el problema continua, relogea.",
	"Hay nuevo sistema de /estado editable. Oculta tu identidad con /mascara.",
	"Buscas trabajo y no sabes como, usa /buscartrabajo. Hay nuevos Jobs.",
	"Si Necesitas estar fuera de rol utiliza /afk, pero no abuses del CMD.",
	"Viste alguien haciendo Anti-RP, Usa /re (Reporte) o toma SS pulsando F8.",
	"Si su duda no fue atendida, pueden usar el CMD /soporte O /re.",
	"Tienes alguna duda sobre el servidor, usa /duda y preguntanos.",
	"Recuerda visitar el foro (/foro) y entrar en nuestro Discord (/discord).",
	"No sabes ninguna accion, Usa /animaciones. Para ajustar accesorios, usa /toys.",
	"Si te encuentras bug usa /desbug o /desbugmanos. Bugs graves reportense al foro.",
	"Sistema de pesca implementado, en el muelle de Marina Beach. (/pesca).",
	"Buscas trabajo y no sabes como, usa /buscartrabajo. Mas ayuda en /ayudatrabajo(2).",
	"CDG es una faccion dedicada al trafico de drogas. Ten cuidado con ellos son muy peligrosos.",
	"Quieres ver los creditos del servidor, Usa /creditos. Mas info en el foro.",
	"Haz dinero robando coches (/puente) y vende sus piezas (/robarcoche). Detras de Ammu Nation.",
	"Si deseas donar al servidor para su estadia, en foro podes ver mas informacion.",
	"Lista de facciones en /facc, postulaciones obligatorias mediante foro.",
	"Para ocultar esta barra informativa usa /ocultarinfo. Podras activarla de nuevo cuando quieras.",
	"Para pagar multas y vender tu coche, tienes que ir a la DGT, usa /vermapa para ubicarla.",
	"Aprende idiomas y obten licencias en la Universidad, usa /vermapa para enontrarla.",
	"Buscas trabajo y no sabes como, usa /buscartrabajo. Ciertos jobs dan puntos de rol.",
	"Si eres un usuario nuevo, te recomendamos el uso de /soporte y /recibirstats.",
	"Diviertete y rolea, a mas puntos de rol mas coches puedes tener y mas reputacion.",
	"Bienvenido a INFRANET - RP, disfruta de esta gran comunidad. Usa /ayuda para orientarte.",
	"Prueba nuestros Jobs unicos, puedes ser piloto y conductor de autobus.",
	"Aprende idiomas y obten licencias en la Universidad, usa /vermapa para enontrarla.",
	"Diviertete y rolea, a mas puntos de rol mas coches puedes tener y mas reputacion.",
	"Para ocultar esta barra informativa usa /ocultarinfo. Podras activarla cuando quieras.",
	"Para pagar multas y vender tu coche, tienes que ir a la DGT, usa /vermapa para ubicarla."
};
// NUEVO:
new szMessage[256];

new LSPD_NEW1, LSPD_NEW2, LSPD_NEW3, LSPD_NEW4, LSPD_NEW5, LSPD_NEW6, LSPD_NEW7, LSPD_NEW8, LSPD_NEW9, LSPD_NEW10; // LSPD New
new FBI_NEW1; //Puerta FBI Equipo
new SJ_NEW1, SJ_NEW2; // Puertas Sistema Judicial
new HIT_NEW1; // Puerta Hitman
//new LSPD_Derecha, LSPD_Izquierda, BT_Derecha, BT_Izquierda; // LSPD New
// Interiores para vehículos.
new InteriorLimusina[MAX_PLAYERS];
new InteriorSwatVan[MAX_PLAYERS];
new InteriorCaravana[MAX_PLAYERS];
new InteriorBeagle[MAX_PLAYERS];
/// TEXT VEHÍCULOS.
new derecha; // Autobús.
new izquierda; //Autobús.
new misil; // LSPD.
///////////////////////////
new derechaT, izquierdaT;
///////////// New Texturas LSPD.
//new comisaria;
//////////// New Texturas SEC.
//new hospital;
//////////// New Texturas Taller mecanico.
//new BaseTaller, EdificioTaller;
// Texturas.
//new Plataforma;
// Edificio que aparece en el logeo.
//new TexSur;
// Textura - Salida del Ayuntamiento.
//new AyuntamientoSalida;
//*******************velocimetro*******************
new Text:Tacho_Box0;
new Text:Tacho_Box1;
new Text:Tacho_KMH[MAX_PLAYERS];
new Text:Tacho_Box2;
new Text:Tacho_Zustand[MAX_PLAYERS];
new Text:Tacho_Tank[MAX_PLAYERS];
new Text:Tacho_Car[MAX_PLAYERS];
// nuevo:
new Text:VehicleNameX[MAX_PLAYERS];
new Text:VehicleHealth[MAX_PLAYERS];
new Text:VehicleSpeed[MAX_PLAYERS];
new Text:Title[MAX_PLAYERS];
new Text:Underline;
//new Text:Fondoline;
new Text:KMH;
//*******************Sistema afk*******************
new Text:Messageafk;
new Afk[MAX_PLAYERS];
new Timer[MAX_PLAYERS];
/////////// Radares, SpeedCams.
new Text:flash;
new Text:flashback;
/// Sistema de música para el servidor, CMD /ponermusica - /musica.
new NombreCancion[MAX_PLAYERS];
//*******************Armas en espalda*******************
new OldWeapon[MAX_PLAYERS];
new HoldingWeapon[MAX_PLAYERS];
//***** Estado text ************
//new Text3D:giPlayerStatus[ MAX_PLAYERS ];
// 	-= Estado =-
new Text3D:Estado[MAX_PLAYERS], EstadoON[MAX_PLAYERS];
//////// /CDUTY, /PLACAEX Similar al /estado.
// Por ahora solo lo usa SAEM.
new YoActivado[MAX_PLAYERS] = 0;
new Text3D:YO[MAX_PLAYERS];
//*******************************
new BigEar[MAX_PLAYERS];
//*******************cargos*******************
new cargos[MAX_PLAYER_NAME];
new cargos2[MAX_PLAYER_NAME];
//bombox
new BoomBox[MAX_PLAYERS];
new BoomOn[MAX_PLAYERS];
//*******************Sistema de Reparacion de Auto con latas*******************
new autorepara[MAX_PLAYERS];
// Anuncios automáticos.
forward GlobalTime();
forward GlobalAnnouncement(playerid);
forward GlobalAnnouncement2(playerid);
//*******************Solucion 0.3z*******************
forward TimerKICK(playerid);
forward TimerBAN(playerid);
forward TimerBANIP(playerid);
forward ZL(); //ADO[K]1NG
forward Detect(playerid); //security
forward Camara();
forward qdni(playerid);//***dni por textdraw***
forward qlicencia(playerid);//***licencia por textdraw***
forward Apagarfire();//sistema de fire
forward Checkfire(playerid);//sistema de fire
forward Fuegoo();//sistema de fire
//*******************Security*******************
new Barra[MAX_PLAYERS] = {-1,...}, Advertencias[MAX_PLAYERS] = {0,...}, bool:BotServidor[MAX_PLAYERS] = {false, ...}, Jugadores = MAX_PLAYERS;
new Muertes[MAX_PLAYERS];
new MuerteReciente[MAX_PLAYERS];
new EntrarIP[10][20];
new EntrarCuenta[10];
new Float:PlayerPos[MAX_PLAYERS][6]; // Posición.
//*******************RobarTienda*******************
new LoadMonTimee[MAX_PLAYERS];
new Bar:LoadMoneyy[MAX_PLAYERS] = INVALID_BAR_ID;
forward TimerROB(playerid);
//*******************arreglo bug /dararma y /garma /fgarma*******************
new manubrio[MAX_PLAYERS];
forward Timermanubrio(playerid);
//*******************seleccion skin 0.3z*******************
new bars = mS_INVALID_LISTID; // CMD: /bar.
new skinlist = mS_INVALID_LISTID; // CMD: /comprar (/ropa).
new skinactores = mS_INVALID_LISTID; // CMD: /ctearactortemp.
new sDialog[255];
new	DormitorioFur = mS_INVALID_LISTID,
 	ComedorFur = mS_INVALID_LISTID,
 	BanoFur = mS_INVALID_LISTID,
 	LobbyFur = mS_INVALID_LISTID,
 	CocinaFur = mS_INVALID_LISTID,
 	ParedesFur = mS_INVALID_LISTID,
 	ElectroFur = mS_INVALID_LISTID,
 	OtrosFur = mS_INVALID_LISTID;
//*******************
new MoneyBet[MAX_PLAYERS], BetOnHorse[MAX_PLAYERS],  Watching[MAX_PLAYERS];
//*******************Arreglo cmd /venderarma*******************
new VentaDeArmaCon[MAX_PLAYERS][2];
//*******************Adminduty*******************
new papilla[MAX_PLAYERS];
//*******************sistema placas en autos*******************
new Archivo[128];
new VehicleIdd;
//*******************Sistema de Tazer Arreglado*******************
forward TimerGCRP(playerid);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward GetClosestPlayer(p1);
new HaveTaser[MAX_PLAYERS];
///////////////// SISTEMA DE TAZER MEJORADO ////////////////////
#define TAZE_WEAPON 23 // El arma el tazer necesita conectarse.
#define TAZE_TIMER 10000 // El tiempo necesario para que el criminal automáticamente despierte.
#define TAZE_SPARK 18717 // Objectid de la chispa (se recomienda no cambiar esto...)
#define TAZE_DESTROY 2000 // El tiempo necesario para gastar hasta que desaparezca la  chispa.
#define TAZE_LOSEHP 0 // Establece en 1 Si desea que la víctima pierda salud cuando disparó. Conjunto de 0 o cualquier otro.
///////
new Tazer[MAX_PLAYERS];
new Spark[MAX_PLAYERS];
new Tazed[MAX_PLAYERS];
//////
forward DestroySpark(playerid);
forward TazedRemove(playerid);
//*******************pickups*******************
new ganja; //vendercosecha
new Bankito; //banco
//*******************comando refuerzos*******************
new refuer[MAX_PLAYERS];
//*******************Dni por textdraw*******************
new PlayerText:DNI0[MAX_PLAYERS];
new PlayerText:DNI1[MAX_PLAYERS];
new PlayerText:DNI2[MAX_PLAYERS];
new PlayerText:DNI3[MAX_PLAYERS];
new PlayerText:DNI4[MAX_PLAYERS];
new PlayerText:DNI5[MAX_PLAYERS];
new PlayerText:DNI6[MAX_PLAYERS];
new PlayerText:DNI7[MAX_PLAYERS];
new PlayerText:DNI8[MAX_PLAYERS];
new PlayerText:DNI9[MAX_PLAYERS];
new PlayerText:DNI10[MAX_PLAYERS];
new PlayerText:DNI11[MAX_PLAYERS];
new PlayerText:DNI12[MAX_PLAYERS];
//*******************licencia por textdraw*******************
new PlayerText:LICENCIA0[MAX_PLAYERS];
new PlayerText:LICENCIA1[MAX_PLAYERS];
new PlayerText:LICENCIA2[MAX_PLAYERS];
new PlayerText:LICENCIA3[MAX_PLAYERS];
new PlayerText:LICENCIA4[MAX_PLAYERS];
new PlayerText:LICENCIA5[MAX_PLAYERS];
new PlayerText:LICENCIA6[MAX_PLAYERS];
new PlayerText:LICENCIA7[MAX_PLAYERS];
new PlayerText:LICENCIA8[MAX_PLAYERS];
//*******************Sistema de Negocios*******************
//new Text3D:Bizz3DText[MAX_NEGOCIOS];
//new BizzPickup[MAX_NEGOCIOS];
//forward LoadBizz();
new QuitExtortion[MAX_PLAYERS], ExtortionID[MAX_PLAYERS];

/* Sistema de Graffitis */
enum SPRAYTAG_DATA
{
	_spSQLID,
	_spObject,
	_spText[50],
	_spOwned[MAX_PLAYER_NAME],
	_spFontColor,
	_spBold,
	_spFontSize,
	_spFont[50],
	Float:_spPosX,
	Float:_spPosY,
	Float:_spPosZ,
	Float:_spPosRX,
	Float:_spPosRY,
	Float:_spPosRZ,
	_spVW,
	_spInt
}

new
	SprayTags[MAX_PLAYERS][MAX_PLAYERS_TAGS][SPRAYTAG_DATA],
	spraytag_object[MAX_PLAYERS],
	spraytag_timer[MAX_PLAYERS],
	spraytag_timer_left[MAX_PLAYERS],
	spraytag_find[MAX_PLAYERS],
	spraytag_slot[MAX_PLAYERS],
	spraytag_text[MAX_PLAYERS],
	spraytag_size[MAX_PLAYERS],
	spraytag_bold[MAX_PLAYERS],
	spraytag_color[MAX_PLAYERS],
	spraytag_font[MAX_PLAYERS],
	Float:spraytag_positions[MAX_PLAYERS][6]
;
//*******************Sistema de DNI Falso*******************
#define DNI_MENU        964
#define DNI_CONFIRM     965
new DNIName[MAX_PLAYERS][32];
//*******************motos*******************
new LoadMonTimeeee[MAX_PLAYERS];
new Bar:LoadMoneyyyy[MAX_PLAYERS] = INVALID_BAR_ID;
//*******************Sistema de Robar Banco*******************
new LoadMonTime[MAX_PLAYERS];
new Bar:LoadMoney[MAX_PLAYERS] = INVALID_BAR_ID;
new robobanco[MAX_PLAYERS];
forward Tiempo(playerid);
forward TimerBANCO(playerid);
forward TimerESCAPE(playerid);
//*******************Sistema de Ticket de carros chocones*******************
new Vortex[MAX_PLAYERS];
forward TimerTICKET(playerid);
new ticketR;
//////////////////////// SISTEMA DE TEST DE CONDUCCIÓN //////////
new DrivingTest[MAX_PLAYERS];
new Test_Vehicle[6];
forward TestConducir(playerid);
//////////////////////// SISTEMA DE SKINS ///////////////////////
new RopaElegida[MAX_PLAYERS];
new EstaComprandoRopa[MAX_PLAYERS];
/////////////////////// SISTEMA DE ARMARIOS /////////////////////
new GuardarArma[MAX_PLAYERS];
//*******************Sistema de Bomba*******************
new bombap[MAX_PLAYERS];
new pbomba[MAX_PLAYERS];
new BOMBA[MAX_PLAYERS];
new bombita;
forward TimerBANK(playerid);
new Pbankazo;
//*******************Job Leñador*******************
new talar[MAX_PLAYERS];
new CorteY;
new CorteX;
new gcorte[MAX_PLAYERS];
new Azar1;
new Maderaazar[][1] = {
	{60},{55},{45},{49},{65},{46},{50},{52},{53},{45}
};
new lena1[MAX_PLAYERS];
new lena;
new LenadorU;
new bool:TrabajoL[MAX_PLAYERS];
forward Tiempoarbol0(playerid);
forward Tiempoarbolx(playerid);
forward Tiempoarbolxx(playerid);
forward Tiempoarbolxxx(playerid);
new Arbolvivo[4]; new Arbolmuerto[4];  new Talararbol[4];
new Tiempotalar[MAX_PLAYERS];
forward espera(playerid);
forward arbol1(playerid);
forward arbol2(playerid);
forward arbol3(playerid);
forward arbol4(playerid);

//******Callsign
new Text3D:Texto_NombrarP[MAX_VEHICLES];
new Vehiculo_Nombrarp_Estado[MAX_VEHICLES];

//*******************Tienda de Robos*******************
new roboV;
new roboD;
new YaRobo[MAX_PLAYERS];
//*******************CORTACESPED*******************
new OldskinJ[MAX_PLAYERS];
new Koson1[MAX_PLAYERS];
new Kosonrob[MAX_PLAYERS];
new cesped;
new koson;
new koscar[11];
new JobAmmounts2[MAX_PLAYERS];
new pKosonrob[MAX_PLAYERS];
new recojercesped[MAX_PLAYERS];
new acobrarcesped[MAX_PLAYERS];
new armaRecibir[MAX_PLAYERS];
/*new idarma[] =
{
1,
2,
5,
7,
6,
14,
41,
43,
10,
11,
12,
23
};*/

enum vCoords
{
	getID,
	Float:vvvX,
	Float:vvvY,
	Float:vvvZ,
};

new Offsets[9][vCoords] = {
	{560, 0.398071289,0.75390625,0.43879509}, // Tablero Sultan
	{415, 0.409729004, 0.526367188, 0.206963539}, // Tablero Cheetah
	{421, 0.421691895, 0.804931641, 0.256482124}, // Tablero Washington
	{426, 0.575378418, 0.786132812, 0.361483574}, // Tablero Premier
	{579, 0.454345703, 0.575683594, 0.645122528}, // Tablero Huntley
	{402, 0.53515625, 0.562988281, 0.278743744}, // Tablero Buffalo
	{461, 0.00000000, -0.932861328, 0.494509697}, // PCJ 600
	{521, 0.00000000, -0.928955078, 0.558652878},  // FCR 900
	{506, 0.541137695, 0.282714844, 0.272130013} // Super Gt
};

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddFamily,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	dPass[24],
	dLocked,
	dMusic,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

enum cdInfo
{
	cdOwned,
	cdOwner[MAX_PLAYER_NAME],
	Float: cdEntranceX,
	Float: cdEntranceY,
	Float: cdEntranceZ,
	Float: cdExitX,
	Float: cdExitY,
	Float: cdExitZ,
	cdMessage[128],
	cdTill,
	cdInterior,
	Float: cdRadius,
	cdPrice,
	cdPickupID,
	Text3D:cdTextLabel,
	Text3D:cdVehicleLabel[MAX_DEALERSHIPVEHICLES],
	cdVehicleModel[MAX_DEALERSHIPVEHICLES],
	cdVehicleCost[MAX_DEALERSHIPVEHICLES],
	cdVehicleId[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnX[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnY[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnZ[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnAngle[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawn[4],
};
new CDSInfo[MAX_CARDEALERSHIPS][cdInfo];

enum hInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	hDescription[64],
	hOwner[ MAX_PLAYER_NAME ],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hTiempo,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[5],
	hGLUpgrade,
	hPickupID,
	Text3D: hTextID,
	hCustomExterior,
	// Nuevo: Muebles.
	FCount,
	FModel[MAX_FURNITURE],
	FurnitureObj[MAX_FURNITURE],
	Float:FPosX[MAX_FURNITURE],
	Float:FPosY[MAX_FURNITURE],
	Float:FPosZ[MAX_FURNITURE],
	Float:FRotX[MAX_FURNITURE],
	Float:FRotY[MAX_FURNITURE],
	Float:FRotZ[MAX_FURNITURE],
	//***sistema muebles***
	/*hMuebleId[11],
	hMuebles[11],
	Float:hMueblesPOSX[11],
	Float:hMueblesPOSY[11],
	Float:hMueblesPOSZ[11],
 	Float:hMueblesPOSRx[11],
 	Float:hMueblesPOSRy[11],
 	Float:hMueblesPOSRz[11],
 	hMuebleVW[11],
 	hMuebleINT[11],*/
 	//*********************
};

new HouseInfo[MAX_HOUSES][hInfo];

enum xInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	hOwner[MAX_PLAYER_NAME],
	hDireccion[256],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hSlotRopero1,
	hSlotRopero2,
	hSlotRopero3,
	hSlotRopero4,
	hSlotRopero5,
	hSlotRopero6,
	hSlotRopero7,
	hSlotRopero8,
	hSlotRopero9,
	hSlotRopero10,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hW[5], //Armas.
	hM[5], // Munición.
	hPickupID,
	Text3D: hTextID,
	hCustomExterior,
	FCount,
	FModel[MAX_FURNITURE],
	FurnitureObj[MAX_FURNITURE],
	Float:FPosX[MAX_FURNITURE],
	Float:FPosY[MAX_FURNITURE],
	Float:FPosZ[MAX_FURNITURE],
	Float:FRotX[MAX_FURNITURE],
	Float:FRotY[MAX_FURNITURE],
	Float:FRotZ[MAX_FURNITURE]
};
new ProInfo[MAX_PROPIEDADES][xInfo];

// Nuevo sistema de facciones dinámicos. CMD:facciones - zcmd(facciones.
enum Lideres
{
    gFacc[12],
	gLeader[MAX_PLAYER_NAME],
	gLeader2[MAX_PLAYER_NAME],
	Float: gExteriorPos[3],
	gFondos,
	gMateriales,
	gPaga,
	Text3D: gLabelID,
	gPickupID,
}
new InfoFacc[MAX_LEADERS][Lideres];
// Garajes.
enum Garages
{
	gType,
	gOwner[MAX_PLAYER_NAME],
	gName[32],
	Float: gExteriorPos[4],
	Float: gInteriorPos[4],
	gInterior,
	gLocked,
	gPrice,
	gLevel,
	Text3D: gLabelID,
	gPickupID,
}
new GaragesVariables[MAX_GARAGES][Garages];
//////////////////////// Antiguo Sistema /////////////////////
/*enum bInfo
{
	bOwned,
	bOwner[24],
	bName[32],
    bExtortion[MAX_PLAYER_NAME],
	Float:bEntrancex,
	Float:bEntrancey,
	Float:bEntrancez,
	bLevelNeeded,
	bBuyPrice,
	bType,
	bTill,
	bTillEx,
};
new BizzInfo[MAX_NEGOCIOS][bInfo];*/
enum Negocios
{
	bType,
	bOwner[MAX_PLAYER_NAME],
	bExtortion[MAX_PLAYER_NAME],
	bName[32],
	bInfo[98],
	Float: bExteriorPos[3],
	Float: bInteriorPos[3],
	bInterior,
	Float: bMiscPos[4],
	bLocked,
	bGanancias,
	bPrice,
	Text3D: bLabelID,
	bPickupID,
	bObject,
	bStock,
	bLevelNeeded,
}
new NegociosVariables[MAX_NEGOCIOS][Negocios];
//////////////////////////////////////////////////////////////////
enum Portones // Portones dinámicos para facciones.
{
	pSpeed, // Velocidad del Portón. (1.0, 2.0, 5.0)
	pFac, // Facciones que podrán usar el portón.
	pFam, // Familias que podrán usar el portón.
	pObjectID, // ID del Objeto a usar. (980 Más común)
	Float: pA[6], // X, Y, Z, Xr, Yr, Zr. // Posición 0. (Objeto Inicial en CreateObject).
	Float: pZ[6], // X, Y, Z, Xr, Yr, Zr. // Posición 1. (Desaplazamiento)
	Text3D: pLabelID, // Labal dinámico. (Use "Y" para abrir el portón)
	pForceDoor, // 1 = Portón podrá ser forzado por LSPD, 0 = No podrá ser forzado.
	pObject, // Objeto editable In Game. (Eliminar, mover y etc).
}
new iPorton[MAX_PORTONES][Portones];
//////////////////////////////////////////////////////////////////
enum Actores // Actores dinámicos.
{
	aNombre[MAX_PLAYER_NAME], // Nombre del Actor.
	aSkin, // Skin del Actor.
	aVW, // Mundo Virtual del Actor.
	aINV, // Invulnerable. 0: Desactivado - 1: Activado.
	aAnim, // Aplicar animación (Del 1 al 10)
	Float: aPos[4], // X, Y, Z y Rotación.
	Text3D: aLabelActor, // Labal dinámico. (Use "Y" para abrir el portón)
	aInfo, // Información del CreateActor. (In Game)
}
new iActor[MAX_ACTORES][Actores];
////////////////////////////////////////////////////////////////////////
//*******************Evento*******************
enum EventInfoEnum
{
	EventAdvisor,
	EventStatus,
	EventType,
	EventoInfo[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[ 5 ],
	EventTeamColor[2],
    EventTeamSkin[2],
    EventLimit,
    EventPlayers,
    EventRequest,
    EventStartRequest,
    EventCreator,
    EventStaff[5],
    EventJoinStaff,
    VipOnly,
    Float: EventTeamPosX1,
    Float: EventTeamPosY1,
    Float: EventTeamPosZ1,
    Float: EventTeamPosX2,
    Float: EventTeamPosY2,
    Float: EventTeamPosZ2
}

new InfoEvento[ EventInfoEnum ];
//////////// Sistema radares develocidad.
enum vCamera
{
	Float: vCameraPos[3],
	Float: vCameraRot,
	vCameraStatus, // 0: ON 1: OFF futere reference
	vCameraRange,
	vCameraLimit,
	vCameraTicket,
	Text3D:vCameraLabel,
	vCameraObject,
}
new vCameraInfo[MAX_vCAMERAS][vCamera];

//*******************Sistema de familia*******************
enum fInfo
{
	FamilyTaken,
	FamilyName[42],
	FamilyMOTD[65],
	FamilyColor,
	FamilyTurfTokens,
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilyBank,
	FamilyMats,
	FamilyPot,
	FamilyCrack,
	Float:FamilySafe[3],
	FamilyUSafe,
	FamilyRank1[20],
	FamilyRank2[20],
	FamilyRank3[20],
	FamilyRank4[20],
	FamilyRank5[20],
	FamilyRank6[20],
	FamilyPickup,
	FamilyMaxSkins,
	FamilySkins[8],
	Float: FamilyEntrance[4],
	Float: FamilyExit[4],
	FamilyEntrancePickup,
	FamilyExitPickup,
	Text3D:FamilyEntranceText,
	Text3D:FamilyExitText,
	FamilyCustomMap,
	FamilyVirtualWorld,
	FamilyResetSpawns,
	FamilyGuns[10],
};
new fINFO[MAX_FAMILY][fInfo];

enum fvInfo
{
    fvId,
	fvModelId,
	Float: fvSpawnx,
	Float: fvSpawny,
	Float: fvSpawnz,
	Float: fvSpawna,
	Float: fvSpawnxtmp,
	Float: fvSpawnytmp,
	Float: fvSpawnztmp,
	Float: fvSpawnatmp,
	//fvVW,
	fvLock,
	fvLocked,
	fvPaintJob,
	fvColor1,
	fvColor2,
	fvMods[MAX_MODS],
	fvPrice,
	fvImpounded,
	fvFuel,
};

new FVINFO[MAX_FAMILY][MAX_GANG_VEHICLES][fvInfo];

enum fPoint
{
	Float:Pointx,
	Float:Pointy,
	Float:Pointz,
	Type,
	Vulnerable,
	MatPoint,
	CratePoint,
	Announced,
	ClaimerId,
	ClaimerTeam,
	TimeToClaim,
	TimeLeft,
	Owner[32],
	PlayerNameCapping[MAX_PLAYER_NAME],
	CapperName[MAX_PLAYER_NAME],
	Name[32],
	TakeOverTimerStarted,
	TakeOverTimer,
	Text3D:TextLabel,
	CaptureTimerEx2,
	Stock,
	Text3D:CaptureProccess,
	Text3D:CaptureProgress,
	CaptureProccessEx,
	Float: Capturex,
	Float: Capturey,
	Float: Capturez,
	PointPickupID,
	Bar:PointBarID,
}
new Points[MAX_POINTS][fPoint];
//*******************Pago de Facciones*******************
new IDCode[MAX_PLAYERS];
new PayDayCodes[22][6] = {
{"EULRP"},
{"JHONY"},
{"FCKME"},
{"ALEXY"},
{"INOOB"},
{"PU1A4"},
{"PAYME"},
{"PAWNO"},
{"PORNO"},
{"YOUSH"},
{"XD365"},
{"SCR15"},
{"ROLBT"},
{"LSPD7"},
{"DARDM"},
{"DMERO"},
{"RODEO"},
{"PGERO"},
{"SKYPE"},
{"ALDRP"},
{"SHOTT"},
{"ALDER"}
};


enum ptInfo
{
    ptModelID,
	ptBone,
    Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ftscaleX,
	Float:ftscaleY,
	Float:ftscaleZ
};

new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjectsCop[17][HoldingEnumAll] = {
{18642,1000,"Taser"},
{19472,1000,"Máscara de Gas"},
{19141,2500,"Casco SWAT"},
{19142,2500,"Chaleco SWAT"},
{18636,1000,"Gorro Policía"},
{19099,1000,"Gorro Policía 2"},
{19100,1000,"Gorro Policía 3"},
{18637,1000,"Escudo Policía"},
{19161,1000,"Sombrero Policía"},
{19162,1000,"Sombrero Policía 2"},
{19200,1000,"Casco Policía"},
{19520,50,"Sombrero Piloto"},
{19521,50,"Sombrero Cop"},
{19777,200,"FBI Parche"},
{19138,1000,"Lentes"},
{19139,1000,"Lentes 2"},
{19140,1000,"Lentes 3"}
};
new HoldingObjectsGold[28][HoldingEnumAll] = {
{18643,10000,"Laser Rojo"},
{19080,10000,"Laser Azul"},
{19081,10000,"Laser Rosado"},
{19082,10000,"Laser Naranja"},
{19083,10000,"Laser Verde"},
{19084,10000,"Laser Amarillo"},
{19086,5000,"Dildo Grande"},
{18675,10000,"SmokePuff"},
{18698,10000,"Insectos"},
{19138,1000,"Lentes"},
{18861,1000,"Signo ?"},
{18646,1000,"Luz Azul&Roja"},
{19346,50,"Hotdog"},
{19139,1000,"Lentes 2"},
{19140,1000,"Lentes 3"},
{19101,2000, "Casco Militar1"},
{19102,2000, "Casco Militar2"},
{19103,2000, "Casco Militar3"},
{19104,2000, "Casco Militar4"},
{19105,2000, "Casco Militar5"},
{19106,2000, "Casco Militar6"},
{19107,4000, "Casco Militar7"},
{19108,4000, "Casco Militar8"},
{19109,4000, "Casco Militar9"},
{19110,4000, "Casco Militar10"},
{19111,4000, "Casco Militar11"},
{19112,4000, "Casco Militar12"},
{19472,3000, "Máscara de Gas"}
};

new HoldingObjects[266][HoldingEnumAll] = {
{18642,80,"Taser"},
{11745,80,"Bolsa"},
{19610,80,"Microfono"},
{19559,800,"Mochila"},
{19878,8000,"Skate"},
{19591,500,"Abanico"},
{19555,500,"Guante Izq"},
{19556,500,"Guante Der"},
{19627,5000,"Maletin"},
{19631,8000, "Martillo"},
{19626,8000,"Pala"},
{19623,15000,"Camara Fotos"},
{19893,15000,"Ordenador"},
{18643,10000,"Laser Rojo"},
{19080,10000,"Laser Azul"},
{19081,10000,"Laser Rosado"},
{19082,10000,"Laser Naranja"},
{19083,10000,"Laser Verde"},
{19084,2000,"Laser Amarillo"},
{19896,5000,"Tabaco 1"},
{19897,5000,"Tabaco 2"},
{19942,8000,"Walkie Talkie"},
{19904,15000,"Chaleco Obra"},
{19086,5000,"Dildo Grande"},
{18675,10000,"SmokePuff"},
{19701,10000,"Flama Pequeña"},
{18693,10000,"Flama Larga"},
{18698,10000,"Insectos"},
{18708,10000,"Burbujas"},
{19528,2000,"Gorro bruja"},
{19141,2500,"Casco SWAT"},
{19142,2500,"Chaleco SWAT"},
{18636,1000,"Gorro Policía"},
{19099,1000,"Gorro Policía 2"},
{19100,1000,"Gorro Policía 3"},
{18637,1000,"Escudo Policía"},
{19161,1000,"Sombrero Policía"},
{19162,1000,"Sombrero Policía 2"},
{19200,1000,"Casco Policía"},
{19472,1000,"Máscara de Gas"},
{19138,1000,"Lentes"},
{19139,1000,"Lentes 2"},
{19140,1000,"Lentes 3"},
{18632,15,"Caña Pesca"},
{18633,28,"L. Inglesa"},
{18634,20,"Palanca"},
{18635,56,"Martillo"},
{18638,500,"Casco Amarillo"},
{19093,500,"Casco 1"},
{19160,500,"Casco 3"},
{18639,500,"Sombrero N."},
{18640,700,"Cabello"},
{18975,700,"Cabello 2"},
{19136,700,"Cabello 3"},
{19274,700,"Cabello 4"},
{18641,1000,"Linterna"},
{18644,5000,"Desarmador"},
{18865,500,"Telefono1"},
{18866,500,"Telefono2"},
{18867,500,"Telefono3"},
{18868,500,"Telefono4"},
{18869,500,"Telefono5"},
{18870,1000,"Telefono6"},
{18871,1000,"Telefono7"},
{18872,1000,"Telefono8"},
{18873,1000,"Telefono9"},
{18874,1000,"Telefono10"},
{18875,750,"B.Personas"},
{18890,500,"Rastrillo"},
{18891,500,"Bandana1"},
{18892,500,"Bandana2"},
{18893,500,"Bandana3"},
{18894,500,"Bandana4"},
{18895,500,"Bandana5"},
{18896,500,"Bandana6"},
{18897,500,"Bandana7"},
{18898,500,"Bandana8"},
{18899,500,"Bandana9"},
{18900,500,"Bandana10"},
{18901,750,"Bandana11"},
{18902,750,"Bandana12"},
{18903,750,"Bandana13"},
{18904,750,"Bandana14"},
{18905,750,"Bandana15"},
{18906,750,"Bandana16"},
{18907,750,"Bandana17"},
{18908,750,"Bandana18"},
{18909,750,"Bandana19"},
{18910,750,"Bandana20"},
{18911,1000,"Mask1"},
{18912,1000,"Mask2"},
{18913,1000,"Mask3"},
{18914,1000,"Mask4"},
{18915,1000,"Mask5"},
{18916,1000,"Mask6"},
{18917,1000,"Mask7"},
{18918,1000,"Mask8"},
{18919,1000,"Mask9"},
{18920,1000,"Mask10"},
{18921,500,"Boina1"},
{18922,500,"Boina1"},
{18923,750,"Boina3"},
{18924,1000,"Boina4"},
{18925,1000,"Boina5"},
{18926,28,"Sombrero1"},
{18927,28,"Sombrero12"},
{18928,28,"Sombrero13"},
{18929,28,"Sombrero14"},
{18930,28,"Sombrero15"},
{18931,28,"Sombrero16"},
{18932,28,"Sombrero17"},
{18933,28,"Sombrero18"},
{18934,28,"Sombrero19"},
{18935,28,"Sombrero20"},
{18936,500,"Casco1"},
{18937,750,"Casco2"},
{18938,1000,"Casco3"},
{18939,750,"Gorra 1"},
{18940,750,"Gorra 2"},
{18941,750,"Gorra 3"},
{18942,1000,"Gorra 4"},
{18943,1000,"Gorra 5"},
{18944,35,"GorraBoater1"},
{18945,35,"GorraBoater2"},
{18946,35,"GorraBoater3"},
{18947,30,"GorraBoater4"},
{18948,30,"GorraBoater5"},
{18949,30,"GorraBoater6"},
{18950,30,"GorraBoater7"},
{18951,30,"GorraBoater8"},
{18952,1500,"Casco Box"},
{18953,500,"GorraLana1"},
{18954,750,"GorraLana2"},
{18955,750,"GorraIncl1"},
{18956,750,"GorraIncl2"},
{18957,750,"GorraIncl3"},
{18958,750,"GorraIncl4"},
{18959,750,"GorraIncl5"},
{18960,1000,"GorraIncl6"},
{18961,750,"GorraCamionero"},
{18962,750,"Sombrero Vaquero"},
{19469,500,"Bandana Blanca"},
{151,1000,"tele"},
{19330,1250,"sombrerodefuego"},
{18966,1500,"Casquete3"},
{18967,1000,"Sombrero"},
{18968,1000,"Sombrero2"},
{18969,1000,"Sombrero3"},
{18970,2000,"Sombrero Tigre"},
{18971,1000,"GorroCool"},
{18972,1250,"GorroCool2"},
{18973,1500,"GorroCool3"},
{18974,10000,"MaskZorro"},
{18645,1500,"Casco Moto"},
{18976,1000,"Casco Moto 2"},
{18977,1000,"Casco Moto 3"},
{18978,1250,"Casco Moto 4"},
{18979,1500,"Casco Moto 5"},
{19006,70,"Lentes 1"},
{19007,70,"Lentes 2"},
{19008,70,"Lentes 3"},
{19009,70,"Lentes 4"},
{19010,70,"Lentes 4"},
{19011,70,"Lentes 6"},
{19012,70,"Lentes 7"},
{19013,70,"Lentes 8"},
{19014,70,"Lentes 9"},
{19015,70,"Lentes 10"},
{19016,70,"Lentes 11"},
{19017,70,"Lentes 12"},
{19018,70,"Lentes 13"},
{19019,70,"Lentes 14"},
{19020,70,"Lentes 15"},
{19021,70,"Lentes 16"},
{19022,70,"Lentes 17"},
{19023,70,"Lentes 18"},
{19024,70,"Lentes 19"},
{19025,70,"Lentes 20"},
{19026,70,"Lentes 21"},
{19027,70,"Lentes 22"},
{19028,70,"Lentes 23"},
{19029,70,"Lentes 24"},
{19030,70,"Lentes 25"},
{19031,70,"Lentes 26"},
{19032,70,"Lentes 27"},
{19033,70,"Lentes 28"},
{19034,70,"Lentes 29"},
{19035,70,"Lentes 30"},
{19036,120,"HockeyMask1"},
{19037,120,"HockeyMask2"},
{19038,120,"HockeyMask3"},
{19039,60,"Reloj 1"},
{19040,60,"Reloj 2"},
{19041,60,"Reloj 3"},
{19042,60,"Reloj 4"},
{19043,60,"Reloj 5"},
{19044,60,"Reloj 6"},
{19045,60,"Reloj 7"},
{19046,60,"Reloj 8"},
{19047,60,"Reloj 9"},
{19048,60,"Reloj 10"},
{19049,60,"Reloj 11"},
{19050,60,"Reloj 12"},
{19051,60,"Reloj 13"},
{19052,60,"Reloj 14"},
{19053,60,"Reloj 15"},
{19064,10000, "GorraSanta1"},
{19065,20000, "GorraSanta2"},
{19066,30000, "GorraSanta3"},
{19067,1000, "HoodyHat1"},
{19068,1000, "HoodyHat2"},
{19069,1000, "HoodyHat3"},
{19078,7500, "Loro1"},
{19079,7500, "Loro2"},
{19085,5000, "Parche Ojo"},
{19090,1500, "PomPomAzul"},
{19091,1500, "PomPomRejo"},
{19092,1500, "PomPomVerde"},
{19094,2000, "GorroBurgerShot"},
{19095,500, "Sombrero Vaquero 2"},
{19096,500, "Sombrero Vaquero 3"},
{19097,1000, "Sombrero Vaquero 4"},
{19098,1000, "Sombrero Vaquero 5"},
{19113,40, "Casco Tonto1"},
{19114,40, "Casco Tonto2"},
{19115,40, "Casco Tonto3"},
{19116,40, "Casco Aereo1"},
{19117,30, "Casco A. 2"},
{19118,30, "Casco A. 3"},
{19119,30, "Casco A. 4"},
{19120,30, "Casco A. 5"},
{19101,2000, "Casco Militar1"},
{19102,2000, "Casco Militar2"},
{19103,2000, "Casco Militar3"},
{19104,2000, "Casco Militar4"},
{19105,2000, "Casco Militar5"},
{19106,2000, "Casco Militar6"},
{19107,4000, "Casco Militar7"},
{19108,4000, "Casco Militar8"},
{19109,4000, "Casco Militar9"},
{19110,4000, "Casco Militar10"},
{19111,4000, "Casco Militar11"},
{19112,4000, "Casco Militar12"},
{19137,5000, "GorraCluckinBell"},
{19163,1000, "Mascara"},
{19330,1000, "Casco Bomb"},
{19331,1000, "Casco Bomb2"},
{19317,1000, "Guitarra"},
{19318,1000, "GuitarraX"},
{19319,1000, "XFireGuitarra"},
{1210,500, "Maleta"},
{3044,20,"Cigarro"},
{18647,70000,"Neon Rojo"},
{18648,70000,"Neon Azul"},
{18649,70000,"Neon Verde"},
{18650,70000,"Neon Amarillo"},
{18651,70000,"Neon Rosado"},
{18652,70000,"Neon Blanco"},
{18861,1000,"Signo ?"},
{18646,1000,"Luz Azul&Roja"},
{19346,50,"HotDog"},
{19472,3000,"Máscara de Gas"},
{19421,140,"Headphone 1"},
{19422,140,"Headphone 2"},
{19423,140,"Headphone 3"},
{19424,140,"Headphone 4"}
};

enum HoldingEnum
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjectsAll[212][HoldingEnum] = {
{18632,100,"Caña Pesca"},
{18633,25,"L. Inglesa"},
{18634,70,"Palanca"},
{18635,30,"Martillo"},
{18638,35,"Casco Amarillo"},
{19093,45,"Casco 1"},
{19160,45,"Casco 2"},
{18639,45,"Sombrero N."},
{18640,25,"Cabello"},
{18975,25,"Cabello 2"},
{19136,25,"Cabello 3"},
{19274,25,"Cabello 4"},
{18641,40,"Linterna"},
{18644,60,"Desarmador"},
{18865,340,"Telefono1"},
{18866,340,"Telefono2"},
{18867,340,"Telefono3"},
{18868,340,"Telefono4"},
{18869,340,"Telefono5"},
{18870,340,"Telefono6"},
{18871,340,"Telefono7"},
{18872,340,"Telefono8"},
{18873,340,"Telefono9"},
{18874,340,"Telefono10"},
{18875,750,"B.Personas"},
{18890,300,"Rastrillo"},
{18891,15,"Bandana1"},
{18892,15,"Bandana2"},
{18893,15,"Bandana3"},
{18894,15,"Bandana4"},
{18895,15,"Bandana5"},
{18896,15,"Bandana6"},
{18897,15,"Bandana7"},
{18898,15,"Bandana8"},
{18899,15,"Bandana9"},
{18900,15,"Bandana10"},
{18901,15,"Bandana11"},
{18902,15,"Bandana12"},
{18903,15,"Bandana13"},
{18904,15,"Bandana14"},
{18905,15,"Bandana15"},
{18906,15,"Bandana16"},
{18907,15,"Bandana17"},
{18908,15,"Bandana18"},
{18909,15,"Bandana19"},
{18910,15,"Bandana20"},
{18911,20,"Mask1"},
{18912,20,"Mask2"},
{18913,20,"Mask3"},
{18914,20,"Mask4"},
{18915,20,"Mask5"},
{18916,20,"Mask6"},
{18917,20,"Mask7"},
{18918,20,"Mask8"},
{18919,20,"Mask9"},
{18920,20,"Mask10"},
{18921,15,"Boina1"},
{18922,15,"Boina1"},
{18923,15,"Boina3"},
{18924,15,"Boina4"},
{18925,15,"Boina5"},
{18926,28,"Sombrero1"},
{18927,28,"Sombrero12"},
{18928,28,"Sombrero13"},
{18929,28,"Sombrero14"},
{18930,28,"Sombrero15"},
{18931,28,"Sombrero16"},
{18932,28,"Sombrero17"},
{18933,28,"Sombrero18"},
{18934,28,"Sombrero19"},
{18935,28,"Sombrero20"},
{18936,250,"Casco1"},
{18937,250,"Casco2"},
{18938,250,"Casco3"},
{18939,45,"Gorra 1"},
{18940,45,"Gorra 2"},
{18941,45,"Gorra 3"},
{18942,45,"Gorra 4"},
{18943,45,"Gorra 5"},
{18944,35,"GorraBoater1"},
{18945,35,"GorraBoater2"},
{18946,35,"GorraBoater3"},
{18947,30,"GorraBoater4"},
{18948,30,"GorraBoater5"},
{18949,30,"GorraBoater6"},
{18950,30,"GorraBoater7"},
{18951,30,"GorraBoater8"},
{18952,45,"Casco Box"},
{18953,30,"GorraLana1"},
{18954,30,"GorraLana2"},
{18955,30,"GorraIncl1"},
{18956,30,"GorraIncl2"},
{18957,30,"GorraIncl3"},
{18958,30,"GorraIncl4"},
{18959,30,"GorraIncl5"},
{18960,30,"GorraIncl6"},
{18961,10,"GorraCamionero"},
{18962,45,"Sombrero Vaquero"},
{19469,500,"Bandana Blanca"},
{19330,45,"sombrerodefuego"},
{18966,45,"Casquete3"},
{18967,45,"Sombrero"},
{18968,45,"Sombrero2"},
{18969,45,"Sombrero3"},
{18970,70,"Sombrero Tigre"},
{18971,25,"GorroCool"},
{18972,25,"GorroCool2"},
{18973,25,"GorroCool3"},
{18974,69,"MaskZorro"},
{18645,40,"Casco Moto"},
{18976,40,"Casco Moto 2"},
{18977,40,"Casco Moto 3"},
{18978,40,"Casco Moto 4"},
{18979,40,"Casco Moto 5"},
{19006,70,"Lentes 1"},
{19007,70,"Lentes 2"},
{19008,70,"Lentes 3"},
{19009,70,"Lentes 4"},
{19010,70,"Lentes 4"},
{19011,70,"Lentes 6"},
{19012,70,"Lentes 7"},
{19013,70,"Lentes 8"},
{19014,70,"Lentes 9"},
{19015,70,"Lentes 10"},
{19016,70,"Lentes 11"},
{19017,70,"Lentes 12"},
{19018,70,"Lentes 13"},
{19019,70,"Lentes 14"},
{19020,70,"Lentes 15"},
{19021,70,"Lentes 16"},
{19022,70,"Lentes 17"},
{19023,70,"Lentes 18"},
{19024,70,"Lentes 19"},
{19025,70,"Lentes 20"},
{19026,70,"Lentes 21"},
{19027,70,"Lentes 22"},
{19028,70,"Lentes 23"},
{19029,70,"Lentes 24"},
{19030,70,"Lentes 25"},
{19031,70,"Lentes 26"},
{19032,70,"Lentes 27"},
{19033,70,"Lentes 28"},
{19034,70,"Lentes 29"},
{19035,70,"Lentes 30"},
{19036,120,"HockeyMask1"},
{19037,120,"HockeyMask2"},
{19038,120,"HockeyMask3"},
{19039,60,"Reloj 1"},
{19040,60,"Reloj 2"},
{19041,60,"Reloj 3"},
{19042,60,"Reloj 4"},
{19043,60,"Reloj 5"},
{19044,60,"Reloj 6"},
{19045,60,"Reloj 7"},
{19046,60,"Reloj 8"},
{19047,60,"Reloj 9"},
{19048,60,"Reloj 10"},
{19049,60,"Reloj 11"},
{19050,60,"Reloj 12"},
{19051,60,"Reloj 13"},
{19052,60,"Reloj 14"},
{19053,60,"Reloj 15"},
{19064,45, "GorraSanta1"},
{19065,45, "GorraSanta2"},
{19066,45, "GorraSanta3"},
{19067,60, "HoodyHat1"},
{19068,60, "HoodyHat2"},
{19069,60, "HoodyHat3"},
{19078,700, "Loro1"},
{19079,700, "Loro2"},
{19085,35, "Parche Ojo"},
{19090,30, "PomPomAzul"},
{19091,45, "PomPomRejo"},
{19092,60, "PomPomVerde"},
{19094,100, "GorroBurgerShot"},
{19095,100, "Sombrero Vaquero 2"},
{19096,100, "Sombrero Vaquero 3"},
{19097,100, "Sombrero Vaquero 4"},
{19098,100, "Sombrero Vaquero 5"},
{19101,10, "Casco Militar1"},
{19102,10, "Casco Militar2"},
{19103,10, "Casco Militar3"},
{19104,10, "Casco Militar4"},
{19105,10, "Casco Militar5"},
{19106,10, "Casco Militar6"},
{19107,10, "Casco Militar7"},
{19108,10, "Casco Militar8"},
{19109,10, "Casco Militar9"},
{19110,10, "Casco Militar10"},
{19111,10, "Casco Militar11"},
{19112,10, "Casco Militar12"},
{19113,40, "Casco Tonto1"},
{19114,40, "Casco Tonto2"},
{19115,40, "Casco Tonto3"},
{19116,40, "Casco Aereo1"},
{19117,30, "Casco A. 2"},
{19118,30, "Casco A. 3"},
{19119,30, "Casco A. 4"},
{19120,30, "Casco A. 5"},
{19137,60, "GorraCluckinBell"},
{19163,70, "Mascara"},
{19330,40, "Casco Bomb"},
{19331,40, "Casco Bomb2"},
{19317,1000, "Guitarra"},
{19318,1000, "GuitarraX"},
{19319,1000, "XFireGuitarra"},
{1210,45, "Maleta"},
{3044,20,"Cigarro"},
{19421,140,"Headphone 1"},
{19422,140,"Headphone 2"},
{19423,140,"Headphone 3"},
{19424,140,"Headphone 4"}
};

new HoldingBones[][] = {
	"Nada",
	"Columna",
	"Cabeza",
	"Brazo Izq Sup",
	"Brazo Der Sup",
	"Mano Izq",
	"Mano Derecha",
	"Muslo Izq",
	"Muslo Der",
	"Pie Izq",
	"Pie Der",
	"Right calf",
	"Left calf",
	"AnteBrazo Izq",
	"AnteBrazo Der",
	"Clavicula Izq",
	"Clavicula Der",
	"Cuello",
	"Quijada"
};
//*******************Stats Jugador*******************
enum pInfo
{
	pKey[24],
    pLevel,
	pAdminZC,
	pLvlAdminZC,
	pBanAppealer,
	pFactionModerator,
	pModStaff,
	pGangModerator,
	pHelper,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pExp,
	pCash,
	pTarjetaCredito,
	pAccount,
	pIP[32],
	pKills,
	pDeaths,
	pArrested,
	pJailAdmin,
	pLottoNr,
	pJob,
	pNMute,
	pNMuteTotal,
	pWarn,
	pWRestricted,
	pJailed, // Si está en jail.
	pJailTime, // Tiempo Jail.
	pJailedBy[32], // Jaileado por.
	pJailReason[64], // Razón del jail.
	pMyAD[120], // Anuncio Guardado.
	pMats, // Materiales.
	pPackages, // Paquetes.
	pDrugs, // Drogas.
	pCosecha,
	pCrack, // Crack.
	pPot, // Hierba.
	pGanzuas, // Ganzuas.
	pCrates,
	pAdiccion,
	pReligion, // Religión.
	pLiderReligioso, // Líder Religioso.
	pLeader,
	pMember,
	pDivision,
	pFMember,
	pRank,
	pChar,
	Float:pHealth,
	Float:pArmour,
	pInt,
	pTeam,
	pModel,
	pPnumber,
	pSprunk,
	pSpeedo,
	pPhoneBook,
	pPhousekey,
	pPhousekey2,
	pPhousekeyX,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	Float:pPos_r,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pGunLic,
	pGafas,
	pTut,
	pTestTut,
	pVW,
	pLighter,
	pCigarettes,
	pPapel,
	pMask,
	pMaskuse,
	pHideNumber,
	pSpeaker,
	pBannedZC,
	pDisabledZC,
	pBlockBug,
	pMulticuenta,
	pBlockG,
	pDNI,
 	pArmsSkill,
 	pTruckSkill,
 	pSmugSkill,
    pDrugsSkill,
 	pRequestingBackup,
 	pSIDA,
 	pCancer,
 	pEpilepsia,
 	pDengue,
 	pFStyle,
 	pWantedLevel,
 	pAntiSIDA,
 	pAntiCancer,
 	pAntiEpilepsia,
 	pRenting,
 	p_Pr_Money,
 	pRob,
 	pVIP,
 	pROL,
 	pPTR,
 	pCarKey2,
 	pBanDuda,
 	pPasaporte,
 	pSeguro,
	pRMuted,
	pRMutedTotal,
	pRMutedTime,
   	pRadio,
   	pRadioFreq,
   	pIpadMusic,
   	pGiftTime,
	pWeapons[13],
 	pAccent,
 	pIngles, // Idioma Inglés.
 	pAleman, // Idioma Alemán.
	pRuso, // Idioma Ruso.
	pJapones, // Idioma Japonés.
	pItaliano, // Idioma Italiano.
	pArabe, // Idioma Arabe.
	pInglesSkill, // Idioma Inglés.
 	pAlemanSkill, // Idioma Alemán.
	pRusoSkill, // Idioma Ruso.
	pJaponesSkill, // Idioma Japonés.
	pItalianoSkill, // Idioma Italiano.
	pArabeSkill, // Idioma Arabe.
 	pUndercover,
 	pHead,
 	pCHits,
 	pFHits,
 	pMarried,
 	pPaintTeam,
 	pPaintTokens,
 	pVehicleKeysFrom,
 	pVehicleKeys,
 	pLockCar,
 	pLock,
 	pSpraycan,
 	pMarriedTo[128],
	pContractBy[32],
	pContractDetail[64],
	pContract,
	pServiceTime,
	pTaxiLicense,
	pHospital,
	pTriageTime,
	pWExists,
	Float:pWX,
	Float:pWY,
	Float:pWZ,
	pWVW,
	pWInt,
	pWValue,
	pWObject,
	pWTimer,
	pWSeeds,
	YaCobre,
	pADMute,
	pADMuteTotal,
	pWarrant[128],
	pJudgeJailTime,
	pJudgeJailType,
	pBeingSentenced,
	pProbationTime,
	pFishSkill,
	pFishes,
	pBiggestFish,
	pRHours,
	pADTime,
	pOther,
	pGTokens,
	pDobleExp,
	pAdverID,
	pDPHours,
	pDPTime,
	pDPTotal,
	pOrder,
	pTempVIP,
	pVIPInviteDay,
	pBuddyInvited,
	pVTokens,
	pJob2,
	pVIPCHAT,
	pTypeSpawn,
	pAutoTextReply[64],
	pShopTech,
	pEstado,
	pEstadoX[20],
	pVIPDateD,
	pVIPDateM,
	pRegalo,
	pSavedTime,
	pScrewdriver,
	pFirstaid,
	pSurveillance,
	pPbizzkey,
	pgskin,
	probita,
	pDNIFalse,
	pDNIName[32],
	//pMuebles[11],
	pBoombox,
	pPuntosRol,
	pTakeAway,
	pAgenda1[40],
	pAgenda2[40],
	pAgenda3[40],
	pAgenda4[40],
	pAgenda5[40],
	pAgenda6[40],
	pAgenda7[40],
	pAgenda8[40],
	pAgenda9[40],
	pAgenda10[40],
	pContactoAgendar,
	pLibreta,
	pBlocNotas[128],
	pNumeroLibreta1,
	pNumeroLibreta2,
	pNumeroLibreta3,
	pNumeroLibreta4,
	pNumeroLibreta5,
	pNumeroLibreta6,
	pNumeroLibreta7,
	pNumeroLibreta8,
	pNumeroLibreta9,
	pNumeroLibreta10,
};

new Info[MAX_PLAYERS+1][pInfo];

//*******************Sistema de autos dinamicos*******************
enum pvInfo
{
    Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
 	Float:pvPosAngle,
 	pvVW,
	pvId,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowPlayer[MAX_PLAYER_NAME],
	pvAllowedPlayerId,
	pvPark,
	pvPrice,
	pvTicket,
	pvWeapons[8],
	pvWepUpgrade,
	pvImpounded,
	pvFuel,
	Float:pvHealth,
	pvSpawned,
};
//******sistema experiencia********//
new Text:Experiencia[MAX_PLAYERS];
//*******************************//
//Intermitentes.
new Intermitentes_xqz[MAX_VEHICLES][6];
// Variables de vehículos En General.
new light[MAX_VEHICLES],
	Lamp[MAX_VEHICLES] = 0,
	CurrentDialog[MAX_PLAYERS];
new PlayerVehicleInfo[MAX_PLAYERS+1][MAX_PLAYERVEHICLES][pvInfo];
new Bar:PizzaBar[MAX_PLAYERS];
new estacionveh[MAX_VEHICLES];
new estacionp[MAX_PLAYERS];
new VehicleFuel[MAX_VEHICLES] = 200;
new LockStatus[MAX_VEHICLES];
new IntentarPuente[MAX_PLAYERS]; // Uso del CMD /puente.
//new UsarEquipo[MAX_PLAYERS]; // Uso del CMD /equipo.
new SeRinde[MAX_PLAYERS]; // Uso del /esposar.
new Intentar[MAX_PLAYERS];
new AntiAbuso[MAX_PLAYERS]; // JOBS.
new HaceMG[MAX_PLAYERS]; // AD CHANNEL.
new HaceAbuso[MAX_PLAYERS]; // NEW CAHNNEL.
new Banco_Activo;
new GiveKeysTo[MAX_PLAYERS];
new arr_Engine[MAX_VEHICLES char];
new arr_Towing[MAX_PLAYERS];
new RefuelingVehicle[MAX_PLAYERS];
new RefuelingVehicleTimer[MAX_PLAYERS];
new RefuelingVehiclePrice[MAX_PLAYERS];
new VehicleStatus[MAX_VEHICLES char] = 0;
new Float: fVehSpeed[MAX_PLAYERS];
new Float:TelePos[MAX_PLAYERS][6];
new Muted[MAX_PLAYERS];
new QFA[MAX_PLAYERS][24]; //Quien te mató
new Helado[MAX_PLAYERS];
new Hotdog[MAX_PLAYERS];
//*******************Sistema de fuego*******************
new CreatedBlocks[200];
new CreatedBlock = 0;
//*******************Sistema de armas*******************
//sistema tirararma
new ObjectID[MAX_ARMAS][1];
new Float:ObjCoords[MAX_ARMAS][3];
new Object[MAX_ARMAS];
new GunObjects[47][0] = { // By Valentin Carranza
	{0},// Ninguna.
	{331},// Puño Metalico.
	{333},// Palo de golf.
	{334},// Porra policial.
	{335},// Navaja.
	{336},// Bate de béisbol.
	{337},// Pala.
	{338},// Palo de pool.
	{339},// Katana.
	{341},// Motosierra.
	{321},// Consolador violeta.
	{322},// Consolador corto blanco.
	{323},// Consolador largo blanco.
	{324},// Consolador vibrador.
	{325},// Ramo de flores.
	{326},// Bastón.
	{342},// Granada.
	{343},// Grabada de gas lacrimógeno.
	{344},// Cóctel Molotov.
	{0},
	{0},
	{0},
	{346},// 9mm.
	{347},// 9mm con silenciador.
	{348},// Desert eagle.
	{349},// Escopeta normal.
	{350},// Escopeta recortada.
	{351},// Escopeta de combate.
	{352},// UZI
	{353},// MP5
	{355},// AK47
	{356},// M4
	{372},// Tec-9
	{357},// Rifle de caza.
	{358},// Rifle de francotirador (sniper)
	{359},// Lanzaconhetes.
	{360},// Lanzacohetes busca-calor.
	{361},// Lanzallamas.
	{362},// Minigun.
	{363},// Detonador.
	{364},// Botón de detonador.
	{365},// Aerosol de gas pimienta.
	{366},// Extinguidor de fuego.
	{367},// Cámara fotográfica.
	{368},// Gafas de visión nocturna.
	{368},// Gafas de visión infrarroja.
	{371}// Paracaídas.
};
//***sistema de fire***
new Float:Fuego[][3] = {
{1916.9470, -1400.9082, 13.5703},
{2330.6628, -1805.5270, 13.5469},
{2382.5210, -1131.2479, 30.2030},
{2164.3052, -1004.4780, 62.7962},
{1282.3912, -817.9395, 84.1406},
{811.7228, -1098.1653, 25.9063},
{649.1138, -1705.1345, 14.5158},
{153.8757, -1941.5243, 3.7734},
{132.7246, -1516.6755, 10.4878},
{262.1424, -1171.0951, 79.4105}
};
new TimerCochesPuente;
new Timerfire;
new lugarfire;
new bool:F;
new bool:llegarf[MAX_PLAYERS];
new Apagandofire[MAX_PLAYERS];
new Float:LugarFuego[3];
new Fire[7];
//*******************Mensaje al loguear*******************
new GlobalMOTD[128];
new AdminMOTD[128];
new CAMOTD[128];
new FACMOTD[128];
new FAMMOTD[128];
new VIPMOTD[128];
new iGMXTick,iGMXTimer;
new GiftAllowed, VIPGifts = 0, VIPGiftsTimeLeft, VIPGiftsName[MAX_PLAYER_NAME];
new Float:TeleportDest[MAX_PLAYERS][3];
new EventLastInt[MAX_PLAYERS]; new EventLastVW[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6];
new nextteam;
new textdrawscount;
new FishCount[MAX_PLAYERS];
new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,PlayerCars,TotalUptime;
//*******************Sistema de reportes*******************
enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr
}
new Reports[MAX_REPORTS][reportinfo];
new CancelReport[MAX_PLAYERS];
new JustReported[MAX_PLAYERS];
new JustDuda[MAX_PLAYERS];
new JustAfk[MAX_PLAYERS];
new HayDuda[MAX_PLAYERS];
new tarmalimit[MAX_PLAYERS];
new ListItemReportId[MAX_PLAYERS][40];
new camaraon[MAX_PLAYERS];
new iLuces[MAX_PLAYERS]; // Intermitentes.
new FPS[MAX_PLAYERS];
//*******************Sistema de ad*******************
enum advertinfo
{
	aAdvert[128],
 	aResume[15],
	aNumber,
	aContact[MAX_PLAYER_NAME],
	aTimer,
	aActive,
	aOther
}

new ADInfo[MAX_AD][advertinfo];
new ListItemTrackId[MAX_PLAYERS][40];
new NewbieTimer[MAX_PLAYERS];
new VIPTimer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new PuedeD[MAX_PLAYERS];
new ShowRules[MAX_PLAYERS];
new RulesTime[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
new carsforplayer[MAX_PLAYERS];

//*******************Sistema de recoger y tirar arma*******************
new GunNames[48][] = {
    "nada",
    "un puño americano",
    "un palo de golf",
    "una porra policial",
    "una navaja",
    "un bate de baseball",
    "una pala",
    "un palo de pool",
    "una katana",
    "una motosierra",
    "un consolador violeta",
    "un consolador corto blanco",
    "un consolador largo blanco",
    "un consolador",
    "un ramo de flores",
    "un bastón",
    "una granada explosiva",
    "una granada de humo",
    "un cóctel molotov",
    "misil de hunter o hydra",
    "fuego de hydra",
    "un propulsor",
    "una pistola colt .45",
    "una pistola colt .45 con silenciador",
    "una pistola desert eagle",
    "una escopeta normal",
    "una escopeta recortada",
    "una escopeta de combate",
    "un micro subfusil uzi",
    "un subfusil mp5",
    "un rifle automático ak-47",
    "un rifle automático m4",
    "un micro subfusil tec9",
    "un rifle de caza",
    "un rifle de francotirador",
    "un lanzacohetes",
    "un lanzamisiles busca calor",
    "un lanzallamas",
    "una minigun",
    "una carga explosiva",
    "un detonador de carga explosiva",
    "un aerosol de gas pimienta",
    "un extintor de fuego",
    "una cámara fotográfica",
    "unas gafas de visión nocturna",
    "unas gafas de visión infrarroja",
    "un paracaídas",
    "pistola falsa"
};
new WeaponNames[47][] = // Armas en mano.
{
	"Puños","brass knuckles","golf club","nitestick","knife","baseball bat","shovel","palo de billar","katana","chainsaw","purple dildo","small white vibrator","large white vibrator","silver vibrator",
	"bouquet of flowers","cane","grenade","tear gas grenade","molotov cocktail","jetpack"," "," ","Colt .45","silenced Colt .45","Desert Eagle","12-gauge shotgun","sawn-off shotgun","SPAS-12",
	"Micro Uzi","MP5","AK-47","M4A1","TEC-9","rifle","sniper rifle","rocket launcher","heatseeker","flamethrower","minigun","satchel charge","detonator","spray can","fire extinguisher",
	"camera","nightvision goggles", "thermal goggles","parachute"
};
new iArmas[47][] = //Armarios de Casas
{
	"Slot Vacío","Slot Vacio","Palo de golf","Cachiporra","Cuchillo","Bate de Béisbol","Pala","Palo de billar","Katana","Motosierra","Dildo rosa","Vibrador blanco pequeño","Vibrador blanco grande","Vibrador plateado",
	"Ramo de flores","Caña de pescar","Granada","Granada de Humo","Cóctel Molotov","Jetpack"," "," ","Colt .45","Colt .45 Silenciada","Desert Eagle","Escopeta calibre 12","Escopeta recortada","SPAS-12",
	"Micro Uzi","MP5","AK-47","M4A1","TEC-9","Rifle","Rifle de Francotirador","Lanzamisiles","Heatseeker","Lanzallamas","Minigun","Carga Explosiva","Detonador","Spray","Extinguidor",
	"Cámara","Gafas Nocturnas", "Gafas Térmicas","Paracaídas"
};
new HasArmor			[MAX_PLAYERS];
new Float:ScriptArmor	[MAX_PLAYERS];
function SetHP(playerid, Float:hp)
{
    Info[playerid][pHealth] =hp;
    SetPlayerHealth(playerid, hp);
    return 1;
}

function RecogerItem(playerid)
{
SetPlayerCheckpoint(playerid, 2376.2676,-1888.2104,13.5000, 3.0);
return 1;
}

function RecogerItem2(playerid)
{
SetPlayerCheckpoint(playerid, 2262.8792,-1663.0928,13.2382, 3.0);
return 1;
}

function RecogerItem3(playerid)
{
SetPlayerCheckpoint(playerid, 2245.0291,-1665.0726,13.4766, 3.0);
return 1;
}

function RecogerItem4(playerid)
{
SetPlayerCheckpoint(playerid, 2085.4810,-1795.1569,13.4668, 3.0);
return 1;
}

function RecogerItem5(playerid)
{
SetPlayerCheckpoint(playerid, 2103.8171,-1806.8013,13.5547, 3.0);
return 1;
}

function RecogerItem6(playerid)
{
SetPlayerCheckpoint(playerid, 1951.2883,-1786.8141,13.4682, 3.0);
return 1;
}

function RecogerItem7(playerid)
{
SetPlayerCheckpoint(playerid, 1931.0723,-1776.5352,13.5469, 3.0);
return 1;
}
function RecogerItem8(playerid)
{
SetPlayerCheckpoint(playerid, 1835.3311,-1869.4673,13.3828, 3.0);
return 1;
}
function RecogerItem9(playerid)
{
SetPlayerCheckpoint(playerid, 1832.7766,-1842.4673,13.5781, 3.0);
return 1;
}
function RecogerItem10(playerid)
{
SetPlayerCheckpoint(playerid, 1376.9827,-1838.2129,13.6553, 3.0);
return 1;
}
function RecogerItem11(playerid)
{
SetPlayerCheckpoint(playerid, 1362.3383,-1795.5511,13.7141, 3.0);
return 1;
}
function RecogerItem12(playerid)
{
SetPlayerCheckpoint(playerid, 1448.1895,-1151.3889,24.1081, 3.0);
return 1;
}
function RecogerItem13(playerid)
{
SetPlayerCheckpoint(playerid, 1456.5751,-1138.3091,23.9748, 3.0);
return 1;
}
function RecogerItem14(playerid)
{
SetPlayerCheckpoint(playerid, 2096.3450,-1216.3312,23.8047, 3.0);
return 1;
}
function RecogerItem15(playerid)
{
SetPlayerCheckpoint(playerid, 2113.0313,-1211.9625,23.9636, 3.0);
return 1;
}
function RecogerItem16(playerid)
{
SetPlayerCheckpoint(playerid, 1826.5663,-1681.9127,13.5455, 3.0);
return 1;
}
function RecogerItem17(playerid)
{
SetPlayerCheckpoint(playerid, 1835.3750,-1683.0509,13.3924, 3.0);
return 1;
}
function RecogerItem18(playerid)
{
SetPlayerCheckpoint(playerid, 2423.8936,-2091.2354,13.5469, 3.0);
return 1;
}

function A_Info(string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (Info[i][pAdminZC] >= 1)
			{
				SendClientMessage(i, 0xFF9562FF, string);
			}
		}
	}
	return 1;
}

function GiveArmorToPlayer(playerid, Float:armour)
{
	SetPlayerArmour(playerid, Float:armour);
	HasArmor[playerid] = 1;
	ScriptArmor[playerid] = armour;
	return 1;
}
timer Anticheat[1000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i)){
	        new Float:health, Float:armor;
	        GetPlayerHealth(i, health);
   			if(health > Info[i][pHealth]){
			    SetPlayerHealth(i, Info[i][pHealth]);
	  		}
	        GetPlayerArmour(i, armor);
	  		if(armor > ScriptArmor[i]){
				GiveArmorToPlayer(i, ScriptArmor[i]);
			}
		}
	}
 return 1;
}
#define SetPlayerArmour GiveArmorToPlayer

//*******************Variables*******************
//*******************Trucker Job*******************
new Bar:LoadTruckBar[MAX_PLAYERS] = INVALID_BAR_ID;
new LoadTruckTime[MAX_PLAYERS];
new TruckDeliver[MAX_PLAYERS];
new TruckUsed[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new TruckContents[MAX_VEHICLES] = 0;
new gPlayerCheckpointStatus[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS];
new HelpingNewbie[MAX_PLAYERS];
new Advisors = 0;
new AdvisorCall = 999;
new BarObject[MAX_PLAYERS]; // ID del Objeto.
new ObjectBar[MAX_PLAYERS]; // Objeto.
//*******************
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
//*******************Vender Veh*******************
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
//*******************Vender Casa*******************
new HouseOffer[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
//*******************Vender ARMA*******************
new GunOffer[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new Text3D:Camera3D[MAX_PLAYERS];
//*******************EMS*******************
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
//*******************TextDraw*******************
new Text:NewStaterp, /*Text:ACRPVERSION, */Text:MOTD;
new Text:LoginMenu[9], Text:AyudaT[15];
new Text:AyudaX[15];
//*******************ADO[K]1NG******************* ADOKING?
new Text:PRUEBA1;
new Text:PRUEBA2;
new Text:king0;
new Text:king1;
new Text:king2;
//*******************TUTORIAL*******************
new Text:TutTxt[5];
new Text:TextTut[MAX_PLAYERS];
new TutStep[MAX_PLAYERS];
new TutError[MAX_PLAYERS];
new Text:txtAnimHelper;
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
//*******************Cuenta*******************
new
Text:cargando,
Text:looking,
Text:streamer,
Text:box;
//*******************LSPD int*******************
new courtjail[MAX_PLAYERS];
new courtbuttons[5], courtgates[2];
new fen1,fen2,fen3,fen4,fen5,fen6, JDoor1, JDoor2, JDoor3, JDoor4, JDoor5, JDoor6;
// Buttons Rusos.
new RusosBT, RusosDoor1, RusosDoor2;
// Buttons Poder Judicial.
new PJBT, PJBT2, PJBT3, PJDOOR, PJDOOR2, PJCELDA, PJCELDA2, PJCELDA3, PJCELDA4; // Botones, puerta de los botones y celdas, 2 arriba y 2 abajo.
//new JDoor1, JDoor2, fen1,fen2;
new eastlobby1, eastlobby2, westlobby1, westlobby2, cctv1, cctv2, locker1, locker2, chief1, chief2;
new eastin, eastout, lockerin, lockerout, cctvin, cctvout, elevator, roofkey, garagekey, chiefout, chiefin, westin, westout;
//*******************CIA Int*******************
new cia1, cia2, buttomcia, buttomcia2; // CIA.
//new rejaALEPH, rejaALEPH2;
//*******************LSPD Portones*******************
new pdgate1,pdgate2,pdgate3, saem1, saem2, saem3, saemSF, saemLV, saemLV2;
//*******************ipod*******************
new Ipadon[MAX_PLAYERS];
//*******************GIFTS*******************
new dynamicgift;
new Text3D:dynamicgift3DText;
//*******************FBI Int*******************
new FBILobbyLeft, FBILobbyLeftBTN[2], FBILobbyRight, FBILobbyRightBTN[2], FBIPrivate[2], FBIPrivateBTN[2];
//*******************CNN Portones*******************
//new tvp, tvp1;
new tvp;
//*******************S.J Porton*******************
new sisporton;
//*******************portones Mafia Rusa*******************
new portoru;
//*******************Gobierno Portones*******************
/*new gobiernogate, gobiernogate1;*/
new depgateA, depgateB;
//****************************Hospital Portones****************************
new hospitalgate;
//****************************Rusa Portones****************************
new RejaRusa, RejaRusa2, RejaRusa3, BunkerRusos;
//****************************Yakuza Porton****************************
new yakuzagate;
//********************Reja Hitman Nueva HQ by Alexey******************
new porhit, porhitint;
//****************************Santana Rejas****************************
new SantanaReja;
//****************************alqaeda Rejas****************************
new AlqaedaReja;
//****************************VIP PORTON****************************
new rejavip;
//****************************Mecanicos Rejas****************************
new mecareja;
new EntradaTaller, EntradaTaller2; // Nuevo taller.
new SprayLS; //Spray al lado del taller.
//****************************Reja LCN****************************
new rejalcn; // Acceso inferior.
new rejalcn1, rejalcn2; // Acceso principal.
new rejalcn3; // Acceso secundario.
new portonbarlcn;
//****************************Rejas Peaje****************************
new peaje1, peaje2;
//*******************Autos De Facciones*******************
new SAPD_Vehicle[52];
new SEC_Vehicle[14];
new Mecanicos_Vehicle[7];
new FBI_Vehicle[16];
new SAEM_Vehicle[56];
new LSTV_Vehicle[6];
new Gobierno_Vehicle[12];
new Hitman_Vehicle[16];
new SJ_Vehicle[6];
new Groove_Vehicle[10];
new Ballas_Vehicle[18];
new Latin_Vehicle[8];
new Sureno_Vehicle[30];
new Rusa_Vehicle[9];
new LCN_Vehicle[15];
new Yakuza_Vehicle[13];
//new ALEPH_Vehicle[6];
new Santana_Vehicle[12];
//new Alqaeda_Vehicle[9];
new CDG_Vehicle[8];
//*******************Autos de Jobs*******************
new PizzaBike[26];
new TruckerVehicles[16];
new TaxiTrans[23];
new TBuses[8];
new CochesHeladero[15];
new AeroCar[10];
new TrenVEH[1];
//*******************OTROS*******************
new VortexVehicle[5];
new Rentbike[54];
new CarVIP[12];
// Coches Entorno.
new Entorno_Vehicle[110];
//*******************Sistema "Rent Bike"*******************
new RentTime[MAX_PLAYERS];
new IsaRent[MAX_PLAYERS];
new HireKey[MAX_PLAYERS];
new TypeOfRent[MAX_PLAYERS];
//*******************
new Carnada[MAX_PLAYERS];
new Lineas[MAX_PLAYERS];
new CreatedCars[100];
new Barricade[MAX_BARRICADES];
//*******************Mats Seller*******************
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new GGOffer[MAX_PLAYERS];
new GGPrice[MAX_PLAYERS];
new VIPOffer[MAX_PLAYERS];
new VIPPrice[MAX_PLAYERS];
new GGAmount[MAX_PLAYERS];
new FOffer[MAX_PLAYERS];
new FPrice[MAX_PLAYERS];
new FAmount[MAX_PLAYERS];
//*******************matrimonio*******************
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
//*******************
new JobDuty             [MAX_PLAYERS];
new PuedeP[MAX_PLAYERS];
//*******************Petition*******************
new Petition_ID[MAX_PLAYERS];
new NumBuy[MAX_PLAYERS], NumSeller[MAX_PLAYERS], NumPrice[MAX_PLAYERS];
new See_MP[MAX_PLAYERS];
new See_SMS[MAX_PLAYERS];
new See_FAM[MAX_PLAYERS];
new See_FRC[MAX_PLAYERS];
new PayDayLeft = 60;
new PaydayOn = 0;
new PayDaySecond = 120;
new CraftOffer[MAX_PLAYERS], CraftId[MAX_PLAYERS], CraftMats[MAX_PLAYERS], CraftName[MAX_PLAYERS][50];
new Blinded[MAX_PLAYERS], Tied[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new AdminChat[MAX_PLAYERS];
new AdminChatAvisos[MAX_PLAYERS]; // Canal de muertes.
new advisorchat[MAX_PLAYERS];
new DrugFarming[MAX_PLAYERS];
new nod = 0;
new Editing[MAX_PLAYERS];
//*******************Hitman*******************
new HitOffer[MAX_PLAYERS];
new HitToGet[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
//*******************Security comands spam*******************
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new WhoFind[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new RequestingBackup[MAX_PLAYERS];
new ReqF_Faction[MAX_PLAYERS];
new ReqF_Name[MAX_PLAYERS][32];
new Seatbelt[MAX_PLAYERS];
new FreezeLast[MAX_PLAYERS];
new Misile_Launcher;
new PuertaH1;
new PuertaH2;
new HaciaArriba = 0;
new HaciaAbajo = 0;
new TotalDM, TotalTDM, PlayersRed, PlayersBlue, TotalDM2, TRedKills, TBlueKills;
//new Ganzuas[MAX_PLAYERS];
new Interview = 0;
new nonewbie = 0;
new Interviewer[32] = "Nadie";
new Tax = 0;
new TaxValue = 0;
new FondosCNN = 0;
new TaxCNN = 0;
new Jackpot = 0;
new Blood = 1000;
new Fuel = 200;
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new InLive = 0;
new Medics = 0;
new MedicCall = 999;
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCall = 999;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new PilotoDuty[MAX_PLAYERS];
new TreneroDuty[MAX_PLAYERS];
new Bus_Route[MAX_PLAYERS];
new Avion_Route[MAX_PLAYERS];
new Tren_Route[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new RStep[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new Paquetes[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PrecioLicencia[MAX_PLAYERS];
new NombreLicencia[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new Autorizado[MAX_PLAYERS];
new Vigilando[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new Situacion[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new TazerTimeout[MAX_PLAYERS];
new pTazer[MAX_PLAYERS];
new pTazerReplace[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS char];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gMusic[MAX_PLAYERS];
new gFam[MAX_PLAYERS]; // Familias.
new gRel[MAX_PLAYERS]; // Religiones.
new Spectate[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new noac = 0;
new nofac = 0;
new iAdverTimer;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new realtime = 1;
new wtime = 16;
new callcost = 2; //20 seconds
new timeshift = -1;
new shifthour;
new gTime;
new gWeather;
new WeatherCalling;
new explevel = 4;
new cchargetime = 30;
new txtcost = 1;
new Text:TiempoD, Text:FechaD;
forward Clock(playerid);
//*******************
new pCurrentWeapon[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new UnidentifedCall[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
new PlayerIsSweeping[MAX_PLAYERS];
//***sistema muebles***
//new ObjetoUsar[MAX_PLAYERS];
//new IDObjetoUsar[MAX_PLAYERS];
//new ObjetoUsarEnCasa[MAX_PLAYERS];
//new Objeto_Por_Jugador[MAX_PLAYERS];
//new MueblesObj = mS_INVALID_LISTID;
//*******************Drugs System*******************
new CrackOffer[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new PotOffer[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
//*******************Sell spray*******************
new SprayOffer[MAX_PLAYERS];
new SprayPrice[MAX_PLAYERS];
new SprayGram[MAX_PLAYERS];
//*******************
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
//*******************Bartender Var*******************
new DrinkOffer[MAX_PLAYERS];
//*******************Rob Sys.*******************
new TelfRob[MAX_PLAYERS];
//*******************
//******* Estado /estado **********
new Text3D:estado[MAX_PLAYERS];
//********************************
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new PlayerNeedsHelp[MAX_PLAYERS];
new PlayerDuda[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new RegText[MAX_PLAYERS];
new RegConfig[MAX_PLAYERS];
new RadioOn[MAX_PLAYERS];
new gRadio[MAX_PLAYERS];
new NOPTrigger[MAX_PLAYERS];


//*******************Factura*******************
new Facturing[MAX_PLAYERS];
new fPay[MAX_PLAYERS];
new fDest[MAX_PLAYERS];
new fFacturer[MAX_PLAYERS];

new Refueling[MAX_PLAYERS];

stock HorseInfo(Text:horseid)
{
	TextDrawFont(horseid, 4);
	TextDrawColor(horseid,0xFFFFFFFF);
	TextDrawTextSize(horseid,64,64);
}

stock HorseNumInfo(Text:horsenumid)
{
	TextDrawFont(horsenumid, 4);
	TextDrawColor(horsenumid,0xFFFFFFFF);
	TextDrawTextSize(horsenumid,32,32);
}
stock Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}


Float: player_get_speed(playerid) {

	new
		Float: Floats[3];

	GetVehicleVelocity(GetPlayerVehicleID(playerid), Floats[0], Floats[1], Floats[2]);
	return floatsqroot(Floats[0] * Floats[0] + Floats[1] * Floats[1] + Floats[2] * Floats[2]) * 150;
}

Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
	new Float:d;
	d += floatpower(x1-x2, 2.0 );
	d += floatpower(y1-y2, 2.0 );
	d += floatpower(z1-z2, 2.0 );
	d = floatsqroot(d);
	return d;
}

stock ShowEditMenu(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid]))
	{
 		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
	}
	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);

    new stringg[512];
    format(stringg, sizeof(stringg), "%sParte (%s)\n", stringg, HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
	format(stringg, sizeof(stringg), "%sOffset X (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosX]*100));
	format(stringg, sizeof(stringg), "%sOffset Y (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosY]*100));
	format(stringg, sizeof(stringg), "%sOffset Z (%f)\n", stringg,(PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ]*100));
	format(stringg, sizeof(stringg), "%sRotación X (%f)\n", stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotX]);
	format(stringg, sizeof(stringg), "%sRotación Y (%f)\n", stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotY]);
	format(stringg, sizeof(stringg), "%sRotación Z (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ]);
    format(stringg, sizeof(stringg), "%sTamaño X (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX]);
    format(stringg, sizeof(stringg), "%sTamaño Y (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY]);
    format(stringg, sizeof(stringg), "%sTamaño Z (%f)\n" ,stringg, PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
	format(stringg, sizeof(stringg), "%s{41FF2F}Editor Personalizado", stringg);
	SafeDialogEx(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "{00C200}Toys Menu: {FFFFFF}Editar", stringg, "Seleccionar", "Cancelar");
}

new duda[MAX_PLAYERS];
new NewUsed[MAX_PLAYERS];

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new SpikeStrips[10][Spikes];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacket"},
{"Amberjack"},
{"Grouper"},
{"Red Snapper"},
{"Pants"},
{"Trout"},
{"Blue Marlin"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Bracko"},
{"Pike"},
{"Sail Fish"},
{"Garbage"},
{"Tuna"},
{"Eel"},
{"Dolphin"},
{"Shark"},
{"Turtle"},
{"Catfish"},
{"Pinesh"},
{"Swordfish"}
};


new Float:gDrugFarmVar[26][3] = {
{-329.9473,-1546.8303,16.5088},
{-238.7265,-1550.9426,5.5662},
{-215.6200,-1470.1005,8.7760},
{-319.3702,-1470.6312,13.4312},
{-270.5812,-1524.9031,5.9933},
{-207.0111,-1409.1978,6.1155},
{-178.6453,-1336.4446,5.2979},
{-277.0877,-1320.9406,10.0194},
{-312.7250,-1395.8058,14.0090},
{-245.7635,-1389.6537,10.8602},
{-367.0341,-1325.6503,24.6299},
{-449.2534,-1292.4938,35.1390},
{-555.5693,-1300.1106,23.8840},
{-581.8622,-1388.9082,15.8646},
{-490.5540,-1396.2235,19.4736},
{-434.7711,-1373.1222,24.5922},
{-463.4444,-1323.4772,32.2922},
{-274.9396,-1399.3116,12.3800},
{-297.1110,-1486.1025,9.7200},
{-225.4650,-1521.3290,7.9898},
{-209.2659,-1399.4209,7.4207},
{-224.3870,-1331.5543,11.8013},
{-320.2910,-1363.3484,10.9542},
{-175.0605,-1402.3663,4.1178},
{-241.0710,-1373.2324,11.0997},
{-303.0374,-1491.5088,10.9854}
};

new Float:OOCJail[4][3] = {
{-3618.4873,-2337.7820,0.1042},
{-3585.2751,-2335.5542,0.2385},
{-3578.6624,-2300.2500,0.1042},
{-3613.5156,-2297.7690,0.1042}
};

new Float:SAEMPrisonSpawns[4][3] = {
{181.6174,1953.3961,3867.2429},
{190.7607,1951.7330,3867.2358},
{199.2319,1951.4128,3867.2358},
{173.4761,1951.0363,3867.2429}
};

new Float:WarrantJail[2][3] = {
{1444.54,-1512.901,1604.05},
{1444.54,-1518.251,1604.05}
};

new Float:PrisonDillmore[2][3] = {
{1444.55,-1512.901000,1604.03},
{318.7299,317.0638,999.1484}
};

/*new Float:FBIPrisonSpawns[6][3] = { FUERA DE USO.
{1415.2723,-1548.9581,4340.1563},
{1422.5714,-1548.8588,4340.1563},
{1429.5242,-1549.0853,4340.1563},
{1428.2515,-1571.7660,4340.1563},
{1422.7365,-1570.9240,4340.1563},
{1414.3912,-1571.0795,4340.1563}
};*/

new Float:FBIPrisonSpawns[4][3] = {
{294.14,-1615.82,87.5},
{297.62,-1616.80,87.5},
{301.16,-1617.58,87.5},
{304.79,-1617.91,87.5}
};

new Float:LSPDPrisonSpawns[10][3] = {
{1558.819458,-1642.5,4985.22},
{1562.030151,-1642.5,4985.22},
{1565.201049,-1642.5,4985.22},
{1568.456665,-1642.5,4985.22},
{1571.5,-1646.192382,4985.22},
{1571.5,-1650.072753,4985.22},
{1567.978027,-1654.2,4985.22},
{1564.464477,-1654.2,4985.22},
{1561.536865,-1654.2,4985.22},
{1557.713378,-1653.2,4985.22}
};
				
//**************************************
//*******************Vehicle Names*******************

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

new VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","HotDog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

stock GetVehicleFriendlyName(vehicleid)
{
	new GVFNstring[56];
	format(GVFNstring, sizeof(GVFNstring), VehicleName[GetVehicleModel((vehicleid)-400)]);
	return GVFNstring;
}
stock GetVehicleNameEx(vehicleid) // Nuevo sistema de reconocimiento del modelo del coche. (Mejorado) -  Uso para velocimetro y /encontar. (GetVehicleFriendlyName).
{
 new name[32];
 switch(GetVehicleModel(vehicleid))
 {
   case 400: format(name,32,"Landstalker");
   case 401: format(name,32,"Bravura");
   case 402: format(name,32,"Buffalo");
   case 403: format(name,32,"Linerunner");
   case 404: format(name,32,"Perenniel");
   case 405: format(name,32,"Sentinel");
   case 406: format(name,32,"Dumper");
   case 407: format(name,32,"Firetruck");
   case 408: format(name,32,"Trashmaster");
   case 409: format(name,32,"Stretch");
   case 410: format(name,32,"Manana");
   case 411: format(name,32,"Infernus");
   case 412: format(name,32,"Voodoo");
   case 413: format(name,32,"Pony");
   case 414: format(name,32,"Mule");
   case 415: format(name,32,"Cheetah");
   case 416: format(name,32,"Ambulance");
   case 417: format(name,32,"Leviathan");
   case 418: format(name,32,"Moonbeam");
   case 419: format(name,32,"Esperanto");
   case 420: format(name,32,"Taxi");
   case 421: format(name,32,"Washington");
   case 422: format(name,32,"Bobcat");
   case 423: format(name,32,"Mr Whoopee");
   case 424: format(name,32,"BF Injection");
   case 425: format(name,32,"Hunter");
   case 426: format(name,32,"Premier");
   case 427: format(name,32,"Enforcer");
   case 428: format(name,32,"Securicar");
   case 429: format(name,32,"Banshee");
   case 430: format(name,32,"Predator");
   case 431: format(name,32,"Bus");
   case 432: format(name,32,"Rhino");
   case 433: format(name,32,"Barracks");
   case 434: format(name,32,"Hotknife");
   case 435: format(name,32,"Article Trailer");
   case 436: format(name,32,"Previon");
   case 437: format(name,32,"Coach");
   case 438: format(name,32,"Cabbie");
   case 439: format(name,32,"Stallion");
   case 440: format(name,32,"Rumpo");
   case 441: format(name,32,"RC Bandit");
   case 442: format(name,32,"Romero");
   case 443: format(name,32,"Packer");
   case 444: format(name,32,"Monster");
   case 445: format(name,32,"Admiral");
   case 446: format(name,32,"Squallo");
   case 447: format(name,32,"Seasparrow");
   case 448: format(name,32,"Pizzaboy");
   case 449: format(name,32,"Tram");
   case 450: format(name,32,"Article Trailer 2");
   case 451: format(name,32,"Turismo");
   case 452: format(name,32,"Speeder");
   case 453: format(name,32,"Reefer");
   case 454: format(name,32,"Tropic");
   case 455: format(name,32,"Flatbed");
   case 456: format(name,32,"Yankee");
   case 457: format(name,32,"Caddy");
   case 458: format(name,32,"Solair");
   case 459: format(name,32,"Berkley's RC Van");
   case 460: format(name,32,"Skimmer");
   case 461: format(name,32,"PCJ-600");
   case 462: format(name,32,"Faggio");
   case 463: format(name,32,"Freeway");
   case 464: format(name,32,"RC Baron");
   case 465: format(name,32,"RC Raider");
   case 466: format(name,32,"Glendale");
   case 467: format(name,32,"Oceanic");
   case 468: format(name,32,"Sanchez");
   case 469: format(name,32,"Sparrow");
   case 470: format(name,32,"Patriot");
   case 471: format(name,32,"Quad");
   case 472: format(name,32,"Coastguard");
   case 473: format(name,32,"Dinghy");
   case 474: format(name,32,"Hermes");
   case 475: format(name,32,"Sabre");
   case 476: format(name,32,"Rustler");
   case 477: format(name,32,"ZR-350");
   case 478: format(name,32,"Walton");
   case 479: format(name,32,"Regina");
   case 480: format(name,32,"Comet");
   case 481: format(name,32,"BMX");
   case 482: format(name,32,"Burrito");
   case 483: format(name,32,"Camper");
   case 484: format(name,32,"Marquis");
   case 485: format(name,32,"Baggage");
   case 486: format(name,32,"Dozer");
   case 487: format(name,32,"Maverick");
   case 488: format(name,32,"SAN News Maverick");
   case 489: format(name,32,"Rancher");
   case 490: format(name,32,"FBI Rancher");
   case 491: format(name,32,"Virgo");
   case 492: format(name,32,"Greenwood");
   case 493: format(name,32,"Jetmax");
   case 494: format(name,32,"Hotring Racer");
   case 495: format(name,32,"Sandking");
   case 496: format(name,32,"Blista Compact");
   case 497: format(name,32,"Police Maverick");
   case 498: format(name,32,"Boxville");
   case 499: format(name,32,"Benson");
   case 500: format(name,32,"Mesa");
   case 501: format(name,32,"RC Goblin");
   case 502: format(name,32,"Hotring Racer");
   case 503: format(name,32,"Hotring Racer");
   case 504: format(name,32,"Bloodring Banger");
   case 505: format(name,32,"Rancher");
   case 506: format(name,32,"Super GT");
   case 507: format(name,32,"Elegant");
   case 508: format(name,32,"Journey");
   case 509: format(name,32,"Bike");
   case 510: format(name,32,"Mountain Bike");
   case 511: format(name,32,"Beagle");
   case 512: format(name,32,"Cropduster");
   case 513: format(name,32,"Stuntplane");
   case 514: format(name,32,"Tanker");
   case 515: format(name,32,"Roadtrain");
   case 516: format(name,32,"Nebula");
   case 517: format(name,32,"Majestic");
   case 518: format(name,32,"Buccaneer");
   case 519: format(name,32,"Shamal");
   case 520: format(name,32,"Hydra");
   case 521: format(name,32,"FCR-900");
   case 522: format(name,32,"NRG-500");
   case 523: format(name,32,"HPV1000");
   case 524: format(name,32,"Cement Truck");
   case 525: format(name,32,"Towtruck");
   case 526: format(name,32,"Fortune");
   case 527: format(name,32,"Cadrona");
   case 528: format(name,32,"FBI Truck");
   case 529: format(name,32,"Willard");
   case 530: format(name,32,"Forklift");
   case 531: format(name,32,"Tractor");
   case 532: format(name,32,"Combine Harvester");
   case 533: format(name,32,"Feltzer");
   case 534: format(name,32,"Remington");
   case 535: format(name,32,"Slamvan");
   case 536: format(name,32,"Blade");
   case 537: format(name,32,"Freight");
   case 538: format(name,32,"Brownstreak");
   case 539: format(name,32,"Vortex");
   case 540: format(name,32,"Vincent");
   case 541: format(name,32,"Bullet");
   case 542: format(name,32,"Clover");
   case 543: format(name,32,"Sadler");
   case 544: format(name,32,"Firetruck LA");
   case 545: format(name,32,"Hustler");
   case 546: format(name,32,"Intruder");
   case 547: format(name,32,"Primo");
   case 548: format(name,32,"Cargobob");
   case 549: format(name,32,"Tampa");
   case 550: format(name,32,"Sunrise");
   case 551: format(name,32,"Merit");
   case 552: format(name,32,"Utility Van");
   case 553: format(name,32,"Nevada");
   case 554: format(name,32,"Yosemite");
   case 555: format(name,32,"Windsor");
   case 556: format(name,32,"Monster A");
   case 557: format(name,32,"Monster B");
   case 558: format(name,32,"Uranus");
   case 559: format(name,32,"Jester");
   case 560: format(name,32,"Sultan");
   case 561: format(name,32,"Stratum");
   case 562: format(name,32,"Elegy");
   case 563: format(name,32,"Raindance");
   case 564: format(name,32,"RC Tiger");
   case 565: format(name,32,"Flash");
   case 566: format(name,32,"Tahoma");
   case 567: format(name,32,"Savanna");
   case 568: format(name,32,"Bandito");
   case 569: format(name,32,"Freight Flat Trailer");
   case 570: format(name,32,"Streak Trailer");
   case 571: format(name,32,"Kart");
   case 572: format(name,32,"Mower");
   case 573: format(name,32,"Dune");
   case 574: format(name,32,"Sweeper");
   case 575: format(name,32,"Broadway");
   case 576: format(name,32,"Tornado");
   case 577: format(name,32,"AT400");
   case 578: format(name,32,"DFT-30");
   case 579: format(name,32,"Huntley");
   case 580: format(name,32,"Stafford");
   case 581: format(name,32,"BF-400");
   case 582: format(name,32,"Newsvan");
   case 583: format(name,32,"Tug");
   case 584: format(name,32,"Petrol Trailer");
   case 585: format(name,32,"Emperor");
   case 586: format(name,32,"Wayfarer");
   case 587: format(name,32,"Euros");
   case 588: format(name,32,"Hotdog");
   case 589: format(name,32,"Club");
   case 590: format(name,32,"Freight Box Trailer");
   case 591: format(name,32,"Article Trailer 3");
   case 592: format(name,32,"Andromada");
   case 593: format(name,32,"Dodo");
   case 594: format(name,32,"RC Cam");
   case 595: format(name,32,"Launch");
   case 596: format(name,32,"Police Car (LSPD)");
   case 597: format(name,32,"Police Car (SFPD)");
   case 598: format(name,32,"Police Car (LVPD)");
   case 599: format(name,32,"Police Ranger");
   case 600: format(name,32,"Picador");
   case 601: format(name,32,"S.W.A.T.");
   case 602: format(name,32,"Alpha");
   case 603: format(name,32,"Phoenix");
   case 604: format(name,32,"Glendale Shit");
   case 605: format(name,32,"Sadler Shit");
   case 606: format(name,32,"Baggage Trailer A");
   case 607: format(name,32,"Baggage Trailer B");
   case 608: format(name,32,"Tug Stairs Trailer");
   case 609: format(name,32,"Boxville");
   case 610: format(name,32,"Farm Trailer");
   case 611: format(name,32,"Utility Trailer");
 }
 return name;
}
forward KickxD(playerid);
forward AutoJailMG(playerid); // Dar Jail por MG en /ad.
forward AutoJailAbuso(playerid); // Dar Jail por mal uso del /n.

new Peds[217][1] = {
{299},
{288},
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},
{247},
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},
{291},
{292},
{293},
{187},
{296},
{297},
{298},
{299}
};

function LoadUser_data(playerid,name[],value[])
{
    INI_Int("TarjetaCredito",Info[playerid][pTarjetaCredito]);
    INI_Int("Level",Info[playerid][pLevel]);
    INI_Int("AdminNivelZC",Info[playerid][pAdminZC]);
    INI_Int("AdminZC",Info[playerid][pLvlAdminZC]);
    INI_Int("BanAppealer",Info[playerid][pBanAppealer]);
    INI_Int("FactionModerator",Info[playerid][pFactionModerator]);
    INI_Int("ModStaff",Info[playerid][pModStaff]);
    INI_Int("GangModerator",Info[playerid][pGangModerator]);
    INI_Int("Helper",Info[playerid][pHelper]);
    INI_Int("ConnectedTime",Info[playerid][pConnectTime]);
    INI_Int("Registered",Info[playerid][pReg]);
    INI_Int("Sex",Info[playerid][pSex]);
    INI_Int("Age",Info[playerid][pAge]);
    INI_Int("Origin",Info[playerid][pOrigin]);
    INI_Int("Respect",Info[playerid][pExp]);
    INI_Int("Money",Info[playerid][pCash]);
	SetPVarInt(playerid, "Cash",Info[playerid][pCash]);
    INI_Int("Bank",Info[playerid][pAccount]);
    INI_String("IP", Info[playerid][pIP], 32);
    INI_Int("Kills",Info[playerid][pKills]);
    INI_Int("Deaths",Info[playerid][pDeaths]);
    INI_Int("Arrested",Info[playerid][pArrested]);
    INI_Int("JailAdmin",Info[playerid][pJailAdmin]);
    INI_Int("LottoNr",Info[playerid][pLottoNr]);
    INI_Int( "Negocio",Info[playerid][pPbizzkey]);
    INI_Int( "Skinn",Info[playerid][pgskin]);
    INI_Int( "robita",Info[playerid][probita]);
    INI_String( "DNIName",Info[playerid][pDNIName], 32);
    INI_Int( "DNIFalse",Info[playerid][pDNIFalse]);
    INI_Int("Job",Info[playerid][pJob]);
    INI_Int("NewMuted",Info[playerid][pNMute]);
    INI_Int("NewMutedTotal",Info[playerid][pNMuteTotal]);
    INI_Int("Warn",Info[playerid][pWarn]);
    INI_Int("WRestricted",Info[playerid][pWRestricted]);
    INI_Int("Jailed",Info[playerid][pJailed]);
    INI_Int("JailTime",Info[playerid][pJailTime]);
    INI_String("JailedBy",Info[playerid][pJailedBy], MAX_PLAYER_NAME);
    INI_String("JailReason",Info[playerid][pJailReason], 64);
    INI_String("MyAD",Info[playerid][pMyAD], 120);
    INI_Int("Materials",Info[playerid][pMats]);
    INI_Int("Packages",Info[playerid][pPackages]);
    SetPVarInt(playerid, "Packages",Info[playerid][pPackages]);
    INI_Int("Drugs",Info[playerid][pDrugs]);
    INI_Int("Cosecha",Info[playerid][pCosecha]);
    INI_Int("Crack",Info[playerid][pCrack]);
    INI_Int("Pot",Info[playerid][pPot]);
    INI_Int("Ganzuas",Info[playerid][pGanzuas]);
    INI_Int("Crates",Info[playerid][pCrates]);
    INI_Int("Adic",Info[playerid][pAdiccion]);
    INI_Int("Religion",Info[playerid][pReligion]);
	INI_Int("LiderReligioso",Info[playerid][pLiderReligioso]);
    INI_Int("Leader",Info[playerid][pLeader]);
    INI_Int("Member",Info[playerid][pMember]);
    INI_Int("FMember",Info[playerid][pFMember]);
    INI_Int("Division",Info[playerid][pDivision]);
    INI_Int("Rank",Info[playerid][pRank]);
    INI_Int("Char",Info[playerid][pChar]);
    INI_Float("pHealth",Info[playerid][pHealth]);
    INI_Float("pArmour",Info[playerid][pArmour]);
    INI_Int("Team",Info[playerid][pTeam]);
    INI_Int("Model",Info[playerid][pModel]);
    INI_Int("PhoneNr",Info[playerid][pPnumber]);
    INI_Int("Sprunk",Info[playerid][pSprunk]);
    INI_Int("Phonebook",Info[playerid][pPhoneBook]);
    INI_Int("House",Info[playerid][pPhousekey]);
    INI_Int("House2",Info[playerid][pPhousekey2]);
    INI_Int("Propiedad",Info[playerid][pPhousekeyX]);
    INI_Int("Int", Info[playerid][pInt]);
    INI_Float("Pos_x",Info[playerid][pPos_x]);
    INI_Float("Pos_y",Info[playerid][pPos_y]);
    INI_Float("Pos_z",Info[playerid][pPos_z]);
    INI_Float("SPos_r",Info[playerid][pPos_r]);
    INI_Int("CarLic",Info[playerid][pCarLic]);
    INI_Int("FlyLic",Info[playerid][pFlyLic]);
    INI_Int("BoatLic",Info[playerid][pBoatLic]);
    INI_Int("GunLic",Info[playerid][pGunLic]);
    INI_Int("Gafas",Info[playerid][pGafas]);
    INI_Int("Tutorial",Info[playerid][pTut]);
    INI_Int("Test",Info[playerid][pTestTut]);
    INI_Int("VWorld",Info[playerid][pVW]);
    INI_Int("Lighter",Info[playerid][pLighter]);
    INI_Int("Cigarettes",Info[playerid][pCigarettes]);
    INI_Int("BanZC",Info[playerid][pBannedZC]);
    INI_Int("DisabledZC",Info[playerid][pDisabledZC]);
    INI_Int("BlockBug",Info[playerid][pBlockBug]);
    INI_Int("Multicuenta",Info[playerid][pMulticuenta]);
    INI_Int("BlockG",Info[playerid][pBlockG]);
    INI_Int("DNI",Info[playerid][pDNI]);
    INI_Int("VSkill",Info[playerid][pArmsSkill]);
    INI_Int("TSkill",Info[playerid][pTruckSkill]);
    INI_Int("SmugglerSkill",Info[playerid][pSmugSkill]);
    INI_Int("DrugsSkill",Info[playerid][pDrugsSkill]);
    INI_Int("SIDA",Info[playerid][pSIDA]);
    INI_Int("Cancer" ,Info[playerid][pCancer]);
    INI_Int("Epilepsia",Info[playerid][pEpilepsia]);
    INI_Int("Dengue",Info[playerid][pDengue]);
    INI_Int("FStyle",Info[playerid][pFStyle]);
    INI_Int("Busqueda",Info[playerid][pWantedLevel]);
    INI_Int("AntiSIDA",Info[playerid][pAntiSIDA]);
    INI_Int("AntiCancer",Info[playerid][pAntiCancer]);
    INI_Int("AntiEpilepsia",Info[playerid][pAntiEpilepsia]);
    INI_Int("Rent",Info[playerid][pRenting]);
    INI_Int("prMoney",Info[playerid][p_Pr_Money]);
    INI_Int("Rob",Info[playerid][pRob]);
    INI_Int("Premium",Info[playerid][pVIP]);
    INI_Int("Rol",Info[playerid][pROL]);
    INI_Int("FichasCash",Info[playerid][pPTR]);
    INI_Int("CarPremium",Info[playerid][pCarKey2]);
    INI_Int("BanDuda",Info[playerid][pBanDuda]);
    INI_Int("ReportMuted",Info[playerid][pRMuted]);
    INI_Int("ReportMutedTotal",Info[playerid][pRMutedTotal]);
    INI_Int("ReportMutedTime",Info[playerid][pRMutedTime]);
    INI_Int("Pasaporte",Info[playerid][pPasaporte]);
    INI_Int("Seguro",Info[playerid][pSeguro]);
    INI_Int("RadioP", Info[playerid][pRadio]);
    INI_Int("KHZ",Info[playerid][pRadioFreq]);
    INI_Int("Ipad",Info[playerid][pIpadMusic]);
    INI_Int("GiftTime",Info[playerid][pGiftTime]);
    INI_Int("Boombox", Info[playerid][pBoombox]);
    for( new m = 0; m < 13; m++ )
	{
	    new mStr[24];
		format( mStr, sizeof( mStr ), "Gun%d", m);
		INI_Int(mStr, Info[playerid][pWeapons][m]);
	}
    INI_Int("Acento",Info[playerid][pAccent]);
    INI_Int("Ingles",Info[playerid][pIngles]);
    INI_Int("Aleman",Info[playerid][pAleman]);
    INI_Int("Ruso",Info[playerid][pRuso]);
    INI_Int("Japones",Info[playerid][pJapones]);
    INI_Int("Italiano",Info[playerid][pItaliano]);
    INI_Int("Arabe",Info[playerid][pArabe]);
    INI_Int("InglesSkill",Info[playerid][pInglesSkill]);
    INI_Int("AlemanSkill",Info[playerid][pAlemanSkill]);
    INI_Int("RusoSkill",Info[playerid][pRusoSkill]);
    INI_Int("JaponesSkill",Info[playerid][pJaponesSkill]);
    INI_Int("ItalianoSkill",Info[playerid][pItalianoSkill]);
    INI_Int("ArabeSkill",Info[playerid][pArabeSkill]);
    INI_Int("PTokens",Info[playerid][pPaintTokens]);
    INI_Int("Undercover",Info[playerid][pUndercover]);
    INI_Int("Head",Info[playerid][pHead]);
    INI_Int("TaxiLicense", Info[playerid][pTaxiLicense]);
    INI_Int("Hospital",Info[playerid][pHospital]);
    INI_Int("CHits",Info[playerid][pCHits]);
    INI_Int("FHits",Info[playerid][pFHits]);
    INI_Int("Spraycan",Info[playerid][pSpraycan]);
    INI_Int("Married",Info[playerid][pMarried]);
    INI_String("MarriedTo",Info[playerid][pMarriedTo], MAX_PLAYER_NAME);
    INI_String("ContractBy",Info[playerid][pContractBy], MAX_PLAYER_NAME);
    INI_String("ContractDetail",Info[playerid][pContractDetail], 64);
    INI_Int("Contract",Info[playerid][pContract]);
    INI_Int("pWExists",Info[playerid][pWExists]);
    INI_Float("pWX",Info[playerid][pWX]);
    INI_Float("pWY",Info[playerid][pWY]);
    INI_Float("pWZ",Info[playerid][pWZ]);
    INI_Int("pWVW",Info[playerid][pWVW]);
    INI_Int("pWInt",Info[playerid][pWInt]);
    INI_Int("pWValue",Info[playerid][pWValue]);
    INI_Int("pWSeeds",Info[playerid][pWSeeds]);
    INI_Int("PayEx",Info[playerid][YaCobre]);
    INI_Int("AdMuted",Info[playerid][pADMute]);
    INI_Int("AdMutedTotal",Info[playerid][pADMuteTotal]);
    INI_String("Warrants",Info[playerid][pWarrant], 128);
    INI_Int("JudgeJailTime",Info[playerid][pJudgeJailTime]);
    INI_Int("JudgeJailType",Info[playerid][pJudgeJailType]);
    INI_Int("BeingSentenced",Info[playerid][pBeingSentenced]);
    INI_Int("ProbationTime",Info[playerid][pProbationTime]);
    INI_Int("Fishes" ,Info[playerid][pFishes]);
    INI_Int("FishSkill",Info[playerid][pFishSkill]);
    INI_Int("BiggestFish",Info[playerid][pBiggestFish]);
    INI_Int("RewardsHours",Info[playerid][pRHours]);
    INI_Int("ADTime",Info[playerid][pADTime]);
    INI_Int("Otros",Info[playerid][pOther]);
    INI_Int("GGTokens",Info[playerid][pGTokens]);
    INI_Int("HDExp",Info[playerid][pDobleExp]);
    INI_Int("DPHoras",Info[playerid][pDPHours]);
    INI_Int("DPTiempo",Info[playerid][pDPTime]);
    INI_Int("DPTotal",Info[playerid][pDPTotal]);
    INI_Int("Order",Info[playerid][pOrder]);
    INI_Int("TempVIP",Info[playerid][pTempVIP]);
    INI_Int("VIPInviteDay",Info[playerid][pVIPInviteDay]);
    INI_Int("BuddyInvite",Info[playerid][pBuddyInvited]);
    INI_Int("VTokens",Info[playerid][pVTokens]);
    INI_Int("Job2",Info[playerid][pJob2]);
    INI_Int("TypeSpawn",Info[playerid][pTypeSpawn]);
    INI_Int("ShopTech",Info[playerid][pShopTech]);
    INI_Int("Status",Info[playerid][pEstado]);
    INI_String("Estado",Info[playerid][pEstadoX], 20);
    INI_Int("DayVIP",Info[playerid][pVIPDateD]);
    INI_Int("MonthVIP",Info[playerid][pVIPDateM]);
    INI_Int("IDRegalo",Info[playerid][pRegalo]);
    INI_Int("Screwdrivers", Info[playerid][pScrewdriver]);
    INI_Int("Firstaid", Info[playerid][pFirstaid]);
    INI_Int("CamOculta", Info[playerid][pSurveillance]);
    INI_Int("PuntosRol",Info[playerid][pPuntosRol]);
    INI_Int("TakeAway",Info[playerid][pTakeAway]);
	/*for( new a = 0; a < 11; a++ )
	{
 	new mStr[24];
		format( mStr, sizeof( mStr ), "Mueble%d", a);
		INI_Int(mStr, Info[playerid][pMuebles][a]);
	}*/
    for(new v = 0; v < MAX_PLAYERTOYS; v++)
    {
     new string[180]; //128.
		format( string, sizeof( string ), "pt%dModelID", v);
		INI_Int(string, PlayerToyInfo[playerid][v][ptModelID]);
		format(string, 128, "pt%dBone",v);
		INI_Int(string, PlayerToyInfo[playerid][v][ptBone]);
		format(string, 128, "pt%dPosX",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosX]);
		format(string, 128, "pt%dPosY",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosY]);
		format(string, 128, "pt%dPosZ",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosZ]);
		format(string, 128, "pt%dRotX",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotX]);
		format(string, 128, "pt%dRotY",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotY]);
		format(string, 128, "pt%dRotZ",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotZ]);
		format(string, 128, "pt%dSizX",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleX]);
		format(string, 128, "pt%dSizY",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleY]);
		format(string, 128, "pt%dSizZ",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleZ]);
    }
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        new string[128];
        format(string, 128, "pv%dPosX",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosX]);
        format(string, 128, "pv%dPosY",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosY]);
        format(string, 128, "pv%dPosZ",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosZ]);
        format(string, 128, "pv%dPosAngle",v);
        INI_Float(string,PlayerVehicleInfo[playerid][v][pvPosAngle]);
		format(string, 128, "pv%dVirtualW",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvVW]);
		format(string, 128, "pv%dModelId",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvModelId]);
		format(string, 128, "pv%dLock",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvLock]);
		format(string, 128, "pv%dLocked",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvLocked]);
		format(string, 128, "pv%dPaintJob",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvPaintJob]);
		format(string, 128, "pv%dColor1",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvColor1]);
		format(string, 128, "pv%dColor2",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvColor2]);
		format(string, 128, "pv%dPrice",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvPrice]);
		format(string, 128, "pv%dTicket",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvTicket]);
		format(string, 128, "pv%dWeapon0",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][0]);
		format(string, 128, "pv%dWeapon1",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][1]);
		format(string, 128, "pv%dWeapon2",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][2]);
		format(string, 128, "pv%dWeapon3",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][3]);
		format(string, 128, "pv%dWeapon4",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][4]);
		format(string, 128, "pv%dWeapon5",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][5]);
		format(string, 128, "pv%dWeapon6",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][6]);
		format(string, 128, "pv%dWeapon7",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWeapons][7]);
		format(string, 128, "pv%dWepUpgrade",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvWepUpgrade]);
		format(string, 128, "pv%dFuel",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvFuel]);
		format(string, 128, "pv%dImpound",v);
		INI_Int(string,PlayerVehicleInfo[playerid][v][pvImpounded]);
		format(string, 128, "pv%dHealth",v);
		INI_Float(string,PlayerVehicleInfo[playerid][v][pvHealth]);
		for(new m = 0; m < MAX_MODS; m++)
		{
		    format(string, 128, "pv%dMod%d", v, m);
		    INI_Int(string,PlayerVehicleInfo[playerid][v][pvMods][m]);
		}
		INI_String("Agenda1",Info[playerid][pAgenda1], 40);
		INI_String("Agenda2",Info[playerid][pAgenda2], 40);
		INI_String("Agenda3",Info[playerid][pAgenda3], 40);
		INI_String("Agenda4",Info[playerid][pAgenda4], 40);
		INI_String("Agenda5",Info[playerid][pAgenda5], 40);
		INI_String("Agenda6",Info[playerid][pAgenda6], 40);
		INI_String("Agenda7",Info[playerid][pAgenda7], 40);
		INI_String("Agenda8",Info[playerid][pAgenda8], 40);
		INI_String("Agenda9",Info[playerid][pAgenda9], 40);
		INI_String("Agenda10",Info[playerid][pAgenda10], 40);
		INI_Int("Libreta",Info[playerid][pLibreta]);
		INI_String("BlocNotas",Info[playerid][pBlocNotas], 128);
		INI_Int("ContactoAgendar",Info[playerid][pContactoAgendar]);
		INI_Int("NumeroLibreta1",Info[playerid][pNumeroLibreta1]);
		INI_Int("NumeroLibreta2",Info[playerid][pNumeroLibreta2]);
		INI_Int("NumeroLibreta3",Info[playerid][pNumeroLibreta3]);
		INI_Int("NumeroLibreta4",Info[playerid][pNumeroLibreta4]);
		INI_Int("NumeroLibreta5",Info[playerid][pNumeroLibreta5]);
		INI_Int("NumeroLibreta6",Info[playerid][pNumeroLibreta6]);
		INI_Int("NumeroLibreta7",Info[playerid][pNumeroLibreta7]);
		INI_Int("NumeroLibreta8",Info[playerid][pNumeroLibreta8]);
		INI_Int("NumeroLibreta9",Info[playerid][pNumeroLibreta9]);
		INI_Int("NumeroLibreta10",Info[playerid][pNumeroLibreta10]);
    }
    return 0;
}

INI_Exist(nickname[])
{
  new tmp[128];
  format(tmp,sizeof(tmp),USERFILE, nickname);
  return fexist(tmp);
}

stock SaveVarBusiness(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new bfile[64];
			format(bfile, 64, NEGOCIOS_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"NegocioData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new bfile[64];
			format(bfile, 64, NEGOCIOS_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"NegocioData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock SaveVarLideres(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new lfile[24];
			format(lfile, 24, LIDERES_FILE, id);
			new INI:File = INI_Open(lfile);
			INI_SetTag(File,"LideresData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new lfile[24];
			format(lfile, 24, LIDERES_FILE, id);
			new INI:File = INI_Open(lfile);
			INI_SetTag(File,"LideresData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock SaveVarGarages(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new gfile[64];
			format(gfile, 64, GARAGES_FILE, id);
			new INI:File = INI_Open(gfile);
			INI_SetTag(File,"GarageData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new gfile[64];
			format(gfile, 64, GARAGES_FILE, id);
			new INI:File = INI_Open(gfile);
			INI_SetTag(File,"GarageData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock SaveVarHouses(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new bfile[64];
			format(bfile, 64, PROPIEDADES_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"PropiedadData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new bfile[64];
			format(bfile, 64, PROPIEDADES_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"PropiedadData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock UserPath(playerid)
{
    new string[128],playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid,playername,sizeof(playername));
    format(string,sizeof(string),USERFILE,playername);
    return string;
}

function LoadUser_pass(playerid,name[],value[])
{
    INI_Int("Password",Info[playerid][pKey]);
    return 1;
}

//Credits to Dracoblue*******************
stock udb_hash(buf[])
{
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
	{
        s1 = (s1 + buf[n]) % 65521;
        s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

RespawnNearbyVehicles(playerid, Float:radi)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i=1; i<MAX_VEHICLES; i++)
    {
        if(GetVehicleModel(i))
        {
            new Float:posx, Float:posy, Float:posz;
            new Float:tempposx, Float:tempposy, Float:tempposz;
            GetVehiclePos(i, posx, posy, posz);
            tempposx = (posx - x);
            tempposy = (posy - y);
            tempposz = (posz - z);
            if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
            {
                SetVehicleToRespawn(i);
            }
        }
    }
}

vehicle_lock_doors(vehicle)
{
	new
		vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

vehicle_unlock_doors(vehicle)
{
	new
		vParamArr[7];
	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

SurfingCheck(vehicleid)
{
	foreach(Player, p)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
		    SetPVarFloat(p, "tempPosX", x);
			SetPVarFloat(p, "tempPosY", x);
			SetPVarFloat(p, "tempPosZ", x);

			SetTimerEx("SurfingFix", 2000, 0, "i", p);
		}
	}
}

function SurfingFix(playerid)
{
	SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
	DeletePVar(playerid, "tmpPosX");
	DeletePVar(playerid, "tmpPosY");
	DeletePVar(playerid, "tmpPosZ");

	return 1;
}

main()
{
    repeat severTimers();
    repeat severTimers2();
    repeat KickJail();
    repeat Anticheat();
    repeat SyncUp();
    repeat saveAccounts();
    repeat VehicleUpdate();
    repeat ServerMicrobeat();
    repeat Mensajes();
    repeat EMSUpdate();
    repeat SpecUpdate();
	repeat AntiAFK(); // AntiAFK. - playerTabbedLoop
	print(" ");
	print(" ");
	print(SERVER_GM_TEXT);
	print("---------------------------------------");
 	print("Iniciando GAMEMODE INFRANET-RP");
	print("---------------------------------------");
	print(" ");
}

function DollahScoreUpdate()
{
	foreach(Player, i){
		if(IsPlayerConnected(i)){
			SetPlayerScore(i, Info[i][pLevel]);
		}
	}
	return 1;
}

//*******************
function GetColorCode(clr[]) {
	new color = -1;
	if (isnumeric(clr))
	{
		color = strval(clr);
		return color;
	}
	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvPaintJob] = paintjobid;
	}
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor1] = color1;
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor2] = color2;
	}
    return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid ){
	if( enterexit == 0 ){
		if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1) {
			UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
		}
		SetPlayerInterior( playerid, 0);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!(1 <= GetPlayerInterior(playerid) <= 3))
	{
		//new szMessage[128];
		format(szMessage, sizeof(szMessage), "SL-RP: %s tal vez esté usando hacks de modificaciones de autos (aplicando: %s %s en un %s).", GetPlayerNameEx(playerid), partName(componentid), partType(GetVehicleComponentType(componentid)), GetVehicleNameEx(vehicleid));
		ABroadCast(COLOR_GENERAL, szMessage, 2);
	}
	//**security**
	#if defined AntiCrash 1
if((IsPlayerInRangeOfPoint(playerid,2,617.5303,-1.9900,1000.651) && GetPlayerInterior(playerid) == 1) ||
(IsPlayerInRangeOfPoint(playerid,2,616.7830,-74.8150,997.772) && GetPlayerInterior(playerid) == 2) ||
(IsPlayerInRangeOfPoint(playerid,2,615.2862,-124.2390,997.697) && GetPlayerInterior(playerid) == 3)) return 1;
new Menu[1024];
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
switch(componentid)
{
case 1008..1010: if(AutoProhibido(playerid)) RemoveVehicleComponent(vehicleid, componentid);
}
if(!AutoCrash(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Usted ha sido expulsado por posible cheat de Car Crasher.  \n", 1024);
strcat(Menu, "{FFFFFF} Si es un error, evite tunear su auto con lo último que le puso.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por FireSecurity. Razón: Posible Crasher.", Nombre);
//SendClientMessageToAll(Gris, Texto);
ABroadCast(Gris, Texto,5000);
Kick(playerid);
#endif
	//************
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
new model = GetVehicleModel( vehicleid );
    if (model == 400)
    {
        GameTextForPlayer(playerid,"~g~Landstalker",3000,1);
	}
    if (model == 401)
    {
        GameTextForPlayer(playerid,"~g~Bravura",3000,1);
    }
    if (model == 402)
    {
        GameTextForPlayer(playerid,"~g~Buffalo",3000,1);
    }
    if (model == 403)
    {
        GameTextForPlayer(playerid,"~g~Linerunner",3000,1);
    }
    if (model == 404)
    {
        GameTextForPlayer(playerid,"~g~Perenniel",3000,1);
    }
    if (model == 405)
    {
        GameTextForPlayer(playerid,"~g~Sentinel",3000,1);
    }
    if (model == 406)
    {
        GameTextForPlayer(playerid,"~g~Dumper",3000,1);
    }
    if (model == 407)
    {
        GameTextForPlayer(playerid,"~g~Firetruck",3000,1);
    }
    if (model == 408)
    {
        GameTextForPlayer(playerid,"~g~Trashmaster",3000,1);
    }
    if (model == 409)
    {
        GameTextForPlayer(playerid,"~g~Stretch",3000,1);
    }
    if (model == 410)
    {
        GameTextForPlayer(playerid,"~g~Manana",3000,1);
    }
    if (model == 411)
    {
        GameTextForPlayer(playerid,"~g~Infernus",3000,1);
    }
    if (model == 412)
    {
        GameTextForPlayer(playerid,"~g~Voodoo",3000,1);
    }
    if (model == 413)
    {
        GameTextForPlayer(playerid,"~g~Pony",3000,1);
    }
    if (model == 414)
    {
        GameTextForPlayer(playerid,"~g~Mule",3000,1);
    }
    if (model == 415)
    {
        GameTextForPlayer(playerid,"~g~Cheetah",3000,1);
    }
    if (model == 416)
    {
        GameTextForPlayer(playerid,"~g~Ambulancia SEC",3000,1);
    }
    if (model == 417)
    {
        GameTextForPlayer(playerid,"~g~Leviathan",3000,1);
    }
    if (model == 418)
    {
        GameTextForPlayer(playerid,"~g~Moonbeam",3000,1);
    }
    if (model == 419)
    {
        GameTextForPlayer(playerid,"~g~Esperanto",3000,1);
    }
    if (model == 420)
    {
        GameTextForPlayer(playerid,"~g~Taxi",3000,1);
    }
    if (model == 421)
    {
        GameTextForPlayer(playerid,"~g~Washington",3000,1);
    }
    if (model == 422)
    {
        GameTextForPlayer(playerid,"~g~Bobcat",3000,1);
    }
    if (model == 423)
    {
        GameTextForPlayer(playerid,"~g~Mr Whoopee",3000,1);
    }
    if (model == 424)
    {
        GameTextForPlayer(playerid,"~g~BF Injection",3000,1);
    }
    if (model == 425)
    {
        GameTextForPlayer(playerid,"~g~Hunter",3000,1);
    }
    if (model == 426)
    {
        GameTextForPlayer(playerid,"~g~Premier",3000,1);
    }
    if (model == 427)
    {
        GameTextForPlayer(playerid,"~g~Enforcer",3000,1);
    }
    if (model == 428)
    {
        GameTextForPlayer(playerid,"~g~Securicar",3000,1);
    }
    if (model == 429)
    {
        GameTextForPlayer(playerid,"~g~Banshee",3000,1);
    }
    if (model == 430)
    {
        GameTextForPlayer(playerid,"~g~Predator",3000,1);
    }
    if (model == 431)
    {
        GameTextForPlayer(playerid,"~g~Bus",3000,1);
    }
    if (model == 432)
    {
        GameTextForPlayer(playerid,"~g~Rhino",3000,1);
    }
    if (model == 433)
    {
        GameTextForPlayer(playerid,"~g~Barracks",3000,1);
    }
    if (model == 434)
    {
        GameTextForPlayer(playerid,"~g~Hotknife",3000,1);
    }
    if (model == 435)
    {
        GameTextForPlayer(playerid,"~g~Article Trailer",3000,1);
    }
    if (model == 436)
    {
        GameTextForPlayer(playerid,"~g~Previon",3000,1);
    }
    if (model == 437)
    {
        GameTextForPlayer(playerid,"~g~Coach",3000,1);
    }
    if (model == 438)
    {
        GameTextForPlayer(playerid,"~g~Cabbie",3000,1);
    }
    if (model == 439)
    {
        GameTextForPlayer(playerid,"~g~Stallion",3000,1);
    }
    if (model == 440)
    {
        GameTextForPlayer(playerid,"~g~Rumpo",3000,1);
    }
    if (model == 441)
    {
        GameTextForPlayer(playerid,"~g~RC Bandit",3000,1);
    }
    if (model == 442)
    {
        GameTextForPlayer(playerid,"~g~Romero",3000,1);
    }
    if (model == 443)
    {
        GameTextForPlayer(playerid,"~g~Packer",3000,1);
    }
    if (model == 444)
    {
        GameTextForPlayer(playerid,"~g~Monster",3000,1);
    }
    if (model == 445)
    {
        GameTextForPlayer(playerid,"~g~Admiral",3000,1);
    }
    if (model == 446)
    {
        GameTextForPlayer(playerid,"~g~Squallo",3000,1);
	}
	if (model == 447)
    {
        GameTextForPlayer(playerid,"~g~Seasparrow",3000,1);
    }
    if (model == 448)
    {
        GameTextForPlayer(playerid,"~g~Pizzaboy",3000,1);
    }
    if (model == 449)
    {
        GameTextForPlayer(playerid,"~g~Tram",3000,1);
    }
    if (model == 450)
    {
        GameTextForPlayer(playerid,"~g~Article Trailer 2",3000,1);
    }
    if (model == 451)
    {
        GameTextForPlayer(playerid,"~g~Turismo",3000,1);
    }
    if (model == 452)
    {
        GameTextForPlayer(playerid,"~g~Speeder",3000,1);
    }
    if (model == 453)
    {
        GameTextForPlayer(playerid,"~g~Reefer",3000,1);
    }
    if (model == 454)
    {
        GameTextForPlayer(playerid,"~g~Tropic",3000,1);
    }
    if (model == 455)
    {
        GameTextForPlayer(playerid,"~g~Flatbed",3000,1);
    }
    if (model == 456)
    {
        GameTextForPlayer(playerid,"~g~Yankee",3000,1);
    }
	if (model == 457)
    {
        GameTextForPlayer(playerid,"~g~Caddy",3000,1);
    }
	if (model == 458)
    {
        GameTextForPlayer(playerid,"~g~Solair",3000,1);
    }
    if (model == 459)
    {
        GameTextForPlayer(playerid,"~g~Berkley's RC Van",3000,1);
    }
    if (model == 460)
    {
        GameTextForPlayer(playerid,"~g~Skimmer",3000,1);
    }
    if (model == 461)
    {
        GameTextForPlayer(playerid,"~g~PCJ-600",3000,1);
    }
    if (model == 462)
    {
        GameTextForPlayer(playerid,"~g~Faggio",3000,1);
    }
    if (model == 463)
    {
        GameTextForPlayer(playerid,"~g~Freeway",3000,1);
    }
    if (model == 464)
    {
        GameTextForPlayer(playerid,"~g~RC Baron",3000,1);
    }
    if (model == 465)
    {
        GameTextForPlayer(playerid,"~g~RC Raider",3000,1);
    }
    if (model == 466)
    {
        GameTextForPlayer(playerid,"~g~Glendale",3000,1);
    }
    if (model == 467)
    {
        GameTextForPlayer(playerid,"~g~Oceanic",3000,1);
    }
    if (model == 468)
    {
        GameTextForPlayer(playerid,"~g~Sanchez",3000,1);
    }
    if (model == 469)
    {
        GameTextForPlayer(playerid,"~g~Sparrow",3000,1);
    }
    if (model == 470)
    {
        GameTextForPlayer(playerid,"~g~Patriot",3000,1);
    }
    if (model == 471)
    {
        GameTextForPlayer(playerid,"~g~Quad",3000,1);
    }
    if (model == 472)
    {
        GameTextForPlayer(playerid,"~g~Coastguard",3000,1);
    }
    if (model == 473)
    {
        GameTextForPlayer(playerid,"~g~Dinghy",3000,1);
    }
    if (model == 474)
    {
        GameTextForPlayer(playerid,"~g~Hermes",3000,1);
    }
    if (model == 475)
    {
        GameTextForPlayer(playerid,"~g~Sabre",3000,1);
    }
    if (model == 476)
    {
        GameTextForPlayer(playerid,"~g~Rustler",3000,1);
    }
    if (model == 477)
    {
        GameTextForPlayer(playerid,"~g~ZR-350",3000,1);
    }
    if (model == 478)
    {
        GameTextForPlayer(playerid,"~g~Walton",3000,1);
    }
    if (model == 479)
    {
        GameTextForPlayer(playerid,"~g~Regina",3000,1);
    }
    if (model == 480)
    {
        GameTextForPlayer(playerid,"~g~Comet",3000,1);
    }
    if (model == 481)
    {
        GameTextForPlayer(playerid,"~g~BMX",3000,1);
    }
    if (model == 482)
    {
        GameTextForPlayer(playerid,"~g~Burrito",3000,1);
    }
    if (model == 483)
    {
        GameTextForPlayer(playerid,"~g~Camper",3000,1);
    }
    if (model == 484)
    {
        GameTextForPlayer(playerid,"~g~Marquis",3000,1);
    }
    if (model == 485)
    {
        GameTextForPlayer(playerid,"~g~Baggage",3000,1);
    }
    if (model == 486)
    {
        GameTextForPlayer(playerid,"~g~Dozer",3000,1);
    }
    if (model == 487)
    {
        GameTextForPlayer(playerid,"~g~Maverick",3000,1);
    }
    if (model == 488)
    {
        GameTextForPlayer(playerid,"~g~LSTV Maverick",3000,1);
    }
    if (model == 489)
    {
        GameTextForPlayer(playerid,"~g~Rancher",3000,1);
    }
    if (model == 490)
    {
        GameTextForPlayer(playerid,"~g~FBI Rancher",3000,1);
    }
    if (model == 491)
    {
        GameTextForPlayer(playerid,"~g~Virgo",3000,1);
    }
    if (model == 492)
    {
        GameTextForPlayer(playerid,"~g~Greenwood",3000,1);
    }
    if (model == 493)
    {
        GameTextForPlayer(playerid,"~g~Jetmax",3000,1);
    }
    if (model == 494)
    {
        GameTextForPlayer(playerid,"~g~Hotring Racer",3000,1);
    }
    if (model == 495)
    {
        GameTextForPlayer(playerid,"~g~Sandking",3000,1);
    }
    if (model == 496)
    {
        GameTextForPlayer(playerid,"~g~Blista Compact",3000,1);
    }
    if (model == 497)
    {
        GameTextForPlayer(playerid,"~g~Police Maverick",3000,1);
    }
    if (model == 498)
    {
        GameTextForPlayer(playerid,"~g~Boxville",3000,1);
    }
    if (model == 499)
    {
        GameTextForPlayer(playerid,"~g~Benson",3000,1);
    }
    if (model == 500)
    {
        GameTextForPlayer(playerid,"~g~Mesa",3000,1);
    }
    if (model == 501)
    {
        GameTextForPlayer(playerid,"~g~RC Goblin",3000,1);
    }
    if (model == 502)
    {
        GameTextForPlayer(playerid,"~g~Hotring Racer",3000,1);
    }
    if (model == 503)
    {
        GameTextForPlayer(playerid,"~g~Hotring Racer",3000,1);
    }
    if (model == 504)
    {
        GameTextForPlayer(playerid,"~g~Bloodring Banger",3000,1);
    }
    if (model == 505)
    {
        GameTextForPlayer(playerid,"~g~Rancher",3000,1);
    }
    if (model == 506)
    {
        GameTextForPlayer(playerid,"~g~Super GT",3000,1);
    }
    if (model == 507)
    {
        GameTextForPlayer(playerid,"~g~Elegant",3000,1);
    }
    if (model == 508)
    {
        GameTextForPlayer(playerid,"~g~Journey",3000,1);
    }
    if (model == 509)
    {
        GameTextForPlayer(playerid,"~g~Bike",3000,1);
    }
    if (model == 510)
    {
        GameTextForPlayer(playerid,"~g~Mountain Bike",3000,1);
    }
    if (model == 511)
    {
        GameTextForPlayer(playerid,"~g~Beagle",3000,1);
    }
    if (model == 512)
    {
        GameTextForPlayer(playerid,"~g~Cropduster",3000,1);
    }
    if (model == 513)
    {
        GameTextForPlayer(playerid,"~g~Stuntplane",3000,1);
    }
    if (model == 514)
    {
        GameTextForPlayer(playerid,"~g~Tanker",3000,1);
    }
    if (model == 515)
    {
        GameTextForPlayer(playerid,"~g~Roadtrain",3000,1);
    }
    if (model == 516)
    {
        GameTextForPlayer(playerid,"~g~Nebula",3000,1);
    }
    if (model == 517)
    {
        GameTextForPlayer(playerid,"~g~Majestic",3000,1);
    }
    if (model == 518)
    {
        GameTextForPlayer(playerid,"~g~Buccaneer",3000,1);
    }
    if (model == 519)
    {
        GameTextForPlayer(playerid,"~g~Shamal",3000,1);
    }
    if (model == 520)
    {
        GameTextForPlayer(playerid,"~g~Hydra",3000,1);
    }
    if (model == 521)
    {
        GameTextForPlayer(playerid,"~g~FCR-900",3000,1);
    }
    if (model == 522)
    {
        GameTextForPlayer(playerid,"~g~NRG-500",3000,1);
    }
    if (model == 523)
    {
        GameTextForPlayer(playerid,"~g~HPV1000",3000,1);
    }
    if (model == 524)
    {
        GameTextForPlayer(playerid,"~g~Cement Truck",3000,1);
    }
    if (model == 525)
    {
        GameTextForPlayer(playerid,"~g~Towtruck",3000,1);
    }
    if (model == 526)
    {
        GameTextForPlayer(playerid,"~g~Fortune",3000,1);
    }
    if (model == 527)
    {
        GameTextForPlayer(playerid,"~g~Cadrona",3000,1);
    }
    if (model == 528)
    {
        GameTextForPlayer(playerid,"~g~FBI Truck",3000,1);
    }
    if (model == 529)
    {
        GameTextForPlayer(playerid,"~g~Willard",3000,1);
    }
    if (model == 530)
    {
        GameTextForPlayer(playerid,"~g~Forklift",3000,1);
    }
    if (model == 531)
    {
        GameTextForPlayer(playerid,"~g~Tractor",3000,1);
    }
    if (model == 532)
    {
        GameTextForPlayer(playerid,"~g~Combine Harvester",3000,1);
    }
    if (model == 533)
    {
        GameTextForPlayer(playerid,"~g~Feltzer",3000,1);
    }
    if (model == 534)
    {
        GameTextForPlayer(playerid,"~g~Remington",3000,1);
    }
    if (model == 535)
    {
        GameTextForPlayer(playerid,"~g~Slamvan",3000,1);
    }
    if (model == 536)
    {
        GameTextForPlayer(playerid,"~g~Blade",3000,1);
    }
    if (model == 537)
    {
        GameTextForPlayer(playerid,"~g~Freight (Train)",3000,1);
    }
    if (model == 538)
    {
        GameTextForPlayer(playerid,"~g~Brownstreak (Train)",3000,1);
    }
    if (model == 539)
    {
        GameTextForPlayer(playerid,"~g~Vortex",3000,1);
    }
    if (model == 540)
    {
        GameTextForPlayer(playerid,"~g~Vincent",3000,1);
    }
    if (model == 541)
    {
        GameTextForPlayer(playerid,"~g~Bullet",3000,1);
    }
    if (model == 542)
    {
        GameTextForPlayer(playerid,"~g~Clover",3000,1);
    }
    if (model == 543)
    {
        GameTextForPlayer(playerid,"~g~Sadler",3000,1);
    }
    if (model == 544)
    {
        GameTextForPlayer(playerid,"~g~Firetruck LA",3000,1);
    }
    if (model == 545)
    {
        GameTextForPlayer(playerid,"~g~Hustler",3000,1);
    }
    if (model == 546)
    {
        GameTextForPlayer(playerid,"~g~Intruder",3000,1);
    }
    if (model == 547)
    {
        GameTextForPlayer(playerid,"~g~Primo",3000,1);
    }
    if (model == 548)
    {
        GameTextForPlayer(playerid,"~g~Cargobob",3000,1);
    }
    if (model == 549)
    {
        GameTextForPlayer(playerid,"~g~Tampa",3000,1);
    }
    if (model == 550)
    {
        GameTextForPlayer(playerid,"~g~Sunrise",3000,1);
    }
    if (model == 551)
    {
        GameTextForPlayer(playerid,"~g~Merit",3000,1);
    }
    if (model == 552)
    {
        GameTextForPlayer(playerid,"~g~Utility Van",3000,1);
    }
    if (model == 553)
    {
        GameTextForPlayer(playerid,"~g~Nevada",3000,1);
    }
    if (model == 554)
    {
        GameTextForPlayer(playerid,"~g~Yosemite",3000,1);
    }
    if (model == 555)
    {
        GameTextForPlayer(playerid,"~g~Windsor",3000,1);
    }
    if (model == 556)
    {
        GameTextForPlayer(playerid,"~g~Monster A",3000,1);
    }
    if (model == 557)
    {
        GameTextForPlayer(playerid,"~g~Monster B",3000,1);
    }
    if (model == 558)
    {
        GameTextForPlayer(playerid,"~g~Uranus",3000,1);
    }
    if (model == 559)
    {
        GameTextForPlayer(playerid,"~g~Jester",3000,1);
    }
    if (model == 560)
    {
        GameTextForPlayer(playerid,"~g~Sultan",3000,1);
    }
    if (model == 561)
    {
        GameTextForPlayer(playerid,"~g~Stratum",3000,1);
    }
    if (model == 562)
    {
        GameTextForPlayer(playerid,"~g~Elegy",3000,1);
    }
	if (model == 563)
    {
        GameTextForPlayer(playerid,"~g~Raindance",3000,1);
    }
    if (model == 564)
    {
        GameTextForPlayer(playerid,"~g~RC Tiger",3000,1);
    }
    if (model == 565)
    {
        GameTextForPlayer(playerid,"~g~Flash",3000,1);
    }
    if (model == 566)
    {
        GameTextForPlayer(playerid,"~g~Tahoma",3000,1);
    }
    if (model == 567)
    {
        GameTextForPlayer(playerid,"~g~Savanna",3000,1);
    }
    if (model == 568)
    {
        GameTextForPlayer(playerid,"~g~Bandito",3000,1);
    }
    if (model == 569)
    {
        GameTextForPlayer(playerid,"~g~Freight Flat Trailer (Train)",3000,1);
    }
    if (model == 570)
    {
        GameTextForPlayer(playerid,"~g~Streak Trailer (Train)",3000,1);
    }
    if (model == 571)
    {
        GameTextForPlayer(playerid,"~g~Kart",3000,1);
    }
    if (model == 572)
    {
        GameTextForPlayer(playerid,"~g~Mower",3000,1);
    }
	if (model == 573)
    {
        GameTextForPlayer(playerid,"~g~Dune",3000,1);
    }
	if (model == 574)
    {
        GameTextForPlayer(playerid,"~g~Sweeper",3000,1);
    }
    if (model == 575)
    {
        GameTextForPlayer(playerid,"~g~Broadway",3000,1);
    }
    if (model == 576)
    {
        GameTextForPlayer(playerid,"~g~Tornado",3000,1);
    }
    if (model == 577)
    {
        GameTextForPlayer(playerid,"~g~AT400",3000,1);
    }
    if (model == 578)
    {
        GameTextForPlayer(playerid,"~g~DFT-30",3000,1);
    }
    if (model == 579)
    {
        GameTextForPlayer(playerid,"~g~Huntley",3000,1);
    }
    if (model == 580)
    {
        GameTextForPlayer(playerid,"~g~Stafford",3000,1);
    }
    if (model == 581)
    {
        GameTextForPlayer(playerid,"~g~BF-400",3000,1);
    }
    if (model == 582)
    {
        GameTextForPlayer(playerid,"~g~Newsvan",3000,1);
    }
    if (model == 583)
    {
        GameTextForPlayer(playerid,"~g~Tug",3000,1);
    }
    if (model == 584)
    {
        GameTextForPlayer(playerid,"~g~Petrol Trailer",3000,1);
    }
    if (model == 585)
    {
        GameTextForPlayer(playerid,"~g~Emperor",3000,1);
    }
    if (model == 586)
    {
        GameTextForPlayer(playerid,"~g~Wayfarer",3000,1);
    }
    if (model == 587)
    {
        GameTextForPlayer(playerid,"~g~Euros",3000,1);
    }
    if (model == 588)
    {
        GameTextForPlayer(playerid,"~g~Hotdog",3000,1);
    }
    if (model == 589)
    {
        GameTextForPlayer(playerid,"~g~Club",3000,1);
    }
    if (model == 590)
    {
        GameTextForPlayer(playerid,"~g~Freight Box Trailer (Train)",3000,1);
    }
    if (model == 591)
    {
        GameTextForPlayer(playerid,"~g~Article Trailer 3",3000,1);
    }
    if (model == 592)
    {
        GameTextForPlayer(playerid,"~g~Andromada",3000,1);
    }
    if (model == 593)
    {
        GameTextForPlayer(playerid,"~g~Dodo",3000,1);
    }
    if (model == 594)
    {
        GameTextForPlayer(playerid,"~g~RC Cam",3000,1);
    }
    if (model == 595)
    {
        GameTextForPlayer(playerid,"~g~Launch",3000,1);
    }
    if (model == 596)
    {
        GameTextForPlayer(playerid,"~g~Police Car (LSPD)",3000,1);
    }
    if (model == 597)
    {
        GameTextForPlayer(playerid,"~g~Police Car (SFPD)",3000,1);
    }
    if (model == 598)
    {
        GameTextForPlayer(playerid,"~g~Police Car (LVPD)",3000,1);
    }
    if (model == 599)
    {
        GameTextForPlayer(playerid,"~g~Police Ranger",3000,1);
    }
    if (model == 600)
    {
        GameTextForPlayer(playerid,"~g~Picador",3000,1);
    }
    if (model == 601)
    {
        GameTextForPlayer(playerid,"~g~S.W.A.T.",3000,1);
    }
    if (model == 602)
    {
        GameTextForPlayer(playerid,"~g~Alpha",3000,1);
    }
    if (model == 603)
    {
        GameTextForPlayer(playerid,"~g~Phoenix",3000,1);
    }
    if (model == 604)
    {
        GameTextForPlayer(playerid,"~g~Glendale Shit",3000,1);
    }
    if (model == 605)
    {
        GameTextForPlayer(playerid,"~g~Sadler Shit",3000,1);
    }
    if (model == 606)
    {
        GameTextForPlayer(playerid,"~g~Baggage Trailer A",3000,1);
    }
    if (model == 607)
    {
        GameTextForPlayer(playerid,"~g~Baggage Trailer B",3000,1);
    }
    if (model == 608)
    {
        GameTextForPlayer(playerid,"~g~Tug Stairs Trailer",3000,1);
    }
    if (model == 609)
    {
        GameTextForPlayer(playerid,"~g~Boxville",3000,1);
    }
    if (model == 610)
    {
        GameTextForPlayer(playerid,"~g~Farm Trailer",3000,1);
    }
    if (model == 611)
    {
        GameTextForPlayer(playerid,"~g~Utility Trailer",3000,1);
    }
    Seatbelt[playerid] = 1;
    if(VehicleFuel[vehicleid] <= 0)
	{
 	SetVehicleEngine(vehicleid, playerid);
 	}
    if(GetPVarInt(playerid, "Injured") == 1) SetPVarInt(playerid, "ToBeEjected", 1);
    if(Info[playerid][pEstado] != 0) SetPVarInt( playerid, "ToBeEjected", 1 );
    SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: VehicleFuel[vehicleid] = 200, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 1;
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}
	if(!ispassenger)
	{
		if(FBI_Vehiculos(vehicleid))
	  	{
  		    if(Team_FBI(playerid)) { return 1; }
		    else
     		{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces al FBI.");
				return 1;
			}
		}
		else if(SEC_Vehiculos(vehicleid))
  		{
  		    if(Team_SAMD(playerid)) { return 1; }
  		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a S.E.C.");
				return 1;
			}
		}
		else if(Mecanicos_Vehiculos(vehicleid))
  		{
  		    if(Team_Mecanicos(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Crazy Motors.");
				return 1;
			}
		}
        else if(Rusos_Vehiculos(vehicleid))
  		{
  		    if(Team_Rusa(playerid)) { return 1; }
  		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Mafia Rusa.");
				return 1;
			}
		}
		else if(VIP_Car(vehicleid))
		{
  		    if(Info[playerid][pVIP] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Este vehículo es del garage {FFFF00}VIP{FFFFFF}, tiene gasolina ilimitada.");
			RemovePlayerFromVehicle(playerid);
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz);
			NOPCheck(playerid);
			SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes usar este vehiculo porque no eres un usuario {FFFF00}VIP{FFFFFF}.");
			return 1;
		}
		else if(LSTV_Vehiculos(vehicleid))
  		{
  		    if(Team_LSTV(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a LSTV.");
				return 1;
			}
		}
		else if(Gobierno_Vehiculos(vehicleid))
  		{
  		    if(Gobierno(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No formas parte del gobierno.");
				return 1;
			}
		}
		else if(SistemaJudicialAuto(vehicleid))
  		{
  		    if(Team_Judicial(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No formas parte del Sistema Judicial.");
				return 1;
			}
		}
		else if(SAEM_Vehiculos(vehicleid))
  		{
			if(Team_SAEM(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a la Guardia Nacional.");
				return 1;
			}
		}
		else if (LSPD_Vehiculos(vehicleid))
		{
			if(Team_LSPD(playerid)) return 1;
  			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No formas parte de SAPD.");
				return 1;
			}
		}
		/*else if (ALEPH_Vehiculos(vehicleid))
		{
			if(Team_ALEPH(playerid)) return 1;
  			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a ALEPH.");
				return 1;
			}
		}*/
		else if(IsAnLatinCar(vehicleid))
		{
			if(Team_Latin(playerid)) return 1;
			else
			{
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Latin Kings.");
				return 1;
			}
		}
		else if (IsAnBallasCar(vehicleid))
		{
			if(Team_Ballas(playerid)) return 1;
  			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a los Ballas.");
				return 1;
			}
		}
		else if(IsAnSurCar(vehicleid))
		{
			if(Team_Sureno(playerid)) return 1;
			else
			{
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Sureños 13.");
				return 1;
			}
		}
		else if(IsAnGrooveCar(vehicleid))
		{
		   if(Team_Groove(playerid)) return 1;
	       else
		   {
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Groove Street.");
				return 1;
		    }
		}
		else if (IsAnHitmanCar(vehicleid))
		{
		    if (Hitman(playerid)) return 1;
            else
            {
                RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a la agencia Hitman.");
				return 1;
		    }
		}

		else if(LCN_Vehiculos(vehicleid))
  		{
  		    if(Team_LCN(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a LCN.");
				return 1;
		   }
	    }
	    else if(Yakuza_Vehiculos(vehicleid))
  		{
  		    if(Team_Yakuza(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Yakuza.");
				return 1;
			}
		}
        else if(CDG_Vehiculos(vehicleid))
  		{
			if(Team_CDG(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a CDG.");
				return 1;
			}
		}
		else if(Santana_Vehiculos(vehicleid))
  		{
			if(Team_Santana(playerid)) { return 1; }
  		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Santana.");
				return 1;
			}
		}
   	    /*else if(AlQaeda_Vehiculos(vehicleid))
  		{
  		    if(Team_Alqaeda(playerid)) { return 1; }
  		    else
  		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No perteneces a Alqaeda.");
				return 1;
			}
   	    }*/
		//*******************Jobs*******************
		else if(Tren_Vehicle(vehicleid))
		{
		    if(Info[playerid][pJob] == 15|| Info[playerid][pJob2] == 15) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres un maquinista.");
				return 1;
			}
		}
		else if(Aero_Vehicle(vehicleid))
		{
		    if(Info[playerid][pJob] == 16|| Info[playerid][pJob2] == 16) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres un Piloto Oficial.");
				return 1;
			}
		}
		else if(Heladero_Vehicle(vehicleid))
		{
		    if(Info[playerid][pJob] == 14 || Info[playerid][pJob2] == 14) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres Un Heladero.");
				return 1;
			}
		}
		else if(Jardinero_Vehicle(vehicleid)) // Koscar.
		{
		    if(Info[playerid][pJob] == 13 || Info[playerid][pJob2] == 13) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				return 1;
			}
		}
		else if(Bus_Vehicle(vehicleid))
		{
		    if(Info[playerid][pJob] == 3 || Info[playerid][pJob2] == 3) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres Chofer de Viajes.");
				return 1;
			}
		}
		else if(IsAPizzabike(vehicleid))
		{
		    if(Info[playerid][pJob] == 4 || Info[playerid][pJob2] == 4) { return 1; }
    	    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres Pizzero.");
				return 1;
			}
		}
  		else if(Taxi_Vehicle(vehicleid))
  		{
		    if(Info[playerid][pJob] == 8 || Info[playerid][pJob2] == 8) { return 1; }
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres Taxista.");
				return 1;
			}
		}
  		else if(IsAHarvest(vehicleid))
  		{
		    if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9) { return 1; }
		    else
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No eres Granjero.");
				return 1;
			}
		}
		else if(Vortex_Vehicle(vehicleid))
  		{
		    if(Vortex[playerid]== 0)
		    {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "No Tienes un ticket.");
				return 1;
			}
		}
		else if(IsALicCar(vehicleid))
		{
		        if(DrivingTest[playerid] == 0)
				{
				    RemovePlayerFromVehicle(playerid); // No está en la clase de conducción.
					SendClientMessageEx(playerid, COLOR_GRAD2, "Entra primero a la Autoescuela y solicita comenzar la clase de conducción.");
					return 1;
				}
		        else if(DrivingTest[playerid] == 1) // Está en la clase.
				{
					SendClientMessageEx(playerid, COLOR_YELLOW2, "INFO: Ve a los Puntos Rojos para completar la prueba.");
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "|| Si terminas el Recorrido con el vehiculo destrozado fallarás la prueba ||");
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "|| Recuerda ir a una velocidad moderada o la preba será suspendida directamente ||");
			 		SetPlayerCheckpoint(playerid, 2084.1448,-1911.5313,13.2578, 5.0);
					DrivingTest[playerid] = 2; // Primer CP
					return 1;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "Si sales del vehículo, suspenderás la prueba práctica.");
					return 1;
				}
		}
		else if(IsATruckerCar(vehicleid))
		{
	    	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
			{
				new string[128];
				new truckcontents = TruckContents[vehicleid];
				new truckcontentname[25];
				if(truckcontents == 0)
				{ format(truckcontentname, sizeof(truckcontentname), "Nada"); }
				else if(truckcontents >= 1 && truckcontents <= 3)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Alimentos y comida");}
				else if(truckcontents >= 4 && truckcontents <= 6)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Ropa y Calzado"); }
				else if(truckcontents == 7)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Materiales Legales"); }
				else if(truckcontents >= 8 && truckcontents <= 10)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Objetos del 24/7"); }
				else if(truckcontents >= 11 && truckcontents <= 15)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Armas Ilegales"); }
				else if(truckcontents >= 16 && truckcontents <= 20)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Drogas"); }
				else if(truckcontents >= 21 && truckcontents <= 25)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Materiales Ilegales"); }
				format(string, sizeof(string), "{5ABAFF}[JOB]:{FFFFFF} (Registro: %s %d) - (Contenido: %s)", GetVehicleName(vehicleid), vehicleid, truckcontentname);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				if(IsACop(playerid) && truckcontents >= 11)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[JOB]:{FFFFFF} Para remover productos ilegales usa /limpiarcamion cerca del camión.");
				}
				if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[JOB]:{FFFFFF} Para entregar productos usa /robarcamion como el conductor.");
				}
				else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
   					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[JOB]:{FFFFFF} Para obtener productos y entregarlos usa /cargarcamion siendo el conductor.");
				}
				else if(TruckUsed[playerid] == vehicleid && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[JOB]:{FFFFFF} Este es tu camión, aún no lo has devuelto a Ocean Docks para que te pagen.");
				}
				else if(TruckUsed[playerid] == vehicleid)
				{
   					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[JOB]:{FFFFFF} Este es tu camión, aún no has entregado los productos.");
   				}
				else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
				{
   					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[JOB]:{FFFFFF} Ya estás en otra entrega, usa /cancelar camión para cancelar la entrega.");
   				}
			}
	    	else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "No eres camionero.");
			}
		}
	}
	else if(!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus[vehicleid] >= 1){
		ClearAnimations(playerid);
	}
	return 1;
}

Team_LSPD(playerid){
	if(IsPlayerConnected(playerid)){
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	1){
		    return 1;
		}
		else if(leader	==	1)
		{
		    return 1;
		}
	}
	return 0;
}

Team_FBI(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	2)
		{
		    return 1;
		}
		else if(leader	==	2)
		{
		    return 1;
		}
	}
	return 0;
}

Team_SAEM(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	3)
		{
		    return 1;
		}
		else if(leader	==	3)
		{
		    return 1;
		}
	}
	return 0;
}

Team_SAMD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	4)
		{
		    return 1;
		}
		else if(leader	==	4)
		{
		    return 1;
		}
	}
	return 0;
}

Team_LSTV(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	5)
		{
		    return 1;
		}
		else if(leader	==	5)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Mecanicos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	6)
		{
		    return 1;
		}
		else if(leader	==	6)
		{
		    return 1;
		}
	}
	return 0;
}

Gobierno(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	7)
		{
		    return 1;
		}
		else if(leader == 7)
		{
		    return 1;
		}
	}
	return 0;
}

Hitman(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	8)
		{
		    return 1;
		}
		else if(leader	==	8)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Judicial(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	9)
		{
		    return 1;
		}
		else if(leader == 9)
		{
		    return 1;
		}
	}
	return 0;
}

Team_CDG(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	17)
		{
		    return 1;
		}
		else if(leader	==	17)
		{
		    return 1;
		}
	}
	return 0;
}
Team_Groove(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==10)
       {
           return 1;
       }
       else if(leader==10)
       {
	       return 1;
       }
   }
   return 0;
}
Team_Ballas(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==11)
       {
           return 1;
       }
       else if(leader==11)
       {
	       return 1;
       }
   }
   return 0;
}
Team_Latin(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==12)
       {
           return 1;
       }
       else if(leader==12)
       {
	       return 1;
       }
   }
   return 0;
}
Team_Sureno(playerid)
{
   if(IsPlayerConnected(playerid))
   {
       new leader = Info[playerid][pLeader];
       new member = Info[playerid][pMember];
       if(member==13)
       {
           return 1;
       }
       else if(leader==13)
       {
	       return 1;
       }
   }
   return 0;
}
IsAGang(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member == 10 || member == 11 || member == 12 || member == 13) // Pandilleros.
		{
		    return 1;
		}
		else if(leader == 10 || leader == 11 || leader == 12 || member == 13) // Pandilleros.
		{
		    return 1;
		}
	}
	return 0;
}
IsARob(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new job1 = Info[playerid][pJob];
	    new job2 = Info[playerid][pJob2];
	    if(job1	==	5 || job1	==	7 || job1	==	10) // Tráficantes, Armero y drogas.
		{
		    return 1;
		}
		else if(job2	==	5 || job2	==	7 || job2	==	10) // Tráficantes, Armero y drogas.
		{
		    return 1;
		}
	}
	return 0;
}
Team_Rusa(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	14)
		{
		    return 1;
		}
		else if(leader	==	14)
		{
		    return 1;
		}
	}
	return 0;
}
Team_LCN(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	== 15)
		{
		    return 1;
		}
		else if(leader	==	15)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Yakuza(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	16)
		{
		    return 1;
		}
		else if(leader	==	16)
		{
		    return 1;
		}
	}
	return 0;
}

Presidente(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
		if(leader == 7)
		{
		    return 1;
		}
	}
	return 0;
}

DirectorCNN(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
		if(leader == 5)
		{
		    return 1;
		}
	}
	return 0;
}
Team_ALEPH(playerid){
	if(IsPlayerConnected(playerid)){
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	20){
		    return 1;
		}
		else if(leader	==	20)
		{
		    return 1;
		}
	}
	return 0;
}

Team_Santana(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	18)
		{
		    return 1;
		}
		else if(leader	==	18)
		{
		    return 1;
		}
	}
	return 0;
}
Team_Alqaeda(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	== 19)
		{
		    return 1;
		}
		else if(leader	==	19)
		{
		    return 1;
		}
	}
	return 0;
}
IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	1 || member	==	2 || member	==	3) // LSPD, FBI Y SAEM.
		{
		    return 1;
		}
		else if(leader	==	1 || leader	==	2 || leader	==	3) // LSPD, FBI Y SAEM.
		{
		    return 1;
		}
	}
	return 0;
}

IsAPolice(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member==1)
		{
		    return 1;
		}
		else if(leader==1)
		{
		    return 1;
		}
	}
	return 0;
}

IsACia(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	21)
		{
		    return 1;
		}
		else if(leader	==	21)
		{
		    return 1;
		}
	}
	return 0;
}

IsANewsCar(carid)
{
	if(GetVehicleModel(carid)== 582 || GetVehicleModel(carid)== 488)
	{
		return 1;
	}
	return 0;
}

/*Float:GetPizzaDistance(houseid)
{
	new Float: pDistance;
	pDistance = GetDistance(2098.6919,-1789.5027,13.5547, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
    return pDistance;
}*/
Float:GetPizzaDistance(proid) // Las pizzas ahora son enviadas al nuevo sistema de casas.
{
new Float: pDistance;
pDistance = GetDistance(2098.6919,-1789.5027,13.5547, ProInfo[proid][hExteriorX], ProInfo[proid][hExteriorY], ProInfo[proid][hExteriorZ]);
return pDistance;
}

IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,200.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,200.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,200.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,200.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,200.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,200.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,200.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,200.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,200.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,200.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,100.0,836.4791, -2086.1738, 3.4484))
		{ // Nuevo lugar, justo debajo de la tienda de pesca.
			return 1;
		}
	}
	return 0;
}

IsAtClothShop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,25.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047))
		{//Binco & Sub urban
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-2664.3318,1538.4259,907.1797) || IsPlayerInRangeOfPoint(playerid,50.0,1395.0045,-1896.1139,13.3733))
		{// SaC HQ
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,202.6777,-163.0623,1000.5306))
		{//Diedier Sachs
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,997.3839,-1266.6259,15.2554))
		{//Armario de Familias /fropa
		    return 1;
		}
 	}
	return 0;
}

IsAtArrestPoint(playerid){
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 40.0,1559.3228,-1693.7491,5.8970)){return 1;} //LSPD Garage.
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, 1559.650,-1649.430,4990.58)){ return 1;} //LSPD Interior.
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, 613.3228,-589.1623,17.2266)){ return 1; } //SAPD Dillmore
  		else if(IsPlayerInRangeOfPoint(playerid, 40.0, 912.8051,-1037.6465,31.8984)){ return 1; } // CIA (Fuera de Uso)
		else if(IsPlayerInRangeOfPoint(playerid, 40.0, 286.91,-1615.54,17.86)){ return 1; } //FBI (Nuevo)
 	}
	return 0;
}

IsAtTruckDeliveryPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 1025.6554,-1362.6024,13.5649) || IsPlayerInRangeOfPoint(playerid, 6, 455.2845,-1501.5569,31.0434) ||
	IsPlayerInRangeOfPoint(playerid, 6, 793.0801,-1625.8910,13.3906) || IsPlayerInRangeOfPoint(playerid, 6, 2112.7766,-1216.1750,23.8047) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1197.6417,-887.7512,43.0229) || IsPlayerInRangeOfPoint(playerid, 6, -64.5445,-1120.5356,1.0781) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1361.02282, -911.7898, 38.0) || IsPlayerInRangeOfPoint(playerid, 6, -86.3670,-1195.7297,2.1664) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1347.0487,-1752.1692,13.7886) || IsPlayerInRangeOfPoint(playerid, 6, -70.8884,-1549.4922,2.6172) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1925.5968,-1789.5017,13.1459) || IsPlayerInRangeOfPoint(playerid, 6, 1474.4786,-1140.6188,24.0781) ||
	IsPlayerInRangeOfPoint(playerid, 6, 2247.2351,-1661.2406,15.6749))
	{ return true; }
	return false;
}

IsAtCelPublic(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,1540.4768,-1722.1370,13.5546)) { return 1; } //SAPD
		else if(PlayerToPoint(5.0,playerid,1828.9257,-1850.9833,13.5781)) { return 1; } // 24/7 UNITY
		else if(PlayerToPoint(5.0,playerid,1710.4623,-1604.9115,13.5469)) { return 1; } //atras sapd
		else if(PlayerToPoint(5.0,playerid,1310.6002,-912.0837,38.5596)) { return 1; } //24/7 vinewood
		else if(PlayerToPoint(5.0,playerid,355.3920,-1365.1967,14.4665)) { return 1; } //cerca a grotti
		else if(PlayerToPoint(5.0,playerid,1803.0021,-1863.0212,13.5756)) { return 1; } //unity
		else if(PlayerToPoint(5.0,playerid,350.2411,-1785.1615,5.3446)) { return 1; } //conce de playa autos
		else if(PlayerToPoint(5.0,playerid,1723.0403,-1720.8251,13.5440)) { return 1; } //Al frente de la Universidad
	}
	return 0;
}

PlazaAyuntamiento(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(95.0,playerid,482.6306, -1790.6089, 12.47770)) { return 1; } //Parking Ayuntamiento
	    else if(PlayerToPoint(205.0,playerid,1479.5547, -1649.9537, 13.6082)) { return 1; } //Plaza
	}
	return 0;
}

Tienda_247(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,-1833.8270,62.3936,1055.1891)) { return 1; } //intaero
		else if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-25.6448,-56.6718,1003.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-28.7605,-185.1333,1003.5469)) { return 1; } //LV 1er 24-7
		else if(PlayerToPoint(5.0,playerid,-10.3085,-178.2465,1003.5469)) { return 1; } // LV 1er 24-7 >
		else if(PlayerToPoint(5.0,playerid,2.3437,-29.0118,1003.5494)) { return 1; } //LV 2do 24-7
		else if(PlayerToPoint(5.0,playerid,-28.0818,-89.9434,1003.5469)) { return 1; } //LV 3er 24-7
		else if(PlayerToPoint(5.0,playerid,-29.1318,-184.7204,1003.5469)) { return 1; } //LV 3er 24-7
		else if(PlayerToPoint(5.0,playerid,-25.7885,-183.2835,1003.5469)) { return 1; } //LV 3er 24-7
		else if(PlayerToPoint(3.0,playerid,664.8079,-568.7150,16.3433)) { return 1; }
	}
	return 0;
}
Tienda_Erotica(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,-103.559165,-24.225606,1000.718750)) { return 1; } //SEX SHOP.
		else if(PlayerToPoint(5.0,playerid,215.948974,-15.260641,1000.921875)) { return 1; } // Puticlub.
		else if(PlayerToPoint(8.0,playerid,3204.809936,-11.586799,1000.921875)) { return 1; } // Strip Club.
		else if(PlayerToPoint(5.0,playerid,1206.234375,-29.517139,1000.953125)) { return 1; } // Habitación Privada.
		else if(PlayerToPoint(8.0,playerid,-2670.928710,1429.143432,906.460937)) { return 1; } //Pleasure Dooms.
	}
	return 0;
}
MapaInteres(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,1544.6503,-1681.0081,13.5588)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1738.1191,-1862.8081,13.5758)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1480.902587,-1812.145996,2982.906250)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1187.2397, -1308.5261, 13.36)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,981.88, -1157.62, 23.86)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1195.76160,-919.63928,42.95440)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,562.78448,-1250.29272,17.05990)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,805.96558, -1387.75488, 13.36820)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,159.12520, -1946.87500, 3.57340)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1309.53369, -912.69019, 38.48210)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1756.70984, -1147.42981, 23.74160)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1829.06458, -1679.48926, 13.34690)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1934.27087, -1761.65796, 13.35490)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1205.83118, -1842.73230, 13.35120)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,844.46057, -2059.82544, 12.66720)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1355.60242, -1739.53064, 13.35490)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,2047.20032, -1920.91223, 13.34690)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1832.45776, -1845.49792, 13.37370)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1499.56177, -1740.60071, 13.34690)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1954.05957, -2178.77124, 13.36050)) { return 1; }
		else if(PlayerToPoint(3.0,playerid,1711.08435, -1888.48169, 13.37470)) { return 1; } // Delante del Ayuntamiento.
		else if(PlayerToPoint(3.0,playerid,1719.21936, -1888.48071, 13.37470)) { return 1; } // Aeropuerto.
	}
	return 0;
}

/*IsAtGasT(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(5.0,playerid,-60.2884,59.0147,1023.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-59.3870,58.2315,1004.8693)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.4091,58.8382,1043.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.1126,58.8346,1063.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.4153,58.8366,1083.5759)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,-60.9187,58.8351,1098.5759)) { return 1; }
	}
	return 0;
}*/

IsAtATM(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(2.0,playerid,1488.00000, -1672.30005, 13.6500)) { return 1; } //Obras Salazar Plaza LS.
		//if(PlayerToPoint(2.0,playerid,1467.93250, -1769.47314, 18.34897)) { return 1; } //Ayuntamiento LS
		else if(PlayerToPoint(2.0,playerid,1995.11243, -1774.47559, 13.6)) { return 1; } //Mecánicos
		else if(PlayerToPoint(2.0,playerid,1834.40393, -1851.00659, 13.03265)) { return 1; } //24/7 Unity
		else if(PlayerToPoint(2.0,playerid,1837.34595, -1672.31592, 12.94730)) { return 1; } //Albrahama LS
		else if(PlayerToPoint(2.0,playerid,2010.88110, -1451.23486, 13.17634)) { return 1; } //Hospital LS
		else if(PlayerToPoint(2.0,playerid,2118.22583, -1119.08044, 24.91362)) { return 1; } //COncesionario de Motos LS
		else if(PlayerToPoint(2.0,playerid,607.25879, -1233.42444, 17.88725)) { return 1; } //BAnco Exterior LS
		else if(PlayerToPoint(2.0,playerid,562.59302, -1253.75623, 16.82513)) { return 1; } //Concesionario Grotti LS
		else if(PlayerToPoint(2.0,playerid,58.84294, -1949.27344, 3.35796)) { return 1; } //Faro LS
		else if(PlayerToPoint(2.0,playerid,1254.49707, -1695.39844, 13.12211)) { return 1; } //Inicio de SPawn LS
		else if(PlayerToPoint(2.0,playerid,2449.93066, -1998.21167, 13.06436)) { return 1; } //Mercado Negro LS
		else if(PlayerToPoint(2.0,playerid,2379.11353, 1112.15613, 33.88081)) { return 1; } //Vip Interior Los SAntos
		else if(PlayerToPoint(2.0,playerid,26.65027, -2646.30688, 40.05251)) { return 1; } //24/7 Camino Hacia San Fierro
		else if(PlayerToPoint(2.0,playerid,1541.30005, -1601.90002, 13.20000)) { return 1; } //LSPD
		else if(PlayerToPoint(2.0,playerid,1345.69995, -1753.09998, 13.00000)) { return 1; } //24/7 Ayuntamiento
		else if(PlayerToPoint(2.0,playerid,1318.59998, -897.79999, 39.20000)) { return 1; } //24/7 Vinewood
		else if(PlayerToPoint(2.0,playerid,536.59998, -1740.69995, 11.90000)) { return 1; }  //Casi En La Playa LS
		else if(PlayerToPoint(2.0,playerid,1415.00000, -1020.79999, 23.50000)) { return 1; } //Por Vinewood LS
		else if(PlayerToPoint(2.0,playerid,1109.5964, -1318.3396, 14.7593)) { return 1; } //Antiguo Hospital LS
		else if(PlayerToPoint(2.0,playerid,2228.38989, -1707.78003, 13.25000)) { return 1; } //GYM LS
		else if(PlayerToPoint(2.0,playerid,65.59003, -577.96997, 15.96000)) { return 1; } //Dilmori LS
		else if(PlayerToPoint(2.0,playerid,970.73, -1167.24, 24.80)) { return 1; } // Banco interior
		else if(PlayerToPoint(2.0,playerid,970.72, -1164.30, 24.80)) { return 1; } // banco interior
		else if(PlayerToPoint(2.0,playerid,2249.69995, -1666.90002, 15.10000)) { return 1; } // Binco Groove
	}
	return 0;
}

IsAtHotDogCar(playerid)
{
    if(IsPlayerConnected(playerid))
	{

		if(PlayerToPoint(2.0,playerid, 379.72690, -2036.61328, 7.75957)) { return 1; } // Muelle LS
		else if(PlayerToPoint(2.0,playerid, 1589.69531, -1287.26563, 17.64063)) { return 1; } // Restaurante Nuevo LS
		else if(PlayerToPoint(2.0,playerid, 412.30917, -1556.65393, 27.59367)) { return 1; } // Cerca de Concierto LS
		else if(PlayerToPoint(2.0,playerid, 657.07080, -1387.41052, 13.63818)) { return 1; } // CNN LS
		else if(PlayerToPoint(2.0,playerid, 1053.92175, -1414.03748, 13.58000)) { return 1; } // Cerca de Ciber LS
		else if(PlayerToPoint(2.0,playerid, 1204.43823, -1413.95471, 13.44048)) { return 1; } // Cerca de Job Vendedor de Telefono LS
		else if(PlayerToPoint(2.0,playerid, 1334.32422, -1272.62451, 13.47882)) { return 1; } // Frente Ammu-Nation LS
		else if(PlayerToPoint(2.0,playerid, 1577.43799, -1740.50183, 13.52822)) { return 1; } // Cerca de LSPD
		else if(PlayerToPoint(2.0,playerid, 1725.09009, -1740.15808, 13.55371)) { return 1; } // Cerca de iglesia LS
		else if(PlayerToPoint(2.0,playerid, 1813.64319, -1843.43286, 13.50493)) { return 1; } // Frente 24/7 Unity LS
		else if(PlayerToPoint(2.0,playerid, 1813.56714, -1687.84387, 13.50828)) { return 1; } // Frente Albrahama LS
		else if(PlayerToPoint(2.0,playerid, 1930.07068, -1764.85486, 13.53237)) { return 1; } // 24/7 cerca de albrahama LS
		else if(PlayerToPoint(2.0,playerid, 2226.69434, -1742.29675, 13.56914)) { return 1; } // GYM LS
		else if(PlayerToPoint(2.0,playerid, 2311.67627, -1161.15344, 26.91376)) { return 1; } // Cerca dE Job Traficante de DRoga LS
		else if(PlayerToPoint(2.0,playerid, 2183.71948, -1129.38525, 24.77682)) { return 1; } // Cerca dE Concesionario de Motos LS
		else if(PlayerToPoint(2.0,playerid, 1859.67822, -1452.47852, 13.46702)) { return 1; } // Cerca de Sistema Judicial LS
		else if(PlayerToPoint(2.0,playerid, 1978.86462, -2174.69995, 13.55896)) { return 1; } // Aeropuerto LS
		else if(PlayerToPoint(2.0,playerid, 2227.92334, -1982.84546, 13.47026)) { return 1; } // Cerca de Basureros LS
		else if(PlayerToPoint(2.0,playerid, 2234.67334, -2649.61182, 13.50276)) { return 1; } // Cerca dE Job Camioneros LS
		else if(PlayerToPoint(2.0,playerid, 1717.09998, -1904.04004, 13.58000)) { return 1; }  // Unity LS
		else if(PlayerToPoint(2.0,playerid, 1713.00000, -1904.03003, 13.58000)) { return 1; }  // Unity LS
		else if(PlayerToPoint(2.0,playerid, 1712.59998, -1920.18005, 13.58000)) { return 1; } //Unity LS
		else if(PlayerToPoint(2.0,playerid, 1716.87000, -1920.26001, 13.58000)) { return 1; } // Unity LS
		else if(PlayerToPoint(2.0,playerid, 1099.31653, -1383.34668, 13.91538)) { return 1; } // Ciber LS
	}
	return 0;
}

IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1131.035644,-1315.619506,13.250149))//SAMD
	{
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0,2626.7986, -2443.8145, 14.7340))//SAEM
	{
		return 1;
	}
	return 0;
}

IsAtImpoundingPoint(playerid)
{
	return (IsPlayerInRangeOfPoint(playerid, 50.0,1636.041259,-1811.950317,13.524469));
}

IsAtGasStation(playerid){ //1410, -1525.74, 13.55
    if(IsPlayerConnected(playerid)){
  	if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906))
		{//LS Vinewood y Alhambra.
		    return 1;
		}
		else if(PlayerToPoint(6.0,playerid,-900.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
		{//LS Carretera LS/SF y LS/Angel Pine.
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1409.993896,-1525.738159,13.555365) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF (Plaza del Ayuntamiento y SF, delante de la Base Naval)
		    return 1;
		}
		/*else if(PlayerToPoint(8.0,playerid,1637.0149,2331.5129,10.8722) || PlayerToPoint(6.0,playerid,1636.6686,2325.8711,10.8722))
		{ // LV
		    return 1;
		}*/
		else if(PlayerToPoint(6.0,playerid,1595.5337,2198.9404,10.8203)|| PlayerToPoint(10.0,playerid,1880.558105,-2304.451660,14.119070))
		{
		    return 1; // Gasolinera LV - Gasolinera Aviones.
		}
		else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(6.0,playerid,656.3797,-570.4138,16.5015) || PlayerToPoint(6.0,playerid,2294.2227,-1911.0593,13.5971) )
		{//Dillimore x2 y Gasolinera Extra Taller mecánico.
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1628.361938,-1808.970458,13.521308)) // /Despósito, /embargar.
		{//Dillimore 1568.5785, -1690.0538, 5.2162 = LSPD - Lugar de deposito.
		    return 1;
		}
		else if(PlayerToPoint(8.0,playerid,1568.5785, -1690.0538, 5.2162))
		{//LSPD
		    return 1;
		}
	}
	return 0;
}

IsAtTaller(playerid){
    if(IsPlayerConnected(playerid)){
     	if(PlayerToPoint(50.0,playerid,2048.8359, -1779.5486, 12.3370)){// LS Taller Privado.
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1980.2708, -1789.0167, 12.3555)){// LS Taller Público.
		    return 1;
		}
		/*else if(PlayerToPoint(15.0,playerid,2276.7961,-1919.4464,13.5901)){// LS
		    return 1;
		}*/
	}
	return 0;
 }


IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,46.3752,-76.0410,998.7578))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,499.9703,-20.3358,1000.6797))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,179.2051,-1556.7195,-49.6550))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1215.9480,-13.3519,1000.9219))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{
		    return 1;

		}
		else if(PlayerToPoint(10.0,playerid,159.2834,-791.0306,1084.0078))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,681.2731,-453.8256,-25.6172))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1704.3322,-1877.6541,13.5692))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2792.1606,2407.6143,1240.5311))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2555.6563,1417.1293,7703.7041))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1361.9528,-1764.1641,19.0781))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,-2794.7278,273.3174,27.1350))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1189.0221,-1318.5779,3.1242))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,222.5211,297.6729,955.9631))//
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,1396.6166,-1887.1215,17.5559))// BAR NEWA
		{
		    return 1;
		}
	}
	return 0;
}

IsAtjob(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(10.0,playerid,-105.9964,-1577.9606,2.6172))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2102.6831,-1807.8751,13.5547))
		{
		    return 1;
		}
		else if(PlayerToPoint(10.0,playerid,2022.3375,-1274.7028,23.9763))
		{
		    return 1;
		}
	}
	return 0;
}


CancelTruckDelivery(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsATruckerCar(vehicleid)) SetVehicleToRespawn(vehicleid);
	}
 	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	DeletePVar(playerid, "TruckDeliver");
	TruckContents[TruckUsed[playerid]] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	DisablePlayerCheckpoint(playerid);
	return 1;
}

//*******************CARS*******************
//////// DEFINICIONES DE USO DE LOS COCHES.
// Aquí se agrupan las ID de los coches en grupos.
// Desde ahora las facciones legales e ilegales se agrupan en 2 bloques para más fácil reconocimiento.
forward bool:VehiculoFaccionLegal(carid);
public bool:VehiculoFaccionLegal(carid) //vehicleid legales
{
       if(LSPD_Vehiculos(carid) || FBI_Vehiculos(carid) || SAEM_Vehiculos(carid) || SEC_Vehiculos(carid) || LSTV_Vehiculos(carid) || Mecanicos_Vehiculos(carid) || Gobierno_Vehiculos(carid) || SistemaJudicialAuto(carid))
       {
              return true;
       }
       return false;
}
forward bool:VehiculoFaccionIlegal(carid);
public bool:VehiculoFaccionIlegal(carid) //vehicleid ilegales
{
       if(LCN_Vehiculos(carid) || Yakuza_Vehiculos(carid) || Santana_Vehiculos(carid) || Rusos_Vehiculos(carid)
	   || CDG_Vehiculos(carid) || IsAnHitmanCar(carid) || IsAnGrooveCar(carid) || IsAnBallasCar(carid) || IsAnLatinCar(carid) || IsAnSurCar(carid))
       {
              return true;
       }
       return false;
}
// VEHICULOS NORMALES:
IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}
IsAnBus(carid)
{
	if(GetVehicleModel(carid) == 431 || GetVehicleModel(carid) == 437)
	{
		return 1;
	}
	return 0;
}
LSPD_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(SAPD_Vehicle); v++)
	{
	    if(carid == SAPD_Vehicle[v]) return 1;
	}
	return 0;
}
Santana_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(Santana_Vehicle); v++)
	{
	    if(carid == Santana_Vehicle[v]) return 1;
	}
	return 0;
}

IsAnTaxi(carid)
{
	if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438)
	{
		return 1;
	}
	return 0;
}
Rusos_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(Rusa_Vehicle); v++)
	{
	    if(carid == Rusa_Vehicle[v]) return 1;
	}
	return 0;
}
Taxi_Vehicle(carid)
{
	for(new v = 0; v < sizeof(TaxiTrans); v++)
	{
	    if(carid == TaxiTrans[v]) return 1;
	}
	return 0;
}
Bus_Vehicle(carid)
{
	for(new v = 0; v < sizeof(TBuses); v++)
	{
	    if(carid == TBuses[v]) return 1;
	}
	return 0;
}
Heladero_Vehicle(carid)
{
	for(new v = 0; v < sizeof(CochesHeladero); v++)
	{
	    if(carid == CochesHeladero[v]) return 1;
	}
	return 0;
}
Jardinero_Vehicle(carid)
{
	for(new v = 0; v < sizeof(koscar); v++)
	{
	    if(carid == koscar[v]) return 1;
	}
	return 0;
}
Aero_Vehicle(carid)
{
	for(new v = 0; v < sizeof(AeroCar); v++)
	{
	    if(carid == AeroCar[v]) return 1;
	}
	return 0;
}
Tren_Vehicle(carid)
{
	for(new v = 0; v < sizeof(TrenVEH); v++)
	{
	    if(carid == TrenVEH[v]) return 1;
	}
	return 0;
}
IsATruckerCar(carid)
{
	for(new v = 0; v < sizeof(TruckerVehicles); v++)
	{
	    if(carid == TruckerVehicles[v]) return 1;
	}
	return 0;
}

IsAHarvest(carid)
{
	if(GetVehicleModel(carid) == 532)
	{
		return 1;
	}
	return 0;
}

Vortex_Vehicle(carid)
{
	if(GetVehicleModel(carid) == 539)
	{
		return 1;
	}
	return 0;
}

IsAPizzabike(carid)
{
	for(new v = 0; v < sizeof(PizzaBike); v++)
	{
	    if(carid == PizzaBike[v]) return 1;
	}
	return 0;
}

IsAnAmbulance(carid)
{
	if(GetVehicleModel(carid) == 416)
	{
		return 1;
	}
	return 0;
}

SEC_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(SEC_Vehicle); v++)
	{
	    if(carid == SEC_Vehicle[v]) return 1;
	}
	return 0;
}

Mecanicos_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(Mecanicos_Vehicle); v++)
	{
	    if(carid == Mecanicos_Vehicle[v]) return 1;
	}
	return 0;
}

FBI_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(FBI_Vehicle); v++)
	{
	    if(carid == FBI_Vehicle[v]) return 1;
	}
	return 0;
}
/*AlQaeda_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(Alqaeda_Vehicle); v++)
	{
	    if(carid == Alqaeda_Vehicle[v]) return 1;
	}
	return 0;
}*/
LSTV_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(LSTV_Vehicle); v++)
	{
	    if(carid == LSTV_Vehicle[v]) return 1;
	}
	return 0;
}
VIP_Car(carid)
{
	for(new v = 0; v < sizeof(CarVIP); v++)
	{
	    if(carid == CarVIP[v]) return 1;
	}
	return 0;
}
Entorno_Car(carid)
{
	for(new v = 0; v < sizeof(Entorno_Vehicle); v++)
	{
	    if(carid == Entorno_Vehicle[v]) return 1;
	}
	return 0;
}
IsARentCar(carid)
{
	for(new v = 0; v < sizeof(Rentbike); v++)
	{
	    if(carid == Rentbike[v]) return 1;
	}
	return 0;
}
SAEM_Vehiculos(carid)
{
	for(new i = 0; i < sizeof(SAEM_Vehicle); i++)
	{
		if(SAEM_Vehicle[ i ] == carid) return 1;
	}
	return 0;
}

Gobierno_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(Gobierno_Vehicle); v++)
	{
	    if(carid == Gobierno_Vehicle[v]) return 1;
	}
	return 0;
}
IsAnHitmanCar(carid)
{
   for(new v = 0; v < sizeof(Hitman_Vehicle); v++)
   {
       if(carid == Hitman_Vehicle[v]) return 1;
   }
return 0;
}
SistemaJudicialAuto(carid)
{
	for(new v = 0; v < sizeof(SJ_Vehicle); v++)
	{
	    if(carid == SJ_Vehicle[v]) return 1;
	}
	return 0;
}
IsAnGrooveCar(carid)
{
   for(new v = 0; v < sizeof(Groove_Vehicle); v++)
   {
	   if(carid == Groove_Vehicle[v]) return 1;
   }
   return 0;
}
IsAnBallasCar(carid)
{
   for(new v = 0; v < sizeof(Ballas_Vehicle); v++)
   {
	   if(carid == Ballas_Vehicle[v]) return 1;
   }
   return 0;
}
IsAnLatinCar(carid)
{
   for(new v = 0; v < sizeof(Latin_Vehicle); v++)
   {
	   if(carid == Latin_Vehicle[v]) return 1;
   }
   return 0;
}
IsAnSurCar(carid)
{
   for(new v = 0; v < sizeof(Sureno_Vehicle); v++)
   {
	   if(carid == Sureno_Vehicle[v]) return 1;
   }
   return 0;
}
LCN_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(LCN_Vehicle); v++)
	{
	    if(carid == LCN_Vehicle[v]) return 1;
	}
	return 0;
}
Yakuza_Vehiculos(carid)
{
	for(new v = 0; v < sizeof(Yakuza_Vehicle); v++)
	{
	    if(carid == Yakuza_Vehicle[v]) return 1;
	}
	return 0;
}

/*ALEPH_Vehiculos(carid) FACCION CERRADA.
{
	for(new v = 0; v < sizeof(ALEPH_Vehicle); v++)
	{
	    if(carid == ALEPH_Vehicle[v]) return 1;
	}
	return 0;
}*/

CDG_Vehiculos(carid)
{
	for(new i = 0; i < sizeof(CDG_Vehicle); i++)
	{
		if(CDG_Vehicle[ i ] == carid) return 1;
	}
	return 0;
}
IsABike(carid)
{
	if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) ==  481 || GetVehicleModel(carid) == 510)
	{
		return 1;
	}
	return 0;
}

IsAMBike(carid)
{
    new Motorads[] = {509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471};
    for(new i = 0; i < sizeof(Motorads); i++)
	{
        if(GetVehicleModel(carid) == Motorads[i]) return 1;
    }
    return 0;
}

IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}
IsABoat(carid)
{
	new Boats[] = { 472, 473, 493, 484, 430, 454, 453, 452, 446 };
	for(new i = 0; i < sizeof(Boats); i++){
		if(GetVehicleModel(carid) == Boats[i]) return 1;
	}
	return 0;
}
IsALicCar(carid)
{
	for(new i = 0; i < sizeof(Test_Vehicle); i++)
	{
		if(Test_Vehicle[ i ] == carid) return 1;
	}
	return 0;
}
GivePlayerValidWeapon(playerid, WeaponID){
    if((Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) && WeaponID != 46 && WeaponID != 43) return 1;
	switch( WeaponID ){
  		case 0, 1:{
			Info[playerid][pWeapons][ 0 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:{
			Info[playerid][pWeapons][ 1 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 22, 23, 24:{ // Pistolas.
			Info[playerid][pWeapons][ 2 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 20);
		}
		case 25, 26, 27:{ // Escopetas.
			Info[playerid][pWeapons][ 3 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 50);
		}
		case 28, 29, 32:{ // Automáticas.
			Info[playerid][pWeapons][ 4 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 100);
		}
		case 30, 31:{ // Armas pesadas.
			Info[playerid][pWeapons][ 5 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 80);
		}
		case 33, 34:{
			Info[playerid][pWeapons][ 6 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 40);
		}
		case 35, 36, 37, 38:{
			Info[playerid][pWeapons][ 7 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 100);
		}
		case 16, 17, 18, 39:{
			Info[playerid][pWeapons][ 8 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 20);
		}
		case 41, 42, 43:{
			Info[playerid][pWeapons][ 9 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 50);
		}
		case 10, 11, 12, 13, 14, 15:{
			Info[playerid][pWeapons][ 10 ] = WeaponID;
   			GivePlayerWeapon( playerid, WeaponID, 1);
		}
		case 44, 45, 46:{
			Info[playerid][pWeapons][ 11 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, 1);
		}
	    case 40: {
	        Info[playerid][pWeapons][12] = WeaponID;
	        GivePlayerWeapon(playerid, WeaponID, 1);
	    }
	}
	return 1;
}
stock GetWeaponSlot(weaponid) {
	switch(weaponid) {
		case 0, 1: return 0;
		case 2 .. 9: return 1;
		case 22 .. 24: return 2;
		case 25 .. 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35 .. 38: return 7;
		case 16, 17, 18, 39: return 8;
		case 41 .. 43: return 9;
		case 10 .. 15: return 10;
		case 44 .. 46: return 11;
		case 40: return 12;
	}
	return -1;
}
stock ResetPlayerWeaponsEx( playerid ){
	ResetPlayerWeapons(playerid);
	Info[playerid][pWeapons][0] = 0;
	Info[playerid][pWeapons][1] = 0;
	Info[playerid][pWeapons][2] = 0;
	Info[playerid][pWeapons][3] = 0;
	Info[playerid][pWeapons][4] = 0;
	Info[playerid][pWeapons][5] = 0;
	Info[playerid][pWeapons][6] = 0;
	Info[playerid][pWeapons][7] = 0;
	Info[playerid][pWeapons][8] = 0;
	Info[playerid][pWeapons][9] = 0;
	Info[playerid][pWeapons][10] = 0;
	Info[playerid][pWeapons][11] = 0;
	Info[playerid][pWeapons][12] = 0;
	return 1;
}
stock PlayerPlaySoundEx(soundid, Float:x, Float:y, Float:z) { //Realistic sound playback
	foreach(Player, i) {
		if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z))
			PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}
partType(type)
{
	new name[64];
	switch(type){
	    case 0: name = "Alerón";
        case 1: name = "Capó";
        case 2: name = "Techo";
        case 3: name = "Lados";
        case 4: name = "Lamps";
        case 5: name = "Nitro";
        case 6: name = "Escape";
        case 7: name = "Ruedas";
        case 8: name = "Stereo";
        case 9: name = "Hidráulica";
        case 10: name = "Parachoque D.";
        case 11: name = "Parachoque T.";
        case 12: name = "Ventilacion Izq.";
        case 13: name = "Ventilacion Der.";
        default: name = "Desconocida";
	}
	return name;
}

partName(part){

	new
		name[24];

	switch(part - 1000) {
		case 0:	name = "Pro";
		case 1: name = "Win";
		case 2: name = "Drag";
		case 3: name = "Alpha";
		case 4: name = "Champ Scoop";
		case 5: name = "Fury Scoop";
		case 6: name = "Roof Scoop";
		case 7: name = "Sideskirt";
		case 8: name = "2x";
		case 9: name = "5x";
		case 10: name = "10x";
		case 11: name = "Race Scoop";
		case 12: name = "Worx Scoop";
		case 13: name = "Round Fog";
		case 14: name = "Champ";
		case 15: name = "Race";
		case 16: name = "Worx";
		case 17: name = "Sideskirt";
		case 18: name = "Upswept";
		case 19: name = "Twin";
		case 20: name = "Large";
		case 21: name = "Medium";
		case 22: name = "Small";
		case 23: name = "Fury";
		case 24: name = "Square Fog";
		case 26: name = "Alien";
		case 27: name = "Alien";
		case 28: name = "Alien";
		case 29: name = "X-Flow";
		case 30: name = "X-Flow";
		case 31: name = "X-Flow";
		case 32: name = "Alien Roof Vent";
		case 33: name = "X-Flow Roof Vent";
		case 34: name = "Alien";
		case 35: name = "X-Flow Roof Vent";
		case 36: name = "Alien";
		case 37: name = "X-Flow";
		case 38: name = "Alien Roof Vent";
		case 39: name = "X-Flow";
		case 40: name = "Alien";
		case 41: name = "X-Flow";
		case 42: name = "Chrome";
		case 43: name = "Slamin";
		case 44: name = "Chrome";
		case 45: name = "X-Flow";
		case 46: name = "Alien";
		case 47: name = "Alien";
		case 48: name = "X-Flow";
		case 49: name = "Alien";
		case 50: name = "X-Flow";
		case 51: name = "Alien";
		case 52: name = "X-Flow";
		case 53: name = "X-Flow";
		case 54: name = "Alien";
		case 55: name = "Alien";
		case 56: name = "Alien";
		case 57: name = "X-Flow";
		case 58: name = "Alien";
		case 59: name = "X-Flow";
		case 60: name = "X-Flow";
		case 61: name = "X-Flow";
		case 62: name = "Alien";
		case 63: name = "X-Flow";
		case 64: name = "Alien";
		case 65: name = "Alien";
		case 66: name = "X-Flow";
		case 67: name = "Alien";
		case 68: name = "X-Flow";
		case 69: name = "Alien";
		case 70: name = "X-Flow";
		case 71: name = "Alien";
		case 72: name = "X-Flow";
		case 88: name = "Alien";
		case 89: name = "X-Flow";
		case 90: name = "Alien";
		case 91: name = "X-Flow";
		case 92: name = "Alien";
		case 93: name = "X-Flow";
		case 94: name = "Alien";
		case 95: name = "X-Flow";
		case 99: name = "Chrome";
		case 100: name = "Chrome Grill";
		case 101: name = "Chrome Flames";
		case 102: name = "Chrome Strip";
		case 103: name = "Convertible";
		case 104: name = "Chrome";
		case 105: name = "Slamin";
		case 106: name = "Chrome Arches";
		case 107: name = "Chrome Strip";
		case 108: name = "Chrome Strip";
		case 109: name = "Chrome";
		case 110: name = "Slamin";
		case 113: name = "Chrome";
		case 114: name = "Slamin";
		case 115: name = "Chrome";
		case 116: name = "Slamin";
		case 117: name = "Chrome";
		case 118: name = "Chrome Trim";
		case 119: name = "Wheelcovers";
		case 120: name = "Chrome Trim";
		case 121: name = "Wheelcovers";
		case 122: name = "Chrome Flames";
		case 123: name = "Bullbar Chrome Bars";
		case 124: name = "Chrome Arches";
		case 125: name = "Bullbar Chrome Lights";
		case 126: name = "Chrome";
		case 127: name = "Slamin";
		case 128: name = "Vinyl Hardtop";
		case 129: name = "Chrome";
		case 130: name = "Hardtop";
		case 131: name = "Softtop";
		case 132: name = "Slamin";
		case 133: name = "Chrome Strip";
		case 134: name = "Chrome Strip";
		case 135: name = "Slamin";
		case 136: name = "Chrome";
		case 137: name = "Chrome Strip";
		case 138: name = "Alien";
		case 139: name = "X-Flow";
		case 140: name = "X-Flow";
		case 141: name = "Alien";
		case 142: name = "Left Oval Vents";
		case 143: name = "Right Oval Vents";
		case 144: name = "Left Square Vents";
		case 145: name = "Right Square Vents";
		case 146: name = "X-Flow";
		case 147: name = "Alien";
		case 148: name = "X-Flow";
		case 149: name = "Alien";
		case 150: name = "Alien";
		case 151: name = "X-Flow";
		case 152: name = "X-Flow";
		case 153: name = "Alien";
		case 154: name = "Alien";
		case 155: name = "Alien";
		case 156: name = "X-Flow";
		case 157: name = "X-Flow";
		case 158: name = "X-Flow";
		case 159: name = "Alien";
		case 160: name = "Alien";
		case 161: name = "X-Flow";
		case 162: name = "Alien";
		case 163: name = "X-Flow";
		case 164: name = "Alien";
		case 165: name = "X-Flow";
		case 166: name = "Alien";
		case 167: name = "X-Flow";
		case 168: name = "Alien";
		case 169: name = "Alien";
		case 170: name = "X-Flow";
		case 171: name = "Alien";
		case 172: name = "X-Flow";
		case 173: name = "X-Flow";
		case 174: name = "Chrome";
		case 175: name = "Slamin";
		case 176: name = "Chrome";
		case 177: name = "Slamin";
		case 178: name = "Slamin";
		case 179: name = "Chrome";
		case 180: name = "Chrome";
		case 181: name = "Slamin";
		case 182: name = "Chrome";
		case 183: name = "Slamin";
		case 184: name = "Chrome";
		case 185: name = "Slamin";
		case 186: name = "Slamin";
		case 187: name = "Chrome";
		case 188: name = "Slamin";
		case 189: name = "Chrome";
		case 190: name = "Slamin";
		case 191: name = "Chrome";
		case 192: name = "Chrome";
		case 193: name = "Slamin";
	}
	return name;
}

//**************************************

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC(playerid)) return 1;
    return 1;
}

public OnPlayerConnect(playerid)
{
//***SISTEMA AFK***
Afk[playerid]=0;
//***sistema de fire***
Apagandofire[playerid] = 0;
llegarf[playerid] = false;
//**security**
#if defined AntiJoin 1
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Entradas = 0;
new RegistroIP[20];
new Cuenta = GetTickCount();
new Nick[MAX_PLAYER_NAME];
new Codigo;
new Jugador;
new Menu[1024];
if(DetectarIP(ObtenerIP(playerid)) >= 10) return BanearBots(playerid), 0;
Jugadores = playerid > Jugadores ? playerid : IDMayor(),
BotServidor[playerid] = bool:IsPlayerNPC(playerid),
Advertencias[playerid] = 0;
Muertes[playerid] = 0;
MuerteReciente[playerid] = 0;
GetPlayerIp(playerid, RegistroIP, 19);
GetPlayerName(playerid, Nick, MAX_PLAYER_NAME);
for(Codigo = 0; Codigo < 10; Codigo++)
{
if(strlen(EntrarIP[Codigo]) < 10)  continue;
if(strcmp(RegistroIP, EntrarIP[Codigo], true) == 0)
{
if((Cuenta - MenorTiempo) < EntrarCuenta[Codigo])
{
Entradas++;
}
}
}
if (Entradas >= Logueos)
{
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por Hack.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado. Razón: Posible intento de Score Hack.", Nombre);
//SendClientMessageToAll(Gris, Texto);
ABroadCast(Gris, Texto,5000);
Kick(playerid);
}
for (Codigo = 9; Codigo > 0; Codigo--)
{
Jugador = Codigo - 1;
format(EntrarIP[Codigo], 19, "%s", EntrarIP[Jugador]);
EntrarCuenta[Codigo] = EntrarCuenta[Jugador];
}
format(EntrarIP[0], 19, "%s", RegistroIP);
EntrarCuenta[0] = Cuenta;
#endif
	//************
    if(IsPlayerNPC(playerid)) return 1;
	new playerIP[16];
	FPS[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	GetPlayerIp(playerid, playerIP, sizeof(playerIP));
	SetPlayerColor(playerid,COLOR_GRAD2);
    PlayAudioStreamForPlayer(playerid,"http://k46.offliberty.com/irYgsp17Wbw.mp3");
	//PlayAudioStreamForPlayer(playerid, "http://k3.offliberty.com/fiore9Z5iUg.mp3"); // Entrada de servidor. //Lilly Wood & The Prick and Robin Schulz - Prayer In C. 4.0
	//PlayAudioStreamForPlayer(playerid, "http://k64.offliberty.com/RYzQvj3icjs.mp3"); // Omi - Hula Hoop. 4.2.
	//PlayAudioStreamForPlayer(playerid, "http://k56.offliberty.com/RgKAFK5djSk.mp3"); // Wiz Khalifa - See You Again ft. Charlie Puth. 4.5
	//PlayAudioStreamForPlayer(playerid, "http://newstate-rp.com/host/4.0.mp3"); // Lost Frequencies - Are You With Me. 4.7
	//SendClientMessage(playerid, COLOR_BLUED, "" );
	//SendClientMessage(playerid, COLOR_BLUED, "" );
 	for(new loop=0; loop<20; loop++)  SendClientMessage(playerid, COLOR_WHITE,"");
	SendClientMessage(playerid, COLOR_BLUED, "BIENVENIDO A INFRANET ROLEPLAY" );
    //GameTextForPlayer(playerid, "~B~Bienvenido a ~W~tu segunda vida!", 3000, 3);
	if (CheckBan(playerIP) == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_RED, "{00B500}INFRANET - RP:{FFFFFF} Lo sentimos, te encuentras baneado de este servidor - Puedes pedir ser Desbaneado en el Foro:");
		Kick(playerid);
		return 1;
 	}
	new ip[32], stringIP[128]; // IP Logeo. /Said. (Info[playerid][pLeader] == 0)
	new nick[MAX_PLAYER_NAME]; // Obtener el name.
	GetPlayerIp(playerid,ip,sizeof(ip));
	GetPlayerName(playerid, nick, sizeof(nick)); //Carl McNeill -  Matias_Espinoza - Rai Salazar
	if(!strcmp(nick, "Alexey_Kozlov", true) || !strcmp(nick, "Harold_Hitchman", true))
	{
		format(stringIP, sizeof(stringIP), "%s [ID:%d] ha entrado al servidor.", GetPlayerNameEx(playerid), playerid);
		ABroadCast(COLOR_ORANGE, stringIP, 5000); // Solo administradores rango alto saben de tu logeo.
	}
	else
	{
		format(stringIP, sizeof(stringIP), "%s [ID:%d] ha entrado al servidor con la IP %s.", GetPlayerNameEx(playerid), playerid, ip);
		ABroadCast(COLOR_ORANGE, stringIP, 2);
	}
	CheckPlayerIP(playerid); // Multicuentas al acecho :D
	// Sistema de aviso de IP al logear.
	TotalConnect++;
	resetPlayerVariables(playerid);
	MapsRemoveForPlayer(playerid);
	ClearMarriage(playerid);
	SyncPlayerTime(playerid);
 	ShowMenuLogin(playerid);
	if(Iter_Count(Player) > MaxPlayersConnected)
	{
		MaxPlayersConnected = Iter_Count(Player);
		gettime(MPHour,MPMinute);
		getdate(MPYear,MPMonth,MPDay);
	}
	if(Info[playerid][pPbizzkey] == 0)
	{
	Info[playerid][pPbizzkey] = 9999;
	}
	if(MaxPlayersConnected > 200) MaxPlayersConnected = 200;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(!INI_Exist(playername))
	{
    	if(doesAccountExist(playername))
    	{
			ConvertAccount(playerid);
			return 1;
		}
	}
	SetTimerEx("SafeLogin", 4000, 0, "d", playerid);
	Koson1[playerid] = 0;Kosonrob[playerid] = 1 ;
    recojercesped[playerid]=0;
    papilla[playerid] = 0;
    acobrarcesped[playerid]=0;
    autorepara[playerid] = 0;
    armaRecibir[playerid]=0;
	SetPVarInt(playerid,"PlayerStartDrova",0);
	lena1[playerid] = 0;
	HaveTaser[playerid] = 0; // Tazer Antiguo.
	Tazed[playerid] = 0;
 	Tazer[playerid] = 0;
	Tag_Load(playerid); // Tags.
	RemovePlayerAttachedObject(playerid, 0);
	SetPVarInt(playerid,"Miner", 0);
 	SetPVarInt(playerid,"Start", 0);
 	Vortex[playerid] = 0;
 	// Administración.
 	See_MP[playerid] = 0;
 	See_SMS[playerid] = 0; // Canal /sms, evitar MG.
    See_FAM[playerid] = 0; // Canal /f de las facciones.
    See_FRC[playerid] = 0; // Frecuencia de la radio.
    AdminChatAvisos[playerid] = 0; // Se activa al logea, usar /togmuertes.
	//*******************texto estado*******************
	textdrawscount++;
 	VentaDeArmaCon[playerid][0] = -1;
    VentaDeArmaCon[playerid][1] = 0;
    Watching[playerid] = 1;
    manubrio[playerid] = 0;
    refuer[playerid] = 0;
    RadioOn[playerid] = 1;
    SetTimerEx("TimerROB",1200000,false,"d",playerid);

//***dni por textdraw***
DNI12[playerid] = CreatePlayerTextDraw(playerid,196.000000, 174.195556, "LD_SPAC:white");//skin
PlayerTextDrawBackgroundColor(playerid, DNI12[playerid], 0);
PlayerTextDrawTextSize(playerid, DNI12[playerid], 77.777770, 136.391113);
PlayerTextDrawUseBox(playerid, DNI12[playerid], 1);
PlayerTextDrawBoxColor(playerid, DNI12[playerid], 0x00000000);
PlayerTextDrawColor(playerid, DNI12[playerid], -1);
PlayerTextDrawFont(playerid, DNI12[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);

DNI0[playerid] = CreatePlayerTextDraw(playerid, 445.000000, 143.250000, "usebox");
PlayerTextDrawLetterSize(playerid, DNI0[playerid], 0.000000, 20.343055);
PlayerTextDrawTextSize(playerid, DNI0[playerid], 211.500000, 0.000000);
PlayerTextDrawAlignment(playerid, DNI0[playerid], 1);
PlayerTextDrawColor(playerid, DNI0[playerid], 0);
PlayerTextDrawUseBox(playerid, DNI0[playerid], true);
PlayerTextDrawBoxColor(playerid, DNI0[playerid], 102);
PlayerTextDrawSetShadow(playerid, DNI0[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI0[playerid], 0);
PlayerTextDrawFont(playerid, DNI0[playerid], 0);

DNI1[playerid] = CreatePlayerTextDraw(playerid, 213.000000, 142.187500, "ld_drv:ribbw");
PlayerTextDrawLetterSize(playerid, DNI1[playerid], 0.000000, 0.000000);
PlayerTextDrawTextSize(playerid, DNI1[playerid], 106.000000, 34.562500);
PlayerTextDrawAlignment(playerid, DNI1[playerid], 1);
PlayerTextDrawColor(playerid, DNI1[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI1[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI1[playerid], 0);
PlayerTextDrawBackgroundColor(playerid, DNI1[playerid], -5963521);
PlayerTextDrawFont(playerid, DNI1[playerid], 4);

DNI2[playerid] = CreatePlayerTextDraw(playerid, 386.500000, 136.500000, "DNI");
PlayerTextDrawLetterSize(playerid, DNI2[playerid], 0.742500, 3.126873);
PlayerTextDrawAlignment(playerid, DNI2[playerid], 1);
PlayerTextDrawColor(playerid, DNI2[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI2[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI2[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI2[playerid], 51);
PlayerTextDrawFont(playerid, DNI2[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI2[playerid], 1);

DNI3[playerid] = CreatePlayerTextDraw(playerid, 390.500000, 164.937500, "596412235");
PlayerTextDrawLetterSize(playerid, DNI3[playerid], 0.210000, 1.429375);
PlayerTextDrawAlignment(playerid, DNI3[playerid], 1);
PlayerTextDrawColor(playerid, DNI3[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI3[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI3[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI3[playerid], 51);
PlayerTextDrawFont(playerid, DNI3[playerid], 1);
PlayerTextDrawSetProportional(playerid, DNI3[playerid], 1);

DNI4[playerid] = CreatePlayerTextDraw(playerid, 290.000000, 201.687500, "Nombre");
PlayerTextDrawLetterSize(playerid, DNI4[playerid], 0.373999, 2.238747);
PlayerTextDrawAlignment(playerid, DNI4[playerid], 1);
PlayerTextDrawColor(playerid, DNI4[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI4[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI4[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI4[playerid], 51);
PlayerTextDrawFont(playerid, DNI4[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI4[playerid], 1);

DNI5[playerid] = CreatePlayerTextDraw(playerid, 290.500000, 225.750000, "nombre apellido");
PlayerTextDrawLetterSize(playerid, DNI5[playerid], 0.173499, 1.678749);
PlayerTextDrawAlignment(playerid, DNI5[playerid], 1);
PlayerTextDrawColor(playerid, DNI5[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI5[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI5[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI5[playerid], 51);
PlayerTextDrawFont(playerid, DNI5[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI5[playerid], 1);

DNI6[playerid] = CreatePlayerTextDraw(playerid, 291.000000, 253.312500, "Edad");
PlayerTextDrawLetterSize(playerid, DNI6[playerid], 0.460499, 2.033123);
PlayerTextDrawAlignment(playerid, DNI6[playerid], 1);
PlayerTextDrawColor(playerid, DNI6[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI6[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI6[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI6[playerid], 51);
PlayerTextDrawFont(playerid, DNI6[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI6[playerid], 1);

DNI7[playerid] = CreatePlayerTextDraw(playerid, 291.000000, 276.500000, "99");
PlayerTextDrawLetterSize(playerid, DNI7[playerid], 0.403000, 1.258750);
PlayerTextDrawAlignment(playerid, DNI7[playerid], 1);
PlayerTextDrawColor(playerid, DNI7[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI7[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI7[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI7[playerid], 51);
PlayerTextDrawFont(playerid, DNI7[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI7[playerid], 1);

DNI8[playerid] = CreatePlayerTextDraw(playerid, 368.500000, 254.187500, "sexo");
PlayerTextDrawLetterSize(playerid, DNI8[playerid], 0.456999, 1.954373);
PlayerTextDrawAlignment(playerid, DNI8[playerid], 1);
PlayerTextDrawColor(playerid, DNI8[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI8[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI8[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI8[playerid], 51);
PlayerTextDrawFont(playerid, DNI8[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI8[playerid], 1);

DNI9[playerid] = CreatePlayerTextDraw(playerid, 368.500000, 276.937500, "hombre");
PlayerTextDrawLetterSize(playerid, DNI9[playerid], 0.281000, 1.118749);
PlayerTextDrawAlignment(playerid, DNI9[playerid], 1);
PlayerTextDrawColor(playerid, DNI9[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI9[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI9[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI9[playerid], 51);
PlayerTextDrawFont(playerid, DNI9[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI9[playerid], 1);

DNI10[playerid] = CreatePlayerTextDraw(playerid, 290.500000, 294.000000, "Nacionalidad");
PlayerTextDrawLetterSize(playerid, DNI10[playerid], 0.419500, 1.582500);
PlayerTextDrawAlignment(playerid, DNI10[playerid], 1);
PlayerTextDrawColor(playerid, DNI10[playerid], 11526143);
PlayerTextDrawSetShadow(playerid, DNI10[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI10[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI10[playerid], 51);
PlayerTextDrawFont(playerid, DNI10[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI10[playerid], 1);

DNI11[playerid] = CreatePlayerTextDraw(playerid, 309.000000, 312.812500, "San Fierro");
PlayerTextDrawLetterSize(playerid, DNI11[playerid], 0.287500, 1.250000);
PlayerTextDrawAlignment(playerid, DNI11[playerid], 1);
PlayerTextDrawColor(playerid, DNI11[playerid], -1);
PlayerTextDrawSetShadow(playerid, DNI11[playerid], 0);
PlayerTextDrawSetOutline(playerid, DNI11[playerid], 1);
PlayerTextDrawBackgroundColor(playerid, DNI11[playerid], 51);
PlayerTextDrawFont(playerid, DNI11[playerid], 2);
PlayerTextDrawSetProportional(playerid, DNI11[playerid], 1);
//**********************
//***licencia por textdraw***
//textdraw licencias
 	LICENCIA0[playerid] = CreatePlayerTextDraw(playerid,423.333221, 146.851150, "usebox");
	PlayerTextDrawLetterSize(playerid, LICENCIA0[playerid], 0.000000, 17.713949);
	PlayerTextDrawTextSize(playerid, LICENCIA0[playerid], 197.111145, 0.000000);
	PlayerTextDrawAlignment(playerid, LICENCIA0[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA0[playerid], 0);
	PlayerTextDrawUseBox(playerid, LICENCIA0[playerid], true);
	PlayerTextDrawBoxColor(playerid, LICENCIA0[playerid], 102);
	PlayerTextDrawSetShadow(playerid, LICENCIA0[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA0[playerid], 0);
	PlayerTextDrawFont(playerid, LICENCIA0[playerid], 0);

	LICENCIA5[playerid] = CreatePlayerTextDraw(playerid,290.222015, 229.475631, "nombre");
	PlayerTextDrawLetterSize(playerid, LICENCIA5[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LICENCIA5[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA5[playerid], 869072810);
	PlayerTextDrawSetShadow(playerid, LICENCIA5[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA5[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA5[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA5[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA5[playerid], 1);

	LICENCIA6[playerid] = CreatePlayerTextDraw(playerid,291.110992, 260.337951, "edad");
	PlayerTextDrawLetterSize(playerid, LICENCIA6[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LICENCIA6[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA6[playerid], 869072810);
	PlayerTextDrawSetShadow(playerid, LICENCIA6[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA6[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA6[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA6[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA6[playerid], 1);

	LICENCIA7[playerid] = CreatePlayerTextDraw(playerid,291.999847, 281.742340, "sexo");
	PlayerTextDrawLetterSize(playerid, LICENCIA7[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, LICENCIA7[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA7[playerid], 869072810);
	PlayerTextDrawSetShadow(playerid, LICENCIA7[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA7[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA7[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA7[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA7[playerid], 1);

	LICENCIA1[playerid] = CreatePlayerTextDraw(playerid,204.888900, 155.306671, "_"); //SKIN
	PlayerTextDrawLetterSize(playerid, LICENCIA1[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LICENCIA1[playerid], 80.888839, 144.355529);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA1[playerid], 0);
	PlayerTextDrawUseBox(playerid, LICENCIA1[playerid], 1);
	PlayerTextDrawBoxColor(playerid, LICENCIA1[playerid], 0x00000000);
	PlayerTextDrawColor(playerid, LICENCIA1[playerid], -1);
	PlayerTextDrawFont(playerid, LICENCIA1[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);

	LICENCIA2[playerid] = CreatePlayerTextDraw(playerid,291.111358, 246.897644, "nombre_apellido");
	PlayerTextDrawLetterSize(playerid, LICENCIA2[playerid], 0.227332, 1.151991);
	PlayerTextDrawAlignment(playerid, LICENCIA2[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA2[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA2[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA2[playerid], 1);

	LICENCIA3[playerid] = CreatePlayerTextDraw(playerid,334.666656, 149.333389, "_");//ICONO LICENCIA
	PlayerTextDrawLetterSize(playerid, LICENCIA3[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, LICENCIA3[playerid], 82.222198, 80.640014);
	PlayerTextDrawTextSize(playerid, LICENCIA3[playerid], 82.222198, 80.640014);
	PlayerTextDrawAlignment(playerid, LICENCIA3[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA3[playerid], 0);
	PlayerTextDrawFont(playerid, LICENCIA3[playerid], 4);

	LICENCIA4[playerid] = CreatePlayerTextDraw(playerid,352.000061, 262.826721, "99");
	PlayerTextDrawLetterSize(playerid, LICENCIA4[playerid], 0.227332, 1.151998);
	PlayerTextDrawAlignment(playerid, LICENCIA4[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA4[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA4[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA4[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA4[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA4[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA4[playerid], 1);

	LICENCIA8[playerid] = CreatePlayerTextDraw(playerid,351.555389, 284.231170, "hombre");
	PlayerTextDrawLetterSize(playerid, LICENCIA8[playerid], 0.227332, 1.151998);
	PlayerTextDrawAlignment(playerid, LICENCIA8[playerid], 1);
	PlayerTextDrawColor(playerid, LICENCIA8[playerid], -1);
	PlayerTextDrawSetShadow(playerid, LICENCIA8[playerid], 0);
	PlayerTextDrawSetOutline(playerid, LICENCIA8[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, LICENCIA8[playerid], 51);
	PlayerTextDrawFont(playerid, LICENCIA8[playerid], 2);
	PlayerTextDrawSetProportional(playerid, LICENCIA8[playerid], 1);
	//textdraw dni
	DNI12[playerid] = CreatePlayerTextDraw(playerid,196.000000, 174.195556, "LD_SPAC:white");//skin
	PlayerTextDrawBackgroundColor(playerid, DNI12[playerid], 0);
	PlayerTextDrawTextSize(playerid, DNI12[playerid], 77.777770, 136.391113);
	PlayerTextDrawUseBox(playerid, DNI12[playerid], 1);
	PlayerTextDrawBoxColor(playerid, DNI12[playerid], 0x00000000);
	PlayerTextDrawColor(playerid, DNI12[playerid], -1);
	PlayerTextDrawFont(playerid, DNI12[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);
//**********************
	return 1;
}

// Sistema de Tazer. - HAVETASER.

public DestroySpark(playerid)
{
        DestroyObject(Spark[playerid]);
        return 1;
}

public TazedRemove(playerid)
{
        TogglePlayerControllable(playerid, 1);
        ClearAnimations(playerid);
        Tazed[playerid] = 0;
       	Info[playerid][pEstado] = 0;
		DeletePVar(playerid, "IsFrozen");
        return 1;
}

function SafeLogin(playerid)
{
ClearChatbox(playerid);
new LogeoReglas[500]; //10.000
strcat(LogeoReglas, "{05a1ff}BIENVENIDOS INFRANET ROLEPLAY 2018.\n\n");
strcat(LogeoReglas, "{F0F0F0}Somos una comunidad con muchas ganas de crecer y mejorar.\n");
strcat(LogeoReglas, "{F0F0F0}Los comandos de ayuda fueron cambiados para mejor soporte.\n");
strcat(LogeoReglas, "{F0F0F0}Para más información, entrar al foro {D8D8D8}infranet.foroactivo.com.\n");
strcat(LogeoReglas, "\n");
strcat(LogeoReglas, "{F0F0F0}Gracias por elegirnos y formar parte de esta gran comunidad.\n");
strcat(LogeoReglas, "{F0F0F0}La norma más importante, disfruta del rol al máximo.\n");
SafeDialogEx(playerid, ACEPTAR_TER, DIALOG_STYLE_MSGBOX, " ", LogeoReglas, "Aceptar","");
return 1;
}

ShowMainMenuDialog(playerid, frame)
{
	new titlestring[380];
	new string[380];
	InsideMainMenu[playerid] = true;
	switch(frame)
	{
		case 1:
		{
		    INI_ParseFile(UserPath(playerid), "LoadUser_pass", .bExtra = true, .extra = playerid);
			new ip[32];
			GetPlayerIp(playerid, ip, 32);
			format(titlestring, sizeof(titlestring), "Panel de Ingreso - INFRANET");
			format(string, sizeof(string), "{FFFFFF}Ingresa una contraseña para ingresar al servidor.\n\n{05a1ff}IP en uso: "COL_WHITE"%s\n{05a1ff}Foro: "COL_WHITE"infranet.foroactivo.com\n{05a1ff}Grupo Facebook: "COL_WHITE"www.facebook.com/groups/infranet.rp\n{05a1ff}Discord: "COL_WHITE"http://discord.gg/SwFp9NK\n\n{FFFFFF}¡Recuerda visitanos en nuestros medios!. Más información en el foro.",ip);
			ShowPlayerDialog(playerid,DLOGIN,DIALOG_STYLE_PASSWORD ,titlestring,string,"Ingresar","Salir");
			gPlayerLogTries[playerid] = 0;
			SetPlayerVirtualWorld(playerid, 20);
		}
		case 2:
		{
			new ip[32];
			GetPlayerIp(playerid, ip, 32);
			format(titlestring, sizeof(titlestring), "Panel de Registro - INFRANET");
			format(string, sizeof(string), "{FFFFFF}Ingresa una contraseña para crearte una cuenta en el servidor.\n\n{05a1ff}IP en uso: "COL_WHITE"%s\n{05a1ff}Foro: "COL_WHITE"infranet.foroactivo.com\n{05a1ff}Grupo Facebook: "COL_WHITE"www.facebook.com/groups/infranet.rp\n{05a1ff}Discord: "COL_WHITE"http://discord.gg/SwFp9NK\n\n{FFFFFF}¡Recuerda visitanos en nuestros medios!. Más información en el foro.",ip);
			ShowPlayerDialog(playerid,DREGISTER,DIALOG_STYLE_INPUT ,titlestring,string,"Registrar","Salir");
	    	SetPlayerVirtualWorld(playerid, 20);
		}
	}
}

ShowMenuLogin(playerid)
{
    ClearChatbox(playerid);
	//new string[128];
	/*for(new i = 0; i < 9; i++)
	{
		TextDrawShowForPlayer(playerid, LoginMenu[i]);
	}
	TextDrawShowForPlayer(playerid, cargando);
	TextDrawShowForPlayer(playerid, looking);
	TextDrawShowForPlayer(playerid, box);*/
	//TextDrawShowForPlayer(playerid, LoginMenu[0]);
	//TextDrawShowForPlayer(playerid, LoginMenu[1]);
	//TextDrawShowForPlayer(playerid, LoginMenu[4]);
	//TextDrawShowForPlayer(playerid, LoginMenu[8]);
	//TextDrawHideForPlayer(playerid, NewStaterp);
	//format(string, sizeof(string), "~w~Noticias: %s", GlobalMOTD);
	//TextDrawSetString(MOTD, string);
	//TextDrawShowForPlayer(playerid, MOTD);
	//format(string, sizeof(string), "~b~Usuarios Conectados: ~w~%d", Iter_Count(Player));
	//TextDrawSetString(LoginMenu[8], string);
	return 1;
}

HideMenuLogin(playerid)
{
    TextDrawHideForPlayer(playerid, MOTD);
	for(new i = 0; i < 9; i++) { TextDrawHideForPlayer(playerid, LoginMenu[i]); }
	TextDrawShowForPlayer(playerid, NewStaterp);
	return 1;
}



function Lotto(number)
{
	new JackpotFallen = 0;
	new string[128];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "[LSTV News] {FFFFFF}En el sorteo de hoy el número ganador es... %d", number);
    OOCNews(COLOR_GREEN, string);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(Info[i][pLottoNr] > 0)
			{
			    if(Info[i][pLottoNr] == number)
				{
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					format(string, sizeof(string), "Lotería: {FFFFFF}%s ha ganado el acumulado de $%d .", winner, Jackpot);
					OOCNews(COLOR_GREEN, string);
					format(string, sizeof(string), "SMS: Has ganado $%d con tu boleta de lotería - Felicitaciones. De: 9891 - (Lotería)", Jackpot);
					SendClientMessageEx(i, COLOR_YELLOW, string);
					GivePlayerCash(i, Jackpot);
					PlayerPlayMusic(i);
			    }
			    else
			    {
			        SendClientMessageEx(i, COLOR_WHITE, "* No has ganado la loteria, suerte en la proxima.");
			    }
			}
			Info[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(20000); rand += 5000;
	    Jackpot = rand;
	    SaveStuff();
	    format(string, sizeof(string), "{A2DC35}Lotería: {FFFFFF}El nuevo premio se ha iniciado con $%d", Jackpot);
		OOCNews(0xFFFFFFFF, string);
	}
	else
	{
	    new rand = random(5000); rand += 2158;
	    Jackpot += rand;
	    SaveStuff();
	    format(string, sizeof(string), "{A2DC35}Lotería:{FFFFFF} El premio se ha aumentado a {FFFF00}$%d", Jackpot);
		OOCNews(0xFFFFFFFF, string);
	}
	return 1;

}
//****************************************************************************

resetPlayerVariables(playerid)
{
    Info[playerid][pTarjetaCredito] = 0;
	SetPVarInt(playerid, "shrequest", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "IsInArena", 0);
	SetPVarInt(playerid, "ArenaMode", 0);
	SetPVarInt(playerid, "FirstSpawn", 1);
	SetPVarInt(playerid, "editingfamhq", 255);
	SetPVarInt(playerid, "editingcd", -1);
	SetPVarInt(playerid, "editingcdveh", -1);
    TypeOfRent[playerid] = 0;                   NombreLicencia[playerid] = 999;     PrecioLicencia[playerid] = 0;
   	UsedCrack[playerid] = 0; 					UsedWeed[playerid] = 0;             CurrentDialog[playerid] = -1;       gMusic[playerid] = 0;
	CrackOffer[playerid] = 999; 				CrackGram[playerid] = 0; 			CrackPrice[playerid] = 0;           PlayerStoned[playerid] = 0;
   	PotPrice[playerid] = 0; 					PotGram[playerid] = 0;              estacionp[playerid] = 0;            PotOffer[playerid] = 999;
	gOoc[playerid] = 0; 						gNews[playerid] = 0; 				BigEar[playerid] = 0; 				gFam[playerid] = 0;
	gPlayerLogged{playerid} = 0;                NewbieTimer[playerid] = 0; 			VIPTimer[playerid] = 0;             gRel[playerid] = 0;
	gPlayerSpawned[playerid] = 0; 				gLastCar[playerid] = 0;             gPlayerAccount[playerid] = 0;       gPlayerLogTries[playerid] = 0;
	TicketOffer[playerid] = 999; 				TicketMoney[playerid] = 0;          InsideMainMenu[playerid] = 0;       PlayerTazeTime[playerid] = 0;
	Paquetes[playerid] = 0; 					TutTime[playerid] = 0; 				HireKey[playerid] = 9999;			TaxiAccepted[playerid] = 999;
	ReduceTime[playerid] = 0;           		KnockedDown[playerid] = 0; 			UnidentifedCall[playerid] = 0;      TransportDriver[playerid] = 999;
	TransportValue[playerid] = 0; 				TransportMoney[playerid] = 0; 		TransportTime[playerid] = 0; 		TransportCost[playerid] = 0;
    IDCode[playerid] = -1;                      BoomBox[playerid] = 0;              BoomOn[playerid] = 0;				gNewbie[playerid] = 1;
	OwnableCarOffer[playerid] = 999; 			OwnableCarID[playerid] = 999; 		OwnableCarPrice[playerid] = 0; 		BlindFold[playerid] = 0;
	PlayerIsSweeping[playerid] = 0; 			AdminDuty[playerid] = 0; 			PlayerNeedsHelp[playerid] = 0; 		IsSmoking[playerid] = -1;
	HelpingNewbie[playerid] = 999;				PlayerDuda[playerid] = 0;
	NewUsed[playerid] = 0; 						gRadio[playerid] = 1;				slotselection[playerid] = 0;		JobDuty[playerid] = 0;
	PuedeP[playerid] = 0; 						PuedeD[playerid] = 0;				TelfRob[playerid] = 0;      		duda[playerid] = 0;
	Facturing[playerid] = 0; 					fPay[playerid] = 0; 				fDest[playerid] = 0; 				fFacturer[playerid] = 0;
	Refueling[playerid] = -1;					courtjail[playerid] = 0;    		RequestingBackup[playerid] = 0; 	PlayersChannel[playerid] = 999;
    Info[playerid][pMaskuse] = 0;               Info[playerid][pMask] = 0;          Autorizado[playerid] = 0;           Vigilando[playerid] = -1;
    Lineas[playerid] = 0; 						Carnada[playerid] = 0;				MedicAccepted[playerid] = 999;		MedicCallTime[playerid] = -1;
 	RegText[playerid] = 0;						RegConfig[playerid] = 0;			HidePM[playerid] = 0; 				PhoneOnline[playerid] = 0;
	Info[playerid][pFishSkill] = 0;				Info[playerid][pFishes] = 0;		Info[playerid][pBiggestFish] = 0;
	FishCount[playerid] = 0;					UsedFind[playerid] = 0;				FreezeLast[playerid] = 0; 			MoneyMessage[playerid] = 0;
	Condom[playerid] = 0; 						LoadTruckTime[playerid] = 0;		TruckDeliver[playerid] = 0; 		TruckUsed[playerid] = INVALID_VEHICLE_ID;
	LiveOffer[playerid] = 999;					TakingLesson[playerid] = 0;         RStep[playerid] = 0;                LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadMonTimee[playerid] = 0;                 LoadMonTime[playerid] = 0;          LoadMoneyy[playerid] = INVALID_BAR_ID;	LoadMoney[playerid] = INVALID_BAR_ID;
 	PlayerCuffedTime[playerid] = 0; 			TazerTimeout[playerid] = 0; 		pTazer[playerid] = 0; 				pTazerReplace[playerid] = 0;// tazer
    advisorchat[playerid] = 1;                  carsforplayer[playerid] = 0;        TalkingLive[playerid] = INVALID_PLAYER_ID;
   	Ipadon[playerid] = 0;                       OnDuty[playerid] = 0;               arr_Towing[playerid] = INVALID_VEHICLE_ID;
	Muted[playerid] = 0;                        pCurrentWeapon[playerid] = 0;       DrugFarming[playerid] = 0;          gPlayerCheckpointStatus[playerid] = 0;
	TutStep[playerid] = 0;                      PlayerIsSweeping[playerid] = 0;     gPlayerAnimLibsPreloaded[playerid] = 0;
	TransportDuty[playerid] = 0;                PilotoDuty[playerid] = 0;			TreneroDuty[playerid] = 0;          Avion_Route[playerid] = 0;
	MatsOffer[playerid] = 999;                  MatsPrice[playerid] = 0;            MatsAmount[playerid] = 0;           gPlayerUsingLoopingAnim[playerid] = 0;
	GGOffer[playerid] = 999;                    GGPrice[playerid] = 0;              GGAmount[playerid] = 0;
 	VIPPrice[playerid] = 0;                     VIPOffer[playerid] = 999;       	EventLastInt[playerid] = 0;         EventLastVW[playerid] = 0;
	FOffer[playerid] = 999;						FPrice[playerid] = 0; 				FAmount[playerid] = 0;              Mobile[playerid] = INVALID_PLAYER_ID;
 	GuardOffer[playerid] = 999;                 GuardPrice[playerid] = 0;           JetPack[playerid] = 0;              MechanicCallTime[playerid] = 0;
	CurrentMoney[playerid] = 0;                 EMSAccepted[playerid] = 999;        EMSCallTime[playerid] = 0;          RefillOffer[playerid] = 999;
	RepairCar[playerid] = 0;                    RepairOffer[playerid] = 999;        RepairPrice[playerid] = 0;          tarmalimit[playerid] = -1;
	RefillPrice[playerid] = 0;                  TutError[playerid] = 0;             EstadoON[playerid] = 0;             GuardarArma[playerid] = 0;
	InviteOffer[playerid] = 999;                InviteFaction[playerid] = 0;        InviteFamily[playerid] = 255;       JustDuda[playerid] = -1;
	GunOffer[playerid] = 999;                   GunMats[playerid] = 0;              GunId[playerid] = 0;                JustAfk[playerid] = -1;
	VehicleOffer[playerid] = 999;               VehiclePrice[playerid] = 0;         VehicleId[playerid] = -1;           DrivingTest[playerid] = 0;
	HouseOffer[playerid] = 999;                 HousePrice[playerid] = 0;           House[playerid] = -1;               Tren_Route[playerid] = 0;
	JailPrice[playerid] = 0;                    duda[playerid] = 3;                 JustReported[playerid] = -1;        Bus_Route[playerid] = 0;
	Spectating[playerid] = 0;                   GettingSpectated[playerid] = 999;   Spectate[playerid] = 999;           Unspec[playerid][sLocal] = 255;
	PlayerDrunkTime[playerid] = 0;           	PlayerDrunk[playerid] = 0;          Editing[playerid] = 0;
 	Info[playerid][pDNIFalse] = 0;     	        strmid(DNIName[playerid], "Nadie", 0, strlen("Nadie"), 32);
    LoadMonTimeeee[playerid] = 0;
	strmid(Info[playerid][pDNIName], "Ninguno", 0, strlen("Ninguno"), 12);
    strmid(Info[playerid][pEstadoX], "Ninguno", 0, strlen("Ninguno"), 20);
 	LoadMoneyyyy[playerid] = INVALID_BAR_ID;
 	Hotdog[playerid] = 0;                       HaceMG[playerid] = 0; 				AntiAbuso[playerid] = 0;            HaceAbuso[playerid] = 0;
    Blinded[playerid] = 0; 						Tied[playerid] = 0;         		Intentar[playerid] = 0;             SeRinde[playerid] = 0;
	ShowRules[playerid] = 0;                    RulesTime[playerid] = 0;            iLuces[playerid] = 0;
    CommandSpamTimes[playerid] = 0;				CommandSpamUnmute[playerid] = 0;
	HitOffer[playerid] = 999;					HitToGet[playerid] = 999; 			GoChase[playerid] = 999; 			GetChased[playerid] = 999;
    CraftOffer[playerid] = 999;				    CraftId[playerid] = 0;              CraftMats[playerid] = 0;
	format(QFA[playerid],24,"Nadie");
    InteriorLimusina[playerid] = 0;
	InteriorSwatVan[playerid] = 0;
	InteriorCaravana[playerid] = 0;
	InteriorBeagle[playerid] = 0;
	//
	BarObject[playerid] = 0; ObjectBar[playerid] = 0;
	for(new i = 0; i < 6; i++)
	{
	    EventFloats[playerid][i] = 0.0;
	}

	for(new s = 0; s < 40; s++)
	{
		ListItemReportId[playerid][s] = -1;
		ListItemTrackId[playerid][s] = -1;
	}

	for(new s = 0; s < 13; s++)
	{
		Info[playerid][pWeapons][s] = 0;
	}
    /*for(new s = 0; s < 11; s++)
	{
		Info[playerid][pMuebles][s] = -1;
	}*/
	//*******************Player Variables*******************
	Info[playerid][pTarjetaCredito] = 0;        Info[playerid][pBoombox] = 0;
	Info[playerid][pLevel] = 0;					Info[playerid][pAdminZC] = 0;
	Info[playerid][pFactionModerator] = 0;		Info[playerid][pGangModerator] = 0;
	Info[playerid][pLvlAdminZC] = 0;			Info[playerid][pHelper] = 0;
	Info[playerid][pBanAppealer] = 0;			Info[playerid][pConnectTime] = 0;
	Info[playerid][pReg] = 0;					Info[playerid][pSex] = 0;
	Info[playerid][pAge] = 0;					Info[playerid][pOrigin] = 0;
	Info[playerid][pExp] = 0;					Info[playerid][pAccount] = 0;
	Info[playerid][pDeaths] = 0;				Info[playerid][pArrested] = 0;
	Info[playerid][pJailAdmin] = 0; 			Info[playerid][pOrder] = 0;
	Info[playerid][pTempVIP] = 0; 				Info[playerid][pBuddyInvited] = 0;
	Info[playerid][pVIPInviteDay] = 0;			Info[playerid][pVTokens] = 0;
	Info[playerid][pJob2] = 0;					Info[playerid][pTypeSpawn] = 0;
	Info[playerid][pShopTech] = 0;				Info[playerid][pEstado] = 0;
	Info[playerid][pVIPDateM] = -1;				Info[playerid][pVIPDateD] = -1;
	Info[playerid][pRegalo] = -1;				Info[playerid][pLottoNr] = 0;
	Info[playerid][pJob] = 0;					Info[playerid][pNMute] = 0;
	Info[playerid][pNMuteTotal] = 0;			Info[playerid][pWarn] = 0;
	Info[playerid][pWRestricted] = 0;			Info[playerid][pJailed] = 0;
	Info[playerid][pJailTime] = 0;              Info[playerid][pMats] = 0;
	Info[playerid][pDrugs] = 0;					Info[playerid][pCosecha] = 0;
	Info[playerid][pCrack] = 0;					Info[playerid][pPot] = 0;
	Info[playerid][pGanzuas] = 0;               Info[playerid][pBlockG] = 0;
	Info[playerid][pAdiccion] = 0;				Info[playerid][pPackages] = 0;
	Info[playerid][pReligion] = 0;				Info[playerid][pLiderReligioso] = 0;
	Info[playerid][pLeader] = 0;				Info[playerid][pMember] = 0;
	Info[playerid][pDivision] = 0;				Info[playerid][pFMember] = 255;
	Info[playerid][pDPHours] = 0;				Info[playerid][pDPTime] = -1;
	Info[playerid][pDPTotal] = 0;				Info[playerid][pRank] = 0;
	Info[playerid][pChar] = 299;				Info[playerid][pHealth] = 50.0;
	Info[playerid][pArmour] = 0.0;				Info[playerid][pPos_x] = 1612.3240;
	Info[playerid][pPos_y] = -2330.1670;		Info[playerid][pPos_z] = 13.5469;
	Info[playerid][pInt] = 0;					Info[playerid][pTeam] = 3;
	Info[playerid][pModel] = 7;					Info[playerid][pSprunk] = 0;
	Info[playerid][pPnumber] = 0;				Info[playerid][pPhoneBook] = 0;
	Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
	Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
	Info[playerid][pPhousekeyX] = INVALID_HOUSE_ID;
	Info[playerid][pCarLic] = 0;				Info[playerid][pFlyLic] = 0;
	Info[playerid][pBoatLic] = 0;				Info[playerid][pGunLic] = 0;
	Info[playerid][pGafas] = 0;					Info[playerid][pTut] = 0;
	Info[playerid][pTestTut] = 0;				Info[playerid][pLighter] = 0;
	Info[playerid][pCigarettes] = 0;			Info[playerid][pHideNumber] = 0;
	Info[playerid][pSpeaker] = 0;				Info[playerid][pBannedZC] = 0;
	Info[playerid][pDisabledZC] = 0;			Info[playerid][pBlockBug] = 0;
	Info[playerid][pBlockG] = 0;                Info[playerid][pContract] = 0;
	Info[playerid][pMulticuenta] = 0;
	new dni = 100000 + random(899999);			Info[playerid][pDNI] = dni;
	Info[playerid][pArmsSkill] = 0;				Info[playerid][pTruckSkill] = 0;
    Info[playerid][pSmugSkill] = 0;				Info[playerid][pDrugsSkill] = 0;
	Info[playerid][pRequestingBackup] = 0;		Info[playerid][pSIDA] = 0;
	Info[playerid][pCancer] = 0;				Info[playerid][pEpilepsia] = 0;
	Info[playerid][pDengue] = 0;				Info[playerid][pWantedLevel] = 0;
    Info[playerid][pAntiSIDA] = 0;				Info[playerid][pAntiCancer] = 0;
    Info[playerid][pAntiEpilepsia] = 0;			Info[playerid][pRenting] = INVALID_HOUSE_ID;
    Info[playerid][p_Pr_Money] = 0;             Info[playerid][pRHours] = 0;
    Info[playerid][pRob] = 0;					Info[playerid][pVIP] = 0;
    Info[playerid][pROL] = 0;                   Info[playerid][pSeguro] = 0;
    Info[playerid][pBanDuda] = 0;				Info[playerid][pRMuted] = 0;
 	Info[playerid][pRMutedTotal] = 0;			Info[playerid][pRMutedTime] = 0;
	Info[playerid][pPasaporte] = 0;				Info[playerid][pRadio] = 0;
    Info[playerid][pRadioFreq] = 0;				Info[playerid][pIpadMusic] = 0;
    Info[playerid][pGiftTime] = 0;				Info[playerid][pAccent] = 0;
	Info[playerid][pPaintTeam] = 0; 			Info[playerid][pPaintTokens] = 0;
    Info[playerid][pUndercover] = 0;			Info[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID;
    Info[playerid][pVIPCHAT] = 0;				Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
    Info[playerid][pSpraycan] = 0;				Info[playerid][pCarKey2]=INVALID_PLAYER_VEHICLE_ID;
    Info[playerid][pServiceTime] = 0; 			Info[playerid][pTriageTime] = 0;
    Info[playerid][pTaxiLicense] = 0;			Info[playerid][pLock] = 0;
    Info[playerid][pHead] = 0; 					Info[playerid][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
    Info[playerid][pCHits] = 0;					Info[playerid][pFHits] = 0;
	Info[playerid][pJudgeJailTime] = 0;			Info[playerid][pJudgeJailType] = 0;
	Info[playerid][pBeingSentenced] = 0;		Info[playerid][pProbationTime] = 0;
	Info[playerid][pWExists] = 0;				Info[playerid][pWX] = 0;
	Info[playerid][pWY] = 0;					Info[playerid][pWZ] = 0;
	Info[playerid][pWVW] = 0;					Info[playerid][pWInt] = 0;
	Info[playerid][pWValue] = -1;				Info[playerid][pWTimer] = -1;
	Info[playerid][pWSeeds] = 0;				Info[playerid][YaCobre] = 0;
 	Info[playerid][pADMute] = 0;				Info[playerid][pADMuteTotal] = 0;
	Info[playerid][pADTime] = 0;				Info[playerid][pOther] = 5;
	Info[playerid][pGTokens] = 0;				Info[playerid][pDobleExp] = 0;
	Info[playerid][pAdverID] = -1;              Info[playerid][pFirstaid] = 0;
	Info[playerid][pScrewdriver] = 0;           Info[playerid][pPTR] = 0;
	Info[playerid][pSurveillance] = 0;          Info[playerid][pPuntosRol] = 0;
    Info[playerid][pModStaff] = 0;              Info[playerid][pTakeAway] = 0;
    /// Idiomas.
    Info[playerid][pIngles] = 0;				Info[playerid][pAleman] = 0;
    Info[playerid][pRuso] = 0;					Info[playerid][pJapones] = 0;
    Info[playerid][pItaliano] = 0;				Info[playerid][pArabe] = 0;
	/// Habilidad.
 	Info[playerid][pInglesSkill] = 0;			Info[playerid][pAlemanSkill] = 0;
    Info[playerid][pRusoSkill] = 0;				Info[playerid][pJaponesSkill] = 0;
    Info[playerid][pItalianoSkill] = 0;			Info[playerid][pArabeSkill] = 0;
    
	format(Info[playerid][pAutoTextReply], 64, "Nada");
    format(Info[playerid][pContractBy], 32, "");
	format(Info[playerid][pContractDetail], 64, "");
	format(Info[playerid][pWarrant], 128, "");
	format(Info[playerid][pJailedBy], 32, "");
	format(Info[playerid][pJailReason], 64, "");
	format(Info[playerid][pMyAD], 120, "Ninguno");

    for(new v = 0; v < MAX_PLAYERTOYS; v++)
    {
        PlayerToyInfo[playerid][v][ptModelID] = 0;
        PlayerToyInfo[playerid][v][ptBone] = 0;
        PlayerToyInfo[playerid][v][ptPosX] = 0.0;
        PlayerToyInfo[playerid][v][ptPosY] = 0.0;
        PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
        PlayerToyInfo[playerid][v][ptRotX] = 0.0;
        PlayerToyInfo[playerid][v][ptRotY] = 0.0;
        PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
        PlayerToyInfo[playerid][v][ftscaleX] = 1;
        PlayerToyInfo[playerid][v][ftscaleY] = 1;
        PlayerToyInfo[playerid][v][ftscaleZ] = 1;
	}
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
        PlayerVehicleInfo[playerid][v][pvModelId] = 0;
        PlayerVehicleInfo[playerid][v][pvPosX] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosY] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosZ] = 0.0;
        PlayerVehicleInfo[playerid][v][pvPosAngle] = 0.0;
        PlayerVehicleInfo[playerid][v][pvVW] = 0;
        PlayerVehicleInfo[playerid][v][pvLock] = 0;
        PlayerVehicleInfo[playerid][v][pvLocked] = 0;
        PlayerVehicleInfo[playerid][v][pvPaintJob] = -1;
        PlayerVehicleInfo[playerid][v][pvColor1] = 0;
		PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
        PlayerVehicleInfo[playerid][v][pvColor2] = 0;
        PlayerVehicleInfo[playerid][v][pvPrice] = 0;
        PlayerVehicleInfo[playerid][v][pvTicket] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][0] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][1] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][2] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][3] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][4] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][5] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][6] = 0;
        PlayerVehicleInfo[playerid][v][pvWeapons][7] = 0;
		PlayerVehicleInfo[playerid][v][pvWepUpgrade] = -1;
		PlayerVehicleInfo[playerid][v][pvFuel] = 200;
		PlayerVehicleInfo[playerid][v][pvSpawned]= 0;
		PlayerVehicleInfo[playerid][v][pvHealth] = 1000.0;
		strcpy(PlayerVehicleInfo[playerid][v][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
        PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
        PlayerVehicleInfo[playerid][v][pvPark] = 0;
        for(new m = 0; m < MAX_MODS; m++)
	    {
            PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
		}
		Info[playerid][pLibreta] = 0;
		Info[playerid][pContactoAgendar] = 0;
		Info[playerid][pNumeroLibreta1] = 0;
		Info[playerid][pNumeroLibreta2] = 0;
		Info[playerid][pNumeroLibreta3] = 0;
		Info[playerid][pNumeroLibreta4] = 0;
		Info[playerid][pNumeroLibreta5] = 0;
		format(Info[playerid][pAgenda1], 40, "Ninguno");
		format(Info[playerid][pAgenda2], 40, "Ninguno");
		format(Info[playerid][pAgenda3], 40, "Ninguno");
		format(Info[playerid][pAgenda4], 40, "Ninguno");
		format(Info[playerid][pAgenda5], 40, "Ninguno");
		format(Info[playerid][pAgenda6], 40, "Ninguno");
		format(Info[playerid][pAgenda7], 40, "Ninguno");
		format(Info[playerid][pAgenda8], 40, "Ninguno");
		format(Info[playerid][pAgenda9], 40, "Ninguno");
		format(Info[playerid][pAgenda10], 40, "Ninguno");
		format(Info[playerid][pBlocNotas], 128, "Vacio");
	}
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;	CancelReport[playerid] = -1;
	return true;
}

function ConvertAccount(playerid)
{
	new string2[64], string[128];
	new playername2[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername2, sizeof(playername2));
	format(string2, sizeof(string2), USERFILEOLD, playername2);
	new File: UserFile = fopen(string2, io_read);
	if(UserFile)
	{
		new key[ 256 ] , val[ 256 ];
		new Data[ 256 ];
		while ( fread( UserFile , Data , sizeof( Data ) ) )
		{
			key = ini_GetKey( Data );
            if( strcmp( key , "TarjetaCredito" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTarjetaCredito] = strval( val ); }
			if( strcmp( key , "Key" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pKey], val, 0, strlen(val)-1, 24); }
			if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLevel] = strval( val ); }
			if( strcmp( key , "AdminNivelZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAdminZC] = strval( val ); }
            if( strcmp( key , "AdminZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLvlAdminZC] = strval( val ); }
			if( strcmp( key , "BanAppealer" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBanAppealer] = strval( val ); }
			if( strcmp( key , "FactionModerator" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFactionModerator] = strval( val ); }
			if( strcmp( key , "ModStaff" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pModStaff] = strval( val ); }
            if( strcmp( key , "GangModerator" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGangModerator] = strval( val ); }
			if( strcmp( key , "Helper" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHelper] = strval( val ); }
		 	if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pConnectTime] = strval( val ); }
			if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pReg] = strval( val ); }
			if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSex] = strval( val ); }
			if( strcmp( key , "Age" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAge] = strval( val ); }
		 	if( strcmp( key , "Origin" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pOrigin] = strval( val ); }
			if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pExp] = strval( val ); }
			if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, "Cash", strval( val )); }
			if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAccount] = strval( val ); }
			if( strcmp( key , "IP" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pIP], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pKills] = strval( val ); }
			if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDeaths] = strval( val ); }
           	if( strcmp( key , "Arrested" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArrested] = strval( val ); }
           	if( strcmp( key , "JailAdmin" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJailAdmin] = strval( val ); }
			if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLottoNr] = strval( val ); }
			if( strcmp( key , "Job" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJob] = strval( val ); }
           	if( strcmp( key , "NewMuted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pNMute] = strval( val ); }
           	if( strcmp( key , "NewMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pNMuteTotal] = strval( val ); }
           	if( strcmp( key , "Warn" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWarn] = strval( val ); }
            if( strcmp( key , "WRestricted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWRestricted] = strval( val ); }
			if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJailed] = strval( val ); }
			if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJailTime] = strval( val ); }
			if( strcmp( key , "JailedBy" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pJailedBy], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "JailerBy" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pJailReason], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "MyAD" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pMyAD], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "Materials" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMats] = strval( val ); }
            if( strcmp( key , "Packages" , true ) == 0 ) { val = ini_GetValue( Data ); SetPVarInt(playerid, key, strval( val )); }
			if( strcmp( key , "Drugs" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDrugs] = strval( val ); }
            if( strcmp( key , "Cosecha" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCosecha] = strval( val ); }
			if( strcmp( key , "Crack" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCrack] = strval( val ); }
            if( strcmp( key , "Pot" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPot] = strval( val ); }
            if( strcmp( key , "Ganzuas" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGanzuas] = strval( val ); }
            if( strcmp( key , "Crates" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCrates] = strval( val ); }
			if( strcmp( key , "Adic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAdiccion] = strval( val ); }
			if( strcmp( key , "Religion" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pReligion] = strval( val ); }
			if( strcmp( key , "LiderReligioso" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLiderReligioso] = strval( val ); }
			if( strcmp( key , "Leader" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLeader] = strval( val ); }
			if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMember] = strval( val ); }
            if( strcmp( key , "FMember" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFMember] = strval( val ); }
			if( strcmp( key , "Division" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDivision] = strval( val ); }
			if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRank] = strval( val ); }
			if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pChar] = strval( val ); }
			if( strcmp( key , "pHealth" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHealth] = floatstr( val ); }
			if( strcmp( key , "pArmour" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArmour] = floatstr( val ); }
			if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTeam] = strval( val ); }
			if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pModel] = strval( val ); }
			if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPnumber] = strval( val ); }
			if( strcmp( key , "Sprunk" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSprunk] = strval( val ); }
			if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhoneBook] = strval( val ); }
			if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhousekey] = strval( val ); }
            if( strcmp( key , "House2" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhousekey2] = strval( val ); }
            if( strcmp( key , "Propiedad" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPhousekeyX] = strval( val ); }
			if( strcmp( key , "Int" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pInt] = strval( val ); }
			if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_x] = floatstr( val ); }
	        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_y] = floatstr( val ); }
	        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_z] = floatstr( val ); }
            if( strcmp( key , "SPos_r" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPos_r] = floatstr( val ); }
			if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCarLic] = strval( val ); }
            if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFlyLic] = strval( val ); }
			if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBoatLic] = strval( val ); }
	        if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGunLic] = strval( val ); }
	        if( strcmp( key , "Gafas" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGafas] = strval( val ); }
			if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTut] = strval( val ); }
            if( strcmp( key , "Test" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTestTut] = strval( val ); }
			if( strcmp( key , "VWorld" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVW] = strval( val ); }
	        if( strcmp( key , "Lighter" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pLighter] = strval( val ); }
	        if( strcmp( key , "Cigarettes" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCigarettes] = strval( val ); }
	        if( strcmp( key , "BanZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBannedZC] = strval( val ); }
	        if( strcmp( key , "DisabledZC" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDisabledZC] = strval( val ); }
			if( strcmp( key , "BlockBug" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBlockBug] = strval( val ); }
			if( strcmp( key , "Multicuenta" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMulticuenta] = strval( val ); }
			if( strcmp( key , "BlockG" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBlockG] = strval( val ); }
			if( strcmp( key , "DNI" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDNI] = strval( val ); }
	        if( strcmp( key , "VSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArmsSkill] = strval( val ); }
	        if( strcmp( key , "TSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTruckSkill] = strval( val ); }
            if( strcmp( key , "SmugglerSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSmugSkill] = strval( val ); }
            if( strcmp( key , "DrugsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDrugsSkill] = strval( val ); }
			if( strcmp( key , "SIDA" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSIDA] = strval( val ); }
			if( strcmp( key , "Cancer" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCancer] = strval( val ); }
	        if( strcmp( key , "Epilepsia" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pEpilepsia] = strval( val ); }
	        if( strcmp( key , "Dengue" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pDengue] = strval( val ); }
	        if( strcmp( key , "FStyle" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFStyle] = strval( val ); }
	        if( strcmp( key , "Busqueda" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWantedLevel] = strval( val ); }
	        if( strcmp( key , "AntiSIDA" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAntiSIDA] = strval( val ); }
	        if( strcmp( key , "AntiCancer" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAntiCancer] = strval( val ); }
	        if( strcmp( key , "AntiEpilepsia" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAntiEpilepsia] = strval( val ); }
	        if( strcmp( key , "Rent" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRenting] = strval( val ); }
	        if( strcmp( key , "prMoney" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][p_Pr_Money] = strval( val ); }
	        if( strcmp( key , "Rob" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRob] = strval( val ); }
            if( strcmp( key , "Premium" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIP] = strval( val ); }
            if( strcmp( key , "Rol" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pROL] = strval( val ); }
            if( strcmp( key , "FichasCash" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPTR] = strval( val ); }
            if( strcmp( key , "CarPremium" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCarKey2] = strval( val ); }
            if( strcmp( key , "BanDuda" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBanDuda] = strval( val ); }
			if( strcmp( key , "ReportMuted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRMuted] = strval( val ); }
            if( strcmp( key , "ReportMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRMutedTotal] = strval( val ); }
			if( strcmp( key , "ReportMutedTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRMutedTime] = strval( val ); }
		    if( strcmp( key , "Pasaporte" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPasaporte] = strval( val ); }
		    if( strcmp( key , "Seguro" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSeguro] = strval( val ); }
            if( strcmp( key , "RadioP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRadio] = strval( val ); }
			if( strcmp( key , "KHZ" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRadioFreq] = strval( val ); }
			if( strcmp( key , "Ipad" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pIpadMusic] = strval( val ); }
   			if( strcmp( key , "GiftTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pGiftTime] = strval( val ); }
   			if( strcmp( key , "Negocio" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPbizzkey] = strval( val ); }
   			if( strcmp( key , "skinn" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pgskin] = strval( val ); }
     	    if( strcmp( key , "robita" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][probita] = strval( val ); }
     	    if( strcmp( key , "Boombox" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBoombox] = strval( val ); }
     	    if( strcmp( key , "PuntosRol" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPuntosRol] = strval( val ); }
     	    if( strcmp( key , "TakeAway" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTakeAway] = strval( val ); }
			for(new s = 0; s < 13; s++)
			{
				format(string, 128, "Gun%d", s);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWeapons][s] = strval( val ); }
			}
			if( strcmp( key , "Acento" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAccent] = strval( val ); }
			if( strcmp( key , "Ingles" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pIngles] = strval( val ); }
			if( strcmp( key , "Aleman" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAleman] = strval( val ); }
			if( strcmp( key , "Ruso" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRuso] = strval( val ); }
			if( strcmp( key , "Japones" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJapones] = strval( val ); }
			if( strcmp( key , "Italiano" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pItaliano] = strval( val ); }
			if( strcmp( key , "Arabe" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArabe] = strval( val ); }
			if( strcmp( key , "InglesSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pInglesSkill] = strval( val ); }
			if( strcmp( key , "AlemanSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pAlemanSkill] = strval( val ); }
			if( strcmp( key , "RusoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRusoSkill] = strval( val ); }
			if( strcmp( key , "JaponesSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJaponesSkill] = strval( val ); }
			if( strcmp( key , "ItalianoSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pItalianoSkill] = strval( val ); }
			if( strcmp( key , "ArabeSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pArabeSkill] = strval( val ); }
			if( strcmp( key , "PTokens" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pPaintTokens] = strval( val ); }
			if( strcmp( key , "Undercover" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pUndercover] = strval( val ); }
            if( strcmp( key , "Head" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHead] = strval( val ); }
            if( strcmp( key, "TaxiLicense" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTaxiLicense] = strval( val ); }
            if( strcmp( key , "Hospital" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pHospital] = strval( val ); }
			if( strcmp( key , "CHits" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pCHits] = strval( val ); }
			if( strcmp( key , "FHits" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFHits] = strval( val ); }
           	if( strcmp( key , "Spraycan" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pSpraycan] = strval( val ); }
			if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pMarried] = strval( val ); }
			if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "ContractBy" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pContractBy], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "ContractDetail" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pContractDetail], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "Contract" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pContract] = strval( val ); }
			if( strcmp( key , "pWExists" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWExists] = strval( val ); }
			if( strcmp( key , "pWX" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWX] = floatstr( val ); }
			if( strcmp( key , "pWY" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWY] = floatstr( val ); }
			if( strcmp( key , "pWZ" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWZ] = floatstr( val ); }
			if( strcmp( key , "pWVW" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWVW] = strval( val ); }
			if( strcmp( key , "pWInt" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWInt] = strval( val ); }
			if( strcmp( key , "pWValue" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWValue] = strval( val ); }
			if( strcmp( key , "pWSeeds" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pWSeeds] = strval( val ); }
			if( strcmp( key , "PayEx" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][YaCobre] = strval( val ); }
            if( strcmp( key , "AdMuted" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pADMute] = strval( val ); }
			if( strcmp( key , "AdMutedTotal" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pADMuteTotal] = strval( val ); }
            if( strcmp( key , "Warrants" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pWarrant], val, 0, strlen(val)-1, 255); }
			if( strcmp( key , "JudgeJailTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJudgeJailTime] = strval( val ); }
			if( strcmp( key , "JudgeJailType" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJudgeJailType] = strval( val ); }
            if( strcmp( key , "BeingSentenced" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBeingSentenced] = strval( val ); }
            if( strcmp( key , "ProbationTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pProbationTime] = strval( val ); }
            if( strcmp( key , "Fishes" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFishes] = strval( val ); }
			if( strcmp( key , "FishSkill" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pFishSkill] = strval( val ); }
			if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBiggestFish] = strval( val ); }
            if( strcmp( key , "RewardsHours" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRHours] = strval( val ); }
            if( strcmp( key , "ADTime" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pADTime] = strval( val ); }
            if( strcmp( key , "Otros" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pOther] = strval( val ); }
            if( strcmp( key , "GGTokens" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pGTokens] = strval( val ); }
            if( strcmp( key , "HDExp" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDobleExp] = strval( val ); }
            if( strcmp( key , "DPHoras" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDPHours] = strval( val ); }
            if( strcmp( key , "DPTiempo" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDPTime] = strval( val ); }
            if( strcmp( key , "DPTotal" , true ) == 0 ){ val = ini_GetValue( Data ); Info[playerid][pDPTotal] = strval( val ); }
            if( strcmp( key , "Order" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pOrder] = strval( val ); }
            if( strcmp( key , "TempVIP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTempVIP] = strval( val ); }
            if( strcmp( key , "VIPInviteDay" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIPInviteDay] = strval( val ); }
			if( strcmp( key , "BuddyInvite" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pBuddyInvited] = strval( val ); }
            if( strcmp( key , "VTokens" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVTokens] = strval( val ); }
			if( strcmp( key , "Job2" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pJob2] = strval( val ); }
			if( strcmp( key , "TypeSpawn" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pTypeSpawn] = strval( val ); }
   			if( strcmp( key , "ShopTech" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pShopTech] = strval( val ); }
            if( strcmp( key , "Status" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pEstado] = strval( val ); }
            if( strcmp( key , "Estado" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(Info[playerid][pEstadoX], val, 0, strlen(val)-1, 255); }
            if( strcmp( key , "DayVIP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIPDateD] = strval( val ); }
            if( strcmp( key , "MonthVIP" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pVIPDateM] = strval( val ); }
            if( strcmp( key , "IDRegalo" , true ) == 0 ) { val = ini_GetValue( Data ); Info[playerid][pRegalo] = strval( val ); }
			for(new v = 0; v < MAX_PLAYERTOYS; v++)
	        {
	        	format(string, 128, "pt%dModelID",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptModelID] = strval( val ); }
				format(string, 128, "pt%dBone",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptBone] = strval( val ); }
				format(string, 128, "pt%dPosX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosX] = floatstr( val ); }
				format(string, 128, "pt%dPosY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosY] = floatstr( val ); }
				format(string, 128, "pt%dPosZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptPosZ] = floatstr( val ); }
				format(string, 128, "pt%dRotX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotX] = floatstr( val ); }
				format(string, 128, "pt%dRotY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotY] = floatstr( val ); }
				format(string, 128, "pt%dRotZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ptRotZ] = floatstr( val ); }
				format(string, 128, "pt%dSizX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ftscaleX] = floatstr( val ); }
				format(string, 128, "pt%dSizY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ftscaleY] = floatstr( val ); }
				format(string, 128, "pt%dSizZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerToyInfo[playerid][v][ftscaleZ] = floatstr( val ); }
			}
			for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	        {
				format(string, 128, "pv%dPosX",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosX] = floatstr( val ); }
				format(string, 128, "pv%dPosY",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosY] = floatstr( val ); }
				format(string, 128, "pv%dPosZ",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosZ] = floatstr( val ); }
				format(string, 128, "pv%dPosAngle",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPosAngle] = floatstr( val ); }
				format(string, 128, "pv%dVirtualW",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvVW] = strval( val ); }
				format(string, 128, "pv%dModelId",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvModelId] = strval( val ); }
				format(string, 128, "pv%dLock",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLock] = strval( val ); }
				format(string, 128, "pv%dLocked",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvLocked] = strval( val ); }
				format(string, 128, "pv%dPaintJob",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPaintJob] = strval( val ); }
				format(string, 128, "pv%dColor1",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvColor1] = strval( val ); }
				format(string, 128, "pv%dColor2",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvColor2] = strval( val ); }
				format(string, 128, "pv%dPrice",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvPrice] = strval( val ); }
				format(string, 128, "pv%dTicket",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvTicket] = strval( val ); }
				format(string, 128, "pv%dWeapon0",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][0] = strval( val ); }
				format(string, 128, "pv%dWeapon1",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][1] = strval( val ); }
				format(string, 128, "pv%dWeapon2",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][2] = strval( val ); }
				format(string, 128, "pv%dWeapon3",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][3] = strval( val ); }
				format(string, 128, "pv%dWeapon4",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][4] = strval( val ); }
				format(string, 128, "pv%dWeapon5",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][5] = strval( val ); }
				format(string, 128, "pv%dWeapon6",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][6] = strval( val ); }
				format(string, 128, "pv%dWeapon7",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWeapons][7] = strval( val ); }
				format(string, 128, "pv%dWepUpgrade",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvWepUpgrade] = strval( val ); }
				format(string, 128, "pv%dFuel",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvFuel] = strval( val ); }
				format(string, 128, "pv%dImpound",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvImpounded] = strval( val ); }
				format(string, 128, "pv%dHealth",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvHealth] = floatstr( val ); }
				/*format(string, 128, "pv%dNumPlate",v);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); strcpy(PlayerVehicleInfo[playerid][v][pvNumberPlate], Data, 32); }*/ //PlayerVehicleInfo[playerid][v][pvNumberPlate] = floatstr( val ); }
				for(new m = 0; m < MAX_MODS; m++)
	        	{
            	    format(string, 128, "pv%dMod%d", v, m);
                    if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); PlayerVehicleInfo[playerid][v][pvMods][m] = strval( val ); }
	        	}
	        }
		}
    	if(!INI_Exist(playername2))
    	{
	    	new INI:File = INI_Open(UserPath(playerid));
	    	INI_SetTag(File,"data");
     		INI_WriteInt(File,"Password",udb_hash(Info[playerid][pKey]));
	    	INI_WriteInt(File,"Level",Info[playerid][pLevel]);
	    	INI_WriteInt(File,"AdminNivelZC",Info[playerid][pAdminZC]);
	    	INI_WriteInt(File,"AdminZC",Info[playerid][pLvlAdminZC]);
	    	INI_WriteInt(File,"BanAppealer",Info[playerid][pBanAppealer]);
			INI_WriteInt(File,"FactionModerator",Info[playerid][pFactionModerator]);
			INI_WriteInt(File,"ModStaff",Info[playerid][pModStaff]);
			INI_WriteInt(File,"GangModerator",Info[playerid][pGangModerator]);
			INI_WriteInt(File,"Helper",Info[playerid][pHelper]);
			INI_WriteInt(File,"ConnectedTime",Info[playerid][pConnectTime]);
			INI_WriteInt(File,"Registered",Info[playerid][pReg]);
			INI_WriteInt(File,"Sex",Info[playerid][pSex]);
			INI_WriteInt(File,"Age",Info[playerid][pAge]);
			INI_WriteInt(File,"Origin",Info[playerid][pOrigin]);
			INI_WriteInt(File,"Respect",Info[playerid][pExp]);
        	INI_WriteInt(File,"Money",GetPVarInt(playerid, "Cash"));
        	INI_WriteInt(File,"Bank",Info[playerid][pAccount]);
        	INI_WriteString(File,"IP", Info[playerid][pIP]);
        	INI_WriteInt(File,"DNIFalse",Info[playerid][pDNIFalse]);
        	INI_WriteString( File, "DNIName",Info[playerid][pDNIName]);
        	INI_WriteInt(File,"Kills",Info[playerid][pKills]);
        	INI_WriteInt(File,"Deaths",Info[playerid][pDeaths]);
        	INI_WriteInt(File,"Arrested",Info[playerid][pArrested]);
        	INI_WriteInt(File,"JailAdmin",Info[playerid][pJailAdmin]);
        	INI_WriteInt(File,"LottoNr",Info[playerid][pLottoNr]);
        	INI_WriteInt(File,"Job",Info[playerid][pJob]);
        	INI_WriteInt(File,"NewMuted",Info[playerid][pNMute]);
        	INI_WriteInt(File,"NewMutedTotal",Info[playerid][pNMuteTotal]);
        	INI_WriteInt(File,"Warn",Info[playerid][pWarn]);
        	INI_WriteInt(File,"WRestricted",Info[playerid][pWRestricted]);
        	INI_WriteInt(File,"Jailed",Info[playerid][pJailed]);
        	INI_WriteInt(File,"JailTime",Info[playerid][pJailTime]);
        	INI_WriteString(File,"JailedBy",Info[playerid][pJailedBy]);
        	INI_WriteString(File,"JailReason",Info[playerid][pJailReason]);
        	INI_WriteString(File,"MyAD",Info[playerid][pMyAD]);
        	INI_WriteInt(File,"Materials",Info[playerid][pMats]);
        	INI_WriteInt(File,"Packages",GetPVarInt(playerid, "Packages"));
        	INI_WriteInt(File,"Drugs",Info[playerid][pDrugs]);
        	INI_WriteInt(File,"Cosecha",Info[playerid][pCosecha]);
        	INI_WriteInt(File,"Crack",Info[playerid][pCrack]);
        	INI_WriteInt(File,"Pot",Info[playerid][pPot]);
        	INI_WriteInt(File,"Ganzuas",Info[playerid][pGanzuas]);
        	INI_WriteInt(File,"Crates",Info[playerid][pCrates]);
        	INI_WriteInt(File,"Adic",Info[playerid][pAdiccion]);
        	INI_WriteInt(File,"Religion",Info[playerid][pReligion]);
        	INI_WriteInt(File,"LiderReligioso",Info[playerid][pLiderReligioso]);
        	INI_WriteInt(File,"Leader",Info[playerid][pLeader]);
        	INI_WriteInt(File,"Member",Info[playerid][pMember]);
        	INI_WriteInt(File,"FMember",Info[playerid][pFMember]);
        	INI_WriteInt(File,"Division",Info[playerid][pDivision]);
        	INI_WriteInt(File,"Rank",Info[playerid][pRank]);
        	INI_WriteInt(File,"Char",Info[playerid][pChar]);
        	INI_WriteFloat(File,"pHealth",Info[playerid][pHealth]);
        	INI_WriteFloat(File,"pArmour",Info[playerid][pArmour]);
        	INI_WriteInt(File,"Team",Info[playerid][pTeam]);
        	INI_WriteInt(File,"Model",Info[playerid][pModel]);
        	INI_WriteInt(File,"PhoneNr",Info[playerid][pPnumber]);
        	INI_WriteInt(File,"Sprunk",Info[playerid][pSprunk]);
        	INI_WriteInt(File,"Phonebook",Info[playerid][pPhoneBook]);
        	INI_WriteInt(File,"House",Info[playerid][pPhousekey]);
       		INI_WriteInt(File,"House2",Info[playerid][pPhousekey2]);
       		INI_WriteInt(File,"Propiedad",Info[playerid][pPhousekeyX]);
        	INI_WriteInt(File,"Int", Info[playerid][pInt]);
        	INI_WriteFloat(File,"Pos_x",Info[playerid][pPos_x]);
        	INI_WriteFloat(File,"Pos_y",Info[playerid][pPos_y]);
        	INI_WriteFloat(File,"Pos_z",Info[playerid][pPos_z]);
   		    INI_WriteFloat(File,"SPos_r",Info[playerid][pPos_r]);
   	        INI_WriteInt(File,"CarLic",Info[playerid][pCarLic]);
	        INI_WriteInt(File,"FlyLic",Info[playerid][pFlyLic]);
	        INI_WriteInt(File,"BoatLic",Info[playerid][pBoatLic]);
	        INI_WriteInt(File,"GunLic",Info[playerid][pGunLic]);
	        INI_WriteInt(File,"Gafas",Info[playerid][pGafas]);
	        INI_WriteInt(File,"Tutorial",Info[playerid][pTut]);
	        INI_WriteInt(File,"Test",Info[playerid][pTestTut]);
	        INI_WriteInt(File,"VWorld",Info[playerid][pVW]);
	        INI_WriteInt(File,"Lighter",Info[playerid][pLighter]);
	        INI_WriteInt(File,"Cigarettes",Info[playerid][pCigarettes]);
	        INI_WriteInt(File,"BanZC",Info[playerid][pBannedZC]);
	        INI_WriteInt(File,"DisabledZC",Info[playerid][pDisabledZC]);
	        INI_WriteInt(File,"BlockBug",Info[playerid][pBlockBug]);
	        INI_WriteInt(File,"Multicuenta",Info[playerid][pMulticuenta]);
	        INI_WriteInt(File,"BlockG",Info[playerid][pBlockG]);
	        INI_WriteInt(File,"DNI",Info[playerid][pDNI]);
	        INI_WriteInt(File,"VSkill",Info[playerid][pArmsSkill]);
	        INI_WriteInt(File,"TSkill",Info[playerid][pTruckSkill]);
	        INI_WriteInt(File,"SmugglerSkill",Info[playerid][pSmugSkill]);
	        INI_WriteInt(File,"DrugsSkill",Info[playerid][pDrugsSkill]);
	        INI_WriteInt(File,"SIDA",Info[playerid][pSIDA]);
	        INI_WriteInt(File,"Cancer" ,Info[playerid][pCancer]);
	        INI_WriteInt(File,"Epilepsia",Info[playerid][pEpilepsia]);
	        INI_WriteInt(File,"Dengue",Info[playerid][pDengue]);
	        INI_WriteInt(File,"FStyle",Info[playerid][pFStyle]);
	        INI_WriteInt(File,"Busqueda",Info[playerid][pWantedLevel]);
	        INI_WriteInt(File,"AntiSIDA",Info[playerid][pAntiSIDA]);
	        INI_WriteInt(File,"AntiCancer",Info[playerid][pAntiCancer]);
	        INI_WriteInt(File,"AntiEpilepsia",Info[playerid][pAntiEpilepsia]);
	        INI_WriteInt(File,"Rent",Info[playerid][pRenting]);
	        INI_WriteInt(File,"prMoney",Info[playerid][p_Pr_Money]);
	        INI_WriteInt(File,"Rob",Info[playerid][pRob]);
	        INI_WriteInt(File,"Premium",Info[playerid][pVIP]);
	        INI_WriteInt(File,"Rol",Info[playerid][pROL]);
	        INI_WriteInt(File,"FichasCash",Info[playerid][pPTR]);
	        INI_WriteInt(File,"CarPremium",Info[playerid][pCarKey2]);
	        INI_WriteInt(File,"BanDuda",Info[playerid][pBanDuda]);
	        INI_WriteInt(File,"ReportMuted",Info[playerid][pRMuted]);
	        INI_WriteInt(File,"ReportMutedTotal",Info[playerid][pRMutedTotal]);
	        INI_WriteInt(File,"ReportMutedTime",Info[playerid][pRMutedTime]);
	        INI_WriteInt(File,"Pasaporte",Info[playerid][pPasaporte]);
	        INI_WriteInt(File,"Seguro",Info[playerid][pSeguro]);
	        INI_WriteInt(File,"RadioP", Info[playerid][pRadio]);
	        INI_WriteInt(File,"KHZ",Info[playerid][pRadioFreq]);
	        INI_WriteInt(File,"Ipad",Info[playerid][pIpadMusic]);
	        INI_WriteInt(File,"GiftTime",Info[playerid][pGiftTime]);
	        INI_WriteInt(File,"Boombox", Info[playerid][pBoombox]);
	        INI_WriteInt(File,"PuntosRol", Info[playerid][pPuntosRol]);
	        INI_WriteInt(File,"TakeAway", Info[playerid][pTakeAway]);
			for( new m = 0; m < 13; m++ )
			{
			    new mStr[24];
			    format(mStr,sizeof(mStr), "Gun%d", m);
			    INI_WriteInt(File,mStr, Info[playerid][pWeapons][m]);
			}
			INI_WriteInt(File,"Acento",Info[playerid][pAccent]);
			INI_WriteInt(File,"Ingles",Info[playerid][pIngles]);
    		INI_WriteInt(File,"Aleman",Info[playerid][pAleman]);
    		INI_WriteInt(File,"Ruso",Info[playerid][pRuso]);
    		INI_WriteInt(File,"Japones",Info[playerid][pJapones]);
    		INI_WriteInt(File,"Italiano",Info[playerid][pItaliano]);
    		INI_WriteInt(File,"Arabe",Info[playerid][pArabe]);
    		INI_WriteInt(File,"InglesSkill",Info[playerid][pInglesSkill]);
    		INI_WriteInt(File,"AlemanSkill",Info[playerid][pAlemanSkill]);
    		INI_WriteInt(File,"RusoSkill",Info[playerid][pRusoSkill]);
    		INI_WriteInt(File,"JaponesSkill",Info[playerid][pJaponesSkill]);
    		INI_WriteInt(File,"ItalianoSkill",Info[playerid][pItalianoSkill]);
    		INI_WriteInt(File,"ArabeSkill",Info[playerid][pArabeSkill]);
			INI_WriteInt(File,"PTokens",Info[playerid][pPaintTokens]);
			INI_WriteInt(File,"Undercover",Info[playerid][pUndercover]);
			INI_WriteInt(File,"Head",Info[playerid][pHead]);
			INI_WriteInt(File,"TaxiLicense", Info[playerid][pTaxiLicense]);
			INI_WriteInt(File,"Hospital",Info[playerid][pHospital]);
			INI_WriteInt(File,"CHits",Info[playerid][pCHits]);
			INI_WriteInt(File,"FHits",Info[playerid][pFHits]);
			INI_WriteInt(File,"Spraycan",Info[playerid][pSpraycan]);
			INI_WriteInt(File,"Married",Info[playerid][pMarried]);
			INI_WriteString(File,"MarriedTo",Info[playerid][pWarrant]);
			INI_WriteString(File,"ContractBy",Info[playerid][pContractBy]);
			INI_WriteString(File,"ContractDetail",Info[playerid][pContractDetail]);
			INI_WriteInt(File,"Contract",Info[playerid][pContract]);
			INI_WriteInt(File,"pWExists",Info[playerid][pWExists]);
			INI_WriteFloat(File,"pWX",Info[playerid][pWX]);
			INI_WriteFloat(File,"pWY",Info[playerid][pWY]);
			INI_WriteFloat(File,"pWZ",Info[playerid][pWZ]);
			INI_WriteInt(File,"pWVW",Info[playerid][pWVW]);
			INI_WriteInt(File,"pWInt",Info[playerid][pWInt]);
			INI_WriteInt(File,"pWValue",Info[playerid][pWValue]);
			INI_WriteInt(File,"pWSeeds",Info[playerid][pWSeeds]);
			INI_WriteInt(File,"PayEx",Info[playerid][YaCobre]);
			INI_WriteInt(File,"AdMuted",Info[playerid][pADMute]);
			INI_WriteInt(File,"AdMutedTotal",Info[playerid][pADMuteTotal]);
			INI_WriteString(File,"Warrants",Info[playerid][pWarrant]);
			INI_WriteInt(File,"JudgeJailTime",Info[playerid][pJudgeJailTime]);
			INI_WriteInt(File,"JudgeJailType",Info[playerid][pJudgeJailType]);
			INI_WriteInt(File,"BeingSentenced",Info[playerid][pBeingSentenced]);
			INI_WriteInt(File,"ProbationTime",Info[playerid][pProbationTime]);
			INI_WriteInt(File,"Fishes" ,Info[playerid][pFishes]);
			INI_WriteInt(File,"FishSkill",Info[playerid][pFishSkill]);
			INI_WriteInt(File,"BiggestFish",Info[playerid][pBiggestFish]);
			INI_WriteInt(File,"RewardsHours",Info[playerid][pRHours]);
			INI_WriteInt(File,"ADTime",Info[playerid][pADTime]);
			INI_WriteInt(File,"Otros",Info[playerid][pOther]);
			INI_WriteInt(File,"GGTokens",Info[playerid][pGTokens]);
			INI_WriteInt(File,"HDExp",Info[playerid][pDobleExp]);
			INI_WriteInt(File,"DPHoras",Info[playerid][pDPHours]);
			INI_WriteInt(File,"DPTiempo",Info[playerid][pDPTime]);
			INI_WriteInt(File,"DPTotal",Info[playerid][pDPTotal]);
			INI_WriteInt(File,"Order",Info[playerid][pOrder]);
			INI_WriteInt(File,"TempVIP",Info[playerid][pTempVIP]);
			INI_WriteInt(File,"VIPInviteDay",Info[playerid][pVIPInviteDay]);
			INI_WriteInt(File,"BuddyInvite",Info[playerid][pBuddyInvited]);
			INI_WriteInt(File,"VTokens",Info[playerid][pVTokens]);
			INI_WriteInt(File,"Job2",Info[playerid][pJob2]);
			INI_WriteInt(File,"TypeSpawn",Info[playerid][pTypeSpawn]);
			INI_WriteInt(File,"ShopTech",Info[playerid][pShopTech]);
			INI_WriteInt(File,"Status",Info[playerid][pEstado]);
			INI_WriteString(File,"Estado",Info[playerid][pEstadoX]);
			INI_WriteInt(File,"DayVIP",Info[playerid][pVIPDateD]);
			INI_WriteInt(File,"MonthVIP",Info[playerid][pVIPDateM]);
			INI_WriteInt(File,"IDRegalo",Info[playerid][pRegalo]);
			INI_WriteInt(File,"Negocio",Info[playerid][pPbizzkey]);
			INI_WriteInt(File,"skinn",Info[playerid][pgskin]);
			INI_WriteInt(File,"robita",Info[playerid][probita]);
	    	for(new v = 0; v < MAX_PLAYERTOYS; v++)
    		{
	    		new string3[64];
				format( string3, sizeof( string3 ), "pt%dModelID", v);
				INI_WriteInt(File,string3, PlayerToyInfo[playerid][v][ptModelID]);
				format(string3, 64, "pt%dBone",v);
				INI_WriteInt(File,string3, PlayerToyInfo[playerid][v][ptBone]);
				format(string3, 64, "pt%dPosX",v);
				INI_WriteFloat(File,string3, PlayerToyInfo[playerid][v][ptPosX]);
				format(string3, 64, "pt%dPosY",v);
				INI_WriteFloat(File,string3, PlayerToyInfo[playerid][v][ptPosY]);
				format(string3, 64, "pt%dPosZ",v);
				INI_WriteFloat(File,string3, PlayerToyInfo[playerid][v][ptPosZ]);
				format(string3, 64, "pt%dRotX",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ptRotX]);
				format(string3, 64, "pt%dRotY",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ptRotY]);
				format(string3, 64, "pt%dRotZ",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ptRotZ]);
				format(string3, 64, "pt%dSizX",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ftscaleX]);
				format(string3, 64, "pt%dSizY",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ftscaleY]);
				format(string3, 64, "pt%dSizZ",v);
				INI_WriteFloat(File,string3,PlayerToyInfo[playerid][v][ftscaleZ]);
    		}
    		for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    		{
    	    	new string3[64];
        		format(string3, 64, "pv%dPosX",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosX]);
        		format(string3, 64, "pv%dPosY",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosY]);
        		format(string3, 64, "pv%dPosZ",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosZ]);
        		format(string3, 64, "pv%dPosAngle",v);
        		INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvPosAngle]);
				format(string3, 64, "pv%dVirtualW",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvVW]);
				format(string3, 64, "pv%dModelId",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvModelId]);
				format(string3, 64, "pv%dLock",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvLock]);
				format(string3, 64, "pv%dLocked",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvLocked]);
				format(string3, 64, "pv%dPaintJob",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvPaintJob]);
				format(string3, 64, "pv%dColor1",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvColor1]);
				format(string3, 64, "pv%dColor2",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvColor2]);
				format(string3, 64, "pv%dPrice",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvPrice]);
				format(string3, 64, "pv%dTicket",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvTicket]);
				format(string3, 64, "pv%dWeapon0",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][0]);
				format(string3, 64, "pv%dWeapon1",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][1]);
				format(string3, 64, "pv%dWeapon2",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][2]);
				format(string3, 64, "pv%dWeapon3",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][3]);
				format(string3, 64, "pv%dWeapon4",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][4]);
				format(string3, 64, "pv%dWeapon5",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][5]);
				format(string3, 64, "pv%dWeapon6",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][6]);
				format(string3, 64, "pv%dWeapon7",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWeapons][7]);
				format(string3, 64, "pv%dWepUpgrade",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvWepUpgrade]);
				format(string3, 64, "pv%dFuel",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvFuel]);
				format(string3, 64, "pv%dImpound",v);
				INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvImpounded]);
				format(string3, 64, "pv%dHealth",v);
				INI_WriteFloat(File,string3,PlayerVehicleInfo[playerid][v][pvHealth]);

				for(new m = 0; m < MAX_MODS; m++)
				{
				    format(string3, 64, "pv%dMod%d", v, m);
				    INI_WriteInt(File,string3,PlayerVehicleInfo[playerid][v][pvMods][m]);
				}
			}
			INI_Close(File); // Closing Account and finish file
			fclose(UserFile);
			print("DEBUG: CUENTA guardada Y_INI - Archivo .ini cerrado");
			SendClientMessage(playerid, -1, "Administración: Tu cuenta ha sido convertida correctamente a y_ini.");
			SendClientMessage(playerid, -1, "Administración: Para guardarla correctamente por favor vuelve a ingresar.");
			SendClientMessage(playerid, COLOR_GENERAL, "Administración: Has sido expulsado automáticamente de INFRANET - RP.");
			SetPlayerName(playerid, "InvalidNick");
			Kick(playerid);
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
//****sistema afk***
Afk[playerid]=0;
Bus_Route[playerid] = 0;
Avion_Route[playerid] = 0;
Tren_Route[playerid] = 0;
DrivingTest[playerid] = 0;
HaceMG[playerid] = 0;
HaceAbuso[playerid] = 0;
Autorizado[playerid] = 0;
//Vigilando[playerid] = 0; // Bugeado.
Delete3DTextLabel(Estado[playerid]);
// Sistema de renta.
RentTime[playerid] = 0;
IsaRent[playerid] = 0;
TypeOfRent[playerid] = 0;
HireKey[playerid] = 9999;
// Onduty Transportes.
TreneroDuty[playerid] = 0;
PilotoDuty[playerid] = 0;
// Interiores en vehículos.
InteriorLimusina[playerid] = 0;
InteriorSwatVan[playerid] = 0;
InteriorCaravana[playerid] = 0;
InteriorBeagle[playerid] = 0;
// Sinstema de intermitentes.
iLuces[playerid] = 0;
//
TextDrawHideForPlayer(playerid, TextTut[playerid]);
for(new p = 1; p < 5; p++)
{
	TextDrawHideForPlayer(playerid, TutTxt[p]);
}
TextDrawHideForPlayer(playerid,Text:Messageafk);
KillTimer(Timer[playerid]);
//**security**
Jugadores = IDMayor(playerid);
if(BotServidor[playerid]) BotServidor[playerid] = false;
if(Barra[playerid] != -1)
{
KillTimer(Barra[playerid]);
Barra[playerid] = -1;
}
Advertencias[playerid] = 0;
	//************
    if(GetPVarType(playerid, "PlacedBB"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        if(GetPVarType(playerid, "BBArea"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                {
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_WHITE, "* La música deja de sonar ((El propietario de la {00AFED}boombox{FFFFFF} se ha desconectado)).");
                }
            }
        }
    }
    TextDrawHideForPlayer(playerid, Experiencia[playerid]); //sistema experiencia//
	new plname[MAX_PLAYER_NAME];
	Delete3DTextLabel(estado[playerid]);
	GetPlayerName(playerid, plname, sizeof(plname));
	if(!strcmp(plname, "BannedPlayer", true)) return 1;
	if(!strcmp(plname, "InvalidNick", true)) return 1;
	if(playerid == MAX_PLAYERS) return 1;
	if(GetPVarInt(playerid, "TempName") == 1)
	{
	    new name[MAX_PLAYER_NAME];
		GetPVarString(playerid, "TempNameName", name, sizeof(name));
		SetPlayerName(playerid, name);
		SetPVarInt(playerid, "TempName", 0);
	}
	if(Info[playerid][pWExists] == 1)
	{
		WeedLogout(playerid);
	}
	if(pTazer[playerid] == 1) GivePlayerValidWeapon(playerid,pTazerReplace[playerid]);
	if(GetPVarInt(playerid, "SpeedRadar") == 1) GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"));
	if(GetPVarInt(playerid, "Injured") == 1)
	{
	    Info[playerid][pHospital] = 1;
	    KillEMSQueue(playerid);
        ResetPlayerWeaponsEx(playerid);
	}
	if(Info[playerid][pLockCar] != INVALID_VEHICLE_ID)
	{
		vehicle_unlock_doors(Info[playerid][pLockCar]);
	}
	if(Info[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        PlayerVehicleInfo[Info[playerid][pVehicleKeysFrom]][Info[playerid][pVehicleKeys]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	}
	new string[128];
	switch (reason)
	{
 	   	case 0:
	   	{
		   	format(string, sizeof(string), "%s ha salido del servidor (Posible Crash).", GetPlayerNameEx(playerid));
		   	ProxDetector(8.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		   	if(Info[playerid][pEstado] == 2)
		   	{
                Info[playerid][pJailed] = 1;
				Info[playerid][pJailTime] += 10*60;
				strmid(Info[playerid][pJailedBy], "Desconectarse en rol (/esposar)", 0, strlen("Desconectarse en rol (/esposar)"), 32);
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
                for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		    	{
					if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
					{
						new Float:x, Float:y, Float:z, Float:angle, vw;
						vw = GetPlayerVirtualWorld(playerid);
						GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
						GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
						PlayerVehicleInfo[playerid][d][pvPosX] = x;
						PlayerVehicleInfo[playerid][d][pvPosY] = y;
						PlayerVehicleInfo[playerid][d][pvPosZ] = z;
		 				PlayerVehicleInfo[playerid][d][pvPosAngle] = angle;
		 				PlayerVehicleInfo[playerid][d][pvVW] = vw;
					}
				}
	   		}
	   	}
	   	case 1:
 	  	{
		   	format(string, sizeof(string), "%s ha salido del servidor (Abandono).", GetPlayerNameEx(playerid));
		   	ProxDetector(8.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		   	if(Info[playerid][pEstado] == 2)
		   	{
                Info[playerid][pJailed] = 1;
				Info[playerid][pJailTime] += 10*60;
				strmid(Info[playerid][pJailedBy], "Desconectarse en rol (/esposar)", 0, strlen("Desconectarse en rol (/esposar)"), 32);
			}
		}
		case 2:
	    {
			format(string, sizeof(string), "%s ha salido del servidor (Kick/Ban).", GetPlayerNameEx(playerid));
			ProxDetector(8.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	   	}
	}
	if(InfoEvento[EventRequest] == playerid)
	{
	    InfoEvento[EventRequest] = 99;
		ABroadCast( COLOR_GENERAL, "INFRANET - RP: El jugador que estaba solicitando un evento se ha desconectado o crasheó.", 4 );
	}
	if(InfoEvento[EventCreator] == playerid)
	{
	    InfoEvento[EventCreator] = 99;
		ABroadCast( COLOR_GENERAL, "INFRANET - RP: El jugador que creó el evento se ha desconectado o crasheó.", 4 );
	}
	if(InfoEvento[EventStaff][0] == playerid)
	{
	    InfoEvento[EventStaff][0] = 99;
	}
	else if(InfoEvento[EventStaff][1] == playerid)
	{
	    InfoEvento[EventStaff][1] = 99;
	}
	else if(InfoEvento[EventStaff][2] == playerid)
	{
	    InfoEvento[EventStaff][2] = 99;
	}
	else if(InfoEvento[EventStaff][3] == playerid)
	{
	    InfoEvento[EventStaff][3] = 99;
	}
	else if(InfoEvento[EventStaff][4] == playerid)
	{
	    InfoEvento[EventStaff][4] = 99;
	}
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
	    PaintballDisconnect(playerid);
		Info[playerid][pPos_x] = GetPVarFloat(playerid, "pbOldX");
		Info[playerid][pPos_y] = GetPVarFloat(playerid, "pbOldY");
		Info[playerid][pPos_z] = GetPVarFloat(playerid, "pbOldZ");
		Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
		Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
		Info[playerid][pHealth] = GetPVarFloat(playerid, "pbOldHealth");
		Info[playerid][pArmour] = GetPVarFloat(playerid, "pbOldArmor");
		SetHP(playerid,GetPVarFloat(playerid, "pbOldHealth"));
		SetPlayerArmour(playerid,GetPVarFloat(playerid, "pbOldArmor"));
	}
	else if(GetPVarInt(playerid, "EventToken") == 0)
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		Info[playerid][pPos_x] = x;
		Info[playerid][pPos_y] = y;
		Info[playerid][pPos_z] = z;
		GetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
		Info[playerid][pInt] = GetPlayerInterior(playerid);
		Info[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		Info[playerid][pChar] = GetPlayerSkin(playerid);
		if(Info[playerid][pChar] == 0) Info[playerid][pChar] = 299;
	}
	else if(GetPVarInt(playerid, "EventToken") == 1)
	{
	    Info[playerid][pInt] = EventLastInt[playerid];
		Info[playerid][pVW] = EventLastVW[playerid];
		Info[playerid][pChar] = Info[playerid][pChar];
		Info[playerid][pPos_r] = EventFloats[playerid][0];
		Info[playerid][pPos_x] = EventFloats[playerid][1];
		Info[playerid][pPos_y] = EventFloats[playerid][2];
		Info[playerid][pPos_z] = EventFloats[playerid][3];
	}
	if(ShowRules[playerid] == 1)
	{
		Info[playerid][pVW] = GetPVarInt(playerid, "rOldVW");
		Info[playerid][pInt] = GetPVarInt(playerid, "rOldInt");
        Info[playerid][pPos_x] = GetPVarFloat(playerid, "rOldX");
        Info[playerid][pPos_y] = GetPVarFloat(playerid, "rOldY");
        Info[playerid][pPos_z] = GetPVarFloat(playerid, "rOldZ");
    }
	if(Spectate[playerid] < 553)
	{
        Info[playerid][pInt] = GetPVarInt(playerid, "SpecInt");
		Info[playerid][pVW] = GetPVarInt(playerid, "SpecVW");
		Info[playerid][pPos_x] = GetPVarFloat(playerid, "SpecPosX");
		Info[playerid][pPos_y] = GetPVarFloat(playerid, "SpecPosY");
		Info[playerid][pPos_z] = GetPVarFloat(playerid, "SpecPosZ");
	    GettingSpectated[Spectate[playerid]] = 999;
	    Spectate[playerid] = 999;
	}
	if(Info[playerid][pAdverID] != -1) ClearAd(Info[playerid][pAdverID]);
	if(HireKey[playerid] != 9999)
	{
	    SetVehicleToRespawn(HireKey[playerid]);
	}
    if(Interview != 0)
	{
		if(strcmp(Interviewer,plname,true) == 0 )
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Se canceló tu entrevista.");
		    Interviewer = "Nadie";
		    Interview = 0;
		}
	}
  	OnPlayerSavedStats(playerid);
  	UnloadPlayerVehicles(playerid);
	ResetPlayerWeapons(playerid);

	for(new i = 0; i < MAX_REPORTS; i++)
	{
	    if(Reports[i][ReportFrom] == playerid)
	    {
	        Reports[i][ReportFrom] = 999;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
		}
	}
	foreach(Player, i)
	{
		if(TaxiAccepted[i] == playerid)
		{
			TaxiAccepted[i] = 999;
			GameTextForPlayer(i, "~w~jugador~n~~r~se desconecto", 5000, 1);
			TaxiCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(MedicAccepted[i] == playerid)
		{
			TaxiAccepted[playerid] = 999; MedicAccepted[playerid] = 999;
			GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			MedicCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
		if(IsPlayerConnected(TransportDriver[playerid]))
		{
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			format(string, sizeof(string), "~w~Pasajero se fue~n~~g~ganaste $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
			TransportDriver[playerid] = 999;
		}
	}
	if(GotHit[playerid] > 0)
	{
		if(GetChased[playerid] < 999)
		{
			if(IsPlayerConnected(GetChased[playerid]))
			{
				SendClientMessageEx(GetChased[playerid], COLOR_YELLOW, "Tu hit salió del servidor.");
				GoChase[GetChased[playerid]] = 999;
			}
		}
	}
 	if(GoChase[playerid] < 999){
      GetChased[GoChase[playerid]] = 999;
      GotHit[GoChase[playerid]] = 999;
 	}
	if(GetPVarInt(playerid, "AdvisorDuty") == 1) { Advisors--; }
	if(Team_Mecanicos(playerid))
	{
		if(OnDuty[playerid] == 1) { Mechanics -= 1; }
	}
	if(TransportDuty[playerid] == 1) { TaxiDrivers -= 1; }
 	if(BOMBA[playerid]){DestroyObject(BOMBA[playerid]);}
 	MoneyBet[playerid] = 0;
  	BetOnHorse[playerid] = 0;
  	Watching[playerid] = 0;
 	return 1;
}




function MissileLaunchEx(Float:x, Float:y, Float:z, Float:radius, type)
{
    CreateExplosion(x, y, z, type, radius);
    Misile_Launcher --;
    new string[128];
    format(string, sizeof(string), "** Lanzamiento detonado en %0.2f - %0.2f - %0.2f, radio %d",x,y,z,radius);
    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
    return 1;
}

function MissileLaunch(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehiclePos(vehicleid, x, y, z);
    CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);
    Misile_Launcher --;
    new string[64];
    format(string, sizeof(string), "** Lanzamiento detonado en objetivo vehículo %d",vehicleid);
    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
    return 1;
}
//*******************funciones de puertas dinamicas*******************
/*forward FloodEquipo(playerid);
public FloodEquipo(playerid)
{
	UsarEquipo[playerid] = 0;
	SendClientMessageEx(playerid, COLOR_GRAD2, "[CMD] Puedes usar de nuevo el comando /equipo.");
}*/
forward IntentarPuenteTimer(playerid);
public IntentarPuenteTimer(playerid)
{
	IntentarPuente[playerid] = 0;
	SendClientMessageEx(playerid, COLOR_GRAD2, "[CMD] Puedes usar de nuevo el comando /puente.");
}
forward IntentarTimer(playerid);
public IntentarTimer(playerid)
{
	Intentar[playerid] = 0;
}
forward AntiAbusoTimer(playerid);
public AntiAbusoTimer(playerid)
{
	AntiAbuso[playerid] = 0;
}
function CloseCourtGate1()
{
	MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934,7698.23632812,4);
	return 1;
}
function CloseCourtGate2()
{
	MoveDynamicObject(courtgates[1],21638.00292969,1290.96386719,7698.24169922,4);
	return 1;
}
/*function GateCloseALEPH()
{
	MoveDynamicObject(rejaALEPH,1981.42188, -1278.69995, 4.84980,3.5, 0.00000, 0.00000, 180.00000);
	MoveDynamicObject(rejaALEPH2,1992.91956, -1278.72607, 4.84980,3.5, 0.00000, 0.00000, 0.00000);
	return 1;
}*/
function CloseCia1()
{
	MoveDynamicObject(cia1,244.81964, 72.43684, 1002.63965,4);
	return 1;
}
function CloseCia2()
{
	MoveDynamicObject(cia2,247.821359, 72.47114, 1002.63959,4);
	return 1;
}
function GateClose(playerid)
{
      MoveDynamicObject(pdgate1,1586.73999, -1638.14319, 14.56300, 3.0, 0.00000, 0.00000, 180.00000);
      PlayerPlaySound(playerid, 1153, 1586.73999, -1638.14319, 14.56300);
      return 1;
}
function GateClose5()
{
	  MoveDynamicObject(pdgate2, 1546.19897, -1627.59656, 15.28090, 3.0, 0.00000, 0.00000, 90.00000);
      return 1;
}
function CloseGarage()
{
	  MoveDynamicObject(pdgate3, 1643.5000000,-1719.4000000,14.7000000, 3.0, 0.0000000,0.0000000,90.0000000);
      return 1;
}
function CloseGarageHitman()
{
	  MoveDynamicObject(porhit, 2235.10010, -2216.00000, 15.27796, 3.0, 0.00000, 0.00000, 315.00000);
      return 1;
}
function CloseGarageHitman2()
{
	  MoveDynamicObject(porhitint, 2178.3999000,-2254.8000000,15.4000000, 3.0, 0.0000000,0.0000000,314.0000000);
      return 1;
}
function GateCloseCNN(){ // Portón de la calle.
       MoveDynamicObject(tvp, 649.71960, -1359.09595, 12.88290,5.0);
       return 1;
}
function CloseDoorPJ(){ // Cierra las puertas del Poder Judicial.
		MoveDynamicObject(PJDOOR, 1440.71216, -1469.97485, 165.26636,1.5); // Cerrado.
       	return 1;
}
function CloseDoorPJ2(){ // Cierra las puertas del Poder Judicial.
		MoveDynamicObject(PJDOOR2, 1422.93811, -1469.96814, 166.24707,1.5); // Cerrado.
       	return 1;
}
function CloseDoorPJCELDA(){ // Cierra las CELDAS del Poder Judicial.
		MoveDynamicObject(PJCELDA, 1436.45630, -1479.50000, 1617.51892, 0.5); // Cerrado.
       	return 1;
}
function CloseDoorPJCELDA2(){ // Cierra las CELDAS del Poder Judicial.
		MoveDynamicObject(PJCELDA2, 1432.98425, -1479.50000, 1617.51892, 0.5); // Cerrado.
       	return 1;
}
function OpenDoorNG(){
       MoveDynamicObject(saem1, 2457.7949, -2254.7595, 26.90,5.0);
       return 1;
}
function OpenDoorNG2(){
       MoveDynamicObject(saem2, 2338.1057, -2353.8828, 15.2,5.0);
       return 1;
}
function OpenDoorNG3(){
       MoveDynamicObject(saem3, 2273.5957, -2663.2905, 15.2,5.0);
       return 1;
}
function OpenDoorNGSF(){
       MoveDynamicObject(saemSF, -1529.0433, 482.4390, 9.0600,5.0);
       return 1;
}
function OpenDoorNGLV(){
       MoveDynamicObject(saemLV, 135.24150, 1941.01294, 20.59000,5.0);
       return 1;
}
function OpenDoorNGLV2(){
       MoveDynamicObject(saemLV2, 348.98410, 1801.11804, 20.27390,5.0,   0.00000, 358.25000, 41.75000);
       return 1;
}
function Portonrus(){
       MoveDynamicObject(portoru, -2281.21021, 120.32613, 38.03923,3.0);
       return 1;
}
/*function GateCloseGob(){
       MoveDynamicObject(gobiernogate, 1390.39941406,-1649.69921875,16.29999924,5.0);
       return 1;
}
function GateCloseGob1(){
       MoveDynamicObject(gobiernogate1, 1391.29980469,-1629.89941406,12.52500343,5.0);
       return 1;
}*/
function depositogate()
{
       MoveDynamicObject(depgateA, 1630.40356, -1862.23682, 14.25000, 2.0, 0.00000, 0.00000, 0.00000);
       MoveDynamicObject(depgateB, 1639.95410, -1862.23657, 14.25000, 2.0, 0.00000, 0.00000, -180.00);
       return 1;
}
function CloseCell3()
{
	MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4334.70019531,4);
	return 1;
}
function CloseCell4()
{
	MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4334.60009766,4);
	return 1;
}
function CloseCell5()
{
	MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4334.70019531,4);
	return 1;
}
function CloseCell6()
{
	MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4334.60009766,4);
	return 1;
}
/*function GateClose4()
{
      MoveDynamicObject(hospitalgate,1141.40002441,-1293.69995117,15.39999962, 1.5);
      return 1;
}*/
function GateCloseRusa()
{
      MoveDynamicObject(RejaRusa, 787.20361328,-1152.45361328,25.40438461,1.5);
      return 1;
}
function GateCloseRusa2()
{
      MoveDynamicObject(RejaRusa2, 658.68890381,-1226.62780762,17.62639618,1.5);
      return 1;
}
function GateCloseRusa3()
{
      MoveDynamicObject(RejaRusa3, 665.05010986,-1310.76293945,15.35269642,1.5);
      return 1;
}
function GateCloseBunker() // Acceso al Búnker de Rusos, para los vehículos.
{
      MoveDynamicObject(BunkerRusos, 720.01898, -1322.44202, 2072.70996,1.5);
      return 1;
}
function CloseDoorRusos() // Cierra las puertas de Rusos, las dos. Izquierda primero, luego derecha.
{
	MoveDynamicObject(RusosDoor1,737.41901, -1212.03296, 2216.07910,4,   0.00000, 0.00000, 90.00000);
	MoveDynamicObject(RusosDoor2,737.41998, -1209.01196, 2216.07910,4,   0.00000, 0.00000, -90.0000);
	return 1;
}
//function CloseDoorDerecha()
/*
{
	MoveDynamicObject(LSPD_Derecha, 1564.76685, -1688.26770, 4989.52588, 3.5, 0.00000, 0.00000, 90.00000);
	return 1;
}
//function CloseDoorIzquierda()
{
	MoveDynamicObject(LSPD_Izquierda, 1564.73792, -1664.65930, 4989.52588, 3.5,  0.00000, 0.00000, -90.00000);
	return 1;
}
*/
function GateCloseYakuza()
{
      MoveDynamicObject(yakuzagate, 321.32, -1188.11, 78.08, 1.5);
      return 1;
}
function GateCloseSis()
{
      MoveDynamicObject(sisporton, 1457.14, -1505.88, 1500.28, 1.5);
      return 1;
}
function GateCloseSantana()
{
      MoveDynamicObject(SantanaReja, 1245.56, -766.85, 94.06, 1.5);
      return 1;
}
function GateCloseAlqaeda()
{
      MoveDynamicObject(AlqaedaReja, 1023.6000, -371.7000, 75.3000, 22.5);
      return 1;
}
function GateCloseRejavip(){
       MoveDynamicObject(rejavip, 2909.96484, -666.21680, 16.56295,5.0);
       return 1;
}

/*function GateCloseCNN1(){
       MoveDynamicObject(tvp1, 774.11425781,-1384.98632812,12.92022705,5.0);
       return 1;
}*/

function GateCloseMecas()
{
	MoveDynamicObject(mecareja,2237.3669, -1962.7161, 14.8617, 2.5);
	return 1;
}
/*function GateCloseTaller()
{
	MoveDynamicObject(EntradaTaller,1975.92395, -1780.50000, 18.00000, 2.0,   0.00000, -90.00000, 0.00000);
	return 1;
}
function GateCloseTaller2()
{
	MoveDynamicObject(EntradaTaller2,2030.15137, -1790.31531, 15.1176, 2.0,   0.00000, 0.00000, 90.00000);
	return 1;
}*/
function GateCloseLCN1()
{
	MoveDynamicObject(rejalcn,1426.66724, -1883.32166, 15.13657, 1.5);
	return 1;
}
function GateCloseLCN2()
{
   	MoveDynamicObject(rejalcn1,1284.10754, -2052.48926, 59.45000, 1.0);
	MoveDynamicObject(rejalcn2,1284.10754, -2060.44092, 59.45000, 1.0);
	return 1;
}
function GateCloseLCN3()
{
	MoveDynamicObject(rejalcn3,1132.73877, -2080.80762, 71.53810, 3.5);
	return 1;
}
function GateClosepeaje1()
{
	MoveDynamicObject(peaje1,35.25729, -1516.96399, 4.24860, 2.5);
	return 1;
}

function GateClosepeaje2()
{
	MoveDynamicObject(peaje2,67.85014, -1545.88879, 4.02450, 2.5);
	return 1;
}
//**************************************
SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerSkin(playerid, Info[playerid][pChar]);
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if(x == 0.0 && y == 0.0 && z == 0.0)
		{
  			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid, 1715.1201,-1903.1711,130.5665);
			SetPlayerFacingAngle(playerid, 359.4621);
			SetCameraBehindPlayer(playerid);
		}
	    if(GetPVarInt(playerid, "IsInArena") == 1)
		{
			SpawnPaintballArena(playerid);
			return 1;
		}
 		if( GetPVarInt(playerid, "SpecOff" ) == 1 )
		{
			SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			SetPVarInt(playerid, "SpecOff", 0 );
			SetPVarInt(playerid, "SpecState", -1 );
			return 1;
		}
	    if(Info[playerid][pReg] == 0)
	    {
			TextDrawShowForPlayer(playerid, LoginMenu[0]);
	     	TextDrawShowForPlayer(playerid, LoginMenu[1]);
	     	TextDrawHideForPlayer(playerid, LoginMenu[8]);
    		SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
			SetPosEx(playerid,2323.0186, -1273.7056, 35.9157,71.3830,0,playerid);
			InterpolateCameraPos(playerid,2286.8804, -1122.4028, 47.0, 2310.7507, -1441.4851, 47.0, 20000, CAMERA_MOVE);
			InterpolateCameraLookAt(playerid,2286.9609, -1362.0000, 20.5938, 2286.9609, -1362.0000, 20.5938, 20000, CAMERA_MOVE);
			Info[playerid][pAge] = 30; Info[playerid][pSex] = 1;
			new sex[]= "{FF0000}\n{FFFFFF}Antes de empezar es necesario que selecciones el sexo que deseas que sea tu personaje:\n";
			SafeDialogEx(playerid,REG_SEX,DIALOG_STYLE_MSGBOX, "{00F70C}Primer paso", sex, "Hombre", "Mujer");
			return 1;
	    }
	    if(Info[playerid][pTut] == 0)
	    {
	        ClearChatbox(playerid);
	        SetPlayerVirtualWorld(playerid, 501); Info[playerid][pReg] = 1;
		    TutStep[playerid] = 1;
    		TutTime[playerid] = 1;
   			Tutorial_Inside(playerid);
			TextDrawHideForPlayer(playerid, LoginMenu[0]);
	     	TextDrawHideForPlayer(playerid, LoginMenu[1]);
	     	TextDrawHideForPlayer(playerid, LoginMenu[8]);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "Bien, ya estás registrado. Serás redirigido al tutorial inicial.");
            SendClientMessageEx(playerid, COLOR_YELLOW2, "Pulsa la letra Y para desplazarte en el tutorial. Salta el tutorial con /saltartutorial.");
			return 1;
		}
		new rand;
		if(Info[playerid][pBeingSentenced] > 0)
		{
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(WarrantJail));
			SetPlayerPos(playerid, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
			if(rand != 0) courtjail[playerid] = 2;
			else courtjail[playerid] = 1;
			return 1;
		}
		if(Info[playerid][pJailed] == 1) // Jail OOC.
		{
		    new stringjail[128];
		    new minutos = (Info[playerid][pJailTime]/60)+1;
		    Info[playerid][pEstado] = 0;
		    PhoneOnline[playerid] = 1;
		    SetPlayerInterior(playerid, 0);
			rand = random(sizeof(OOCJail));
			LoadObjects(playerid);
			SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerSkin(playerid, 50);
			//SendClientMessageEx(playerid, COLOR_LIGHTRED, "Estás en prisión, espera acabar tu condena.");
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "{A2DC35}[INFO]:{FFFFFF} Estás en prisión, tienes que esperar a acabar tu condena administrativa.");
			format(stringjail, sizeof(stringjail), "(Tiempo: %d minutos) - Has sido jaileado por %s, motivo: %s", minutos, Info[playerid][pJailedBy], Info[playerid][pJailReason]);
			SendClientMessageEx(playerid, COLOR_GRAD2, stringjail);
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		if(Info[playerid][pJailed] == 2) // Jail LSPD.
		{
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(LSPDPrisonSpawns));
		    SetPlayerPos(playerid, LSPDPrisonSpawns[rand][0], LSPDPrisonSpawns[rand][1], LSPDPrisonSpawns[rand][2]);
		    LoadObjects(playerid);
			SetPlayerToTeamColor(playerid);
			Info[playerid][pInt] = 1;
			SetPlayerInterior(playerid, 1);
			Info[playerid][pVW] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			return 1;
		}
		if(Info[playerid][pJailed] == 3) // Jail FBI.
		{
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(FBIPrisonSpawns));
		    SetPlayerPos(playerid, FBIPrisonSpawns[rand][0], FBIPrisonSpawns[rand][1], FBIPrisonSpawns[rand][2]);
		    LoadObjects(playerid);
			SetPlayerToTeamColor(playerid);
			Info[playerid][pInt] = 1;
			SetPlayerInterior(playerid, 1);
			Info[playerid][pVW] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			return 1;
		}
		/*if(Info[playerid][pJailed] == 3) // Jail FBI. Ya no van a la HQ antigua, VAN A LA NUEVA.
		{
			LoadObjects(playerid);
		    PhoneOnline[playerid] = 1;
			SetPlayerInterior(playerid, 1);
			Info[playerid][pVW] = 600;
			Info[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 600);
			SetPlayerInterior(playerid, 1);
			SetPlayerPos(playerid,315.1677,-1451.5564,-33.5292);
			return 1;
		}*/
		if(Info[playerid][pJailed] == 4) // Jail ?
		{
		    new stringjail[128];
		    new minutos = (Info[playerid][pJailTime]/60)+1;
		    PhoneOnline[playerid] = 1;
		    Info[playerid][pInt] = 0;
			rand = random(sizeof(OOCJail));
			LoadObjects(playerid);
			SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerInterior(playerid, 0);
			//SendClientMessageEx(playerid, COLOR_LIGHTRED, "Un administrador te pusó en prisión cuando estabas Offline, razón: Reporte en el Foro o Evasión de ROL.");
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "{A2DC35}[INFO]:{FFFFFF} Un administrador te pusó en prisión cuando estabas Offline, si crees que fue un error, solicita a un administrador.");
			format(stringjail, sizeof(stringjail), "(Tiempo: %d minutos) - Has sido jaileado por %s, motivo: %s", minutos, Info[playerid][pJailedBy], Info[playerid][pJailReason]);
			SendClientMessageEx(playerid, COLOR_GRAD2, stringjail);
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		if(Info[playerid][pJailed] == 5) // Jail SAEM.
		{
		    PhoneOnline[playerid] = 1;
      		LoadObjects(playerid);
			SetPlayerInterior(playerid, 0);
			Info[playerid][pInt] = 0;
			rand = random(sizeof(SAEMPrisonSpawns));
			SetPlayerPos(playerid, SAEMPrisonSpawns[rand][0], SAEMPrisonSpawns[rand][1], SAEMPrisonSpawns[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerSkin(playerid, 50);
			SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
			return 1;
		}
		if(Info[playerid][pJailed] == 6) // Jail Dillmore.
		{
		    PhoneOnline[playerid] = 1;
			SetPlayerInterior(playerid, 5);
			Info[playerid][pInt] = 5;
			rand = random(sizeof(PrisonDillmore));
			SetPlayerPos(playerid, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
			SetPlayerVirtualWorld(playerid, 5);
			SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") == 1)
		{
		    DeletePVar(playerid, "EventToken");
		    SetPlayerWeapons(playerid);
		    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			SetPlayerInterior(playerid,EventLastInt[playerid]);
			SetHP(playerid, EventFloats[playerid][4]);
			SetPlayerArmour(playerid, EventFloats[playerid][5]);
			for(new i = 0; i < 6; i++)
			{
			    EventFloats[playerid][i] = 0.0;
			}
			EventLastVW[playerid] = 0;
			EventLastInt[playerid] = 0;
			return 1;
		}
		for(new i; i < 5; i++)
		{
		    if(InfoEvento[EventStaff][i] == playerid)
		    {
		        SetPlayerWeapons(playerid);
			    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
				SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
				SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
				SetPlayerInterior(playerid,EventLastInt[playerid]);
				SetHP(playerid, EventFloats[playerid][4]);
				SetPlayerArmour(playerid, EventFloats[playerid][5]);
				for(new d = 0; d < 6; d++)
				{
				    EventFloats[playerid][d] = 0.0;
				}
				EventLastInt[playerid] = 0;
				EventLastVW[playerid] = 0;
				InfoEvento[EventStaff][i] = 999;
		    }
		}
		if(GetPVarInt(playerid, "FirstSpawn") == 2 && GetPVarInt(playerid, "Injured") == 1)
		{
		    SendEMSQueue(playerid,1);
		    return 1;
		}
		if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") != 0)
		{
		    DeletePVar(playerid, "Hospital");
 			if(Info[playerid][pTypeSpawn] == 1)
 			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[SAMD]:{FFFFFF} El staff de SAMD confiscó las armas y objetos ilegales que tenias.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Te llevaron a tu casa por la caracteristica Platinum activada.");
				/*for(new i = 0; i < sizeof(HouseInfo); i++)
	            {
					if(Info[playerid][pPhousekey] == i || Info[playerid][pPhousekey2] == i)
					{
						Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
						SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
						LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 1);
						Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
						Info[playerid][pVW] = i+6000;
						SetPlayerVirtualWorld(playerid, i+6000);
					}
				}*/
				for(new i = 0; i < MAX_PROPIEDADES; i++)
	            {
					if(Info[playerid][pPhousekeyX] == i)
					{
						Streamer_UpdateEx(playerid, ProInfo[i][hInteriorX],ProInfo[i][hInteriorY],ProInfo[i][hInteriorZ]);
						LoadObjects(playerid);
						SetPlayerPos(playerid,ProInfo[i][hInteriorX],ProInfo[i][hInteriorY],ProInfo[i][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 1);
						SetPlayerInterior(playerid,ProInfo[i][hHInteriorWorld]);
						Info[playerid][pInt] = ProInfo[i][hHInteriorWorld];
						Info[playerid][pVW] = i;
						SetPlayerVirtualWorld(playerid, i);
					}
				}
				ResetPlayerWeaponsEx(playerid);
				return 1;
 			}
		    if(Info[playerid][pWantedLevel] > 0)
		    {
		        Info[playerid][pJailed] = 2; Info[playerid][pJailTime] = 15*60; GivePlayerCash(playerid, -1000);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Figuras como sospechoso es el sistema del gobierno.");
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Te has recuperado y te pusimos en mano de las fuerzas de la ley.");
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Como te encontramos herido te condenaron sólo unos días. (15 min)");
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 1);
				Info[playerid][pInt] = 1;
				SetPlayerVirtualWorld(playerid, 1);
				Info[playerid][pVW] = 2;
		    	rand = random(sizeof(LSPDPrisonSpawns));
		    	SetPlayerPos(playerid, LSPDPrisonSpawns[rand][0], LSPDPrisonSpawns[rand][1], LSPDPrisonSpawns[rand][2]);
		    	LoadObjects(playerid);
				StopAudioStreamForPlayer(playerid);
				ResetPlayerWeaponsEx(playerid);
		    	return 1;
		    }
		    else
		    {
              if(Team_SAEM(playerid))
			  {
			    SetPlayerCameraPos(playerid, 2741.0000, -2424.5000, 65.7000);
		        SetPlayerCameraLookAt(playerid, 2589.5105, -2387.1228, 17.9731);
				SetPosEx(playerid, 2658.3025, -2444.0889, 14.0683,66.4873,0,playerid);
				SendClientMessageEx(playerid, COLOR_WHITE, "Un médico de la Guardia Nacional te ha salvado la vida en el hospital de tu base.");
			  }
			  else if(Info[playerid][pOrigin] == 1)
			  {
				SetPlayerCameraPos(playerid, 1184.4060, -1305.7161, 55);
				SetPlayerCameraLookAt(playerid, 1120.6493, -1322.6703, 15.1060);
				SetPosEx(playerid, 1138.0646, -1352.2107, 16.5282,90.0,0,playerid);
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[SAMD]:{FFFFFF} El staff de SAMD confiscó las armas y objetos ilegales que tenias, en breve te dan de alta.");
		      }
		      else if(Info[playerid][pOrigin] == 2)
		      {
		        SetPlayerCameraPos(playerid, 1184.4060, -1305.7161, 55);
				SetPlayerCameraLookAt(playerid, 1120.6493, -1322.6703, 15.1060);
				SetPosEx(playerid, 1138.0646, -1352.2107, 16.5282,90.0,0,playerid);
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[SAMD]:{FFFFFF} El staff de SAMD confiscó las armas y objetos ilegales que tenias, en breve te dan de alta.");
			  }

		      	SetTimerEx("HospitalFun", 15000, false, "i", playerid); StopAudioStreamForPlayer(playerid);
		      	ResetPlayerWeaponsEx(playerid);
    	  		return 1;
    	  	}
		}
	    if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") == 0)
  		{
    		SetPlayerPos(playerid,Info[playerid][pPos_x],Info[playerid][pPos_y],Info[playerid][pPos_z]);
			SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
			SetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
	    	SetPlayerInterior(playerid,Info[playerid][pInt]);
	    	SetHP(playerid, Info[playerid][pHealth]);
			SetPlayerArmour(playerid, Info[playerid][pArmour]);
			SetCameraBehindPlayer(playerid);
			if(Info[playerid][pInt] > 0 || Info[playerid][pVW] > 0)
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Te desconectaste en un interior, están cargando los objetos, espera un momento por favor.");
				LoadObjects(playerid);
			}
		    return 1;
		}
		SetPlayerToTeamColor(playerid);
	}
	return 1;
}

function firstaid5(playerid){
	if(GetPVarInt(playerid, "usingfirstaid") == 1){
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(health < 100.0){
		    if((health+10.0) <= 100.0) { SetHP(playerid, health+10.0); }
		}
	}
}
function firstaidexpire(playerid)
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "{FF0000}[ATENCION]:{FFFFFF} Tu kit de primeros auxilios ya no te hará efecto.");
 	KillTimer(GetPVarInt(playerid, "firstaid5"));
  	SetPVarInt(playerid, "usingfirstaid", 0);
}
//****************************************************************************
public Detect(playerid)
{
	new Ping = GetPlayerPing(playerid);
	if(Ping <= 0 || Ping >= 100000)
	{
	 if(Advertencias[playerid] >= 1) BanearBots(playerid);
	 else Advertencias[playerid]++, Barra[playerid] = SetTimerEx("Detectar", 1500, false, "Ping", playerid);
	}
	return 0;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(IsPlayerConnected(killerid) && GetPVarInt(playerid, "IsInArena") == 0)
	{
        format(QFA[playerid],24,"%s",GetPlayerNameEx(killerid));
	}
	new infomuerte[180], dead[20];
 	switch(reason)
 	{
	case 54:                    {dead="Atropellado";}
    case 49:                    {dead="Atropellado";}
    case 50:                    {dead="Heli-Kill";}
    case 53:                    {dead="Ahogado";}
    case 255: 					{dead="Quemado/Bug";}
    case 51:    				{dead="Explotado";}
    case 47:                    {dead="Fake Pistol";}
    default :                   {dead="Desconocida";}
    }
    // Aviso al staff.
    if(reason >= 0 && reason <= 42)
	{
		format(infomuerte, sizeof(infomuerte), "[AVISO]{FFFF00} %s [ID: %d] mató a %s [ID: %d]. Arma Usada: %s.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid),playerid, WeaponNames[reason]);
		ABroadCastOnDuty(AMARILLO_ADMIN, infomuerte, 2);
	}
	else if(reason >= 47 && reason <=255) // Anteriormente 54.
	{
	    format(infomuerte, sizeof(infomuerte), "[AVISO]{FFFF00} %s [ID: %d] murió por posible bug/muerte sin rol. Razón: %s.", GetPlayerNameEx(playerid), playerid, dead);
		ABroadCastOnDuty(AMARILLO_ADMIN, infomuerte, 2);
	}
	// Fin del aviso al staff.
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	pTazer[playerid] = 0;
	Info[playerid][pArmour] = 0.0;
	PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 1;
	Autorizado[playerid] = 0;
	if(Vigilando[playerid] != 0)
	{
		Vigilando[playerid] = 1;
		Muted[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Mientras estabas vigilando las camaras, te mataron.");
	}
	DeletePVar(playerid, "SpeedRadar");
    DeletePVar(playerid, "UsingSprunk");
    KillTimer(GetPVarInt(playerid, "firstaid5"));
  	DeletePVar(playerid, "usingfirstaid");
  	// Sistema de Interiores en vehículos.
   	if(InteriorLimusina[playerid] != 0) {InteriorLimusina[playerid] = 0;}
	if(InteriorSwatVan[playerid] != 0) {InteriorSwatVan[playerid] = 0;}
	if(InteriorCaravana[playerid] != 0) {InteriorCaravana[playerid] = 0;}
	if(InteriorBeagle[playerid] != 0) {InteriorBeagle[playerid] = 0;}
	foreach(Player, i)
	{
		if(EMSAccepted[i] < 999)
		{
 			if(EMSAccepted[i] == playerid)
   			{
     			EMSAccepted[i] = 999;
       			GameTextForPlayer(i, "~w~Paciente~n~~r~ha muerto", 5000, 1);
			}
		}
	}
	for(new x;x<MAX_PLAYERTOYS;x++) RemovePlayerAttachedObject(playerid, x);
	new Float:px,Float:py,Float:pz;
	if(GetPVarInt(playerid, "EventToken") == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") == 0)
		{
			SetPVarInt(playerid, "Injured", 1);
			SetPVarInt(playerid, "FirstSpawn", 2);
			new Float:mX, Float:mY, Float:mZ;
			GetPlayerPos(playerid, mX, mY, mZ);
			SetPVarFloat(playerid, "MedicX", mX);
			SetPVarFloat(playerid, "MedicY", mY);
			SetPVarFloat(playerid, "MedicZ", mZ);
			SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
		}
	}
	gPlayerSpawned[playerid] = 0;
	if(GetPVarInt(playerid, "IsInArena") == 1){
	    new string[128];
		if(reason >= 0 && reason <= 46){
		    new weapon[24];
		    Info[killerid][pKills] += 1;
			if(Info[killerid][pPaintTeam] == 1){
			    if(Info[killerid][pPaintTeam] == Info[playerid][pPaintTeam]){
			        TRedKills -= 1;
			        TBlueKills += 1;
			        SetHP(killerid, 0);
			        Info[killerid][pKills] -= 2;
			        Info[killerid][pDeaths] += 1;
		    		Info[playerid][pDeaths] -= 1;
			        SendClientMessageEx(killerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No mates a los de tu mismo equipo.");
			    }
			    else{
		    		TRedKills += 1;
				}
			}
			if(Info[killerid][pPaintTeam] == 2){
			    if(Info[killerid][pPaintTeam] == Info[playerid][pPaintTeam]){
			        TRedKills += 1;
			        TBlueKills -= 1;
			        SetHP(killerid, 0);
			        Info[killerid][pKills] -= 2;
			        SendClientMessageEx(killerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No mates a los de tu mismo equipo.");
			    }
	    		TBlueKills += 1;
			}
		    GetWeaponName(reason,weapon,sizeof(weapon));
			if(reason == 0){
   				Info[killerid][pPaintTokens] += 16;
   				Info[playerid][pPaintTokens] -= 16;
   				Bought(killerid, -5000);
   				if(Info[playerid][pPaintTokens] < 0) Info[playerid][pPaintTokens] = 0;
			    format(string,sizeof(string),"[Paintball Arena] %s ganó 16 fichas de bonus por un kill a mano.",GetPlayerNameEx(killerid));
				SendPaintballArenaMessage(GetPVarInt(killerid,"ArenaMode"), COLOR_YELLOW, string);
				GameTextForPlayer(playerid,"-16 fichas", 3000, 1);
				PlayerPlaySound(killerid, 1052, 0.0, 0.0, 0.0);
	    		format(string,sizeof(string),"[Paintball Arena] %s mató a %s con sus propias manos.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid));
			}
			else{
   				Info[killerid][pPaintTokens] += 8;
   				Info[playerid][pPaintTokens] -= 8;
   				Bought(killerid, -5000);
   				if(Info[playerid][pPaintTokens] < 0) Info[playerid][pPaintTokens] = 0;
			    format(string,sizeof(string),"[Paintball Arena] %s ganó 8 fichas de bonus por un kill.",GetPlayerNameEx(killerid));
				SendPaintballArenaMessage(GetPVarInt(killerid,"ArenaMode"), COLOR_YELLOW, string);
				GameTextForPlayer(playerid,"-8 fichas", 3000, 1);
				PlayerPlaySound(killerid, 1052, 0.0, 0.0, 0.0);
			    format(string,sizeof(string),"[Paintball Arena] %s mató a %s con una %s.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid),weapon);
			}
		}
		else{
		    Info[playerid][pDeaths] += 1;
			format(string,sizeof(string),"[Paintball Arena] %s ha muerto.",GetPlayerNameEx(playerid));
		}
	    SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_RED, string);
	}
	GetPlayerPos(playerid, px, py, pz);
	if(GetPVarInt(playerid, "Injured") == 0)
	{
		if( GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "IsInArena") == 1)
		{
			ResetPlayerWeapons(playerid);
		}
		else
		{
			ResetPlayerWeaponsEx(playerid);
		}
	}
	new caller = Mobile[playerid];
	if(caller != INVALID_PLAYER_ID)
	{
		if(caller < INVALID_PLAYER_ID)
		{
			SendClientMessageEx(caller,  COLOR_GRAD2, "La línea se perdió.");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
	}
	new string[128];
	if(Info[playerid][pHead] >= 1)
	{
		if(IsPlayerConnected(killerid))
		{
			if(GoChase[killerid] == playerid)
			{
			    new asesino[MAX_PLAYER_NAME],
					nombre[MAX_PLAYER_NAME];

				nombre = GetPlayerNameEx(playerid);
				asesino = GetPlayerNameEx(killerid);

				new takemoney = Info[playerid][pHead] / 4 * 2;
				GivePlayerCash(killerid, takemoney);
				format(string,128,"{A2DC35}[INFO]:{FFFFFF} Hitman %s ha cumplido con el contrato de %s y recaudó $%d.",asesino,nombre,Info[playerid][pHead]);
				SendFamilyMessage(17, COLOR_YELLOW, string);
				GivePlayerCash(playerid, -takemoney);
    			format(string,128,"{A2DC35}[INFO]:{FFFFFF} Has sido gravemente herido por un asesino a sueldo y pérdiste $%d.",takemoney);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				ResetPlayerWeaponsEx(playerid);
				Info[playerid][pHead] = 0;
				Info[killerid][pCHits] += 1;
				GotHit[playerid] = 0;
				GetChased[playerid] = 999;
				GoChase[killerid] = 999;
			}
		}
	}
	if(IsPlayerConnected(killerid))
 	{
		if(GoChase[playerid] == killerid)
		{
		    new asesino[MAX_PLAYER_NAME], nombre[MAX_PLAYER_NAME];

		    nombre = GetPlayerNameEx(playerid);
			asesino = GetPlayerNameEx(killerid);

			new takemoney = Info[playerid][pHead];
			GivePlayerCash(killerid, takemoney);
			format(string,128,"{A2DC35}[INFO]:{FFFFFF} Hitman %s ha fallado el contrato de %s y perdió $%d.",nombre,asesino,Info[killerid][pHead]);
			SendFamilyMessage(17, COLOR_YELLOW, string);
		   	format(string,128,"{A2DC35}[INFO]:{FFFFFF} Has matado a un asesino a sueldo y ganaste $%d, fuiste removido de la lista",Info[killerid][pHead]);
			SendClientMessageEx(killerid, COLOR_YELLOW, string);
			Info[killerid][pHead] = 0;
			Info[playerid][pFHits] += 1;
			GotHit[playerid] = 0;
			GetChased[killerid] = 999;
			GoChase[playerid] = 999;
		}
	}
 if(gPlayerUsingLoopingAnim[playerid] == 1)
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
        TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	//**security**
	#if defined AntiScore 1
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
if(Muertes[playerid] == 0)
{
MuerteReciente[playerid] = gettime();
}
Muertes[playerid]++;
if(Muertes[playerid] == 5)
{
if((gettime() - MuerteReciente[playerid]) <= 5)
{
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por Hack.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado. Razón: Posible intento de Score Hack.", Nombre);
//SendClientMessageToAll(Gris, Texto);
ABroadCast(Gris, Texto,5000);
Kick(playerid);
}
else if((gettime() - MuerteReciente[playerid]) > 5)
{
Muertes[playerid] = 0;
}
}
#endif
	//************
	return 1;
}

public OnPlayerSpawn(playerid)
{
    //********sistema experiencia******//
	new string[128];
 	format(string, sizeof(string), "Nvl: %d Exp: %d/%d", Info[playerid][pLevel],  Info[playerid][pExp], (Info[playerid][pLevel]+1)*(explevel));
    TextDrawSetString(Experiencia[playerid], string);
    TextDrawShowForPlayer(playerid, Experiencia[playerid]);
    //***********************************************************//
	//TextDrawShowForPlayer(playerid, king1);
    //TextDrawShowForPlayer(playerid, king0);
    //TextDrawShowForPlayer(playerid, king2);
    TextDrawShowForPlayer(playerid, PRUEBA1);
    TextDrawShowForPlayer(playerid, PRUEBA2);
	if(!gPlayerLogged{playerid})
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No has ingresado correctamente al servidor!");
        Kick(playerid);
        return 1;
 	}
	if(IsPlayerNPC(playerid)) return 1;
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
        LoadAnimLibs(playerid);
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}

	/*SetObjectMaterial(BaseTaller, 0, 17146, "cuntwroad", "ws_carparknew2", 0); // ÍÚltimo parametro. snpedtest1 (Calle) - sjmhoodlawn42 (Acera)
	// Edificio Taller.
	SetObjectMaterial(EdificioTaller, 1, 13724, "docg01_lahills", "glassblock4_law", 0xFFFFFFFF); // Cristales.
	SetObjectMaterial(EdificioTaller, 5, 3980, "cityhall_lan", "citywall1", 0xFFFFFFFF); // Botes de Gasolina.
	SetObjectMaterial(EdificioTaller, 7, 9239, "stuff2_sfn", "LoadingDoorClean", 0); // Puerta.
	SetObjectMaterial(EdificioTaller, 6, 17146, "cuntwroad", "ws_carparknew2", 0); // Suelo.
	SetObjectMaterial(EdificioTaller, 11, 4600, "theatrelan2", "gm_labuld2_b", 0); // Cuerpo.*/
	/*TextDrawShowForPlayer(playerid, ACRPVERSION);*/
	TextDrawShowForPlayer(playerid, Text:FechaD);
    TextDrawShowForPlayer(playerid, Text:TiempoD);
	SetPlayerWantedLevel(playerid, Info[playerid][pWantedLevel]);
	gTeam[playerid] = Info[playerid][pTeam];
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	OnDuty[playerid] = 1;
	SetPlayerToTeamColor(playerid);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	SyncPlayerTime(playerid);
	if(Info[playerid][pTut] == 1)
	{
	StopAudioStreamForPlayer(playerid);
	}
	return 1;
}

public OnVehicleDeath(vehicleid)
{
	// Sistema de intermitentes.
    if(Intermitentes_xqz[vehicleid][2]) DestroyObject(Intermitentes_xqz[vehicleid][2]), DestroyObject(Intermitentes_xqz[vehicleid][3]),DestroyObject(Intermitentes_xqz[vehicleid][5]),Intermitentes_xqz[vehicleid][2]=0;
	if(Intermitentes_xqz[vehicleid][0]) DestroyObject(Intermitentes_xqz[vehicleid][0]), DestroyObject(Intermitentes_xqz[vehicleid][1]),DestroyObject(Intermitentes_xqz[vehicleid][4]),Intermitentes_xqz[vehicleid][0]=0;
    if(Lamp[vehicleid] == 1)
	{
    	DestroyObject(light[vehicleid]);
        Lamp[vehicleid] = 0;
    }
    if(GetVehicleModel(vehicleid) == 409)
    {
       	for(new i=0; i<MAX_PLAYERS; i++)
   		{
         	if(InteriorLimusina[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "[Atención]:{FFFFFF} El vehículo en el que estabas dentro explotó, todos los que estaban dentro han muerto.");
         	}
      	}
   	}
    if(GetVehicleModel(vehicleid) == 427)
    {
       	for(new i=0; i<MAX_PLAYERS; i++)
      	{
         	if(InteriorSwatVan[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "[Atención]:{FFFFFF} El vehículo en el que estabas dentro explotó, todos los que estaban dentro han muerto.");
         	}
      	}
   	}
    if(GetVehicleModel(vehicleid) == 508)
    {
    	for(new i=0; i<MAX_PLAYERS; i++)
      	{
         	if(InteriorCaravana[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "[Atención]:{FFFFFF} El vehículo en el que estabas dentro explotó, todos los que estaban dentro han muerto.");
         	}
      	}
   	}
    if(GetVehicleModel(vehicleid) == 511)
    {
       	for(new i=0; i<MAX_PLAYERS; i++)
   		{
         	if(InteriorBeagle[i] != 0)
           	{
            	SetPlayerHealth(i, 0);
            	SendClientMessage(i, COLOR_GREY, "[Atención]:{FFFFFF} El vehículo en el que estabas dentro explotó, todos los que estaban dentro han muerto.");
         	}
      	}
   	}
    VehicleStatus{vehicleid} = 1;
    arr_Engine{vehicleid} = 0;
    estacionveh[vehicleid] = 0;
  	return 1;
}

Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}
//
public OnPlayerEnterCheckpoint(playerid)
{
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    new carid = GetPlayerVehicleID(playerid), string[128];
	if(GetPVarInt(playerid,"FindJob") == 1)
	{
		DeletePVar(playerid, "FindJob");
		DisablePlayerCheckpoint(playerid);
	}
	if(spraytag_find[playerid])
	{
		SendClientMessage(playerid, COLOR_GRAD1, "[INFRA-RP] Has llegado a tu graffiti.");
		spraytag_find[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid,"FINDHQ") == 1)
	{
		DeletePVar(playerid, "FINDHQ");
		DisablePlayerCheckpoint(playerid);
		SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Llegaste! Usa F para entrar.");
	}
	//***sistema de fire***
	if(llegarf[playerid] == false && Team_SAMD(playerid))
    {
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Has llegado al lugar del incendio, usa un extintor o la manguera del auto de bomberos para ceder el fuego.");
        DisablePlayerCheckpoint(playerid);
        llegarf[playerid] = true;
    }
	if(MechanicCallTime[playerid] > 0)
	{
	    if(Team_Mecanicos(playerid))
		{
			MechanicCallTime[playerid] = 0;
			GameTextForPlayer(playerid, "~r~Llegaste!", 2500, 1);
			DisablePlayerCheckpoint(playerid);
		}
	} // Driving Test.
	///////////// Licencias de vehículo /////// CMD: 2879.260009,954.330444,995.770019
	//if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsALicCar(carid))
	// Evasión de bugs al máximo: Tiene que estar en X punto, aceptado el test, ser conductor y estar en el vehículo de Test de la Autoescuela.
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2084.1448,-1911.5313,13.2578) && DrivingTest[playerid] == 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsALicCar(carid))
	{
		DrivingTest[playerid] = 3;
	    SendClientMessageEx(playerid,COLOR_GREEN,"Test de circulación: Salga del parking e inicie su entrada a la circulación del tráfico.");
		SendClientMessageEx(playerid,COLOR_WHITE,"Recuerde moderar su velocidad y respetar los semáforos.");
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2084.1243,-1829.3904,13.2578) && DrivingTest[playerid] == 3)
	{
		DrivingTest[playerid] = 4;
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2067.4231,-1809.8171,13.2578) && DrivingTest[playerid] == 4)
	{
		DrivingTest[playerid] = 5;
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1976.0070,-1809.4790,13.2578) && DrivingTest[playerid] == 5)
	{
		DrivingTest[playerid] = 6;
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1958.8334,-1827.4556,13.2578) && DrivingTest[playerid] == 6)
	{
	    DrivingTest[playerid] = 7;
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1959.3459,-1917.4956,13.2578) && DrivingTest[playerid] == 7)
	{
		DrivingTest[playerid] = 8;
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1978.0740,-1935.2076,13.2577) && DrivingTest[playerid] == 8) // Está llegando. (Calle)
	{
		DrivingTest[playerid] = 9;
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2046.7155, -1934.5981, 13.2290) && DrivingTest[playerid] == 9) // Ya legó. (Calle)
	{
		DrivingTest[playerid] = 10; // Finalizando test en calle.
		SetTimerEx("TestConducir",500,0,"d",playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2056.5313,-1925.7705,13.3843) && DrivingTest[playerid] == 10) // Entrando al estacionamiento.
	{
		DrivingTest[playerid] = 99;
        SendClientMessageEx(playerid,COLOR_GREEN,"Test de Aparcamiento: Entre en el parking y deje el vehículo en su estacionamiento correctamente."); // Llega a la entrada del estacionamiento.
		SendClientMessageEx(playerid,COLOR_WHITE,"Estacione el vehículo, a continuación podrá iniciar la maniobra.");
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("TestConducir",5000,0,"d",playerid); // 5 Segundos.
	}
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 2060.7998, -1905.0494, 13.3424) && DrivingTest[playerid] == 99) // Vehículo aparcado. [FIN]
	{
	    DrivingTest[playerid] = 100;
		SetTimerEx("TestConducir",10000,0,"d",playerid); // 10 Segundos.
	}
	//if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, ProInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], ProInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], ProInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	{
		if (GetPVarInt(playerid, "tpPizzaTimer") != 0)
		{
			format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000} %s (ID %d) Posible hack teleport, LUGAR: JobPizzero.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast( COLOR_YELLOW, string, 2 );
    		format(string, sizeof(string), "%s (ID %d)Posible hack teleport, LUGAR: JobPizzero.", GetPlayerNameEx(playerid), playerid);
	    	Log("LOGS/hack.log", string);
		}
		DestroyProgressBar(PizzaBar[playerid]);
		format(string, sizeof(string), "Has entregado la pizza en su destino! + $%d a tu paycheck.", (GetPVarInt(playerid, "pizzaTimer") * 50));
		SaveStuff();
  		//Info[playerid][pPayCheck] += floatround((GetPVarInt(playerid, "pizzaTimer") * 50), floatround_round);
  		GivePlayerCash(playerid, floatround((GetPVarInt(playerid, "pizzaTimer") * 80), floatround_round));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SetPVarInt(playerid, "Pizza", 0);
		DisablePlayerCheckpoint(playerid);
	}
	for(new h = 0; h < MAX_POINTS; h++)
	{
		if(Points[h][Type] == 3 && GetPVarInt(playerid, "CrateDeliver") == 1 && IsPlayerInRangeOfPoint(playerid, 6.0, 2165.8655,-1675.2634,15.0859)) // POT
		{
	    	if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	   		{
		   		format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000} %s (ID %d) Posible hack teleport, LUGAR: Casa de Hierba.", GetPlayerNameEx(playerid), playerid);
		   		ABroadCast( COLOR_YELLOW, string, 2 );
		   		format(string, sizeof(string), "%s (ID %d) Posible hack teleport, LUGAR: Casa de Hierba.", GetPlayerNameEx(playerid), playerid);
		   		Log("LOGS/hack.log", string);
			}
			DisablePlayerCheckpoint(playerid);
			new level = Info[playerid][pSmugSkill];
   			if(level >= 0 && level <= 20)

			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $2000 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 2000);
			}
			else if(level >= 21 && level <= 50)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $2500 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 2500);
			}
			else if(level >= 51 && level <= 100)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $3500 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 3500);
			}
			else if(level >= 101 && level <= 200)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $5000 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 5000);
			}
			else if(level >= 201)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $6500 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 6500);
			}
			DeletePVar(playerid, "CrateDeliver");
			Info[playerid][pCrates] = 0;
			//Info[playerid][pSmugSkill]++; //CAMBIR
	        if(Info[playerid][pDobleExp] == 0)
			{
              	Info[playerid][pSmugSkill]++;
			}
			else
			{
				Info[playerid][pSmugSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}JOB:{FFFFFF} Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
			}
			Points[h][Stock] += 10;
			format(string, sizeof(string), " HIERBA DISPONIBLE: %d/1000.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		if(Points[h][Type] == 4 && GetPVarInt(playerid, "CrateDeliver") == 2 && IsPlayerInRangeOfPoint(playerid, 6.0, 2348.6213,-1168.0778,27.8631)) // CRACK
		{
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
		   	{
			   	format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000} %s (ID %d) Posible hack teleport, LUGAR: Casa de Crack.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast( COLOR_YELLOW, string, 2 );
			   	format(string, sizeof(string), "%s (ID %d) Posible hack teleport, LUGAR: Casa de Crack.", GetPlayerNameEx(playerid), playerid);
			   	Log("LOGS/hack.log", string);
			}
			DisablePlayerCheckpoint(playerid);
			new level = Info[playerid][pSmugSkill];
			if(level >= 0 && level <= 20)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $2000 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 8000);
			}
			else if(level >= 21 && level <= 50)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $2500 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 2500);
			}
			else if(level >= 51 && level <= 100)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $3500 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 3500);
			}
			else if(level >= 101 && level <= 200)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $5000 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 5000);
			}
			else if(level >= 201)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $6500 a tu paycheck por traficar paquetes de droga.");
				GivePlayerCash(playerid, 6500);
			}
			DeletePVar(playerid, "CrateDeliver");
			Info[playerid][pCrates] = 0;
			//Info[playerid][pSmugSkill]++; //CAMBIR
	        if(Info[playerid][pDobleExp] == 0)
			{
              	Info[playerid][pSmugSkill]++;
			}
			else
			{
				Info[playerid][pSmugSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}JOB:{FFFFFF} Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
			}
			Points[h][Stock] += 10;
			format(string, sizeof(string), " CRACK DISPONIBLE: %d/1000.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 2 && GetPVarInt(playerid, "MatDeliver") == 555 && IsPlayerInRangeOfPoint(playerid, 6.0, 2317.739990,-2303.850830,13.545999)) // Punto de materiales
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000}: %s (ID %d) Posible hack teleport, LUGAR: Punto de mats.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	format(string, sizeof(string), "%s (ID %d) Posible hack teleport, LUGAR: Punto de mats.", GetPlayerNameEx(playerid), playerid);
			    	Log("LOGS/hack.log", string);
				}
				new payout = (25)*(GetPVarInt(playerid, "Packages"));

				if(Info[playerid][pVIP] == 1)
				{
				    Info[playerid][pMats] += 375;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 375 materiales por tu paquete de 15 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Recibes 1.5x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
				{
				    Info[playerid][pMats] += 500;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 500 materiales por tu paquete de 20 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[SILVERGOLDVIP]:{FFFFFF} Recibes 2x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] >= 4)
				{
				    Info[playerid][pMats] += 625;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 625 materiales por tu paquete de 25 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINUMVIP]:{FFFFFF} Recibes 2.5x más materiales de lo normal.");

				}
				else
				{
    				Info[playerid][pMats] += 250;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te dió 250 materiales por tus 10 paquetes.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
				for(new p = 0; p < sizeof(fINFO); p++)
				{
     if(strcmp(Points[h][Owner], fINFO[p][FamilyName], true) == 0)
					{
						fINFO[p][FamilyBank] = fINFO[p][FamilyBank]+(payout/3);
					}
				}
				return 1;
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 333 && IsPlayerInRangeOfPoint(playerid, 6.0, 1083.0131,-1226.7869,15.8203))// 2do Punto de materiales
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(Info[playerid][pVIP] == 1)
				{
			    	Info[playerid][pMats] += 675;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 675 materiales por tu paquete de 23 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Recibes 1.5x más materiales de lo normal.");
				}
				else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
				{
			    	Info[playerid][pMats] += 900;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 900 materiales por tu paquete de 30 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[SILVERGOLDVIP]:{FFFFFF} Recibes 2x más materiales de lo normal.");
				}
				else if(Info[playerid][pVIP] >= 4)
				{
			    	Info[playerid][pMats] += 625;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 1125 materiales por tu paquete de 38 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINUMVIP]:{FFFFFF} Recibes 2.5x más materiales de lo normal.");
				}
				else
				{
					Info[playerid][pMats] += 450;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te dió 450 materiales por tus 15 paquetes.");
				}
				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
			}
			if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			{
			   	format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000}: %s (ID %d) Posible hack teleport, LUGAR: Punto de mats.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast( COLOR_YELLOW, string, 2 );
			   	format(string, sizeof(string), "%s (ID %d) Posible hack teleport, LUGAR: Punto de mats.", GetPlayerNameEx(playerid), playerid);
			   	Log("LOGS/hack.log", string);
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 444 && IsPlayerInRangeOfPoint(playerid, 6.0, 2534.2683,-1063.3899,69.5655)) // 3er punto de materiales
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(Info[playerid][pVIP] == 1)
				{
				    Info[playerid][pMats] += 450;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 450 materiales por tu paquete de 18 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Recibes 1.5x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
				{
				    Info[playerid][pMats] += 600;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 600 materiales por tu paquete de 24 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[SILVERGOLDVIP]:{FFFFFF} Recibes 2x más materiales de lo normal.");

				}
				else if(Info[playerid][pVIP] >= 4)
				{
				    Info[playerid][pMats] += 750;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* La fabrica te da 750 materiales por tu paquete de 30 materiales.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINUMVIP]:{FFFFFF} Recibes 2.5x más materiales de lo normal.");

				}
				else
				{
			    	Info[playerid][pMats] += 300;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "*La fabrica te dió 300 materiales por tus 12 paquetes.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000} %s (ID %d) Posible hack teleport, LUGAR: Punto de mats.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	format(string, sizeof(string), "%s (ID %d) Posible hack teleport, LUGAR: Punto de mats.", GetPlayerNameEx(playerid), playerid);
			    	Log("LOGS/hack.log", string);
				}
				return 1;
			}
		}
	}
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
		TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~llegaste!", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid, "TruckDeliver") > 0 && gPlayerCheckpointStatus[playerid] != CHECKPOINT_RETURNTRUCK)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}JOB:{FFFFFF} Este no es un camión!");
	        return 1;
	    }
	    if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}JOB:{FFFFFF} Este no es tu camión con la mercancía que debes entregar.");
	        return 1;
	    }

		if(!IsAtTruckDeliveryPoint(playerid))
 		{//*****En está condición se usa para que los jugadores no puedan hacer uso de exploit en los checkpoints*****
			CancelTruckDelivery(playerid);
			SendClientMessageEx(playerid, COLOR_REALRED, "{FFFF00}[ERROR]:{FFFFFF} Entraste a un checkpoint erronéo. No se completó la entrega.");
			return 1;
   		}
		if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
		{
			format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000} %s (ID %d) Posible hack teleport LUGAR: JobCamioneros.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast( COLOR_YELLOW, string, 2 );
    		format(string, sizeof(string), "%s (ID %d) Posible hack teleport LUGAR: Job Camioneros.", GetPlayerNameEx(playerid), playerid);
	    	Log("LOGS/hack.log", string);
		}
		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
		TruckContents[vehicleid] = 0;

		if(truckdeliver >= 1 && truckdeliver <= 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado la comida y bebidas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 4 && truckdeliver <= 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado la ropa y calzado, regresa para recolectar tu paga.");
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado los materiales, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 8 && truckdeliver <= 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado los objetos del 24/7, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado las armas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado las drogas, regresa para recolectar tu paga.");
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has entregado los materiales ilegales, regresa para recolectar tu paga.");
		}
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNTRUCK;
		SetPlayerCheckpoint(playerid, 2225.7813,-2637.2319,13.4262, 5);
		GameTextForPlayer(playerid, "~w~Ref:~r~Ocean Docks", 5000, 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Regresa a Ocean Docks. (Mira el checkpoint en el radar).");

		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		return 1;
	}
	else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < 999)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
	    {
	    	SendEMSQueue(EMSAccepted[playerid],2);
	    	EMSAccepted[playerid] = 999;
	    	GameTextForPlayer(playerid, "~w~Llegaste", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = 999;
		    GameTextForPlayer(playerid, "~r~Paciente ha muerto", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}
	else if(Info[playerid][pJob] == 3 && Bus_Route[playerid] > 0 ||  Info[playerid][pJob2] == 3 && Bus_Route[playerid] > 0) // CMD - /rutabus.
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !IsAnBus(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un autobús!"); Bus_Route[playerid] = 0; return 1; }

	    if(Bus_Route[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 2474,-1734.7,12.5, 5.0);
	        Bus_Route[playerid] = 2;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Barrio de Ganton", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 2834.8,-313.2,6.5, 5.0);
	        Bus_Route[playerid] = 3;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Puerto Maritimo", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2565.2,43.9,25.5, 5.0);
	        Bus_Route[playerid] = 4;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Entrada Palomino", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 2291.4,24.7,25.4, 5.0);
	        Bus_Route[playerid] = 5;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Palomino Centro", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 5)
	    {
            SetPlayerCheckpoint(playerid, 679.1,-617.7,15.2, 5.0);
	        Bus_Route[playerid] = 6;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Dillmore", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 6)
	    {
	        SetPlayerCheckpoint(playerid, 794.5,-1376.5,12.4, 5.0);
	        Bus_Route[playerid] = 7;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Estudios LSTV", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 7)
	    {
	        SetPlayerCheckpoint(playerid, 1267.8,-1408.3,12, 5.0);
	        Bus_Route[playerid] = 8;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Hospital General", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 8)
	    {
	        SetPlayerCheckpoint(playerid, 1427.1,-1663.6,12.4, 5.0);
	        Bus_Route[playerid] = 9;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Plaza del ayuntamiento", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 9)
	    {
	        SetPlayerCheckpoint(playerid, 1815.2,-1889.7,12.4, 5.0);
	        Bus_Route[playerid] = 10;
	        Earn(playerid, 500);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Estacion de autobuses", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 10)
	    {
	        GameTextForPlayer(playerid, "~g~500$  ~n~~w~Ruta de autobus finalizada", 5000, 1);
	        Bus_Route[playerid] = 0;
	        Earn(playerid, 500);
	        Earn(playerid, 5000);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "Final del recorrido, has recibido 5 mil dólares.");
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	    }
	    else if(Bus_Route[playerid] == 11)
	    {
	        SetPlayerCheckpoint(playerid, 2090.830322,-1768.483032,12.4, 5.0);
	        Bus_Route[playerid] = 12;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Pizzeria Idelwood", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 12)
	    {
	        SetPlayerCheckpoint(playerid, 1925.630981,-1749.717407,12.4, 5.0);
	        Bus_Route[playerid] = 13;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Talleres Walking", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 13)
	    {
	        SetPlayerCheckpoint(playerid, 1709.378295,-1729.642333,12.4, 5.0);
	        Bus_Route[playerid] = 14;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Universidad Los Santos", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 14)
	    {
	        SetPlayerCheckpoint(playerid, 1315.020751,-1594.855957,12.4, 5.0);
	        Bus_Route[playerid] = 15;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Avenida Principal", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 15)
	    {
	        SetPlayerCheckpoint(playerid, 1279.931518,-1392.710815,12.3, 5.0);
	        Bus_Route[playerid] = 16;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Cortes Judiciales", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 16)
	    {
	        SetPlayerCheckpoint(playerid, 656.320129,-1392.609741,12.6, 5.0);
	        Bus_Route[playerid] = 17;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Los Santos TV", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 17)
	    {
	        SetPlayerCheckpoint(playerid, 625.718383,-1612.542480,15.0, 5.0);
	        Bus_Route[playerid] = 18;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Avenida Rodeo", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 18)
	    {
	        SetPlayerCheckpoint(playerid, 1006.995544,-1810.320800,13.0, 5.0);
	        Bus_Route[playerid] = 19;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Verona Beach", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 19)
	    {
	        SetPlayerCheckpoint(playerid, 1575.450317,-2197.376220,12.4, 5.0);
	        Bus_Route[playerid] = 20;
	        Earn(playerid, 200);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Aeropuerto Terminal Norte", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 20)
	    {
	        GameTextForPlayer(playerid, "~g~200$  ~n~~w~Ruta de autobus finalizada", 5000, 1);
	        Bus_Route[playerid] = 0;
	        Earn(playerid, 200);
	        Earn(playerid, 6000);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "Final del recorrido, has recibido 6 mil dólares.");
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}
	else if(Info[playerid][pJob] == 16 && Avion_Route[playerid] > 0 ||  Info[playerid][pJob2] == 16 && Avion_Route[playerid] > 0) // CMD - /rutaavion.
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !Aero_Vehicle(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un avión!"); Avion_Route[playerid] = 0; return 1; }

	    if(Avion_Route[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 211.2588,2502.7649,15.4063, 20.0);
	        Avion_Route[playerid] = 2;
			GameTextForPlayer(playerid, "~n~~w~Siguiente destino:~n~~b~Verdant Meadows", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Avion_Route[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, -1378.8790,113.1982,13.0826, 20.0);
	        Avion_Route[playerid] = 3;
			GameTextForPlayer(playerid, "~n~~w~Siguiente destino:~n~~b~San Fierro", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Avion_Route[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2004.8916,-2593.5776,12.4709, 20.0);
	        Avion_Route[playerid] = 4;
			GameTextForPlayer(playerid, "~n~~w~Siguiente destino:~n~~b~Los Santos", 10000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayer", 5000, false, "d", playerid);
	        return 1;
	    }
	    else if(Avion_Route[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 1563.2407,-2458.6262,14.6014, 20.0);
	        Avion_Route[playerid] = 5;
			GameTextForPlayer(playerid, "~n~~w~Destino final:~n~~b~Aeropuerto Terminal Norte", 5000, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Aterrizaje", 2500, false, "d", playerid); // Rol de estacionar nave automático.
	        return 1;
	    }
	    else if(Avion_Route[playerid] == 5)
	    {
	        GameTextForPlayer(playerid, "~n~~w~Ruta de piloto finalizada", 5000, 1);
	        Avion_Route[playerid] = 0;
	        Earn(playerid, 9000);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "Final del recorrido, has recibido 9 mil dólares por sus servicios.");
	        RemovePlayerFromVehicle(playerid);
	        SetVehicleToRespawn(carid);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}
	else if(Info[playerid][pJob] == 15 && Tren_Route[playerid] > 0 ||  Info[playerid][pJob2] == 15 && Tren_Route[playerid] > 0) // CMD - /rutatren.
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !Tren_Vehicle(carid)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un tren!"); Tren_Route[playerid] = 0; return 1; }
	    if(Tren_Route[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, -1943.2317,159.9102,27.0006, 20.0);
	        GameTextForPlayer(playerid, "~g~2000$~n~~n~~w~Proxima estacion:~n~~r~ San Fierro", 5000, 1);
	        Tren_Route[playerid] = 2;
			GivePlayerMoney(playerid, 2000);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "[Aviso]: Todos los pasajeros destino San Fierro, suban al tren.");
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 1455.6279,2632.2500,12.1256, 5.0);
	        GameTextForPlayer(playerid, "~g~2000$~n~~n~~w~Proxima estacion:~n~~r~Las Venturas", 5000, 1);
	        Tren_Route[playerid] = 3;
	        GivePlayerMoney(playerid, 2000);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "[Aviso]: Todos los pasajeros destino Las Venturas, suban al tren.");
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2864.7500,1274.8271,12.1256, 5.0);
	        GameTextForPlayer(playerid, "~g~2000$~n~~n~~w~Proxima estacion:~n~~r~LV Norte", 5000, 1);
	        Tren_Route[playerid] = 4;
	        GivePlayerMoney(playerid, 2000);
	        //SendClientMessageEx(playerid, COLOR_YELLOW2, "[Aviso]: Todos los pasajeros destino Los Santos, suban al tren.");
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 1715.0220,-1953.7056,14.8756, 5.0);
	        GameTextForPlayer(playerid, "~g~2000$~n~~n~~w~Proxima estacion:~n~~r~Los Santos", 5000, 1);
	        Tren_Route[playerid] = 5;
	        GivePlayerMoney(playerid, 2000);
	        SendClientMessageEx(playerid, COLOR_YELLOW2, "[Aviso]: Todos los pasajeros destino Los Santos, suban al tren.");
	        //SetTimerEx("TrenTimer", 5000, false, "d", playerid); // 10 Segundos.
	        return 1;
	    }
	    else if(Tren_Route[playerid] == 5)
	    {
	        GameTextForPlayer(playerid, "~g~2000$~n~~n~~w~Final recorrido", 5000, 1);
	        Tren_Route[playerid] = 0;
	        Message(playerid, COLOR_GREY, "[!] Final del recorrido, sus ganancias ascienden a 8 mil dólares. Gracias por sus servicios prestados.");
	        RemovePlayerFromVehicle(playerid);
	        SetPosEx(playerid, 1715.0370, -1940.3345, 13.55,0,0,0);
	        SetPlayerSkin(playerid, Info[playerid][pChar]);
	    }
	}
	else if(Info[playerid][pJob] == 10  || Info[playerid][pJob2] == 10)
	{
	    if(DrugFarming[playerid] == 1)
	    {
	        if(IsAHarvest(carid) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	        {
	            if(Info[playerid][pCosecha] < 41)
	            {
	            	new cos = random(6);
         	    	DisablePlayerCheckpoint(playerid);
	            	format(string, sizeof(string), "Has cosechado y has conseguido %i Kg de cosecha!", cos+1);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					Info[playerid][pCosecha] += cos+1;
					new randomize = random(sizeof(gDrugFarmVar));
	      			SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
					return 1;
				}
				else
				{
				    DisablePlayerCheckpoint(playerid);
				    SendClientMessageEx(playerid, COLOR_YELLOW, "Tienes más de 40 Kg, no puedes llevar más.");
					format(string, sizeof(string), "Tienes %d gramos de droga en tu mochila, puedes vender la cosecha a los 24/7. (/vendercosecha)", Info[playerid][pCosecha]);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
				    DrugFarming[playerid] = 0;
				    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				    return 1;
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_YELLOW, "No estás en el coche de cosechador.");
			    DrugFarming[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			    return 1;
			}
	    }
	}
	else if(Info[playerid][pJob] == 6  || Info[playerid][pJob2] == 6) // Bug camionero.
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_LOADTRUCK:
			{
			    if(IsPlayerInRangeOfPoint(playerid, 6, 2198.1377,-2660.1250,13.5469))
			    {
				    new vehicleid = GetPlayerVehicleID(playerid);
	   				if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    		{
		    		    DisablePlayerCheckpoint(playerid);
				    	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						TogglePlayerControllable(playerid, 0);
						SetPVarInt(playerid, "IsFrozen", 1);
						SafeDialogEx(playerid,DIALOG_LOADTRUCK,DIALOG_STYLE_LIST,"¿Que quieres transportar?","{00F70C}Mercancía Legal {FFFFFF}(Ningún riesgo)\n{FF0606}Mercancía Ilegal {FFFFFF}(Riesgo de quedar encarcelado)","Ok","Cancelar");
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "No estás en un camión para transportar.");
				}
			}
			case CHECKPOINT_RETURNTRUCK:
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 6, 2225.7813,-2637.2319,13.4262))
			    {
                    CancelTruckDelivery(playerid);
                    SendClientMessageEx(playerid, COLOR_REALRED, "{FFFF00}[ERROR]:{FFFFFF} Fuiste a un checkpoint erronéo, la entrega no se completo.");
					return 1;
			    }
 				if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
				{
					format(string, sizeof(string), "{FFFF00}INFRANET - RP:{FF0000} %s (ID %d) Posible hack teleport.", GetPlayerNameEx(playerid), playerid);
  					ABroadCast( COLOR_YELLOW, string, 2 );
    				format(string, sizeof(string), "%s (ID %d) Posible hack teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
	    			Log("LOGS/hack.log", string);
				}
   				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    		{
	        		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No estás en un camión!");
	        		return 1;
	    		}
	    		if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    		{
	        		SendClientMessageEx(playerid, COLOR_WHITE, "Este no es el carro que utilizas, devuelve el camión para recibir su pago!");
	        		return 1;
	    		}

			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			    SetVehicleToRespawn(vehicleid);

   				new payment;
				new level = Info[playerid][pTruckSkill];
				if(level >= 0 && level <= 50) payment = 2000;
				else if(level >= 51 && level <= 100) payment = 3000;
				else if(level >= 101 && level <= 200) payment = 4500;
				else if(level >= 201 && level <= 400) payment = 6000;
				else if(level >= 401) payment = 7500;

				SaveStuff();
				GivePlayerCash(playerid, payment);
    			format(string, sizeof(string), "* Sumaron $%d a tu paycheck por entregar mercancías y devolver el camión.", payment);
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

                new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
				if(truckdeliver == 11)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió una 9mm de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 22);
				}
				else if(truckdeliver == 12)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió un Shotgun de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 25);
				}
				else if(truckdeliver == 13)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió una MP5 de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 29);
				}
				else if(truckdeliver == 14)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió una Deagle de bonus por entregar armas ilegales.");
				    GivePlayerValidWeapon(playerid, 24);
				}
				else if(truckdeliver == 15)
				{
   					new randomweapon = Random(1, 3);
    				if(randomweapon == 1)
					{
    					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió una AK-47 de bonus por entregar armas ilegales.");
    					GivePlayerValidWeapon(playerid, 30);
    				}
    				if(randomweapon == 2)
					{
    					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió una M4 de bonus por entregar armas ilegales.");
    					GivePlayerValidWeapon(playerid, 31);
    				}
				}
				else if(truckdeliver == 16)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 3gr de droga por entregar mercancía ilegal.");
				    Info[playerid][pCrack] += 5;
				}
				else if(truckdeliver == 17)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 5gr de droga por entregar mercancía ilegal.");
				    Info[playerid][pCrack] += 5;
				}
				else if(truckdeliver == 18)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 8gr de hierba por entregar mercancía ilegal.");
				    Info[playerid][pPot] += 8;
				}
				else if(truckdeliver == 19)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 10gr de hierba por entregar mercancía ilegal.");
				    Info[playerid][pPot] += 10;
				}
				else if(truckdeliver == 20)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 15gr de droga por entregar mercancía ilegal.");
				    Info[playerid][pCrack] += 15;
				}
				else if(truckdeliver == 21)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 25 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 25;
				}
				else if(truckdeliver == 22)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 55 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 50;
				}
				else if(truckdeliver == 23)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 100 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 100;
				}
				else if(truckdeliver == 24)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 150 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 150;
				}
				else if(truckdeliver == 25)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 200 Materiales por entregar mercancía ilegal.");
					Info[playerid][pMats] += 200;
				}
	            if(Info[playerid][pDobleExp] == 0)
				{
                   	Info[playerid][pTruckSkill]++;
				}
				else
				{
					Info[playerid][pTruckSkill] += 2;
					SendClientMessageEx(playerid, COLOR_YELLOW, "* {A2DC35}JOB:{FFFFFF} Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
				}
				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				DeletePVar(playerid, "TruckDeliver");
			}
		}
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}
//
stock SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num){
	for(new i = 0; i < MAX_PLAYERS; i++)	{
		if(IsPlayerConnected(i))		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
		}
	}

}

SendClientMessageEx(playerid, color, string[]){
	if(InsideMainMenu[playerid] == 1 || TutStep[playerid] == 1)
		return 0;
	else SendClientMessage(playerid, color, string);
	return 1;
}

SendClientMessageToAllEx(color, string[]){
	foreach(Player, i)	{
		if(InsideMainMenu[i] == 1 || TutStep[i] == 1) {}
		else SendClientMessage(i, color, string);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	//***velocimetro***
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
 	{
 		TextDrawShowForPlayer(playerid, Underline);
 		//TextDrawShowForPlayer(playerid, Fondoline);
		TextDrawShowForPlayer(playerid, KMH);
  		TextDrawShowForPlayer(playerid, VehicleNameX[playerid]);
  		TextDrawShowForPlayer(playerid, VehicleHealth[playerid]);
  		TextDrawShowForPlayer(playerid, VehicleSpeed[playerid]);
  		TextDrawShowForPlayer(playerid, Title[playerid]);
     }
     if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
     {
	    TextDrawHideForPlayer(playerid, Underline);
	    //TextDrawHideForPlayer(playerid, Fondoline);
		TextDrawHideForPlayer(playerid, KMH);
		TextDrawHideForPlayer(playerid, VehicleNameX[playerid]);
		TextDrawHideForPlayer(playerid, VehicleHealth[playerid]);
		TextDrawHideForPlayer(playerid, VehicleSpeed[playerid]);
		TextDrawHideForPlayer(playerid, Title[playerid]);
  	}
	//*****************
	new string[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;
    if(IsPlayerNPC(playerid))
	{
	    if(newstate == PLAYER_STATE_SPECTATING)
	    {
        	TogglePlayerSpectating(playerid, false);
		}
		return 1;
	}
	if(GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}
	    if(newstate == PLAYER_STATE_DRIVER && Info[spectator][pAdminZC] >= 2 || newstate == PLAYER_STATE_PASSENGER && Info[spectator][pAdminZC] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID( playerid );
			PlayerSpectateVehicle( spectator, carid );
			SetPVarInt(spectator, "SpecState", newstate);
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && Info[spectator][pAdminZC] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer( spectator, playerid );
		   	SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
			SetPVarInt(spectator, "SpecState", newstate);
	    }
	}
	//***armas en espalda***
	if(oldstate==PLAYER_STATE_ONFOOT)
	{
		StopPlayerHoldingObject(playerid);
		OldWeapon[playerid]=0;
		HoldingWeapon[playerid]=0;
	}
    //**********************
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerWeaponsEx(playerid);
	}
	else if(oldstate == PLAYER_STATE_PASSENGER) SetPlayerWeaponsEx(playerid);
	if(newstate == PLAYER_STATE_ONFOOT)
	{
 		if(estacionp[playerid] != 0)
		{
			StopAudioStreamForPlayer(playerid);
 			estacionp[playerid] = 0;
		}
		if(iLuces[playerid] == 1){iLuces[playerid] = 0;} // Intermitentes. Player Variable.
        if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			if(Bus_Route[playerid] > 0)
			{
				Bus_Route[playerid] = 0; // Al bajarse pierde el dinero.
				SendClientMessageEx(playerid, COLOR_GREY, "[JOB]:{FFFFFF} Abandonaste la ruta, tendrás que comenzar de nuevo.");
				DisablePlayerCheckpoint(playerid);
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Ahora estás fuera de servicio, sumaste $%d.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]*5);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			TransportTime[playerid] = 0;
   			TransportCost[playerid] = 0;
		}
  		if(PilotoDuty[playerid] > 0)
		{
			if(Avion_Route[playerid] > 0)
			{
				Avion_Route[playerid] = 0; // Al bajarse pierde el dinero.
				SendClientMessageEx(playerid, COLOR_GREY, "[JOB]:{FFFFFF} Abandonaste la ruta, tendrás que comenzar de nuevo.");
				DisablePlayerCheckpoint(playerid);
			}
			PilotoDuty[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ahora estás fuera de servicio, usa /pilotoduty si deseas seguir con la ruta o usar el vehículo.");
		}
		if(DrivingTest[playerid] > 1)
		{
		    new test = GetPlayerVehicleID(playerid);
		    if(IsALicCar(test))
		    {
		        SendClientMessageEx(playerid,COLOR_GREY,"Has salido del vehículo de la Autoescuela, tendrás que comenzar el exámen de nuevo.");
		        SetVehicleToRespawn(test);
				DrivingTest[playerid] = 0; // Fin.
				DisablePlayerCheckpoint(playerid);
			}
		}
		if(TransportDriver[playerid] < 999)
		{
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			format(string, sizeof(string), "~w~Costo del viaje:~n~~r~$%d",TransportCost[playerid]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~w~Pasajero se fue~n~~g~ganaste $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 3);
			GivePlayerCash(playerid, -TransportCost[playerid]);
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			TransportCost[playerid] = 0;
			TransportTime[playerid] = 0;
			TransportDriver[playerid] = 999;
		}
		if(DrugFarming[playerid] == 1)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 	    DrugFarming[playerid] = 0;
	 	    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} Dejaste de cosechar.");
		    if(IsAHarvest(GetPlayerVehicleID(playerid)))
			{
		 		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
		}
	}
	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer[playerid] == 1)
	{
		GivePlayerValidWeapon(playerid, pTazerReplace[playerid]);
		pTazer[playerid] = 0;
	}
	if(newstate == PLAYER_STATE_PASSENGER){
 		if(estacionveh[GetPlayerVehicleID(playerid)] != 0){
		    new station[64], name[32];
			switch(estacionveh[GetPlayerVehicleID(playerid)]){
				case 1: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=181047") && format(name, sizeof(name), "40 Principales (Pop)");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=426502") && format(name, sizeof(name), "Europa FM (Pop)");
				case 3: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=528376") && format(name, sizeof(name), "Noise FM (Dubstep)");
				case 4: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=20553") && format(name, sizeof(name), "Energía FM (Reggaeton)");
				case 5: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=262833") && format(name, sizeof(name), "GotRadio (Country)");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=9480264") && format(name, sizeof(name), "IbizaSonica (Electronic)");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99182763") && format(name, sizeof(name), "Central Radio (Rock)");
				case 8: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=238355") && format(name, sizeof(name), "Underground (80s)");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=786481") && format(name, sizeof(name), "Dance Wave (Techno Dance)");
				case 10: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=260172") && format(name, sizeof(name), "Baladas Románticas (Pop)");
				case 11: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=302745") && format(name, sizeof(name), "BlackBeats FM (Urban)");
				case 12: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293693") && format(name, sizeof(name), "Show Radio (Cumbia)");
				case 13: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99194448") && format(name, sizeof(name), "Funky House (House)");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=133749") && format(name, sizeof(name), "Death N Brutality (Metal)");
				case 15: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=548423") && format(name, sizeof(name), "Symphony (Clásica)");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
			format(string, sizeof(string), "{00C200}* Estación: {FFFFFF}%s - Puedes cambiar la emisora. {00C200}(/estacion)", name);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
		}
	    fVehSpeed[playerid] = 0.0;
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(Info[playerid][pWeapons][4] > 0)	SetPlayerArmedWeapon(playerid,Info[playerid][pWeapons][4]);
		else SetPlayerArmedWeapon(playerid,0);
		gLastCar[playerid] = vehicleid;
	    foreach(Player, i)
	    {
     		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
       		{
				if(GetPlayerCash(playerid) < TransportValue[i])
				{
					format(string, sizeof(string), "* Tu necesitas $%d para entrar al taxi.", TransportValue[i]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(playerid);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(playerid, X, Y, Z+2);
					TogglePlayerControllable(playerid, 1);
				}
				else
				{
					if(TransportDuty[i] == 1)
					{
						format(string, sizeof(string), "* Pagaste $%d al taxista.", TransportValue[i]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s ha entrado a tu taxi.", GetPlayerNameEx(playerid));
						SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
						TransportTime[i] = 1;
						TransportTime[playerid] = 1;
						TransportCost[playerid] = TransportValue[i];
						TransportCost[i] = TransportValue[i];
						TransportDriver[playerid] = i;
					}
					GivePlayerCash(playerid, - TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
	            }
	        }
	    }
	    if(GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
    	{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
   			}
   		}
   		if (GetVehicleModel(vehicleid) == 409) // Limusina.
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 324.70001220703, -105.09999847412, 983.79998779297);
                SetPlayerFacingAngle(playerid, 0);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorLimusina[playerid] = vehicleid;
                SendClientMessage(playerid, COLOR_GREY, "[Atención]:{FFFFFF} Recuerda usar [INTRO] en este mismo lugar para salir fuera. En caso de bug, usar /desbug.");
        }
        if (GetVehicleModel(vehicleid) == 427) // Swat Van.
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, -26.479528,42.597732,1000.338378);
                SetPlayerFacingAngle(playerid, 0);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorSwatVan[playerid] = vehicleid;
                SendClientMessage(playerid, COLOR_GREY, "[Atención]:{FFFFFF} Recuerda usar [INTRO] en este mismo lugar para salir fuera. En caso de bug, usar /desbug.");
        }
        if (GetVehicleModel(vehicleid) == 508) // Caravana.
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 2392.908203,-1713.918334,-46.714061);
                SetPlayerFacingAngle(playerid, 0);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorCaravana[playerid] = vehicleid;
                SendClientMessage(playerid, COLOR_GREY, "[Atención]:{FFFFFF} Recuerda usar [INTRO] en este mismo lugar para salir fuera. En caso de bug, usar /desbug.");
        }
        if (GetVehicleModel(vehicleid) == 511) // Shamal.
     	{
     	        LoadObjects(playerid);
                SetPlayerPos(playerid, 74.906005,-85.867462,1001.211303);
                SetPlayerFacingAngle(playerid, 0);
                SetCameraBehindPlayer(playerid);
                SetPlayerInterior(playerid, vehicleid);
                InteriorBeagle[playerid] = vehicleid;
                SendClientMessage(playerid, COLOR_GREY, "[Atención]:{FFFFFF} Recuerda usar [INTRO] en este mismo lugar para salir fuera. En caso de bug, usar /desbug.");
        }
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    NOPCheck(playerid);
 		if(estacionveh[GetPlayerVehicleID(playerid)] != 0){
		    new station[64], name[32];
			switch(estacionveh[GetPlayerVehicleID(playerid)]){
				case 1: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=181047") && format(name, sizeof(name), "40 Principales (Pop)");
				case 2: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=426502") && format(name, sizeof(name), "Europa FM (Pop)");
				case 3: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=528376") && format(name, sizeof(name), "Noise FM (Dubstep)");
				case 4: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=20553") && format(name, sizeof(name), "Energía FM (Reggaeton)");
				case 5: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=262833") && format(name, sizeof(name), "GotRadio (Country)");
				case 6: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=9480264") && format(name, sizeof(name), "IbizaSonica (Electronic)");
				case 7: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99182763") && format(name, sizeof(name), "Central Radio (Rock)");
				case 8: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=238355") && format(name, sizeof(name), "Underground (80s)");
				case 9: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=786481") && format(name, sizeof(name), "Dance Wave (Techno Dance)");
				case 10: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=260172") && format(name, sizeof(name), "Baladas Románticas (Pop)");
				case 11: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=302745") && format(name, sizeof(name), "BlackBeats FM (Urban)");
				case 12: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293693") && format(name, sizeof(name), "Show Radio (Cumbia)");
				case 13: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99194448") && format(name, sizeof(name), "Funky House (House)");
				case 14: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=133749") && format(name, sizeof(name), "Death N Brutality (Metal)");
				case 15: format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=548423") && format(name, sizeof(name), "Symphony (Clásica)");
			}
			StopAudioStreamForPlayer(playerid);
			estacionp[playerid] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
			format(string, sizeof(string), "{00C200}* Estación: {FFFFFF}%s - Puedes cambiar la emisora. {00C200}(/estacion)", name);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
		}
		SetPlayerArmedWeapon(playerid, 0);
	    fVehSpeed[playerid] = 0.0;
		new newcar = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(newcar,arr_Engine{newcar},lights,alarm,doors,bonnet,boot,objective);
		if(IsABike(newcar) && !IsARentCar(newcar))
		{
		    SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
		}
	    if(GetCarDealershipVehicleId(newcar) != -1 && GetCarDealershipVehicleId(newcar) == GetPVarInt(playerid, "editingcdveh")) return 1;
        if(GetCarDealershipVehicleId(newcar) != -1)
        {
			format(string, sizeof(string),"¿Quieres comprar este %s?\n\nEste vehiculo tiene el precio de $%d.", GetVehicleName(newcar), CDSInfo[GetCarDealershipId(newcar)][cdVehicleCost][GetCarDealershipVehicleId(newcar)]);
		    SafeDialogEx(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,"{FFFFFF}Advertencia:",string,"Comprar","Cancelar");
		    TogglePlayerControllable(playerid, false);
		    return 1;
        }
        GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective); // Si son bicicletas, no les dice lo del motor apagado.
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510) {
			SendClientMessageEx(playerid, COLOR_WHITE, "{81F79F}[INFRANET] Este vehículo tiene el motor apagado. Para encenderlo usa /motor o presiona la tecla {00F70C}[N].");
		}
		if(Entorno_Car(newcar))
		{
  			new entorno = random(10);
  			if(entorno == 1 || entorno == 5){SendClientMessageEx(playerid, COLOR_GREY, "Este vehículo parece abandonado, puedes intentar usar /puente o /robarcoche.");}
			else if(entorno == 2 || entorno == 6){SendClientMessageEx(playerid, COLOR_GREY, "Encontraste este vehículo con la puerta abierta, si tienes ganzúas podrás arrancar el coche.");}
			else if(entorno == 3 || entorno == 7){SendClientMessageEx(playerid, COLOR_GREY, "Puedes usar el comando /puente y /robarcoche con este vehículo, intenta no ser visto.");}
			else if(entorno == 4 || entorno == 8){SendClientMessageEx(playerid, COLOR_GREY, "El propietario de este coche dejó abierto el coche o lo abandonó, puede ser punteado y robado.");}
			else{SendClientMessageEx(playerid, COLOR_GREY, "El motor está apagado, mediante el uso de /puente puedes hacerlo funcionar.");}
		}
		if(IsARentCar(newcar))
		{
		    if(IsaRent[playerid] == 1 && HireKey[playerid] == newcar)
   			{
   				SendClientMessageEx(playerid, COLOR_GREY, "Este vehículo ha sido rentado por usted, cuando acabe su uso utilice /desrentarauto.");
   			}
   			else if(IsaRent[playerid] == 1)
   			{
   				SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este vehículo, usa primero /desrentarauto antes de rentar otro.");
   				TogglePlayerControllable(playerid,1);
   			}
			else
		    {
				TogglePlayerControllable(playerid,0);
 				new idcar = GetPlayerVehicleID(playerid);
				if(GetVehicleModel(idcar) == 445 || GetVehicleModel(idcar) == 426)
				{
					SafeDialogEx(playerid, RENT_BIKE, DIALOG_STYLE_MSGBOX, "{00C200}Renta: Vehículo 4 plazas","{FFFFFF}Tiempo de Renta: 20 Minutos\nPrecio: 800 Dólares", "Rentar", "Cancelar");
					TypeOfRent[playerid] = 1;
					return 1;
				}
				else if(GetVehicleModel(idcar) == 454 || GetVehicleModel(idcar) == 484 || GetVehicleModel(idcar) == 493)
				{
					SafeDialogEx(playerid, RENT_BIKE, DIALOG_STYLE_MSGBOX, "{00C200}Renta: Emabarcación Turística","{FFFFFF}Tiempo de Renta: 30 Minutos\nPrecio: 3500 Dólares", "Rentar", "Cancelar");
					TypeOfRent[playerid] = 2;
					return 1;
				}
				else
				{
					SafeDialogEx(playerid, RENT_BIKE, DIALOG_STYLE_MSGBOX, "{00C200}Renta: Motoclicleta Faggio","{FFFFFF}Tiempo de Renta: 15 Minutos\nPrecio: 200 Dolares", "Rentar", "Cancelar");
					TypeOfRent[playerid] = 3;
					return 1;
				}
   			}
		}
	    if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
    	{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid);
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
   			}
   		}
   		gLastCar[playerid] = newcar;
	 	foreach(Player, i)
		{
      		new v = GetPlayerVehicle(i, newcar);
		    if(v != -1)
			{
				if(i == playerid)
				{
					format(string, sizeof(string),"{A2DC35}[INFO]:{FFFFFF} Eres el dueño de este {FF8000}%s.", GetVehicleName(newcar));
					SendClientMessageEx(playerid, COLOR_GREY, string);
					if(PlayerVehicleInfo[i][v][pvTicket] != 0)
					{
						format(string, sizeof(string),"{FF0000}[ATENCION]:{FFFFFF}La policía dejó una multa de $%d en tu vehículo. Usted debe pagar la multa en la central de {5ABAFF}SAPD{FFFFFF}.", PlayerVehicleInfo[i][v][pvTicket]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}
				else if(i == Info[playerid][pVehicleKeysFrom]){
					format(string, sizeof(string),"{A2DC35}[INFO]:{FFFFFF}Usted tiene las llaves de este %s del dueño %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 1)
				{
				    GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				else
				{
	    			format(string, sizeof(string), "{FF0000}[Advertencia]:{FFFFFF} Este %s es de %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
	      			SendClientMessageEx(playerid, COLOR_GREY, string);
	      			SendClientMessageEx(playerid, COLOR_GREY,"El motor está apagado y no tienes las llaves, puedes usar ganzúas para usar el vehículo. (/puente).");
	      			// Sistema puente. CMD:puente.
				}
				return 1;
			}
		}
		for(new f = 0; f < MAX_FAMILY; f++)
		{
		    new v = GetPlayerVehicle(f, newcar);
			v = GetGangVehicle(f, newcar);
			if(v != -1)
			{
				if(Info[playerid][pFMember] == f)
				{
					format(string, sizeof(string), "Estás en la familia propietaria de este %s.", GetVehicleName(newcar));
	    			SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(FVINFO[f][v][fvLocked] == 1 && FVINFO[f][v][fvLock] == 1)
				{
					GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				return 1;
			}
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED) gPlayerSpawned[playerid] = 1;


//**************************************
	enum
	{
  CHECKPOINT_1,
	}

    new newcar2 = GetPlayerVehicleID(playerid);
    if(newcar2 >= koscar[0] && newcar2 <= koscar[10])
		{
			if (recojercesped[playerid] == 1)
		 	{
  			    SendClientMessage(playerid,COLOR_WHITE,"{FFFF00}[JOB]:{FFFFFF} Completa la ruta para cobrar!");
  			    GameTextForPlayer(playerid,"~r~No bajes del cortacesped hasta acabar la ruta!",3000,3);
    	        Kosonrob[playerid] = 1;
				pKosonrob[playerid] = CHECKPOINT_1;
				SetPlayerRaceCheckpoint(playerid,2,2046.7584,-1241.9952,22.9092,2040.4469,-1214.4858,22.6067,5.0);
			}
			if(recojercesped[playerid] == 0)
			{
				SendClientMessage(playerid,COLOR_GREY,"{FFFF00}[JOB]:{FFFFFF} Acepta el trabajo antes de comenzar la ruta.");
				RemovePlayerFromVehicle(playerid);
				SetTimerEx("AntiRemovePlayerFromVehicle" , 2800, false, "i", playerid);
			}
		}
 return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	switch(Seatbelt[playerid])
	{
	    case 1:
	    {
			new string[128];
	        if(IsABike(vehicleid))
			{
				format(string, sizeof(string), "* %s pone las manos en su casco, y se lo quita.", GetPlayerNameEx(playerid));
			}
			else
			{
				format(string, sizeof(string), "* %s pone las manos en su cinturón y se lo quita.", GetPlayerNameEx(playerid));
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  			Seatbelt[playerid] = 0;
	    }
	}
	return 1;
}

function SetPlayerWeapons(playerid){
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(Info[playerid][pWeapons][s] > 0)
		{
			GivePlayerValidWeapon(playerid, Info[playerid][pWeapons][s]);
		}
	}
	return 1;
}

function SetPlayerWeaponsEx(playerid){
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(Info[playerid][pWeapons][s] > 0)
		{
			GivePlayerValidWeapon(playerid, Info[playerid][pWeapons][s]);
		}
	}
	SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "LastWeapon"));
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64])
{
	switch (Info[targetid][pMember])
	{
	    case 1:
		{
            employer = "LSPD";
			switch(Info[targetid][pRank])
			{
			    case 1: rank = "Cadete";
			    case 2: rank = "Oficial";
			    case 3: rank = "Sargento";
			    case 4: rank = "Teniente";
			    case 5: rank = "Inspector";
			    case 6: rank = "Comandante";
			    default: rank = "Cadete";
			}
			switch(Info[targetid][pDivision])
			{
			    case 1: division = "General";
			    case 2: division = "DIVCRI";
			    case 3: division = "DIVOES";
			    case 4: division = "DIVANDRO";
			    case 5: division = "SWAT";
			    case 6: division = "DGT";
			    default: division = "Ninguna";
			}
		}
  		case 2:
		{
            employer = "FBI";
			switch(Info[targetid][pRank])
			{
			    case 1: rank = "Agente";
			    case 2: rank = "Agente Superior";
			    case 3: rank = "Agente Especial";
			    case 4: rank = "Agente Especializado";
			    case 5: rank = "Sub/Director";
			    case 6: rank = "Director";
			    default: rank = "Agente";
			}
			switch(Info[targetid][pDivision])
			{
			    case 1: division = "General";
			    case 2: division = "DIVHO";
			    case 3: division = "UCO";
			    case 4: division = "UI";
			    case 5: division = "RR.HH";
			    case 6: division = "URRE";
			    default: division = "DIVHO";
			}
		}
  		case 3:
		{
            employer = "Guardia Nacional";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Soldado";
				case 2: rank = "Cabo";
				case 3: rank = "Sargento";
				case 4: rank = "Capitan";
				case 5: rank = "Mayor";
				case 6: rank = "Coronel";
				default: rank = "Soldado";
			}
			switch(Info[targetid][pDivision])
			{
			    case 1: division = "General";
				case 2: division = "FASA";
			    case 3: division = "EMM";
			    case 4: division = "BO";
			    case 5: division = "FMSA";
			    default: division = "Ninguna";
			}
		}
  		case 4:
		{
            employer = "S.E.C";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Médico";
				case 2: rank = "Paramédico";
				case 3: rank = "Bombero";
				case 4: rank = "Supervisor";
				case 5: rank = "Jefe de Departamento";
				case 6: rank = "Director";
				default: rank = "Prácticante";
			}
		}
		case 5:
		{
	        employer = "SATV News";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Becario";
				case 2: rank = "Redactor";
				case 3: rank = "Periodista";
				case 4: rank = "Enviado Especial";
				case 5: rank = "Presentador";
				case 6: rank = "Director";
				default: rank = "Becario";
			}
			division = "Ninguna";
		}
  		case 6:
		{
            employer = "Mecánicos LS";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Ayudante";
				case 2: rank = "Trucker";
				case 3: rank = "Mecánico";
				case 4: rank = "Ingeniero";
				case 5: rank = "Supervisor";
				case 6: rank = "Director";
				default: rank = "Ayudante";
			}
			division = "Ninguna";
		}
  		case 7:
		{
	        employer = "Gobierno";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Staff";
				case 2: rank = "Secretario";
				case 3: rank = "Alcalde de LS";
				case 4: rank = "Ministro de";
				case 5: rank = "Vice-Presidente";
				case 6: rank = "Presidente";
				default: rank = "Staff";
			}
			switch(Info[targetid][pDivision])
			{
			    case 2: division = "Chofer";
			    case 3: division = "UG";
			    case 4: division = "Defensa";
			    case 5: division = "Justicia";
			    case 6: division = "Economía";
			    default: division = "Ninguna";
			}
			division = "Ninguna";
		}
		case 8:
		{
		    employer = "Agencia Hitman";
		    switch(Info[targetid][pRank])
		    {
    			case 1: rank = "Novato";
				case 2: rank = "Asesino";
				case 3: rank = "Sicario";
				case 4: rank = "Agente Especial";
				case 5: rank = "Vice Director";
				case 6: rank = "Director";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 9:
		{
		    employer = "Sistema Judicial";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Abogado";
				case 2: rank = "Secretario";
				case 3: rank = "Fiscal";
				case 4: rank = "Juez";
				case 5: rank = "Asociado";
				case 6: rank = "Director General";
				default: rank = "Abogado";
			}
			division = "Ninguna";
		}
		case 10:
		{
			employer = "Groove";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
        case 11:
		{
			employer = "Ballas";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
        case 12:
		{
			employer = "Latin Kings";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 13:
		{
		    employer = "Sureños 13";
		    switch(Info[targetid][pRank])
		    {
		        case 1: rank = "Rata";
				case 2: rank = "Cholo";
				case 3: rank = "Vigilante";
				case 4: rank = "Real Vato";
				case 5: rank = "Vato del Rey";
				case 6: rank = "Rey del Barrio";
				default: rank = "Basurero";
			}
			division = "Ninguna";
		}
        case 14:
		{
			employer = "Mafia Rusa";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Asesino";
				case 4: rank = "Escolta";
				case 5: rank = "Mano derecha";
				case 6: rank = "Lider";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 15:
		{
			employer = "La Cosa Nostra";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "Asociatto";
				case 2: rank = "Soldato";
				case 3: rank = "Capo";
				case 4: rank = "Consigliere";
				case 5: rank = "Sottocapo";
				case 6: rank = "Don";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}

		case 16:
		{
		    employer = "Yakuza";
		    switch(Info[targetid][pRank])
		    {
    			case 1: rank = "Kyodai";
				case 2: rank = "Wakashu";
				case 3: rank = "Senpai Kohai";
				case 4: rank = "Saiko Komon";
				case 5: rank = "Sumiyoshi";
				case 6: rank = "Oyabun";
				default: rank = "Kyodai";
			}
			division = "Ninguna";
		}
		case 17:
		{
            employer = "Cartel del Golfo";
			switch(Info[targetid][pRank])
			{
			    case 1: rank = "Guardia";
			    case 2: rank = "Cosechador";
			    case 3: rank = "Contrabandista";
			    case 4: rank = "Narcotraficante";
			    case 5: rank = "Mano Derecha";
			    case 6: rank = "Jefazo";
			    default: rank = "Guardia";
   			}
		}
        case 18:
		{
            employer = "Donakov";
			switch(Info[targetid][pRank])
			{
                case 1: rank = "Novato";
				case 2: rank = "Aprendiz";
				case 3: rank = "Hombre De Honor";
				case 4: rank = "Hombre de Confianza";
				case 5: rank = "Mano Derecha";
				case 6: rank = "Don";
				default: rank = "Novato";
			}
			division = "Ninguna";
		}
		case 19:
		{
	        employer = "FACC 19";
			switch(Info[targetid][pRank])
			{
				case 1: rank = "R1";
				case 2: rank = "R2";
				case 3: rank = "R3";
				case 4: rank = "R4";
				case 5: rank = "R5";
				case 6: rank = "R6";
				default: rank = "R0";
			}
			division = "Ninguna";
		}
        case 20:
		{
            employer = "FACC 20";
			switch(Info[targetid][pRank])
			{
                case 1: rank = "R1";
				case 2: rank = "R2";
				case 3: rank = "R3";
				case 4: rank = "R4";
				case 5: rank = "R5";
				case 6: rank = "R6";
				default: rank = "R0";
			}
			division = "Ninguna";
		}

	    default: { employer = "Ninguna"; division = "Ninguna"; rank = "N/A"; }
	}
	return 1;
}


ShowStats(playerid,targetid){
    if(IsPlayerConnected(targetid)){
	    //SendClientMessageEx(playerid,0xBE81F7FF,"{BE81F7}___________________________________________________________________________________________________________________");
	    new totalstring[1800];
		new fMatriz[320], age = Info[targetid][pAge], level = Info[targetid][pLevel], atext[20], cash =  GetPlayerCash(targetid), account = Info[targetid][pAccount],pnumber[20];
		switch(Info[targetid][pSex]){
			case 1: atext = "Hombre";
			case 2: atext = "Mujer";
		}
		switch(Info[targetid][pPnumber]){
			case 0: pnumber = "Ninguno";
			default: format(pnumber, sizeof(pnumber), "%d", Info[targetid][pPnumber]);
		}
		format(fMatriz,sizeof(fMatriz),"{BE81F7} (Edad %d) - (Nivel %d) - (Sexo %s) - (Dinero %d$) - (Banco %d$) - (Teléfono %s)\n",age,level,atext,cash,account,pnumber);
		//SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);
		strcat(totalstring,fMatriz);

		new nxtlevel = Info[targetid][pLevel]+1;
		new tokens = Info[targetid][pPaintTokens],exp = Info[targetid][pExp],expamount = nxtlevel*explevel,facfam[20], employer[64],division[64], rank[64], rango = Info[targetid][pRank];
		facfam = "Facción";
		if(Info[targetid][pFMember] < 255){
		    facfam = "Familia"; division = "Ninguna";
			format(employer, sizeof(employer), "%s", fINFO[Info[targetid][pFMember]][FamilyName]);
			switch(Info[targetid][pRank]){
				case 1: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);
        format(fMatriz,sizeof(fMatriz),"{FFFFFF} (Fichas %d) - (Prox Nivel %d/%d) - (%s: %s) - (Rango %s (%d)) - (División %s)\n",tokens,exp,expamount,facfam,employer,rank,rango,division);
        //SendClientMessageEx(playerid, -1, fMatriz);
        strcat(totalstring,fMatriz);

		new jtext[21], jtext2[21];
		switch(Info[targetid][pJob]){
			case 0: jtext = "Ninguno";
			case 1: jtext = "Bartender";
            case 2: jtext = "Vendedor de Móviles";
            case 3: jtext = "Chofer de Viajes";
            case 4: jtext = "Pizzero";
            case 5: jtext = "Vendedor de Drogas";
            case 6: jtext = "Camionero";
            case 7: jtext = "Vendedor de Armas";
            case 8: jtext = "Taxista";
            case 9: jtext = "Granjero";
            case 10: jtext = "Traficante de Drogas";
            case 11: jtext = "Vendedor de Chalecos";
            case 12: jtext = "Artesano";
            case 13: jtext = "Jardinero";
            case 14: jtext = "Heladero";
            case 15: jtext = "Conductor de Tren";
            case 16: jtext = "Piloto NS";
		}
		switch(Info[targetid][pJob2]){
			case 0: jtext2 = "Ninguno";
			case 1: jtext2 = "Bartender";
            case 2: jtext2 = "Vendedor de Móviles";
            case 3: jtext2 = "Chofer de Viajes";
            case 4: jtext2 = "Pizzero";
            case 5: jtext2 = "Vendedor de Drogas";
            case 6: jtext2 = "Camionero";
            case 7: jtext2 = "Vendedor de Armas";
            case 8: jtext2 = "Taxista";
            case 9: jtext2 = "Granjero";
            case 10: jtext2 = "Traficante de Drogas";
            case 11: jtext2 = "Vendedor de Chalecos";
            case 12: jtext2 = "Artesano";
            case 13: jtext2 = "Jardinero";
            case 14: jtext2 = "Heladero";
            case 15: jtext2 = "Conductor de Tren";
            case 16: jtext2 = "Piloto NS";
		}
		new Float:health, Float:armor,fvip = Info[targetid][pVTokens];
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);
        format(fMatriz,sizeof(fMatriz),"{BE81F7} (Trabajo 1: %s) - (Trabajo 2: %s) - (Vida %.1f) - (Chaleco %.1f) - (Fichas VIP: %d)\n",jtext,jtext2,health, armor, fvip);
        //SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);
        strcat(totalstring,fMatriz);
  		new dotext[16];
		switch(Info[targetid][pVIP]){
			case 1: dotext = "Bronce";
			case 2: dotext = "Silver";
			case 3: dotext = "Gold";
			case 4: dotext = "Platinum";
			case 5: dotext = "Moderador";
			default: dotext = "No";
		}
		new arrest = Info[targetid][pArrested],
			h1 = Info[targetid][pPhousekey],
			h2 = Info[targetid][pPhousekey2],
			hx = Info[targetid][pPhousekeyX],
			hirekey	= HireKey[targetid],
			adic=Info[targetid][pAdiccion],
			rentc = Info[targetid][pRenting];

		format(fMatriz,sizeof(fMatriz),"{FFFFFF} (Arrestos: %d) - (VIP: %s) - (Casas: %d | %d | %d ) - (Veh Renta: %d) - (Casa Renta: %d) - (Adicción: %d)\n", arrest, dotext,h1,h2,hx, hirekey, rentc,adic);
        //SendClientMessageEx(playerid, -1, fMatriz);
        strcat(totalstring,fMatriz);

        new pot = Info[targetid][pPot],
        	gan = Info[targetid][pGanzuas],
			crack = Info[targetid][pCrack],
			crates = Info[targetid][pCrates],
			mats = Info[targetid][pMats],
			cso = Info[targetid][pCosecha],
			pto = Info[targetid][pPbizzkey],
			gkey = getPlayerGaragesID(targetid);
		format(fMatriz,sizeof(fMatriz),"{BE81F7} (Crack: %d | Hierba: %d | Paquetes: %d | Mats: %d | Ganzúas: %d) - (Cosecha: %dKg) - (Negocio: %d) - (Garaje: %d)\n", crack,pot,crates, mats, gan, cso, pto, gkey);
        //SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);
        strcat(totalstring,fMatriz);

        new ctime = Info[targetid][pConnectTime],
            rmt = Info[targetid][pRMutedTotal],
			jaadm = Info[targetid][pJailAdmin],
		    tjail = Info[targetid][pJailTime],
			admutes = Info[targetid][pADMuteTotal],
			warn = Info[targetid][pWarn],
			xH = Info[targetid][pDobleExp];
		format(fMatriz,sizeof(fMatriz),"{FFFFFF} (Horas IG: %d) - (Report BloQ: %d) - (Sanciones: %d | Tiempo: %d) - (Advertencias: %d/3) - (AD Mutes: %d) - (Horas 2x %d)\n", ctime, rmt, jaadm,tjail, warn,admutes, xH);
        //SendClientMessageEx(playerid, -1, fMatriz);
        strcat(totalstring,fMatriz);

		new totalwealth,
			wr = Info[targetid][pWRestricted],
 			name[MAX_PLAYER_NAME],
 			married[20];
		strmid(married, Info[targetid][pMarriedTo], 0, strlen(Info[targetid][pMarriedTo]), 255);
		GetPlayerName(targetid, name, sizeof(name));
		if(Info[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey]][hSafeMoney];
		if(Info[targetid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey2]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey2]][hSafeMoney];
        totalwealth = account + cash;
        new nROL[16];
		switch(Info[targetid][pROL]){
		case 1: nROL = "Básico";
		case 2: nROL = "Audaz";
		case 3: nROL = "Avanzado";
		case 4: nROL = "Experto";
		case 5: nROL = "Profesional";
		case 6: nROL = "Maestro";
		default: nROL = "Ninguno";}
		format(fMatriz,sizeof(fMatriz),"{BE81F7} (Dinero Total: %d$) - (Restricción: %d Horas) - (Casado(a) con %s) - (Puntos de Rol: %d [%s])\n", totalwealth,wr,married, Info[targetid][pPuntosRol], nROL);
        //SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);
        strcat(totalstring,fMatriz);

		if (Info[playerid][pAdminZC] >= 1337 && Info[targetid][pVIP] > 0 && Info[targetid][pBuddyInvited] == 0)
		{
			format(fMatriz, sizeof(fMatriz), "VIP Fin: Día: %d | Mes: %d\n", Info[targetid][pVIPDateD], Info[targetid][pVIPDateM]);
			//SendClientMessageEx(playerid, -1,fMatriz);
			strcat(totalstring,fMatriz);
		}
		if (Info[targetid][pReligion] > 0)
		{
		    new rtext[16], nRel[16];
		    switch(Info[targetid][pReligion]){case 1: nRel = "Cristianismo"; case 2: nRel = "Islamismo"; case 3: nRel = "Nazismo"; case 4: nRel = "Shintoismo";}
		    if(Info[targetid][pLiderReligioso] == 0){rtext = "Seguidor";} else{rtext = "Líder";}
		    format(fMatriz,sizeof(fMatriz),"{FFFFFF} (Religión: %s del %s).\n", rtext, nRel);
		    strcat(totalstring,fMatriz);
		}
		/*
		format(szDialogTittle2, sizeof(szDialogTittle2), "[Negocio] - %s", NegociosVariables[x][bName]); GetPlayerNameEx(targetid)
		ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle2,"* Retirar Dinero\n* Depositar Dinero\n* Mensaje al Cliente\n* Revisar Stock", "Seleccionar", "Salir");*/
		new string[80];
		format(string, sizeof(string), " Stats - %s", GetPlayerNameEx(targetid));
		ShowPlayerDialog(playerid,PSTATS,DIALOG_STYLE_MSGBOX,string,totalstring,"Ok","");
		//SendClientMessageEx(playerid,0xBE81F7FF,"{BE81F7}____________________________________________________________________________________________________________________");
	}
}
/*
ShowStats(playerid,targetid){
    if(IsPlayerConnected(targetid)){
	    SendClientMessageEx(playerid,0xBE81F7FF,"{BE81F7}___________________________________________________________________________________________________________________");
		new fMatriz[340], age = Info[targetid][pAge], level = Info[targetid][pLevel], atext[20], cash =  GetPlayerCash(targetid), account = Info[targetid][pAccount],pnumber[20];
		switch(Info[targetid][pSex]){
			case 1: atext = "Hombre";
			case 2: atext = "Mujer";
		}
		switch(Info[targetid][pPnumber]){
			case 0: pnumber = "Ninguno";
			default: format(pnumber, sizeof(pnumber), "%d", Info[targetid][pPnumber]);
		}
		format(fMatriz,sizeof(fMatriz),"{BE81F7}  %s - (Edad %d) - (Nivel %d) - (Sexo %s) - (Dinero %d$) - (Banco %d$) - (Teléfono %s)",GetPlayerNameEx(targetid),age,level,atext,cash,account,pnumber);
		SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);

		new nxtlevel = Info[targetid][pLevel]+1;
		new tokens = Info[targetid][pPaintTokens],exp = Info[targetid][pExp],expamount = nxtlevel*explevel,facfam[20], employer[64],division[64], rank[64], rango = Info[targetid][pRank];
		facfam = "Facción";
		if(Info[targetid][pFMember] < 255){
		    facfam = "Familia"; division = "Ninguna";
			format(employer, sizeof(employer), "%s", fINFO[Info[targetid][pFMember]][FamilyName]);
			switch(Info[targetid][pRank]){
				case 1: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", fINFO[Info[targetid][pFMember]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);
        format(fMatriz,sizeof(fMatriz)," (Fichas %d) - (Prox Nivel %d/%d) - (%s: %s) - (Rango %s (%d)) - (División %s)",tokens,exp,expamount,facfam,employer,rank,rango,division);
        SendClientMessageEx(playerid, -1, fMatriz);

		new jtext[21], jtext2[21];
		switch(Info[targetid][pJob]){
			case 0: jtext = "Ninguno";
			case 1: jtext = "Bartender";
            case 2: jtext = "Vendedor de Móviles";
            case 3: jtext = "Chofer de Viajes";
            case 4: jtext = "Pizzero";
            case 5: jtext = "Vendedor de Drogas";
            case 6: jtext = "Camionero";
            case 7: jtext = "Vendedor de Armas";
            case 8: jtext = "Taxista";
            case 9: jtext = "Granjero";
            case 10: jtext = "Traficante de Drogas";
            case 11: jtext = "Vendedor de Chalecos";
            case 12: jtext = "Artesano";
            case 13: jtext = "Jardinero";
            case 14: jtext = "Heladero";
            case 15: jtext = "Conductor de Tren";
            case 16: jtext = "Piloto NS";
		}
		switch(Info[targetid][pJob2]){
			case 0: jtext2 = "Ninguno";
			case 1: jtext2 = "Bartender";
            case 2: jtext2 = "Vendedor de Móviles";
            case 3: jtext2 = "Chofer de Viajes";
            case 4: jtext2 = "Pizzero";
            case 5: jtext2 = "Vendedor de Drogas";
            case 6: jtext2 = "Camionero";
            case 7: jtext2 = "Vendedor de Armas";
            case 8: jtext2 = "Taxista";
            case 9: jtext2 = "Granjero";
            case 10: jtext2 = "Traficante de Drogas";
            case 11: jtext2 = "Vendedor de Chalecos";
            case 12: jtext2 = "Artesano";
            case 13: jtext2 = "Jardinero";
            case 14: jtext2 = "Heladero";
            case 15: jtext2 = "Conductor de Tren";
            case 16: jtext2 = "Piloto NS";
		}
		new Float:health, Float:armor,fvip = Info[targetid][pVTokens];
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);
        format(fMatriz,sizeof(fMatriz),"{BE81F7} (Trabajo 1: %s) - (Trabajo 2: %s) - (Vida %.1f) - (Chaleco %.1f) - (Fichas VIP: %d)",jtext,jtext2,health, armor, fvip);
        SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);
  		new dotext[16];
		switch(Info[targetid][pVIP]){
			case 1: dotext = "Bronce";
			case 2: dotext = "Silver";
			case 3: dotext = "Gold";
			case 4: dotext = "Platinum";
			case 5: dotext = "Moderador";
			default: dotext = "No";
		}
		new sprunk = Info[targetid][pSprunk],
			arrest = Info[targetid][pArrested],
			h1 = Info[targetid][pPhousekey],
			h2 = Info[targetid][pPhousekey2],
			hx = Info[targetid][pPhousekeyX],
			hirekey	= HireKey[targetid],
			adic=Info[targetid][pAdiccion],
			rentc = Info[targetid][pRenting];

		format(fMatriz,sizeof(fMatriz)," (Sprunk %d) - (Arrestos %d) - (PR's %s) - (Casas %d | %d [%d]) - (Veh Renta %d) - (Casa Renta %d) - (Adicción %d)",sprunk, arrest, dotext,h1,h2,hx, hirekey, rentc,adic);
        SendClientMessageEx(playerid, -1, fMatriz);

        new pot = Info[targetid][pPot],
        	gan = Info[targetid][pGanzuas],
			crack = Info[targetid][pCrack],
			crates = Info[targetid][pCrates],
			mats = Info[targetid][pMats],
			cso = Info[targetid][pCosecha],
			pto = Info[targetid][pPbizzkey],
			gkey = getPlayerGaragesID(playerid);
		format(fMatriz,sizeof(fMatriz),"{BE81F7} (Crack %d | Hierba %d | Paquetes %d | Materiales %d | Ganzúas %d) - (Cosecha %dKg) - (Negocio: %d) - (Garaje: %d)", crack,pot,crates, mats, gan, cso, pto, gkey);
        SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);

        new ctime = Info[targetid][pConnectTime],
            rmt = Info[targetid][pRMutedTotal],
			jaadm = Info[targetid][pJailAdmin],
		    tjail = Info[targetid][pJailTime],
			admutes = Info[targetid][pADMuteTotal],
			warn = Info[targetid][pWarn],
			xH = Info[targetid][pDobleExp];
		format(fMatriz,sizeof(fMatriz)," (Horas IG %d) - (Report Bloq %d) - (Sanciones %d | Tiempo %d) - (Warns %d) - (AD Mutes %d) - (Horas 2x %d)", ctime, rmt, jaadm,tjail, warn,admutes, xH);
        SendClientMessageEx(playerid, -1, fMatriz);

		new totalwealth,
			wr = Info[targetid][pWRestricted],
 			name[MAX_PLAYER_NAME],
 			married[20];
		strmid(married, Info[targetid][pMarriedTo], 0, strlen(Info[targetid][pMarriedTo]), 255);
		GetPlayerName(targetid, name, sizeof(name));
		if(Info[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey]][hSafeMoney];
		if(Info[targetid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey2]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey2]][hSafeMoney];
        totalwealth = account + cash;
        new nROL[16];
		switch(Info[targetid][pROL]){
		case 1: nROL = "Básico";
		case 2: nROL = "Audaz";
		case 3: nROL = "Avanzado";
		case 4: nROL = "Experto";
		case 5: nROL = "Profesional";
		case 6: nROL = "Maestro";
		default: nROL = "Ninguno";}
		format(fMatriz,sizeof(fMatriz),"{BE81F7} (Dinero Total %d$) - (Restricción de Armas %d Horas) - (Casado(a) con %s) - (Puntos de Rol %d [%s])", totalwealth,wr,married, Info[targetid][pPuntosRol], nROL);
        SendClientMessageEx(playerid, 0xBE81F7FF, fMatriz);

		if (Info[playerid][pAdminZC] >= 1337 && Info[targetid][pVIP] > 0 && Info[targetid][pBuddyInvited] == 0){
			format(fMatriz, sizeof(fMatriz), "VIP Fin: Día: %d | Mes: %d", Info[targetid][pVIPDateD], Info[targetid][pVIPDateM]);
			SendClientMessageEx(playerid, -1,fMatriz);
		}
		SendClientMessageEx(playerid,0xBE81F7FF,"{BE81F7}____________________________________________________________________________________________________________________");
	}
}*/

function SetPlayerToTeamColor(playerid) // Colores.
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPVarInt(playerid, "ArenaMode") == 2)
	    {
			switch(Info[playerid][pPaintTeam])
			{
			    case 1:
			    {
			        SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
			    }
			    case 2:
			    {
			        SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
			    }
	        }
	        return 1;
	    }
	    if(Info[playerid][pJailed] == 1 || Info[playerid][pJailed] == 4)
	    {
	        SetPlayerColor(playerid,TEAM_APRISON_COLOR);
			return 1;
		}
		else if(Info[playerid][pJailed] == 2 || Info[playerid][pJailed] == 5 || Info[playerid][pJailed] == 6) // Arrestado desde LSPD
		{
		    SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
			return 1;
		}
		else
		{
            SetPlayerColor(playerid,TEAM_HIT_COLOR);
		}
	    if(IsACop(playerid))
	    {
			if(OnDuty[playerid] == 1)
			{
	    		if(Team_LSPD(playerid))
	        	{
	        		SetPlayerColor(playerid,TEAM_BLUE_COLOR);
				}
				else if(Team_FBI(playerid))
	        	{
	        		SetPlayerColor(playerid,TEAM_FBI_COLOR);
				}
				else if(Team_SAEM(playerid))
				{
			    	SetPlayerColor(playerid, COLOR_NG);
				}
				else if(Team_SAMD(playerid))
				{
			    	SetPlayerColor(playerid, TEAM_MED_COLOR);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
		}
		else
		{
		    if((Team_Mecanicos(playerid)) && OnDuty[playerid] == 1)
		    {
		    	SetPlayerColor(playerid,COLOR_TWPINK); // Rosa. Color Favorito de Carl.
		    }
		    if((Team_LSTV(playerid)) && OnDuty[playerid] == 1)
	    	{
	    		SetPlayerColor(playerid,TEAM_NEWS_COLOR);
			}
			else if((Team_SAMD(playerid)) && OnDuty[playerid] == 1)
			{
			   	SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			else if((Info[playerid][pJob] == 8 || Info[playerid][pJob2] == 8 || Info[playerid][pTaxiLicense] == 1) && TransportDuty[playerid] != 0)
			{
  				SetPlayerColor(playerid,TEAM_TAXI_COLOR);
	 		}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
   			}
		}
	}
	return 1;
}

public OnGameModeExit()
{
    djson_GameModeExit();
    saveAccounts();
    DOF2_Exit();
    //***SISTEMA AFK***
    for(new i = 0; i < MAX_PLAYERS; i++)
   	{
  	 	KillTimer(Timer[i]);
  	 	TextDrawHideForAll(Text:Messageafk);
  	 	TextDrawDestroy(Text:Messageafk);
		// Nuevo Speedo.
		TextDrawHideForAll(Underline);
		TextDrawDestroy(Underline);
		TextDrawHideForAll(KMH);
		TextDrawDestroy(KMH);
    	TextDrawHideForAll(Tacho_Box0);
        TextDrawDestroy(Tacho_Box0);
        TextDrawHideForAll(Tacho_Box1);
        TextDrawDestroy(Tacho_Box1);
        TextDrawHideForAll(Tacho_KMH[i]);
        TextDrawDestroy(Tacho_KMH[i]);
        TextDrawHideForAll(Tacho_Box2);
        TextDrawDestroy(Tacho_Box2);
        TextDrawHideForAll(Tacho_Zustand[i]);
        TextDrawDestroy(Tacho_Zustand[i]);
        TextDrawHideForAll(Tacho_Tank[i]);
        TextDrawDestroy(Tacho_Tank[i]);
        TextDrawHideForAll(Tacho_Car[i]);
        TextDrawDestroy(Tacho_Car[i]);
        //
        TextDrawDestroy(VehicleNameX[i]);
		TextDrawDestroy(VehicleHealth[i]);
		TextDrawDestroy(VehicleSpeed[i]);
		TextDrawDestroy(Title[i]);
	}
    return 1;
}
function AddWarrant(playerid,judgeid,crime[])
{
    new string[128];
    new month,day,year;
	getdate(year,month,day);
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    format(string,sizeof(string),"Archivos_INI/Ordenes_Judiciales/%s.ini",playername);
    new File: file = fopen(string, io_write);
	if(file)
	{
	    format(string,sizeof(string),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),month,day,year);
	    fwrite(file, string);
	    fclose(file);
	}
	return 1;
}

function RemoveWarrant(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	format(string,sizeof(string),"Archivos_INI/Ordenes_Judiciales/%s.ini",playername);
	if(fexist(string))
	{
		fremove(string);
		return 1;
	}
	else
	{
	    return 0;
	}
}

function OAddWarrant(name[],judgeid,crime[])
{
	new string[128];
	new month,day,year;
	getdate(year,month,day);
	format(string,sizeof(string),"Archivos_INI/Ordenes_Judiciales/%s.ini",name);
	new File: file = fopen(string, io_write);
	if(file)
	{
	    format(string,sizeof(string),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),month,day,year);
	    fwrite(file, string);
	    fclose(file);
	}
}

function ORemoveWarrant(name[])
{
	new string[128];
	format(string,sizeof(string),"Archivos_INI/Ordenes_Judiciales/%s.ini",name);
	if(fexist(string))
	{
	    fremove(string);
	    return 1;
	}
	else
	{
	    return 0;
	}
}

//****************************************************************************
/*LoadStuff()
{
	new arrCoords[6][64];
	new strFromFile2[128];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		if(Tax < 0) Tax = 0;
		if(TaxValue < 0) TaxValue = 0;
		TaxValue = strval(arrCoords[2]);
		Blood = strval(arrCoords[3]);
		Fuel = strval(arrCoords[4]);
		txtcost = strval(arrCoords[5]);
		fclose(file);
		print("Cargado de objetos correctamente.");
	}
	else
	{
	    GameModeExit();
	}
	return 1;
}

SaveStuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d", Jackpot,Tax,TaxValue,Blood,Fuel,txtcost);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}*/
LoadStuff()
{
	new arrCoords[8][64];
	new strFromFile2[128];
	new File: file = fopen("Archivos_INI/stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		FondosCNN = strval(arrCoords[2]);
		TaxValue = strval(arrCoords[3]);
		TaxCNN = strval(arrCoords[4]);
		if(Tax < 0) Tax = 0;
		if(TaxValue < 0) TaxValue = 0;
		if(FondosCNN < 0) FondosCNN = 0;
		if(TaxCNN < 0) TaxCNN = 0;
		Blood = strval(arrCoords[5]);
		Fuel = strval(arrCoords[6]);
		txtcost = strval(arrCoords[7]);
		fclose(file);
		print("Cargado de objetos correctamente.");
	}
	else
	{
	    printf("LoadStuff() has found an error and has to be closed");
	    printf("Error: No file \"stuff.ini\" found!");
	    GameModeExit();
	}
	return 1;
}

SaveStuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d", Jackpot,Tax,FondosCNN,TaxValue,TaxCNN,Blood,Fuel,txtcost);
	new File: file2 = fopen("Archivos_INI/stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

//****************************************************************************

SaveDynamicDoors()
{

	new
		szFileStr[512],
		File: fHandle = fopen("Archivos_CFG/dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++)
	{
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddCustomInterior],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddCustomExterior],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddFamily],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][dPass],
	  		DDoorsInfo[iIndex][dLocked],
			DDoorsInfo[iIndex][dMusic]);
			fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

LoadDynamicDoors()
{
	new arrCoords[26][64];
	new strFromFile2[256];
	new File: file = fopen("Archivos_CFG/dynamicdoors.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[idx][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[idx][ddCustomInterior] = strval(arrCoords[1]);
	  		DDoorsInfo[idx][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[idx][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[idx][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[idx][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[idx][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[idx][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[idx][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[idx][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[idx][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[idx][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[idx][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[idx][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[idx][ddCustomExterior] = strval(arrCoords[14]);
	  		DDoorsInfo[idx][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[idx][ddFamily] = strval(arrCoords[16]);
	  		DDoorsInfo[idx][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[idx][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[idx][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[idx][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[idx][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[idx][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[idx][dPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[idx][dLocked] = strval(arrCoords[24]);
	  		DDoorsInfo[idx][dMusic] = strval(arrCoords[25]);
	  		if(!isnull(DDoorsInfo[idx][ddDescription]))
	  		{
	  		    CreateDynamicDoor(idx);
			}
			idx++;
		}
		print("Puertas dinamicas cargadas correctamente.");
		fclose(file);
	}
	return 1;
}

LoadcDealerships()
{
	new idx, idx2;
	new string[128];
	new owner[MAX_PLAYER_NAME];
	new message[128];
	djAutocommit(false);
	while (idx < sizeof(CDSInfo))
	{
        format(string, sizeof(string), "%d/owned", idx);
		CDSInfo[idx][cdOwned] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/owner", idx);
		format(owner, sizeof(owner), "%s", dj("cardealerships.json", string));
		strmid(CDSInfo[idx][cdOwner], owner, 0, strlen(owner), 255);
		format(string, sizeof(string), "%d/entrance/x", idx);
		CDSInfo[idx][cdEntranceX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/y", idx);
		CDSInfo[idx][cdEntranceY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/z", idx);
		CDSInfo[idx][cdEntranceZ] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/x", idx);
		CDSInfo[idx][cdExitX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/y", idx);
		CDSInfo[idx][cdExitY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/z", idx);
	    CDSInfo[idx][cdExitZ] = djFloat("cardealerships.json", string);
	    format(string, sizeof(string), "%d/message", idx);
		format(message, sizeof(message), "%s", dj("cardealerships.json", string));
		strmid(CDSInfo[idx][cdMessage], message, 0, strlen(message), 255);
		format(string, sizeof(string), "%d/till", idx);
		CDSInfo[idx][cdTill] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/interior", idx);
		CDSInfo[idx][cdInterior] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/x", idx);
		CDSInfo[idx][cdVehicleSpawn][0] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/y", idx);
		CDSInfo[idx][cdVehicleSpawn][1] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/z", idx);
		CDSInfo[idx][cdVehicleSpawn][2] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/a", idx);
		CDSInfo[idx][cdVehicleSpawn][3] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/radius", idx);
		CDSInfo[idx][cdRadius] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/price", idx);
		CDSInfo[idx][cdPrice] = djInt("cardealerships.json", string);
		while (idx2 < MAX_DEALERSHIPVEHICLES)
		{
            format(string, sizeof(string), "%d/vehicleangle/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnAngle][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnx/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnX][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawny/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnY][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnz/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleSpawnZ][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclecost/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleCost][idx2] = djInt("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehicletypes/%d", idx, idx2);
		    CDSInfo[idx][cdVehicleModel][idx2] = djInt("cardealerships.json", string);
		    idx2++;
		}
		idx2 = 0;
		idx++;
	}
	djAutocommit(true);
	return 1;
}

SavecDealership(id)
{
	new idx2;
	new string[128];
    format(string, sizeof(string), "%d/owned", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdOwned]);
	format(string, sizeof(string), "%d/owner", id);
	djSet("cardealerships.json", string, CDSInfo[id][cdOwner]);
	format(string, sizeof(string), "%d/entrance/x", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdEntranceX]);
	format(string, sizeof(string), "%d/entrance/y", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdEntranceY]);
	format(string, sizeof(string), "%d/entrance/z", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdEntranceZ]);
	format(string, sizeof(string), "%d/exit/x", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdExitX]);
	format(string, sizeof(string), "%d/exit/y", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdExitY]);
	format(string, sizeof(string), "%d/exit/z", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdExitZ]);
	format(string, sizeof(string), "%d/message", id);
	djSet("cardealerships.json", string, CDSInfo[id][cdMessage]);
	format(string, sizeof(string), "%d/till", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdTill]);
	format(string, sizeof(string), "%d/interior", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdInterior]);
	format(string, sizeof(string), "%d/vehiclespawn/x", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][0]);
	format(string, sizeof(string), "%d/vehiclespawn/y", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][1]);
	format(string, sizeof(string), "%d/vehiclespawn/z", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][2]);
	format(string, sizeof(string), "%d/vehiclespawn/a", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawn][3]);
	format(string, sizeof(string), "%d/radius", id);
	djSetFloat("cardealerships.json", string, CDSInfo[id][cdRadius]);
	format(string, sizeof(string), "%d/price", id);
	djSetInt("cardealerships.json", string, CDSInfo[id][cdPrice]);
	while (idx2 < MAX_DEALERSHIPVEHICLES)
	{
        format(string, sizeof(string), "%d/vehicleangle/%d", id, idx2);
        djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnAngle][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnx/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnX][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawny/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnY][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnz/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CDSInfo[id][cdVehicleSpawnZ][idx2]);
	    format(string, sizeof(string), "%d/vehiclecost/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CDSInfo[id][cdVehicleCost][idx2]);
	    format(string, sizeof(string), "%d/vehicletypes/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CDSInfo[id][cdVehicleModel][idx2]);
	    idx2++;
	}
	return 1;
}

LoadServerStats()
{
	#define SERVER_STATS "Archivos_INI/serverstat.ini"

	if(!fexist(SERVER_STATS)) return 1;

	new	File: i_FileHandle = fopen("Archivos_INI/serverstat.ini", io_read), sz_FileStr[256];
    print("Server Stats cargado correctamente");
	fread(i_FileHandle, sz_FileStr);
	sscanf(sz_FileStr, "p<,>iiiiiiiiiii", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister, MaxPlayersConnected, MPDay, MPMonth, MPYear, MPHour, MPMinute, TotalUptime);
	return fclose(i_FileHandle);
}

SaveServerStats()
{
	new sz_FileStr[256], File: i_FileHandle = fopen(SERVER_STATS, io_write);
	format(sz_FileStr, sizeof(sz_FileStr), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,TotalUptime);
	fwrite(i_FileHandle, sz_FileStr);
	#undef SERVER_STATS
	return fclose(i_FileHandle);
}


LoadMOTDs()
{
	new arrCoords[6][128];
	new strFromFile2[512];
	new File: file = fopen("Archivos_INI/motd.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		strmid(GlobalMOTD, arrCoords[0], 0, strlen(arrCoords[0]), 255);
		strmid(AdminMOTD, arrCoords[1], 0, strlen(arrCoords[1]), 255);
		strmid(CAMOTD, arrCoords[2], 0, strlen(arrCoords[2]), 255);
		strmid(FACMOTD, arrCoords[3], 0, strlen(arrCoords[3]), 255);
		strmid(FAMMOTD, arrCoords[4], 0, strlen(arrCoords[4]), 255);
		strmid(VIPMOTD, arrCoords[5], 0, strlen(arrCoords[5]), 255);
		fclose(file);
		print("Mensajes cargados correctamente.");
	}
	else
	{
		fcreate("Archivos_INI/motd.ini");
		format(GlobalMOTD, sizeof(GlobalMOTD), "Bievenido a Casa.");
		format(AdminMOTD, sizeof(AdminMOTD), "Admin MOTD: No hay ningún mensaje.");
		format(CAMOTD, sizeof(CAMOTD), "Helpers MOTD: No hay ningún mensaje.");
		format(FACMOTD, sizeof(FACMOTD), "No hay ningún mensaje.");
		format(FAMMOTD, sizeof(FAMMOTD), "No hay ningún mensaje.");
		format(VIPMOTD, sizeof(VIPMOTD), "Recuerda siempre visitar la Seccion VIP en el foro infranet.foroactivo.com");
  		SaveMOTDs();
	}
	return 1;
}
SaveMOTDs()
{
	new coordsstring[512];
	format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%s|%s|%s", GlobalMOTD,AdminMOTD,CAMOTD,FACMOTD,FAMMOTD,VIPMOTD);
	new File: file2 = fopen("Archivos_INI/motd.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}
saveLideres(iIndex)
{
    new lfile[24];
	format(lfile, 24, LIDERES_FILE, iIndex);
	if(!INI_Exist(lfile)) // If not existing
	{
	    new INI:File = INI_Open(lfile);
	    INI_SetTag(File,"LideresData");
	    INI_WriteString(File,"Faccion", InfoFacc[iIndex][gFacc]);
        INI_WriteString(File,"Lider1", InfoFacc[iIndex][gLeader]);
        INI_WriteString(File,"Lider2", InfoFacc[iIndex][gLeader2]);
        INI_WriteFloat(File,"ExteriorX", InfoFacc[iIndex][gExteriorPos][0]);
        INI_WriteFloat(File,"ExteriorY", InfoFacc[iIndex][gExteriorPos][1]);
        INI_WriteFloat(File,"ExteriorZ", InfoFacc[iIndex][gExteriorPos][2]);
       	INI_WriteInt(File,"Fondos",InfoFacc[iIndex][gFondos]);
       	INI_WriteInt(File,"Materiales",InfoFacc[iIndex][gMateriales]);
       	INI_WriteInt(File,"Paga",InfoFacc[iIndex][gPaga]);
        INI_Close(File);
	}
	return 1;
}
loadLideres()
{
    new lfile[24];
    new strings[280];
	for(new iIndex = 0; iIndex < sizeof(InfoFacc); iIndex++)
	{
		format(lfile, 64, LIDERES_FILE, iIndex);
		INI_ParseFile(lfile, "loadlideres_data", .bExtra = true, .extra = iIndex );
		if(InfoFacc[iIndex][gExteriorPos][0] > 0.0) // Se crean almacenes existentes.
		{
			format(strings, sizeof(strings), "{BE81F7} Almacén - %s {FFFFFF}\nArmamento disponible: {BE81F7}%d unds.{FFFFFF}\n[FACC ID:%d]", InfoFacc[iIndex][gFacc], InfoFacc[iIndex][gMateriales],iIndex);
			// Se crea Texto y Pickup de los almacenes de cada facción.
			InfoFacc[iIndex][gLabelID] = CreateDynamic3DTextLabel(strings, -1, InfoFacc[iIndex][gExteriorPos][0], InfoFacc[iIndex][gExteriorPos][1], InfoFacc[iIndex][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
			InfoFacc[iIndex][gPickupID] = CreateDynamicPickup(1239, 23, InfoFacc[iIndex][gExteriorPos][0], InfoFacc[iIndex][gExteriorPos][1], InfoFacc[iIndex][gExteriorPos][2], 0, 0, -1, 250);
		}
	}
	print("[script] Lideres list Loaded Successfully . . .");
	return 1;
}
function loadlideres_data(id, name[], value[])
{
    INI_String("Faccion", InfoFacc[id][gFacc],12);
    INI_String("Lider1", InfoFacc[id][gLeader],24);
    INI_String("Lider2", InfoFacc[id][gLeader2],24);
    INI_Float("ExteriorX", InfoFacc[id][gExteriorPos][0]);
    INI_Float("ExteriorY", InfoFacc[id][gExteriorPos][1]);
    INI_Float("ExteriorZ", InfoFacc[id][gExteriorPos][2]);
    INI_Int("Fondos",InfoFacc[id][gFondos]);
    INI_Int("Materiales",InfoFacc[id][gMateriales]);
    INI_Int("Paga",InfoFacc[id][gPaga]);
	return 1;
}
/*
loadGarages()
{
    new gfile[64];
    new strings[280];
	for(new iIndex = 0; iIndex < sizeof(GaragesVariables); iIndex++)
	{
		format(gfile, 64, GARAGES_FILE, iIndex);
		INI_ParseFile(gfile, "loadgarages_data", .bExtra = true, .extra = iIndex );
		switch(GaragesVariables[iIndex][gLocked]){
			case 1:
			{ // Garages Icono
       			if(!strcmp("Sin Dueño", GaragesVariables[iIndex][gOwner])){format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gPrice], GaragesVariables[iIndex][gLevel]);}
				else{format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n\n{FF0000}[Garaje Cerrado]",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gName], GaragesVariables[iIndex][gOwner]);}
			}
			case 0:{
			    if(!strcmp("Sin Dueño", GaragesVariables[iIndex][gOwner])){format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gPrice], GaragesVariables[iIndex][gLevel]);}
				else{format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gName], GaragesVariables[iIndex][gOwner]);}
			}
		}
		GaragesVariables[iIndex][gLabelID] = CreateDynamic3DTextLabel(strings, -1, GaragesVariables[iIndex][gExteriorPos][0], GaragesVariables[iIndex][gExteriorPos][1], GaragesVariables[iIndex][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		GaragesVariables[iIndex][gPickupID] = CreateDynamicPickup(19522, 23, GaragesVariables[iIndex][gExteriorPos][0], GaragesVariables[iIndex][gExteriorPos][1], GaragesVariables[iIndex][gExteriorPos][2], 0, 0, -1, 250);
	}
	print("[INFRANET] Garages cargados correctamente.");
	return 1;
}
function loadgarages_data(id, name[], value[])
{
    INI_Int("Tipo", GaragesVariables[id][gType]);
    INI_String("Nombre", GaragesVariables[id][gName],48);
    INI_String("Dueño", GaragesVariables[id][gOwner],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", GaragesVariables[id][gExteriorPos][0]);
    INI_Float("ExteriorY", GaragesVariables[id][gExteriorPos][1]);
    INI_Float("ExteriorZ", GaragesVariables[id][gExteriorPos][2]);
    INI_Float("ExteriorAngulo", GaragesVariables[id][gExteriorPos][3]);
    INI_Float("InteriorX", GaragesVariables[id][gInteriorPos][0]);
    INI_Float("InteriorY", GaragesVariables[id][gInteriorPos][1]);
    INI_Float("InteriorZ", GaragesVariables[id][gInteriorPos][2]);
    INI_Float("InteriorAngulo", GaragesVariables[id][gInteriorPos][3]);
    INI_Int("Interior", GaragesVariables[id][gInterior]);
    INI_Int("Precio", GaragesVariables[id][gPrice]);
    INI_Int("Nivel", GaragesVariables[id][gLevel]);
    INI_Int("Locked", GaragesVariables[id][gLocked]);
	return 1;
}*/
LoadFamilies() {

	if(!fexist("Archivos_CFG/families.cfg")) return 1;

	new
		szFileStr[512],
		iIndex,
		File: iFileHandle = fopen("Archivos_CFG/families.cfg", io_read);

	while (iIndex < sizeof(fINFO) && fread(iFileHandle, szFileStr)) {

		sscanf(szFileStr, "p<|>is[42]s[65]s[24]iiifffiiis[20]s[20]s[20]s[20]s[20]s[20]iiiiiiiiiiiiiiiiiiiiii",
			fINFO[iIndex][FamilyTaken],
			fINFO[iIndex][FamilyName],
			fINFO[iIndex][FamilyMOTD],
			fINFO[iIndex][FamilyLeader],
			fINFO[iIndex][FamilyBank],
			fINFO[iIndex][FamilyCash],
			fINFO[iIndex][FamilyUSafe],
			fINFO[iIndex][FamilySafe][0],
			fINFO[iIndex][FamilySafe][1],
			fINFO[iIndex][FamilySafe][2],
			fINFO[iIndex][FamilyPot],
			fINFO[iIndex][FamilyCrack],
			fINFO[iIndex][FamilyMats],
			fINFO[iIndex][FamilyRank1],
			fINFO[iIndex][FamilyRank2],
			fINFO[iIndex][FamilyRank3],
			fINFO[iIndex][FamilyRank4],
			fINFO[iIndex][FamilyRank5],
			fINFO[iIndex][FamilyRank6],
			fINFO[iIndex][FamilyMembers],
			fINFO[iIndex][FamilyMaxSkins],
			fINFO[iIndex][FamilySkins][0],
			fINFO[iIndex][FamilySkins][1],
			fINFO[iIndex][FamilySkins][2],
			fINFO[iIndex][FamilySkins][3],
			fINFO[iIndex][FamilySkins][4],
			fINFO[iIndex][FamilySkins][5],
			fINFO[iIndex][FamilySkins][6],
			fINFO[iIndex][FamilySkins][7],
			fINFO[iIndex][FamilyColor],
			fINFO[iIndex][FamilyTurfTokens],
			fINFO[iIndex][FamilyGuns][0],
			fINFO[iIndex][FamilyGuns][1],
			fINFO[iIndex][FamilyGuns][2],
			fINFO[iIndex][FamilyGuns][3],
			fINFO[iIndex][FamilyGuns][4],
			fINFO[iIndex][FamilyGuns][5],
			fINFO[iIndex][FamilyGuns][6],
			fINFO[iIndex][FamilyGuns][7],
			fINFO[iIndex][FamilyGuns][8],
			fINFO[iIndex][FamilyGuns][9]
		);
		++iIndex;
	}
	print("[INFRANET] Familias cargadas correctamente.");
	return fclose(iFileHandle);
}

LoadHouses() {

	if(!fexist("Archivos_CFG/apartments.cfg")) return 1;

	new
		szFileStr[1024],
		File: iFileHandle = fopen("Archivos_CFG/apartments.cfg", io_read),
		iIndex;

	while(iIndex < sizeof(HouseInfo) && fread(iFileHandle, szFileStr)) {
		sscanf(szFileStr, "p<|>iiis[128]s[24]ffffffffiiiiiiiiiiiiiiiiiiffiiiffffff",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
			HouseInfo[iIndex][hTiempo],
			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA],
			HouseInfo[iIndex][FCount],
			HouseInfo[iIndex][FModel],
			HouseInfo[iIndex][FurnitureObj],
			HouseInfo[iIndex][FPosX],
			HouseInfo[iIndex][FPosY],
			HouseInfo[iIndex][FPosZ],
			HouseInfo[iIndex][FRotX],
			HouseInfo[iIndex][FRotY],
			HouseInfo[iIndex][FRotZ]
		);

		if(HouseInfo[iIndex][hOwned])
		{
		    HouseInfo[iIndex][hPickupID] = CreateDynamicPickup(19522, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]);
			if(HouseInfo[iIndex][hRentable] == 0) format(szFileStr, sizeof(szFileStr), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hLevel],iIndex);
			else format(szFileStr, sizeof(szFileStr), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hRentFee],HouseInfo[iIndex][hLevel],iIndex);
		}
		else
		{
		    HouseInfo[iIndex][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]);
			format(szFileStr, sizeof(szFileStr), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[iIndex][hDescription],HouseInfo[iIndex][hValue],HouseInfo[iIndex][hLevel],iIndex);
		}
		HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_GREEN2, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,10.0);
		++iIndex;
	}
	print("[INFRANET] Casas cargadas correctamente (800). (Sistema Antiguo)");
	return fclose(iFileHandle);
}

// NUEVO SISTEMA DE CASAS - PROPIEDADES.

savePropiedades(hID)
{
    new profile[64];
	format(profile, 64, PROPIEDADES_FILE, hID);
	print("[INFRANET] Se ha iniciado el guardado de propiedades.");
	if(!INI_Exist(profile)) // If not existing
	{
	    new INI:File = INI_Open(profile);
	    INI_SetTag(File,"PropiedadData");
        INI_WriteInt(File,"Venta", ProInfo[hID][hOwned]);
        INI_WriteInt(File,"Nivel", ProInfo[hID][hLevel]);
        INI_WriteInt(File,"Interior", ProInfo[hID][hHInteriorWorld]);
        INI_WriteInt(File,"CInterior", ProInfo[hID][hCustomInterior]);
        INI_WriteInt(File,"CExterior", ProInfo[hID][hCustomExterior]);
        INI_WriteString(File,"Owner", ProInfo[hID][hOwner]);
        INI_WriteString(File,"Direccion", ProInfo[hID][hDireccion]);
        INI_WriteFloat(File,"ExteriorX", ProInfo[hID][hExteriorX]);
        INI_WriteFloat(File,"ExteriorY", ProInfo[hID][hExteriorY]);
        INI_WriteFloat(File,"ExteriorZ", ProInfo[hID][hExteriorZ]);
        INI_WriteFloat(File,"ExteriorR", ProInfo[hID][hExteriorR]);
        INI_WriteFloat(File,"ExteriorA", ProInfo[hID][hExteriorA]);
        INI_WriteFloat(File,"InteriorX", ProInfo[hID][hInteriorX]);
        INI_WriteFloat(File,"InteriorY", ProInfo[hID][hInteriorY]);
        INI_WriteFloat(File,"InteriorZ", ProInfo[hID][hInteriorZ]);
        INI_WriteFloat(File,"InteriorR", ProInfo[hID][hInteriorR]);
        INI_WriteFloat(File,"InteriorA", ProInfo[hID][hInteriorA]);
        INI_WriteInt(File,"Seguro", ProInfo[hID][hLock]);
        INI_WriteInt(File,"SlotRopero1", ProInfo[hID][hSlotRopero1]);
        INI_WriteInt(File,"SlotRopero2", ProInfo[hID][hSlotRopero2]);
        INI_WriteInt(File,"SlotRopero3", ProInfo[hID][hSlotRopero3]);
        INI_WriteInt(File,"SlotRopero4", ProInfo[hID][hSlotRopero4]);
        INI_WriteInt(File,"SlotRopero5", ProInfo[hID][hSlotRopero5]);
        INI_WriteInt(File,"SlotRopero6", ProInfo[hID][hSlotRopero6]);
        INI_WriteInt(File,"SlotRopero7", ProInfo[hID][hSlotRopero7]);
        INI_WriteInt(File,"SlotRopero8", ProInfo[hID][hSlotRopero8]);
        INI_WriteInt(File,"SlotRopero9", ProInfo[hID][hSlotRopero9]);
        INI_WriteInt(File,"SlotRopero10", ProInfo[hID][hSlotRopero10]);
        INI_WriteInt(File,"Renta", ProInfo[hID][hRentable]);
        INI_WriteInt(File,"RentaPrecio", ProInfo[hID][hRentFee]);
        INI_WriteInt(File,"Precio", ProInfo[hID][hValue]);
        INI_WriteInt(File,"SafeMoney", ProInfo[hID][hSafeMoney]);
        INI_WriteInt(File,"Pot", ProInfo[hID][hPot]);
        INI_WriteInt(File,"Crack", ProInfo[hID][hCrack]);
        INI_WriteInt(File,"Materials", ProInfo[hID][hMaterials]);
        INI_WriteInt(File,"Wep1", ProInfo[hID][hW][0]);
        INI_WriteInt(File,"Wep2", ProInfo[hID][hW][1]);
        INI_WriteInt(File,"Wep3", ProInfo[hID][hW][2]);
        INI_WriteInt(File,"Wep4", ProInfo[hID][hW][3]);
        INI_WriteInt(File,"Wep5", ProInfo[hID][hW][4]);
        INI_WriteInt(File,"Ammo1", ProInfo[hID][hM][0]);
        INI_WriteInt(File,"Ammo2", ProInfo[hID][hM][1]);
        INI_WriteInt(File,"Ammo3", ProInfo[hID][hM][2]);
        INI_WriteInt(File,"Ammo4", ProInfo[hID][hM][3]);
        INI_WriteInt(File,"Ammo5", ProInfo[hID][hM][4]);
        INI_Close(File);
        print("[INFRANET] Se ha finalizado el guardado de propiedades con éxito.");
	}
	return 1;
}
loadPropiedades()
{
    new profile[64], szFileStr[256];
	for(new hID = 0; hID < MAX_PROPIEDADES; hID++)//Creates a loop, that goes through all of the businesses.
	{
		format(profile, 64, PROPIEDADES_FILE, hID);
		INI_ParseFile(profile, "loadpro_data", .bExtra = true, .extra = hID );//This is very hard to explain, but it basically loads the info from the file(More in Y_Less y_ini tutorial.)
		if(ProInfo[hID][hExteriorX] > 0.0)
		{
			if(ProInfo[hID][hOwned])
			{
				if(ProInfo[hID][hRentable] == 0) format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",ProInfo[hID][hOwner],ProInfo[hID][hLevel],hID,ProInfo[hID][hDireccion],hID+178);
				else format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Escribe /rentar para rentar aquí",ProInfo[hID][hOwner],ProInfo[hID][hRentFee],ProInfo[hID][hLevel],hID,ProInfo[hID][hDireccion],hID+178);
			}
			else format(szFileStr, sizeof(szFileStr), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Dirección: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarpropiedad.", ProInfo[hID][hDireccion], ProInfo[hID][hValue],ProInfo[hID][hLevel],hID);
			ProInfo[hID][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[hID][hExteriorX], ProInfo[hID][hExteriorY], ProInfo[hID][hExteriorZ]);
			ProInfo[hID][hTextID] = CreateDynamic3DTextLabel(szFileStr, -1, ProInfo[hID][hExteriorX], ProInfo[hID][hExteriorY], ProInfo[hID][hExteriorZ]+0.5,10.0);
            for(new i = 0; i < MAX_FURNITURE; i ++)
			{
				if(ProInfo[hID][FPosX][i] != 0.0) ProInfo[hID][FurnitureObj][i] = CreateDynamicObject(ProInfo[hID][FModel][i], ProInfo[hID][FPosX][i], ProInfo[hID][FPosY][i], ProInfo[hID][FPosZ][i], ProInfo[hID][FRotX][i], ProInfo[hID][FRotY][i], ProInfo[hID][FRotZ][i], hID+6000, ProInfo[hID][hHInteriorWorld], -1, 50.0);
			}
		}
	}
	//print("[script] Houses Loaded Successfully . . .");
	print("[INFRANET] Casas/propiedades cargadas correctamente (50). (Sistema Nuevo)");
	return 1;
}
function loadpro_data(hID, name[], value[])
{
    INI_Int("Venta", ProInfo[hID][hOwned]);
    INI_Int("Nivel", ProInfo[hID][hLevel]);
    INI_Int("Interior", ProInfo[hID][hHInteriorWorld]);
    INI_Int("CInterior", ProInfo[hID][hCustomInterior]);
    INI_Int("CExterior", ProInfo[hID][hCustomExterior]);
    INI_String("Owner", ProInfo[hID][hOwner],MAX_PLAYER_NAME);
    INI_String("Direccion", ProInfo[hID][hDireccion],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", ProInfo[hID][hExteriorX]);
    INI_Float("ExteriorY", ProInfo[hID][hExteriorY]);
    INI_Float("ExteriorZ", ProInfo[hID][hExteriorZ]);
    INI_Float("ExteriorR", ProInfo[hID][hExteriorR]);
    INI_Float("ExteriorA", ProInfo[hID][hExteriorA]);
    INI_Float("InteriorX", ProInfo[hID][hInteriorX]);
    INI_Float("InteriorY", ProInfo[hID][hInteriorY]);
    INI_Float("InteriorZ", ProInfo[hID][hInteriorZ]);
    INI_Float("InteriorR", ProInfo[hID][hInteriorR]);
    INI_Float("InteriorA", ProInfo[hID][hInteriorA]);
    INI_Int("Seguro", ProInfo[hID][hLock]);
    INI_Int("SlotRopero1", ProInfo[hID][hSlotRopero1]);
    INI_Int("SlotRopero2", ProInfo[hID][hSlotRopero2]);
    INI_Int("SlotRopero3", ProInfo[hID][hSlotRopero3]);
    INI_Int("SlotRopero4", ProInfo[hID][hSlotRopero4]);
    INI_Int("SlotRopero5", ProInfo[hID][hSlotRopero5]);
    INI_Int("SlotRopero6", ProInfo[hID][hSlotRopero6]);
    INI_Int("SlotRopero7", ProInfo[hID][hSlotRopero7]);
    INI_Int("SlotRopero8", ProInfo[hID][hSlotRopero8]);
    INI_Int("SlotRopero9", ProInfo[hID][hSlotRopero9]);
    INI_Int("SlotRopero10", ProInfo[hID][hSlotRopero10]);
    INI_Int("Renta", ProInfo[hID][hRentable]);
    INI_Int("RentaPrecio", ProInfo[hID][hRentFee]);
    INI_Int("Precio", ProInfo[hID][hValue]);
    INI_Int("SafeMoney", ProInfo[hID][hSafeMoney]);
    INI_Int("Pot", ProInfo[hID][hPot]);
    INI_Int("Crack", ProInfo[hID][hCrack]);
    INI_Int("Materials", ProInfo[hID][hMaterials]);
    INI_Int("Wep1", ProInfo[hID][hW][0]);
    INI_Int("Wep2", ProInfo[hID][hW][1]);
    INI_Int("Wep3", ProInfo[hID][hW][2]);
    INI_Int("Wep4", ProInfo[hID][hW][3]);
    INI_Int("Wep5", ProInfo[hID][hW][4]);
    INI_Int("Ammo1", ProInfo[hID][hM][0]);
    INI_Int("Ammo2", ProInfo[hID][hM][1]);
    INI_Int("Ammo3", ProInfo[hID][hM][2]);
    INI_Int("Ammo4", ProInfo[hID][hM][3]);
    INI_Int("Ammo5", ProInfo[hID][hM][4]);
    INI_Int("FCount", ProInfo[hID][FCount]);
    new key[32];
	for(new i = 0; i < MAX_FURNITURE; i ++)
	{
		format(key, 32, "FModel%d", i); INI_Int(key, ProInfo[hID][FModel][i]);
		format(key, 32, "FPosX%d", i);  INI_Float(key, ProInfo[hID][FPosX] [i]);
		format(key, 32, "FPosY%d", i);  INI_Float(key, ProInfo[hID][FPosY] [i]);
		format(key, 32, "FPosZ%d", i);  INI_Float(key, ProInfo[hID][FPosZ] [i]);
		format(key, 32, "FRotX%d", i);  INI_Float(key, ProInfo[hID][FRotX] [i]);
		format(key, 32, "FRotY%d", i);  INI_Float(key, ProInfo[hID][FRotY] [i]);
		format(key, 32, "FRotZ%d", i);  INI_Float(key, ProInfo[hID][FRotZ] [i]);
	}
	return 1;
}

// Garajes.
saveGarages(iIndex)
{
    new gfile[64];
	format(gfile, 64, GARAGES_FILE, iIndex);
	if(!INI_Exist(gfile)) // If not existing
	{
	    new INI:File = INI_Open(gfile);
	    INI_SetTag(File,"GarageData");
        INI_WriteInt(File,"Tipo", GaragesVariables[iIndex][gType]);
        INI_WriteString(File,"Nombre", GaragesVariables[iIndex][gName]);
        INI_WriteString(File,"Dueño", GaragesVariables[iIndex][gOwner]);
        INI_WriteFloat(File,"ExteriorX", GaragesVariables[iIndex][gExteriorPos][0]);
        INI_WriteFloat(File,"ExteriorY", GaragesVariables[iIndex][gExteriorPos][1]);
        INI_WriteFloat(File,"ExteriorZ", GaragesVariables[iIndex][gExteriorPos][2]);
        INI_WriteFloat(File,"ExteriorAngulo", GaragesVariables[iIndex][gExteriorPos][3]);
        INI_WriteFloat(File,"InteriorX", GaragesVariables[iIndex][gInteriorPos][0]);
        INI_WriteFloat(File,"InteriorY", GaragesVariables[iIndex][gInteriorPos][1]);
        INI_WriteFloat(File,"InteriorZ", GaragesVariables[iIndex][gInteriorPos][2]);
        INI_WriteFloat(File,"InteriorAngulo", GaragesVariables[iIndex][gInteriorPos][3]);
        INI_WriteInt(File,"Interior", GaragesVariables[iIndex][gInterior]);
		INI_WriteInt(File,"Precio", GaragesVariables[iIndex][gPrice]);
		INI_WriteInt(File,"Nivel", GaragesVariables[iIndex][gLevel]);
		INI_WriteInt(File,"Locked", GaragesVariables[iIndex][gLocked]);
        INI_Close(File);
	}
	return 1;
}
loadGarages()
{
    new gfile[64];
    new strings[280];
	for(new iIndex = 0; iIndex < sizeof(GaragesVariables); iIndex++)
	{
		format(gfile, 64, GARAGES_FILE, iIndex);
		INI_ParseFile(gfile, "loadgarages_data", .bExtra = true, .extra = iIndex );
		switch(GaragesVariables[iIndex][gLocked]){
			case 1:
			{ // Garages Icono
       			if(!strcmp("Sin Dueño", GaragesVariables[iIndex][gOwner])){format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gPrice], GaragesVariables[iIndex][gLevel]);}
				else{format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n\n{FF0000}[Garaje Cerrado]",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gName], GaragesVariables[iIndex][gOwner]);}
			}
			case 0:{
			    if(!strcmp("Sin Dueño", GaragesVariables[iIndex][gOwner])){format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gPrice], GaragesVariables[iIndex][gLevel]);}
				else{format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
				iIndex, TipoGarage(iIndex), GaragesVariables[iIndex][gName], GaragesVariables[iIndex][gOwner]);}
			}
		}
		GaragesVariables[iIndex][gLabelID] = CreateDynamic3DTextLabel(strings, -1, GaragesVariables[iIndex][gExteriorPos][0], GaragesVariables[iIndex][gExteriorPos][1], GaragesVariables[iIndex][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		GaragesVariables[iIndex][gPickupID] = CreateDynamicPickup(19522, 23, GaragesVariables[iIndex][gExteriorPos][0], GaragesVariables[iIndex][gExteriorPos][1], GaragesVariables[iIndex][gExteriorPos][2], 0, 0, -1, 250);
	}
	print("[INFRANET] Garages cargados correctamente.");
	return 1;
}
function loadgarages_data(id, name[], value[])
{
    INI_Int("Tipo", GaragesVariables[id][gType]);
    INI_String("Nombre", GaragesVariables[id][gName],48);
    INI_String("Dueño", GaragesVariables[id][gOwner],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", GaragesVariables[id][gExteriorPos][0]);
    INI_Float("ExteriorY", GaragesVariables[id][gExteriorPos][1]);
    INI_Float("ExteriorZ", GaragesVariables[id][gExteriorPos][2]);
    INI_Float("ExteriorAngulo", GaragesVariables[id][gExteriorPos][3]);
    INI_Float("InteriorX", GaragesVariables[id][gInteriorPos][0]);
    INI_Float("InteriorY", GaragesVariables[id][gInteriorPos][1]);
    INI_Float("InteriorZ", GaragesVariables[id][gInteriorPos][2]);
    INI_Float("InteriorAngulo", GaragesVariables[id][gInteriorPos][3]);
    INI_Int("Interior", GaragesVariables[id][gInterior]);
    INI_Int("Precio", GaragesVariables[id][gPrice]);
    INI_Int("Nivel", GaragesVariables[id][gLevel]);
    INI_Int("Locked", GaragesVariables[id][gLocked]);
	return 1;
}
saveNegocios(iIndex)
{
    new bfile[64];
	format(bfile, 64, NEGOCIOS_FILE, iIndex);
	if(!INI_Exist(bfile)) // If not existing
	{
	    new INI:File = INI_Open(bfile);
	    INI_SetTag(File,"NegocioData");
        INI_WriteInt(File,"Tipo", NegociosVariables[iIndex][bType]);
        INI_WriteString(File,"Nombre", NegociosVariables[iIndex][bName]);
        INI_WriteString(File,"Info", NegociosVariables[iIndex][bInfo]);
        INI_WriteString(File,"Dueño", NegociosVariables[iIndex][bOwner]);
        INI_WriteString(File,"Extortion", NegociosVariables[iIndex][bExtortion]);
        INI_WriteFloat(File,"ExteriorX", NegociosVariables[iIndex][bExteriorPos][0]);
        INI_WriteFloat(File,"ExteriorY", NegociosVariables[iIndex][bExteriorPos][1]);
        INI_WriteFloat(File,"ExteriorZ", NegociosVariables[iIndex][bExteriorPos][2]);
        INI_WriteFloat(File,"InteriorX", NegociosVariables[iIndex][bInteriorPos][0]);
        INI_WriteFloat(File,"InteriorY", NegociosVariables[iIndex][bInteriorPos][1]);
        INI_WriteFloat(File,"InteriorZ", NegociosVariables[iIndex][bInteriorPos][2]);
        INI_WriteInt(File,"Interior", NegociosVariables[iIndex][bInterior]);
        INI_WriteFloat(File,"MiscX", NegociosVariables[iIndex][bMiscPos][0]);
        INI_WriteFloat(File,"MiscY", NegociosVariables[iIndex][bMiscPos][1]);
        INI_WriteFloat(File,"MiscZ", NegociosVariables[iIndex][bMiscPos][2]);
        INI_WriteFloat(File,"MiscR", NegociosVariables[iIndex][bMiscPos][3]);
        INI_WriteInt(File,"Ganancias", NegociosVariables[iIndex][bGanancias]);
		INI_WriteInt(File,"Precio", NegociosVariables[iIndex][bPrice]);
		INI_WriteInt(File,"Stock", NegociosVariables[iIndex][bStock]);
		INI_WriteInt(File,"Locked", NegociosVariables[iIndex][bLocked]);
		INI_WriteInt(File,"Level", NegociosVariables[iIndex][bLevelNeeded]);
        INI_Close(File);
	}
	return 1;
}
loadNegocios()
{
    new bfile[64];
    new strings[382];
	for(new iIndex = 0; iIndex < sizeof(NegociosVariables); iIndex++)//Creates a loop, that goes through all of the businesses.
	{
		format(bfile, 64, NEGOCIOS_FILE, iIndex);
		INI_ParseFile(bfile, "loadbusiness_data", .bExtra = true, .extra = iIndex );//This is very hard to explain, but it basically loads the info from the file(More in Y_Less y_ini tutorial.)
        if(NegociosVariables[iIndex][bExteriorPos][0] > 0.0) // Se crean negocios existentes.
		{
			switch(NegociosVariables[iIndex][bLocked])
			{
				case 1:
				{
       				if(!strcmp("Sin Dueño", NegociosVariables[iIndex][bOwner]))
       				{
   						format(strings, sizeof(strings), "{FFFFFF}%s\nNegocio en venta, usa /comprarnegocio\n[Estado: {FF0000}Cerrado{FFFFFF}]\n[Nivel necesario: %d - Precio %d$]\n\n{00C6A1}ID: {FFFFFF}%d",NegociosVariables[iIndex][bName], NegociosVariables[iIndex][bLevelNeeded], NegociosVariables[iIndex][bPrice], iIndex);
   				    }
					else
					{
						format(strings, sizeof(strings), "{FFFFFF}%s\nPropietario: %s\n[Estado: {FF0000}Cerrado{FFFFFF}]\n\n{00C6A1}ID: {FFFFFF}%d",NegociosVariables[iIndex][bName], NegociosVariables[iIndex][bOwner], iIndex);
					}
				}
				case 0:
				{
       				if(!strcmp("Sin Dueño", NegociosVariables[iIndex][bOwner]))
       				{
   						format(strings, sizeof(strings), "{FFFFFF}%s\nNegocio en venta, usa /comprarnegocio\n[Estado: {04B404}Abierto{FFFFFF}]\n[Nivel necesario: %d - Precio %d$]\n\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",NegociosVariables[iIndex][bName], NegociosVariables[iIndex][bLevelNeeded], NegociosVariables[iIndex][bPrice], iIndex);
					}
					else
					{
						format(strings, sizeof(strings), "{FFFFFF}%s\nPropietario: %s\n[Estado: {04B404}Abierto{FFFFFF}]\n\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",NegociosVariables[iIndex][bName], NegociosVariables[iIndex][bOwner], iIndex);
					}
				}
			}
		}
		if(NegociosVariables[iIndex][bMiscPos][0] != 0.0 && NegociosVariables[iIndex][bMiscPos][1] != 0.0) // Si X y Y no son cero (No existe).
		{
			NegociosVariables[iIndex][bObject] = CreateDynamicObject(2332, NegociosVariables[iIndex][bMiscPos][0],NegociosVariables[iIndex][bMiscPos][1],NegociosVariables[iIndex][bMiscPos][2],0,0,NegociosVariables[iIndex][bMiscPos][3]);
		}
		NegociosVariables[iIndex][bLabelID] = CreateDynamic3DTextLabel(strings, -1, NegociosVariables[iIndex][bExteriorPos][0], NegociosVariables[iIndex][bExteriorPos][1], NegociosVariables[iIndex][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		NegociosVariables[iIndex][bPickupID] = CreateDynamicPickup(1274, 23, NegociosVariables[iIndex][bExteriorPos][0], NegociosVariables[iIndex][bExteriorPos][1], NegociosVariables[iIndex][bExteriorPos][2], 0, 0, -1, 250);
	}
	print("[INFRANET] Negocios cargados correctamente.");
	return 1;
}
function loadbusiness_data(id, name[], value[])
{
    INI_Int("Tipo", NegociosVariables[id][bType]);
    INI_String("Nombre", NegociosVariables[id][bName],48);
    INI_String("Info", NegociosVariables[id][bInfo],98);
    INI_String("Dueño", NegociosVariables[id][bOwner],MAX_PLAYER_NAME);
    INI_String("Extortion", NegociosVariables[id][bExtortion],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", NegociosVariables[id][bExteriorPos][0]);
    INI_Float("ExteriorY", NegociosVariables[id][bExteriorPos][1]);
    INI_Float("ExteriorZ", NegociosVariables[id][bExteriorPos][2]);
    INI_Float("InteriorX", NegociosVariables[id][bInteriorPos][0]);
    INI_Float("InteriorY", NegociosVariables[id][bInteriorPos][1]);
    INI_Float("InteriorZ", NegociosVariables[id][bInteriorPos][2]);
    INI_Int("Interior", NegociosVariables[id][bInterior]);
    INI_Float("MiscX", NegociosVariables[id][bMiscPos][0]);
    INI_Float("MiscY", NegociosVariables[id][bMiscPos][1]);
    INI_Float("MiscZ", NegociosVariables[id][bMiscPos][2]);
    INI_Float("MiscR", NegociosVariables[id][bMiscPos][3]);
    INI_Int("Ganancias", NegociosVariables[id][bGanancias]);
    INI_Int("Precio", NegociosVariables[id][bPrice]);
    INI_Int("Stock", NegociosVariables[id][bStock]);
    INI_Int("Locked", NegociosVariables[id][bLocked]);
    INI_Int("Level", NegociosVariables[id][bLevelNeeded]);
	return 1;
}
/////////////////////////////////////////// SISTEMA DE PORTONES DINÁMICOS //////////////////////////////////////////////////
savePortones(iIndex)
{
    new pfile[64];
	format(pfile, 64, PORTONES_FILE, iIndex);
	if(!INI_Exist(pfile)) // If not existing
	{
	    new INI:File = INI_Open(pfile);
	    INI_SetTag(File,"PortonData");
        INI_WriteInt(File,"Velocidad", iPorton[iIndex][pSpeed]);
        INI_WriteInt(File,"Faccion", iPorton[iIndex][pFac]);
        INI_WriteInt(File,"Familia", iPorton[iIndex][pFam]);
        INI_WriteInt(File,"ObjectID", iPorton[iIndex][pObjectID]);
        INI_WriteInt(File,"Bloqueo", iPorton[iIndex][pForceDoor]);
        INI_WriteFloat(File,"PosInicialX", iPorton[iIndex][pA][0]);
        INI_WriteFloat(File,"PosInicialY", iPorton[iIndex][pA][1]);
        INI_WriteFloat(File,"PosInicialZ", iPorton[iIndex][pA][2]);
        INI_WriteFloat(File,"PosInicialXr", iPorton[iIndex][pA][3]);
        INI_WriteFloat(File,"PosInicialYr", iPorton[iIndex][pA][4]);
        INI_WriteFloat(File,"PosInicialZr", iPorton[iIndex][pA][5]);
        INI_WriteFloat(File,"PosFinalX", iPorton[iIndex][pZ][0]);
        INI_WriteFloat(File,"PosFinalY", iPorton[iIndex][pZ][1]);
        INI_WriteFloat(File,"PosFinalZ", iPorton[iIndex][pZ][2]);
        INI_WriteFloat(File,"PosFinalXr", iPorton[iIndex][pZ][3]);
        INI_WriteFloat(File,"PosFinalYr", iPorton[iIndex][pZ][4]);
        INI_WriteFloat(File,"PosFinalZr", iPorton[iIndex][pZ][5]);
        INI_Close(File);
	}
	return 1;
}
loadPortones()
{
    new pfile[64];
    new strings[180];
	for(new iIndex = 0; iIndex < sizeof(iPorton); iIndex++)//Creates a loop, that goes through all of the doors.
	{
		format(pfile, 64, PORTONES_FILE, iIndex);
		INI_ParseFile(pfile, "loadportones_data", .bExtra = true, .extra = iIndex );//This is very hard to explain, but it basically loads the info from the file(More in Y_Less y_ini tutorial.)
        if(iPorton[iIndex][pA][0] > 0.0) // Se crean portones cuya coordinada X exista. (TextLabel)
		{
			switch(iPorton[iIndex][pForceDoor])
			{
				case 1: // Portones públicos. (Forzables por LSPD)
				{
       				if(iPorton[iIndex][pFac] != 0) // Facción tiene nombre.
       				{
   						format(strings, sizeof(strings), "Portón de %s\nUsa /apgarage.\n[%d]",InfoFacc[iPorton[iIndex][pFac]][gFacc], iIndex);
   				    }
					else // Facción es 0.
					{
						format(strings, sizeof(strings), "Portón de %s\nUsa /apgarage.\n[%d]",fINFO[iPorton[iIndex][pFam]][FamilyName], iIndex);
					}
				}
				case 0: // Portones privados. (No forzables)
				{
       				if(iPorton[iIndex][pFac] != 0) // Facción tiene nombre.
       				{
   						format(strings, sizeof(strings), "[Portón %d]", iIndex);
					}
					else // Facción no tiene nombre. (Es 0)
					{
						format(strings, sizeof(strings), "[Portón %d]", iIndex);
					}
				}
			}
		}
		if(iPorton[iIndex][pObjectID] != 0 && iPorton[iIndex][pA][0] != 0.0) // Si existe objeto de la puerta y tiene coordenadas iniciales, se crea el objeto.
		{
			iPorton[iIndex][pObject] = CreateDynamicObject(iPorton[iIndex][pObjectID], iPorton[iIndex][pA][0],iPorton[iIndex][pA][1],iPorton[iIndex][pA][2],iPorton[iIndex][pA][3],iPorton[iIndex][pA][4],iPorton[iIndex][pA][5]);
		}
		iPorton[iIndex][pLabelID] = CreateDynamic3DTextLabel(strings, -1, iPorton[iIndex][pA][0], iPorton[iIndex][pA][1], iPorton[iIndex][pA][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 8.0);
	}
	print("[INFRANET] Portones cargados correctamente.");
	return 1;
}
function loadportones_data(id, name[], value[])
{
    INI_Int("Velocidad", iPorton[id][pSpeed]);
    INI_Int("Faccion", iPorton[id][pFac]);
    INI_Int("Familia", iPorton[id][pFam]);
    INI_Int("ObjectID", iPorton[id][pObjectID]);
    INI_Int("Bloqueo", iPorton[id][pForceDoor]);
    INI_Float("PosInicialX", iPorton[id][pA][0]);
    INI_Float("PosInicialY", iPorton[id][pA][1]);
    INI_Float("PosInicialZ", iPorton[id][pA][2]);
    INI_Float("PosInicialXr", iPorton[id][pA][3]);
    INI_Float("PosInicialYr", iPorton[id][pA][4]);
    INI_Float("PosInicialZr", iPorton[id][pA][5]);
    INI_Float("PosFinalX", iPorton[id][pZ][0]);
    INI_Float("PosFinalY", iPorton[id][pZ][1]);
    INI_Float("PosFinalZ", iPorton[id][pZ][2]);
    INI_Float("PosFinalXr", iPorton[id][pZ][3]);
    INI_Float("PosFinalYr", iPorton[id][pZ][4]);
    INI_Float("PosFinalZr", iPorton[id][pZ][5]);
	return 1;
}
//////////////////////////////// SISTEMA DE ACTORES ///////////////////////////////////////////////////////
saveActores(iIndex)
{
    new afile[64];
	format(afile, 64, ACTORES_FILE, iIndex);
	if(!INI_Exist(afile)) // If not existing
	{
	    new INI:File = INI_Open(afile);
	    INI_SetTag(File,"ActorData");
        INI_WriteString(File,"Nombre", iActor[iIndex][aNombre]);
        INI_WriteInt(File,"Skin", iActor[iIndex][aSkin]);
        INI_WriteInt(File,"VirtualWorld", iActor[iIndex][aVW]);
        INI_WriteInt(File,"Invulnerable", iActor[iIndex][aINV]);
		INI_WriteInt(File,"Animacion", iActor[iIndex][aAnim]);
        INI_WriteFloat(File,"PosX", iActor[iIndex][aPos][0]);
		INI_WriteFloat(File,"PosY", iActor[iIndex][aPos][1]);
		INI_WriteFloat(File,"PosZ", iActor[iIndex][aPos][2]);
		INI_WriteFloat(File,"PosR", iActor[iIndex][aPos][3]);
        INI_Close(File);
	}
	return 1;
}
loadActores()
{
    new afile[64];
    new strings[32];
	for(new iIndex = 0; iIndex < sizeof(iActor); iIndex++)
	{
		format(afile, 64, ACTORES_FILE, iIndex);
		INI_ParseFile(afile, "loadactores_data", .bExtra = true, .extra = iIndex );
        if(iActor[iIndex][aPos][0] > 0.0) // Se crean Actores existentes.
		{
			switch(iActor[iIndex][aINV])
			{
				case 1:
				{
       				if(!strcmp("Ninguno", iActor[iIndex][aNombre]))
       				{
       				    // Si es Ninguno, no se crea el texto.
   						format(strings, sizeof(strings), "(%d)", iIndex);
   						iActor[iIndex][aLabelActor] = CreateDynamic3DTextLabel(strings, -1, iActor[iIndex][aPos][0], iActor[iIndex][aPos][1], iActor[iIndex][aPos][2]+1, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
   				    }
					else
					{
						// Si no es Ninguno, se crea el texto.
						format(strings, sizeof(strings), "%s (%d)",iActor[iIndex][aNombre], iIndex);
						iActor[iIndex][aLabelActor] = CreateDynamic3DTextLabel(strings, -1, iActor[iIndex][aPos][0], iActor[iIndex][aPos][1], iActor[iIndex][aPos][2]+1, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
					}
				}
			}
		}
		if(iActor[iIndex][aPos][0] != 0.0 && iActor[iIndex][aPos][1] != 0.0) // Si X y Y no son cero (Existen). Se crea Actor, Virtual Wolrd y Vulnerabilidad.
		{
	 		iActor[iIndex][aInfo] = CreateActor(iActor[iIndex][aSkin], iActor[iIndex][aPos][0], iActor[iIndex][aPos][1], iActor[iIndex][aPos][2], iActor[iIndex][aPos][3]);
	 		SetActorVirtualWorld(iActor[iIndex][aInfo],iActor[iIndex][aVW]); SetActorInvulnerable(iActor[iIndex][aInfo], true); SetActorHealth(iActor[iIndex][aInfo], 100);
		}
		if(iActor[iIndex][aAnim] > 0) // Si es mayor de 0.
		{
  			switch(iActor[iIndex][aAnim])
			{
				case 1:{ApplyActorAnimation(iActor[iIndex][aInfo], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 1, 0, 0);} // Hablar.
                case 2:{ApplyActorAnimation(iActor[iIndex][aInfo], "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 1, 0, 0);} // Seguridad.
                case 3:{ApplyActorAnimation(iActor[iIndex][aInfo], "SMOKING","M_smk_in", 4.0, 1, 0, 1, 0, 0);} // Fumar.
                case 4:{ApplyActorAnimation(iActor[iIndex][aInfo], "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);} // Hablar 2.
               	case 5:{ApplyActorAnimation(iActor[iIndex][aInfo], "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 0);} // Sentado.
                case 6:{ApplyActorAnimation(iActor[iIndex][aInfo], "RAPPING", "Laugh_01", 4.0, 1, 0, 1, 0, 0);} // Rie.
				case 7:{ApplyActorAnimation(iActor[iIndex][aInfo], "DEALER", "DEALER_DEAL", 4.0, 1, 0, 1, 0, 0);} //  Sacando dinero.
				case 8:{ApplyActorAnimation(iActor[iIndex][aInfo], "RAPPING","RAP_A_Loop", 4.0, 1, 0, 1, 0, 0);} // Rapeando.
				case 9:{ApplyActorAnimation(iActor[iIndex][aInfo], "GANGS","smkcig_prtl", 4.0, 1, 0, 1, 0, 0);} // Observando.
				case 10:{ApplyActorAnimation(iActor[iIndex][aInfo], "STRIP","strip_E",4.1,7,5,1,1,1);} // Perrea, perrea :D
			}
		}
	}
	print("[INFRANET] Actores cargados correctamente.");
	return 1;
}
function loadactores_data(id, name[], value[])
{
    INI_String("Nombre", iActor[id][aNombre],MAX_PLAYER_NAME);
    INI_Int("Skin", iActor[id][aSkin]);
    INI_Int("VirtualWorld", iActor[id][aVW]);
    INI_Int("Invulnerable", iActor[id][aINV]);
    INI_Int("Animacion", iActor[id][aAnim]);
    INI_Float("PosX", iActor[id][aPos][0]);
    INI_Float("PosY", iActor[id][aPos][1]);
    INI_Float("PosZ", iActor[id][aPos][2]);
    INI_Float("PosR", iActor[id][aPos][3]);
	return 1;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
SaveHouses() {

	new
		szFileStr[1024],
		File: fHandle = fopen("Archivos_CFG/apartments.cfg", io_write);

	for(new iIndex; iIndex < MAX_HOUSES; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%s|%s|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f\r\n",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
   			HouseInfo[iIndex][hValue],
   			HouseInfo[iIndex][hTiempo],
   			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
loadSpeedCam()
{
	if(!fexist("Archivos_CFG/vCameras.cfg")) return 1;
	new text_info[80],szFileStr[1024],File: iFileHandle = fopen("Archivos_CFG/vCameras.cfg", io_read),iIndex;
	while(iIndex < sizeof(vCameraInfo) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>ffffdddd",
		    vCameraInfo[iIndex][vCameraPos][0],
			vCameraInfo[iIndex][vCameraPos][1],
			vCameraInfo[iIndex][vCameraPos][2],
			vCameraInfo[iIndex][vCameraRot],
			vCameraInfo[iIndex][vCameraStatus],
			vCameraInfo[iIndex][vCameraRange],
			vCameraInfo[iIndex][vCameraLimit],
			vCameraInfo[iIndex][vCameraTicket]);
		if(vCameraInfo[iIndex][vCameraLimit] != 0)
		{
		    vCameraInfo[iIndex][vCameraObject] = CreateDynamicObject(18880, vCameraInfo[iIndex][vCameraPos][0],vCameraInfo[iIndex][vCameraPos][1],vCameraInfo[iIndex][vCameraPos][2],0,0,vCameraInfo[iIndex][vCameraRot]);
			switch(vCameraInfo[iIndex][vCameraStatus])
			{
	    		case 0: format(text_info, sizeof(text_info), "{007AFF}[RADAR %d]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}%d{81DAF5} KM/H", iIndex,vCameraInfo[iIndex][vCameraLimit]);
				case 1: format(text_info, sizeof(text_info), "{DF0101}[RADAR %d DESCONECTADO]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}0{81DAF5} KM/H", iIndex);
			}
	        vCameraInfo[iIndex][vCameraLabel] = CreateDynamic3DTextLabel(text_info,-1,vCameraInfo[iIndex][vCameraPos][0],vCameraInfo[iIndex][vCameraPos][1],vCameraInfo[iIndex][vCameraPos][2]+8,50.0);
		}
		++iIndex;
	}
	print("[INFRANET] Radares cargados correctamente.");
	return fclose(iFileHandle);
}
saveSpeedCam()
{
	new szFileStr[512],File: fHandle = fopen("Archivos_CFG/vCameras.cfg", io_write);
	for(new iIndex; iIndex < MAX_vCAMERAS; iIndex++)
	{
		format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%f|%d|%d|%d|%d\r\n",
		    vCameraInfo[iIndex][vCameraPos][0],
			vCameraInfo[iIndex][vCameraPos][1],
			vCameraInfo[iIndex][vCameraPos][2],
			vCameraInfo[iIndex][vCameraRot],
			vCameraInfo[iIndex][vCameraStatus],
			vCameraInfo[iIndex][vCameraRange],
			vCameraInfo[iIndex][vCameraLimit],
			vCameraInfo[iIndex][vCameraTicket]);
  		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
UpdatePoints()
{
	new idx;
	new File: file2;
	while (idx < sizeof(Points))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f|%f|%f|%d|%d|%s|%s|%s|%d\n",
		Points[idx][Pointx],
		Points[idx][Pointy],
		Points[idx][Pointz],
		Points[idx][Type],
		Points[idx][Vulnerable],
		Points[idx][Owner],
		Points[idx][CapperName],
		Points[idx][Name],
		Points[idx][MatPoint]);
		if(idx == 0)
		{
			file2 = fopen("Archivos_CFG/points.cfg", io_write);
		}
		else
		{
			file2 = fopen("Archivos_CFG/points.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

LoadPoints(){
	new arrCoords[9][64];
	new strFromFile2[256];
	new File: file = fopen("Archivos_CFG/points.cfg", io_read);
	if (file){
		new idx;
		while (idx < sizeof(Points)){
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			Points[idx][Pointx] = floatstr(arrCoords[0]);
			Points[idx][Pointy] = floatstr(arrCoords[1]);
			Points[idx][Pointz] = floatstr(arrCoords[2]);
			Points[idx][Type] = strval(arrCoords[3]);
			Points[idx][Vulnerable] = strval(arrCoords[4]);
			strmid(Points[idx][Owner], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(Points[idx][CapperName], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(Points[idx][Name], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			Points[idx][MatPoint] = strval(arrCoords[8]);
			Points[idx][CaptureTimerEx2] = -1;
			Points[idx][ClaimerId] = INVALID_PLAYER_ID;
			Points[idx][PointPickupID] = CreateDynamicPickup( 1239, 23, Points[idx][Pointx], Points[idx][Pointy], Points[idx][Pointz]);
			idx++;
		}
		print("Puntos cargados correctamente.");
		fclose(file);
	}
	return 1;
}

saveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(fINFO))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%d|%d|%d|%f|%f|%f|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		fINFO[idx][FamilyTaken],
		fINFO[idx][FamilyName],
		fINFO[idx][FamilyMOTD],
		fINFO[idx][FamilyLeader],
		fINFO[idx][FamilyBank],
		fINFO[idx][FamilyCash],
		fINFO[idx][FamilyUSafe],
		fINFO[idx][FamilySafe][0],
		fINFO[idx][FamilySafe][1],
		fINFO[idx][FamilySafe][2],
		fINFO[idx][FamilyPot],
		fINFO[idx][FamilyCrack],
		fINFO[idx][FamilyMats],
		fINFO[idx][FamilyRank1],
		fINFO[idx][FamilyRank2],
		fINFO[idx][FamilyRank3],
		fINFO[idx][FamilyRank4],
		fINFO[idx][FamilyRank5],
		fINFO[idx][FamilyRank6],
		fINFO[idx][FamilyMembers],
		fINFO[idx][FamilyMaxSkins],
		fINFO[idx][FamilySkins][0],
		fINFO[idx][FamilySkins][1],
		fINFO[idx][FamilySkins][2],
		fINFO[idx][FamilySkins][3],
		fINFO[idx][FamilySkins][4],
		fINFO[idx][FamilySkins][5],
		fINFO[idx][FamilySkins][6],
		fINFO[idx][FamilySkins][7],
		fINFO[idx][FamilyColor],
		fINFO[idx][FamilyTurfTokens],
		fINFO[idx][FamilyGuns][0],
		fINFO[idx][FamilyGuns][1],
		fINFO[idx][FamilyGuns][2],
		fINFO[idx][FamilyGuns][3],
		fINFO[idx][FamilyGuns][4],
		fINFO[idx][FamilyGuns][5],
		fINFO[idx][FamilyGuns][6],
		fINFO[idx][FamilyGuns][7],
		fINFO[idx][FamilyGuns][8],
		fINFO[idx][FamilyGuns][9]);
		if(idx == 0)
		{
			file2 = fopen("Archivos_CFG/families.cfg", io_write);
		}
		else
		{
			file2 = fopen("Archivos_CFG/families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

LoadFamiliesHQ()
{
    new string2[64];
	format(string2, sizeof(string2), "Archivos_INI/familieshq.ini");
	new File: GangFile = fopen(string2, io_read);
	if(GangFile)
	{
		new key[256], val[256], Data[256];
		while(fread(GangFile,Data,sizeof(Data)))
		{
		    new string[128];
		    for(new f = 0; f < MAX_FAMILY; f++)
    		{
				key = ini_GetKey( Data );
				format(string, 128, "Family%dEntranceX",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][0] = floatstr( val ); }
				format(string, 128, "Family%dEntranceY",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][1] = floatstr( val ); }
				format(string, 128, "Family%dEntranceZ",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][2] = floatstr( val ); }
				format(string, 128, "Family%dEntranceA",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyEntrance][3] = floatstr( val ); }
				format(string, 128, "Family%dExitX",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][0] = floatstr( val ); }
				format(string, 128, "Family%dExitY",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][1] = floatstr( val ); }
				format(string, 128, "Family%dExitZ",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][2] = floatstr( val ); }
				format(string, 128, "Family%dExitA",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyExit][3] = floatstr( val ); }
				format(string, 128, "Family%dInterior",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyInterior] = strval( val ); }
				format(string, 128, "Family%dCustomMap",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyCustomMap] = strval( val ); }
				format(string, 128, "Family%dVirtualWorld",f);
				if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); fINFO[f][FamilyVirtualWorld] = strval( val ); }
				for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    			{
    			    format(string, 128, "Family%dVeh%dModelId",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvModelId] = strval( val ); }
					format(string, 128, "Family%dVeh%dSpawnx",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawnx] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawny",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawny] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawnz",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawnz] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawna",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvSpawna] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dLock",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvLock] = strval( val ); }
					format(string, 128, "Family%dVeh%dLocked",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvLocked] = strval( val ); }
					format(string, 128, "Family%dVeh%dPaintJob",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvPaintJob] = strval( val ); }
					format(string, 128, "Family%dVeh%dColor1",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvColor1] = strval( val ); }
					format(string, 128, "Family%dVeh%dColor2",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvColor2] = strval( val ); }
					format(string, 128, "Family%dVeh%dFuel",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = ini_GetValue( Data ); FVINFO[f][fv][fvFuel] = strval( val ); }
    			}
			}
		}
		print("Hq Familias cargadas correctamente.");
		fclose(GangFile);
	}
	return 1;
}

saveFamiliesHQ()
{
	new string3[32];
	format(string3, sizeof(string3), "Archivos_INI/familieshq.ini");
	new File: hFile = fopen(string3, io_write);
	if (hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_FAMILY; f++)
   		{
			format(var, 32, "Family%dEntranceX=%.1f\n",f, fINFO[f][FamilyEntrance][0]);fwrite(hFile, var);
			format(var, 32, "Family%dEntranceY=%.1f\n",f, fINFO[f][FamilyEntrance][1]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceZ=%.1f\n",f, fINFO[f][FamilyEntrance][2]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceA=%.1f\n",f, fINFO[f][FamilyEntrance][3]); fwrite(hFile, var);
			format(var, 32, "Family%dExitX=%.1f\n",f, fINFO[f][FamilyExit][0]); fwrite(hFile, var);
			format(var, 32, "Family%dExitY=%.1f\n",f, fINFO[f][FamilyExit][1]); fwrite(hFile, var);
			format(var, 32, "Family%dExitZ=%.1f\n",f, fINFO[f][FamilyExit][2]); fwrite(hFile, var);
			format(var, 32, "Family%dExitA=%.1f\n",f, fINFO[f][FamilyExit][3]); fwrite(hFile, var);
			format(var, 32, "Family%dInterior=%d\n",f, fINFO[f][FamilyInterior]); fwrite(hFile, var);
			format(var, 32, "Family%dCustomMap=%d\n",f, fINFO[f][FamilyCustomMap]); fwrite(hFile, var);
			format(var, 32, "Family%dVirtualWorld=%d\n",f, fINFO[f][FamilyVirtualWorld]); fwrite(hFile, var);

			for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
   			{
   			    format(var, 32, "Family%dVeh%dModelId=%d\n",f, fv, FVINFO[f][fv][fvModelId]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnx=%.1f\n",f, fv,FVINFO[f][fv][fvSpawnx]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawny=%.1f\n",f, fv,FVINFO[f][fv][fvSpawny]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnz=%.1f\n",f, fv,FVINFO[f][fv][fvSpawnz]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawna=%.1f\n",f, fv,FVINFO[f][fv][fvSpawna]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLock=%d\n",f, fv,FVINFO[f][fv][fvLock]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLocked=%d\n",f, fv,FVINFO[f][fv][fvLocked]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dPaintJob=%d\n",f, fv,FVINFO[f][fv][fvPaintJob]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor1=%d\n",f, fv,FVINFO[f][fv][fvColor1]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor2=%d\n",f, fv,FVINFO[f][fv][fvColor2]); fwrite(hFile, var);
				if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID) FVINFO[f][fv][fvFuel] = VehicleFuel[FVINFO[f][fv][fvId]];
				format(var, 32, "Family%dVeh%dFuel=%d\n",f, fv,FVINFO[f][fv][fvFuel]); fwrite(hFile, var);
    		}
  		}
		fclose(hFile);
	}
	return 1;
}
stock HexToInt(string[]) // Created by Zamaroth
{
	if (string[0] == 0) return 0;

	new
		i,
		cur = 1,
		res = 0
	;

	for (i = strlen(string); i > 0; i --) {
		if (string[i-1] < 58) res = res + cur * (string[i-1]-48); else res = res + cur * (string[i-1]-65+10);
		cur = cur * 16;
	}
	return res;
}
stock SprayTag_Create(playerid, iIndex)
{
	if(IsPlayerConnected(playerid))
	{
		SprayTags[playerid][iIndex][_spPosX] = spraytag_positions[playerid][0];
		SprayTags[playerid][iIndex][_spPosY] = spraytag_positions[playerid][1];
		SprayTags[playerid][iIndex][_spPosZ] = spraytag_positions[playerid][2];
		SprayTags[playerid][iIndex][_spPosRX] = spraytag_positions[playerid][3];
		SprayTags[playerid][iIndex][_spPosRY] = spraytag_positions[playerid][4];
		SprayTags[playerid][iIndex][_spPosRZ] = spraytag_positions[playerid][5];

		format(SprayTags[playerid][iIndex][_spText], 50, spraytag_text[playerid]);
		format(SprayTags[playerid][iIndex][_spFont], 50, spraytag_font[playerid]);

		SprayTags[playerid][iIndex][_spFontColor] = spraytag_color[playerid];
		SprayTags[playerid][iIndex][_spFontSize] = spraytag_size[playerid];
		SprayTags[playerid][iIndex][_spBold] = spraytag_bold[playerid];

        SprayTag_Spawn(playerid, iIndex);
		Tags_Save(playerid, iIndex);
        //szMessage[256];
		format(szMessage, sizeof szMessage, "Graffiti número: %i.", iIndex);
		SendClientMessage(playerid, -1, szMessage);
		format(szMessage, sizeof szMessage, "{BE81F7}%s "COL_WHITE"has creado un nuevo graffiti: '{BE81F7}%s"COL_WHITE"'", GetPlayerNameEx(playerid), spraytag_text[playerid]);
        Log("LOGS/graffitis.log", szMessage);
	}
}

stock SprayTag_Spawn(playerid, iIndex)
{
	SprayTags[playerid][iIndex][_spObject] = CreateDynamicObject(SPRAY_TAG_OBJECT, SprayTags[playerid][iIndex][_spPosX], SprayTags[playerid][iIndex][_spPosY], SprayTags[playerid][iIndex][_spPosZ], SprayTags[playerid][iIndex][_spPosRX], SprayTags[playerid][iIndex][_spPosRY], SprayTags[playerid][iIndex][_spPosRZ], SprayTags[playerid][iIndex][_spVW], SprayTags[playerid][iIndex][_spInt], -1, SPRAY_TAG_OBJECT_DISTANCE);
	SetDynamicObjectMaterialText(SprayTags[playerid][iIndex][_spObject], 0, SprayTags[playerid][iIndex][_spText], OBJECT_MATERIAL_SIZE_512x512, SprayTags[playerid][iIndex][_spFont], SprayTags[playerid][iIndex][_spFontSize], SprayTags[playerid][iIndex][_spBold], SprayTags[playerid][iIndex][_spFontColor], 0, 1);
	return 1;
}

stock Tag_Load(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new
			szFile[40],
			szLine[28],
			szName[MAX_PLAYER_NAME]
		;
		GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
		format(szFile, 40, SPRAYTAG_FOLDER, szName);

		for(new i; i < MAX_PLAYERS_TAGS; i++)
		{
			format(szLine, sizeof szLine, "Text%i", i); format(SprayTags[playerid][i][_spText], 50, DOF2_GetString(szFile, szLine));
			format(szLine, sizeof szLine, "Font%i", i); format(SprayTags[playerid][i][_spFont], 50, DOF2_GetString(szFile, szLine));
			format(szLine, sizeof szLine, "FontSize%i", i); SprayTags[playerid][i][_spFontSize] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "FontBold%i", i); SprayTags[playerid][i][_spBold] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "FontColor%i", i); SprayTags[playerid][i][_spFontColor] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "PosX%i", i); SprayTags[playerid][i][_spPosX] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "PosY%i", i); SprayTags[playerid][i][_spPosY] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "PosZ%i", i); SprayTags[playerid][i][_spPosZ] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "RotX%i", i); SprayTags[playerid][i][_spPosRX] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "RotY%i", i); SprayTags[playerid][i][_spPosRY] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "RotZ%i", i); SprayTags[playerid][i][_spPosRZ] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "VirtualWorld%i", i); SprayTags[playerid][i][_spVW] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "Interior%i", i); SprayTags[playerid][i][_spInt] = DOF2_GetInt(szFile, szLine);

			if(SprayTags[playerid][i][_spPosX] != 0.0)
			{
				SprayTag_Spawn(playerid, i);
			}
		}
	}
	return 1;
}

stock Tags_Clear(playerid, iIndex)
{
	format(SprayTags[playerid][iIndex][_spText], 50, "Exemplo");
	format(SprayTags[playerid][iIndex][_spFont], 50, "Arial");
	SprayTags[playerid][iIndex][_spFontSize] = 24;
	SprayTags[playerid][iIndex][_spBold] = 0;
	SprayTags[playerid][iIndex][_spFontColor] = -1;
	SprayTags[playerid][iIndex][_spPosX] = 0.0;
	SprayTags[playerid][iIndex][_spPosY] = 0.0;
	SprayTags[playerid][iIndex][_spPosZ] = 0.0;
	SprayTags[playerid][iIndex][_spPosRX] = 0.0;
	SprayTags[playerid][iIndex][_spPosRY] = 0.0;
	SprayTags[playerid][iIndex][_spPosRZ] = 0.0;
	SprayTags[playerid][iIndex][_spVW] = 0;
	SprayTags[playerid][iIndex][_spInt] = 0;
	DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
	Tags_Save(playerid, iIndex);
	return 1;
}

stock Tags_Save(playerid, iIndex)
{
	if(IsPlayerConnected(playerid))
	{
		new
			szFile[32],
			szLine[128],
			szName[MAX_PLAYER_NAME]
		;

		GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
		format(szFile, 32, SPRAYTAG_FOLDER, szName);
		if(!DOF2_FileExists(szFile)) DOF2_CreateFile(szFile);
		{
			format(szLine, sizeof szLine, "Text%i", iIndex); DOF2_SetString(szFile, szLine, SprayTags[playerid][iIndex][_spText]);
			format(szLine, sizeof szLine, "Font%i", iIndex); DOF2_SetString(szFile, szLine, SprayTags[playerid][iIndex][_spFont]);
			format(szLine, sizeof szLine, "FontSize%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spFontSize]);
			format(szLine, sizeof szLine, "FontBold%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spBold]);
			format(szLine, sizeof szLine, "FontColor%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spFontColor]);
			format(szLine, sizeof szLine, "PosX%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosX]);
			format(szLine, sizeof szLine, "PosY%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosY]);
			format(szLine, sizeof szLine, "PosZ%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosZ]);
			format(szLine, sizeof szLine, "RotX%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosRX]);
			format(szLine, sizeof szLine, "RotY%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosRY]);
			format(szLine, sizeof szLine, "RotZ%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosRZ]);
			format(szLine, sizeof szLine, "VirtualWorld%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spVW]);
			format(szLine, sizeof szLine, "Interior%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spInt]);
			DOF2_SaveFile();
		}
	}
	return 1;
}
function SprayTag_Dialog(iPlayerID, iType)
{
	new
		szGraff[500],
		szText[50],
		szFont[50],
		szBold[20],
		szColor[30]
	;

	switch(iType)
	{
		case TYPE_LIST_MENU:
		{
			ShowPlayerDialog(iPlayerID, SPRAYTAG_MENU, DIALOG_STYLE_LIST, "{BE81F7}SA:RP - "COL_WHITE"Graffitis", "Crear graffitis\nEditar graffitis\nBorrar grafitis\nRastrear graffitis", "Seleccionar", "Salir");
		}
		case TYPE_LIST_CREATE:
		{
			switch(spraytag_bold[iPlayerID])
			{
				case 0: szBold = "Desactivada";
				case 1: szBold = "Activada";
			}
			switch(spraytag_color[iPlayerID])
			{
				case -65536: szColor = "{FF0000}Rojo";
				case -16468988: szColor = "{04B404}Verde";
				case -16730675: szColor = "{00B5CD}Azul Claro";
				case -256: szColor = "{FFFF00}Amarillo";
				case -16776961: szColor = "{0000FF}Azul";
				case -8092540: szColor = "{848484}Gris";
				case -65281: szColor = "{FF00FF}Rosa";
				case -1: szColor = "{FFFFFF}Blanco";
			}

			format(szText, 50, spraytag_text[iPlayerID]);
			format(szFont, 50, spraytag_font[iPlayerID]);

			format(szGraff, sizeof szGraff, "\
				{BE81F7}Texto:"COL_WHITE" %s\n\
				{BE81F7}Fuente:"COL_WHITE" %s\n\
				{BE81F7}Tamaño:"COL_WHITE" %d\n\
				{BE81F7}Color:"COL_WHITE" %s\n\
				{BE81F7}Negrita:"COL_WHITE" %s\n\
				{BE81F7}Crear graffiti",
				szText,
				szFont,
				spraytag_size[iPlayerID],
				szColor,
				szBold
			);
			ShowPlayerDialog(iPlayerID, SPRAYTAG_CREATE_MAIN, DIALOG_STYLE_LIST, "{BE81F7}SA:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_EDIT:
		{
			switch(spraytag_bold[iPlayerID])
			{
				case 0: szBold = "Desactivada";
				case 1: szBold = "Activada";
			}
			switch(spraytag_color[iPlayerID])
			{
				case -65536: szColor = "{FF0000}Rojo";
				case -16468988: szColor = "{04B404}Verde";
				case -16730675: szColor = "{00B5CD}Azul Claro";
				case -256: szColor = "{FFFF00}Amarillo";
				case -16776961: szColor = "{0000FF}Azul";
				case -8092540: szColor = "{848484}Gris";
				case -65281: szColor = "{FF00FF}Rosa";
				case -1: szColor = "{FFFFFF}Blanco";
			}

			format(szGraff, sizeof szGraff, "\
				{BE81F7}Texto: "COL_WHITE"%s\n\
				{BE81F7}Fuente: "COL_WHITE"%s\n\
				{BE81F7}Tamaño: "COL_WHITE"%d\n\
				{BE81F7}Color: "COL_WHITE"%s\n\
				{BE81F7}Negrita: "COL_WHITE"%s\n\
				{BE81F7}Editar graffiti",
				spraytag_text[iPlayerID],
				spraytag_font[iPlayerID],
				spraytag_size[iPlayerID],
				szColor,
				szBold
			);
			ShowPlayerDialog(iPlayerID, SPRAYTAG_EDIT_LIST, DIALOG_STYLE_LIST, "{BE81F7}SA:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS:
		{
			new
				szName[MAX_PLAYER_NAME]
			;

			GetPlayerName(iPlayerID, szName, sizeof szName);
			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), "{BE81F7}Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}

			ShowPlayerDialog(iPlayerID, SPRAYTAG_EDIT_MAIN, DIALOG_STYLE_LIST, "{BE81F7}SA:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS_DELETE:
		{
			new
				szName[MAX_PLAYER_NAME]
			;

			GetPlayerName(iPlayerID, szName, sizeof szName);

			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), "{BE81F7}Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}
			ShowPlayerDialog(iPlayerID, SPRAYTAG_DELETE, DIALOG_STYLE_LIST, "{BE81F7}SA:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS_CREATE:
		{
			new szName[MAX_PLAYER_NAME];
			GetPlayerName(iPlayerID, szName, sizeof szName);
			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), "{BE81F7}Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}
			ShowPlayerDialog(iPlayerID, SPRAYTAG_CREATE, DIALOG_STYLE_LIST, "{BE81F7}SA:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS_FIND:
		{
			new
				szName[MAX_PLAYER_NAME]
			;

			GetPlayerName(iPlayerID, szName, sizeof szName);

			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), "{BE81F7}Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}
			ShowPlayerDialog(iPlayerID, SPRAYTAG_FIND, DIALOG_STYLE_LIST, "{BE81F7}SA:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
	}
	return 1;
}

function SprayTag(playerid, type)
{
	new
		iIndex = spraytag_slot[playerid]
	;

	if(!IsPlayerConnected(playerid))
	{
		spraytag_timer_left[playerid] = 0;
		DeletePVar(playerid, "SPRAYTAG_EDIT");
		KillTimer(spraytag_timer[playerid]);
		return 1;
	}

	spraytag_timer_left[playerid]--;

	switch(type)
	{
		case 1:
		{
			if(spraytag_timer_left[playerid] == 0)
			{
				DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
				DestroyDynamicObject(spraytag_object[playerid]);

				format(SprayTags[playerid][iIndex][_spText], 50, spraytag_text[playerid]);
				format(SprayTags[playerid][iIndex][_spFont], 50, spraytag_font[playerid]);

				SprayTags[playerid][iIndex][_spPosX] = spraytag_positions[playerid][0];
				SprayTags[playerid][iIndex][_spPosY] = spraytag_positions[playerid][1];
				SprayTags[playerid][iIndex][_spPosZ] = spraytag_positions[playerid][2];
				SprayTags[playerid][iIndex][_spPosRX] = spraytag_positions[playerid][3];
				SprayTags[playerid][iIndex][_spPosRY] = spraytag_positions[playerid][4];
				SprayTags[playerid][iIndex][_spPosRZ] = spraytag_positions[playerid][5];
				SprayTags[playerid][iIndex][_spFontColor] = spraytag_color[playerid];
				SprayTags[playerid][iIndex][_spFontSize] = spraytag_size[playerid];
				SprayTags[playerid][iIndex][_spBold] = spraytag_bold[playerid];

				SprayTag_Spawn(playerid, iIndex);
				Tags_Save(playerid, iIndex);

				ClearAnimations(playerid);
				ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
				KillTimer(spraytag_timer[playerid]);
			}
		}
		case 2:
		{
			if(spraytag_timer_left[playerid] == 0)
			{
				SprayTag_Create(playerid, spraytag_slot[playerid]);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
				KillTimer(spraytag_timer[playerid]);
			}
		}
	}
	DeletePVar(playerid, "SPRAYTAG_EDIT");
	return 1;
}
AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}
//****************************************************************************
/*public LoadBizz()
{
	new arrCoords[12][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bName], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntrancex] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntrancey] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntrancez] = floatstr(arrCoords[6]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[7]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[8]);
			BizzInfo[idx][bType] = strval(arrCoords[9]);
			BizzInfo[idx][bTill] = strval(arrCoords[10]);
			BizzInfo[idx][bTillEx] = strval(arrCoords[11]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}*/
//***velocimetro***
forward SpeedoUpdate(); // Fuera de uso.
forward Speedometer(playerid); // Nuevo.
//******************************************************************************
public OnGameModeInit()
{
    AntiDeAMX();
	SendRconCommand("onfoot_rate 40");
	SendRconCommand("incar_rate 40");
	SendRconCommand("weapon_rate 40");
	SendRconCommand("stream_distance 250.0");
	SendRconCommand("stream_rate 1000");
	Streamer_TickRate(75);
	if(DetectarSpam("190.218.8.452:7777")) print("Hizo SPAM.");
 //****************velocimetro*****************
		Tacho_Box0 = TextDrawCreate(319.000000, 343.000000, "");
        TextDrawBackgroundColor(Tacho_Box0, 255);
        TextDrawFont(Tacho_Box0, 1);
        TextDrawLetterSize(Tacho_Box0, 0.500000, 1.000000);
        TextDrawColor(Tacho_Box0, -1);
        TextDrawSetOutline(Tacho_Box0, 0);
        TextDrawSetProportional(Tacho_Box0, 1);
        TextDrawSetShadow(Tacho_Box0, 1);
        TextDrawUseBox(Tacho_Box0, 1);
        TextDrawBoxColor(Tacho_Box0, 255);
        TextDrawTextSize(Tacho_Box0, 85.000000, 0.000000);

        Tacho_Box1 = TextDrawCreate(319.000000, 345.000000, "");
        TextDrawBackgroundColor(Tacho_Box1, 255);
        TextDrawFont(Tacho_Box1, 1);
        TextDrawLetterSize(Tacho_Box1, 0.500000, 1.400000);
        TextDrawColor(Tacho_Box1, -1);
        TextDrawSetOutline(Tacho_Box1, 0);
        TextDrawSetProportional(Tacho_Box1, 1);
        TextDrawSetShadow(Tacho_Box1, 1);
        TextDrawUseBox(Tacho_Box1, 1);
        TextDrawBoxColor(Tacho_Box1, 255);
        TextDrawTextSize(Tacho_Box1, 309.000000, 0.000000);

        Tacho_Box2 = TextDrawCreate(319.000000, 421.000000, "");
        TextDrawBackgroundColor(Tacho_Box2, 255);
        TextDrawFont(Tacho_Box2, 1);
        TextDrawLetterSize(Tacho_Box2, 0.500000, 1.000000);
        TextDrawColor(Tacho_Box2, -1);
        TextDrawSetOutline(Tacho_Box2, 0);
        TextDrawSetProportional(Tacho_Box2, 1);
        TextDrawSetShadow(Tacho_Box2, 1);
        TextDrawUseBox(Tacho_Box2, 1);
        TextDrawBoxColor(Tacho_Box2, 255);
        TextDrawTextSize(Tacho_Box2, 83.000000, 0.000000);

        SetTimer("SpeedoUpdate", 1000, 1);
        SetTimer("Speedometer", 200, true);
        for(new i = 0; i<MAX_PLAYERS; i++)
        {
                Tacho_KMH[i] = TextDrawCreate(136.000000, 351.000000, "");
                TextDrawBackgroundColor(Tacho_KMH[i], 255);
                TextDrawFont(Tacho_KMH[i], 1);
                TextDrawLetterSize(Tacho_KMH[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_KMH[i], -1);
                TextDrawSetOutline(Tacho_KMH[i], 0);
                TextDrawSetProportional(Tacho_KMH[i], 1);
                TextDrawSetShadow(Tacho_KMH[i], 1);

                Tacho_Zustand[i] = TextDrawCreate(136.000000, 366.000000, "");
                TextDrawBackgroundColor(Tacho_Zustand[i], 255);
                TextDrawFont(Tacho_Zustand[i], 1);
                TextDrawLetterSize(Tacho_Zustand[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_Zustand[i], -1);
                TextDrawSetOutline(Tacho_Zustand[i], 0);
                TextDrawSetProportional(Tacho_Zustand[i], 1);
                TextDrawSetShadow(Tacho_Zustand[i], 1);

                Tacho_Tank[i] = TextDrawCreate(138.000000, 381.000000, "");
                TextDrawBackgroundColor(Tacho_Tank[i], 255);
                TextDrawFont(Tacho_Tank[i], 1);
                TextDrawLetterSize(Tacho_Tank[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_Tank[i], -1);
                TextDrawSetOutline(Tacho_Tank[i], 0);
                TextDrawSetProportional(Tacho_Tank[i], 1);
                TextDrawSetShadow(Tacho_Tank[i], 1);

                Tacho_Car[i] = TextDrawCreate(138.000000, 398.000000, "");
                TextDrawBackgroundColor(Tacho_Car[i], 255);
                TextDrawFont(Tacho_Car[i], 1);
                TextDrawLetterSize(Tacho_Car[i], 0.500000, 1.000000);
                TextDrawColor(Tacho_Car[i], -1);
                TextDrawSetOutline(Tacho_Car[i], 0);
                TextDrawSetProportional(Tacho_Car[i], 1);
                TextDrawSetShadow(Tacho_Car[i], 1);
        }
	//****************Sistema AFK*****************
	Messageafk = TextDrawCreate(1.000000,435.000000,"  ");
   	TextDrawAlignment(Messageafk,0);
   	TextDrawBackgroundColor(Messageafk,0x000000ff);
   	TextDrawFont(Messageafk,2);
   	TextDrawLetterSize(Messageafk,0.598999,1.300000);
	TextDrawSetOutline(Messageafk,1);
   	TextDrawSetProportional(Messageafk,1);
   	TextDrawSetShadow(Messageafk,1);
	//****************ADO[K]1NG*****************
	SetTimer("GlobalAnnouncement", 1200000,true); // Cada 20 minutos.
	SetTimer("GlobalAnnouncement2", 1800000,true); // Cada 30 minutos.
	SetTimer("GlobalTime", 3540000,true); // Cada 59 minutos. (3300000 - 55 Minutos)
	SetTimer("ZL",6000,1);
    king0 = TextDrawCreate(9.000000, 432.000000, "_");
    TextDrawBackgroundColor(king0, 255);
    TextDrawFont(king0, 1);
    TextDrawLetterSize(king0, 0.900000, 0.799991);
    TextDrawColor(king0, -1);
    TextDrawSetOutline(king0, 0);
    TextDrawSetProportional(king0, 1);
    TextDrawSetShadow(king0, 1);
    TextDrawUseBox(king0, 1);
    TextDrawBoxColor(king0, 90);
    TextDrawTextSize(king0, 631.000000, 43.000000);

    king1 = TextDrawCreate(11.000000, 423.000000, "~w~INFRANET - RP");
    TextDrawBackgroundColor(king1, 255);
    TextDrawFont(king1, 3);
    TextDrawLetterSize(king1, 0.330000, 2.599999);
    TextDrawColor(king1, -1);
    TextDrawSetOutline(king1, 1);
    TextDrawSetProportional(king1, 1);

    king2 = TextDrawCreate(93.000000, 429.000000, "Bienvenido a INFRANET, Esta es nuestra Apertura, Disfruta!");
    TextDrawBackgroundColor(king2, 255);
    TextDrawFont(king2, 2);
    TextDrawLetterSize(king2, 0.240000, 1.399999);
    TextDrawColor(king2, -1);
    TextDrawSetOutline(king2, 0);
    TextDrawSetProportional(king2, 1);
    TextDrawSetShadow(king2, 0);
 
PRUEBA1 = TextDrawCreate(638.0, 431.0, "~w~INFRANET_");
TextDrawLetterSize(PRUEBA1, 0.400000, 1.605833);
TextDrawTextSize(PRUEBA1, 668.000000, 0.000000);
TextDrawAlignment(PRUEBA1, 3);
TextDrawColor(PRUEBA1, -1);
TextDrawUseBox(PRUEBA1, 1);
TextDrawBoxColor(PRUEBA1, 255);
TextDrawSetShadow(PRUEBA1, 1);
TextDrawSetOutline(PRUEBA1, 0);
TextDrawBackgroundColor(PRUEBA1, 255);
TextDrawFont(PRUEBA1, 2);
TextDrawSetProportional(PRUEBA1, 1);

PRUEBA2 = TextDrawCreate(12.0, 431.0, "Nuevo_sistema_de_casas_implementado,_usa_/ayuda_casa.");
TextDrawLetterSize(PRUEBA2, 0.300205, 1.133333);
TextDrawAlignment(PRUEBA2, 1);
TextDrawColor(PRUEBA2, -1);
TextDrawBoxColor(PRUEBA2, 90);
TextDrawSetShadow(PRUEBA2, 1);
TextDrawSetOutline(PRUEBA2, 0);
TextDrawBackgroundColor(PRUEBA2, 255);
TextDrawFont(PRUEBA2, 1);
TextDrawSetProportional(PRUEBA2, 1);
    
    // Navidad.
    /*navidad = TextDrawCreate(523, 138, "#navidad2015");
	TextDrawFont(navidad , 3);
	TextDrawLetterSize(navidad , 0.4, 2.8);
	TextDrawColor(navidad , 0x1a8099FF);
	TextDrawSetOutline(navidad , false);
	TextDrawSetProportional(navidad , true);
	TextDrawSetShadow(navidad , 1);*/

	//*********************************
	//***sistema de fire**
	SetTimer("Fuegoo", 1000, true);
    F = false;
    new fire = random(sizeof(Fuego));
    LugarFuego[0] = Fuego[fire][0];
    LugarFuego[1] = Fuego[fire][1];
    LugarFuego[2] = Fuego[fire][2];
	//********************
	//******************* Init gamemode*******************
	djson_GameModeInit();
	//LoadBizz();
	//OnGlobalBizzTextdrawUpdate();
	SendRconCommand("mapname Los Santos");
	SendRconCommand("language Español - Spanish");
	SendRconCommand("weburl infranet.foroactivo.com");
	SendRconCommand("gamemodetext INFRANET RP - 2018");
	new servergmtextstr[64];
	format(servergmtextstr, 64, "hostname INFRANET RP - 2018 - [ESPAÑOL]", SERVER_GM_TEXT);
	SendRconCommand(servergmtextstr);
	new string[42];
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	EnableStuntBonusForAll(0);
	//AllowAdminTeleport(0);
	DisableInteriorEnterExits();
	LoadHouses();
    loadPropiedades();
	loadSpeedCam();
	loadNegocios();
	//ColocarMueblesCasas();
	LoadStuff();
	LoadServerStats();
	LoadFamilies();
	LoadPoints();
	LoadDynamicDoors();
	LoadcDealerships();
	loadLideres(); //carga la lista de lideres
	LoadMapeos(); //carga los mapeos del servicor
	LoadActors(); //carga los actores del servidor
	loadGarages(); // Garajes.
	loadPortones(); // Portones dinámicos.
	loadActores(); // Actores dinámicos.
	skinlist = LoadModelSelectionMenu("mSelection/skins.txt");
	skinactores = LoadModelSelectionMenu("mSelection/skins.txt");
	bars = LoadModelSelectionMenu("mSelection/bars.txt");
	//MueblesObj = 	LoadModelSelectionMenu("mSelection/MueblesModelos.txt");
	for(new f = 0; f < sizeof(fINFO); f++)
	{
		for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
		{
		    FVINFO[f][fv][fvModelId] = 0;
			FVINFO[f][fv][fvSpawnx] = 0.0;
			FVINFO[f][fv][fvSpawny] = 0.0;
			FVINFO[f][fv][fvSpawnz] = 0.0;
			FVINFO[f][fv][fvSpawna] = 0.0;
			FVINFO[f][fv][fvPaintJob] = -1;
			FVINFO[f][fv][fvColor1] = 126;
			FVINFO[f][fv][fvColor2] = 126;
			FVINFO[f][fv][fvPrice] = 0;
			FVINFO[f][fv][fvFuel] = 200;
	    	FVINFO[f][fv][fvId] = INVALID_VEHICLE_ID;
		}
	}
	LoadFamiliesHQ();
	LoadMOTDs();
	ClearReports();
	SetNameTagDrawDistance(15.0); // Era 60.
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
		gTime = wtime;
	}
	GiftAllowed = 1;
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
		CreatedCars[i] = INVALID_VEHICLE_ID;
	}
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    VehicleFuel[v] = 200;
	}
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	//***ayuda textdraw***
	AyudaT[0] =
	TextDrawCreate(20.000000, 114.000000, "Ayuda General");
	TextDrawBackgroundColor(AyudaT[0], 255);
	TextDrawFont(AyudaT[0], 3);
	TextDrawLetterSize(AyudaT[0], 0.500000, 1.699999);
	TextDrawColor(AyudaT[0], -1);
	TextDrawSetOutline(AyudaT[0], 0);
	TextDrawSetProportional(AyudaT[0], 1);
	TextDrawSetShadow(AyudaT[0], 1);
	TextDrawSetSelectable(AyudaT[0], 1);
	textdrawscount++;

	AyudaT[1] =
	TextDrawCreate(20.000000, 144.000000, "Ayuda Faccion");
	TextDrawBackgroundColor(AyudaT[1], 255);
	TextDrawFont(AyudaT[1], 3);
	TextDrawLetterSize(AyudaT[1], 0.500000, 1.599999);
	TextDrawColor(AyudaT[1], -1);
	TextDrawSetOutline(AyudaT[1], 0);
	TextDrawSetProportional(AyudaT[1], 1);
	TextDrawSetShadow(AyudaT[1], 1);
	TextDrawSetSelectable(AyudaT[1], 1);
	textdrawscount++;

	AyudaT[2] =
	TextDrawCreate(20.000000, 174.000000, "Ayuda Chat");
	TextDrawBackgroundColor(AyudaT[2], 255);
	TextDrawFont(AyudaT[2], 3);
	TextDrawLetterSize(AyudaT[2], 0.500000, 1.699999);
	TextDrawColor(AyudaT[2], -1);
	TextDrawSetOutline(AyudaT[2], 0);
	TextDrawSetProportional(AyudaT[2], 1);
	TextDrawSetShadow(AyudaT[2], 1);
	TextDrawSetSelectable(AyudaT[2], 1);
	textdrawscount++;

	AyudaT[3] =
	TextDrawCreate(20.000000, 205.000000, "Ayuda Lider");
	TextDrawBackgroundColor(AyudaT[3], 255);
	TextDrawFont(AyudaT[3], 3);
	TextDrawLetterSize(AyudaT[3], 0.500000, 1.699999);
	TextDrawColor(AyudaT[3], -1);
	TextDrawSetOutline(AyudaT[3], 0);
	TextDrawSetProportional(AyudaT[3], 1);
	TextDrawSetShadow(AyudaT[3], 1);
	TextDrawSetSelectable(AyudaT[3], 1);
	textdrawscount++;

	AyudaT[4] =
	TextDrawCreate(20.000000, 233.000000, "Ayuda Telefono");
	TextDrawBackgroundColor(AyudaT[4], 255);
	TextDrawFont(AyudaT[4], 3);
	TextDrawLetterSize(AyudaT[4], 0.500000, 1.699999);
	TextDrawColor(AyudaT[4], -1);
	TextDrawSetOutline(AyudaT[4], 0);
	TextDrawSetProportional(AyudaT[4], 1);
	TextDrawSetShadow(AyudaT[4], 1);
	TextDrawSetSelectable(AyudaT[4], 1);
	textdrawscount++;

	AyudaT[5] =
	TextDrawCreate(20.000000, 263.000000, "Ayuda Casa");
	TextDrawBackgroundColor(AyudaT[5], 255);
	TextDrawFont(AyudaT[5], 3);
	TextDrawLetterSize(AyudaT[5], 0.500000, 1.699999);
	TextDrawColor(AyudaT[5], -1);
	TextDrawSetOutline(AyudaT[5], 0);
	TextDrawSetProportional(AyudaT[5], 1);
	TextDrawSetShadow(AyudaT[5], 1);
	TextDrawSetSelectable(AyudaT[5], 1);
	textdrawscount++;

	AyudaT[6] =
	TextDrawCreate(20.000000, 293.000000, "Ayuda Coche");
	TextDrawBackgroundColor(AyudaT[6], 255);
	TextDrawFont(AyudaT[6], 3);
	TextDrawLetterSize(AyudaT[6], 0.500000, 1.699999);
	TextDrawColor(AyudaT[6], -1);
	TextDrawSetOutline(AyudaT[6], 0);
	TextDrawSetProportional(AyudaT[6], 1);
	TextDrawSetShadow(AyudaT[6], 1);
	TextDrawSetSelectable(AyudaT[6], 1);
	textdrawscount++;

	AyudaT[7] =
	TextDrawCreate(20.000000, 320.000000, "Ayuda Banco");
	TextDrawBackgroundColor(AyudaT[7], 255);
	TextDrawFont(AyudaT[7], 3);
	TextDrawLetterSize(AyudaT[7], 0.500000, 1.699999);
	TextDrawColor(AyudaT[7], -1);
	TextDrawSetOutline(AyudaT[7], 0);
	TextDrawSetProportional(AyudaT[7], 1);
	TextDrawSetShadow(AyudaT[7], 1);
	TextDrawSetSelectable(AyudaT[7], 1);
	textdrawscount++;

	AyudaT[8] =
	TextDrawCreate(190.000000, 114.000000, "Ayuda Garaje");
	TextDrawBackgroundColor(AyudaT[8], 255);
	TextDrawFont(AyudaT[8], 3);
	TextDrawLetterSize(AyudaT[8], 0.500000, 1.699999);
	TextDrawColor(AyudaT[8], -1);
	TextDrawSetOutline(AyudaT[8], 0);
	TextDrawSetProportional(AyudaT[8], 1);
	TextDrawSetShadow(AyudaT[8], 1);
	TextDrawSetSelectable(AyudaT[8], 1);
	textdrawscount++;

	AyudaT[9] =
	TextDrawCreate(190.000000, 143.000000, "Ayuda Matrimonio");
	TextDrawBackgroundColor(AyudaT[9], 255);
	TextDrawFont(AyudaT[9], 3);
	TextDrawLetterSize(AyudaT[9], 0.500000, 1.699999);
	TextDrawColor(AyudaT[9], -1);
	TextDrawSetOutline(AyudaT[9], 0);
	TextDrawSetProportional(AyudaT[9], 1);
	TextDrawSetShadow(AyudaT[9], 1);
	TextDrawSetSelectable(AyudaT[9], 1);
	textdrawscount++;

	AyudaT[10] =
	TextDrawCreate(190.000000, 174.000000, "Ayuda Armas");
	TextDrawBackgroundColor(AyudaT[10], 255);
	TextDrawFont(AyudaT[10], 3);
	TextDrawLetterSize(AyudaT[10], 0.500000, 1.699999);
	TextDrawColor(AyudaT[10], -1);
	TextDrawSetOutline(AyudaT[10], 0);
	TextDrawSetProportional(AyudaT[10], 1);
	TextDrawSetShadow(AyudaT[10], 1);
	TextDrawSetSelectable(AyudaT[10], 1);
	textdrawscount++;

	AyudaT[11] =
	TextDrawCreate(190.000000, 203.000000, "Ayuda Negocio");
	TextDrawBackgroundColor(AyudaT[11], 255);
	TextDrawFont(AyudaT[11], 3);
	TextDrawLetterSize(AyudaT[11], 0.500000, 1.699999);
	TextDrawColor(AyudaT[11], -1);
	TextDrawSetOutline(AyudaT[11], 0);
	TextDrawSetProportional(AyudaT[11], 1);
	TextDrawSetShadow(AyudaT[11], 1);
	TextDrawSetSelectable(AyudaT[11], 1);
	textdrawscount++;

	AyudaT[12] =
	TextDrawCreate(190.000000, 233.000000, "Ayuda familia");
	TextDrawBackgroundColor(AyudaT[12], 255);
	TextDrawFont(AyudaT[12], 3);
	TextDrawLetterSize(AyudaT[12], 0.500000, 1.699999);
	TextDrawColor(AyudaT[12], -1);
	TextDrawSetOutline(AyudaT[12], 0);
	TextDrawSetProportional(AyudaT[12], 1);
	TextDrawSetShadow(AyudaT[12], 1);
	TextDrawSetSelectable(AyudaT[12], 1);
	textdrawscount++;

	AyudaT[13] =
	TextDrawCreate(190.000000, 262.000000, "Ayuda Trabajo");
	TextDrawBackgroundColor(AyudaT[13], 255);
	TextDrawFont(AyudaT[13], 3);
	TextDrawLetterSize(AyudaT[13], 0.500000, 1.699999);
	TextDrawColor(AyudaT[13], -1);
	TextDrawSetOutline(AyudaT[13], 0);
	TextDrawSetProportional(AyudaT[13], 1);
	TextDrawSetShadow(AyudaT[13], 1);
	TextDrawSetSelectable(AyudaT[13], 1);
	textdrawscount++;

	AyudaT[14] =
	TextDrawCreate(190.000000, 290.000000, "Salir ayuda");
	TextDrawBackgroundColor(AyudaT[14], 255);
	TextDrawFont(AyudaT[14], 3);
	TextDrawLetterSize(AyudaT[14], 0.500000, 1.699999);
	TextDrawColor(AyudaT[14], -1);
	TextDrawSetOutline(AyudaT[14], 0);
	TextDrawSetProportional(AyudaT[14], 1);
	TextDrawSetShadow(AyudaT[14], 1);
	TextDrawSetSelectable(AyudaT[14], 1);
	textdrawscount++;

/*	AyudaT[15] =
	TextDrawCreate(190.000000, 319.000000, "Ayuda neon");
	TextDrawBackgroundColor(AyudaT[15], 255);
	TextDrawFont(AyudaT[15], 3);
	TextDrawLetterSize(AyudaT[15], 0.500000, 1.699999);
	TextDrawColor(AyudaT[15], -1);
	TextDrawSetOutline(AyudaT[15], 0);
	TextDrawSetProportional(AyudaT[15], 1);
	TextDrawSetShadow(AyudaT[15], 1);
	TextDrawSetSelectable(AyudaT[15], 1);
	textdrawscount++;

	AyudaT[16] =
	TextDrawCreate(374.000000, 113.000000, "Ayuda Garaje");
	TextDrawBackgroundColor(AyudaT[16], 255);
	TextDrawFont(AyudaT[16], 3);
	TextDrawLetterSize(AyudaT[16], 0.500000, 1.699999);
	TextDrawColor(AyudaT[16], -1);
	TextDrawSetOutline(AyudaT[16], 0);
	TextDrawSetProportional(AyudaT[16], 1);
	TextDrawSetShadow(AyudaT[16], 1);
	TextDrawSetSelectable(AyudaT[16], 1);
	textdrawscount++;

	AyudaT[17] =
	TextDrawCreate(374.000000, 142.000000, "Ayuda negocio");
	TextDrawBackgroundColor(AyudaT[17], 255);
	TextDrawFont(AyudaT[17], 3);
	TextDrawLetterSize(AyudaT[17], 0.500000, 1.699999);
	TextDrawColor(AyudaT[17], -1);
	TextDrawSetOutline(AyudaT[17], 0);
	TextDrawSetProportional(AyudaT[17], 1);
	TextDrawSetShadow(AyudaT[17], 1);
	TextDrawSetSelectable(AyudaT[17], 1);
	textdrawscount++;

	AyudaT[18] =
	TextDrawCreate(263.000000, 365.000000, "Salir de la ayuda");
	TextDrawBackgroundColor(AyudaT[18], 255);
	TextDrawFont(AyudaT[18], 3);
	TextDrawLetterSize(AyudaT[18], 0.500000, 1.699999);
	TextDrawColor(AyudaT[18], -1);
	TextDrawSetOutline(AyudaT[18], 0);
	TextDrawSetProportional(AyudaT[18], 1);
	TextDrawSetShadow(AyudaT[18], 1);
	TextDrawSetSelectable(AyudaT[18], 1);
	textdrawscount++; */
	
AyudaX[0] = TextDrawCreate(492.401245, 103.666763, "Menu_de_Ayuda~n~~n~~n~~n~~n~~n~~n~~n~~n~");
TextDrawLetterSize(AyudaX[0], 0.387818, 1.716666);
TextDrawTextSize(AyudaX[0], 0.200000, 277.000000);
TextDrawAlignment(AyudaX[0], 2);
TextDrawColor(AyudaX[0], -1689925209);
TextDrawUseBox(AyudaX[0], 1);
TextDrawBoxColor(AyudaX[0], 826030734);
TextDrawSetOutline(AyudaX[0], 0);
TextDrawBackgroundColor(AyudaX[0], 223);
TextDrawFont(AyudaX[0], 1);
TextDrawSetProportional(AyudaX[0], 1);
TextDrawSetShadow(AyudaX[0], 0);
TextDrawSetSelectable(AyudaX[0], false);

AyudaX[1] = TextDrawCreate(399.634063, 127.583396, "General");
TextDrawLetterSize(AyudaX[1], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[1], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[1], 2);
TextDrawColor(AyudaX[1], -1);
TextDrawUseBox(AyudaX[1], 1);
TextDrawBoxColor(AyudaX[1], -1750292664);
TextDrawSetShadow(AyudaX[1], 0);
TextDrawSetOutline(AyudaX[1], 0);
TextDrawBackgroundColor(AyudaX[1], 255);
TextDrawFont(AyudaX[1], 1);
TextDrawSetProportional(AyudaX[1], 1);
TextDrawSetSelectable(AyudaX[1], true);

AyudaX[2] = TextDrawCreate(399.633972, 158.500000, "Faccion");
TextDrawLetterSize(AyudaX[2], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[2], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[2], 2);
TextDrawColor(AyudaX[2], -1);
TextDrawUseBox(AyudaX[2], 1);
TextDrawBoxColor(AyudaX[2], -1750292664);
TextDrawSetShadow(AyudaX[2], 0);
TextDrawSetOutline(AyudaX[2], 0);
TextDrawBackgroundColor(AyudaX[2], 255);
TextDrawFont(AyudaX[2], 1);
TextDrawSetProportional(AyudaX[2], 1);
TextDrawSetSelectable(AyudaX[2], true);

AyudaX[3] = TextDrawCreate(399.633941, 189.999984, "Vehiculo");
TextDrawLetterSize(AyudaX[3], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[3], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[3], 2);
TextDrawColor(AyudaX[3], -1);
TextDrawUseBox(AyudaX[3], 1);
TextDrawBoxColor(AyudaX[3], -1750292664);
TextDrawSetShadow(AyudaX[3], 0);
TextDrawSetOutline(AyudaX[3], 0);
TextDrawBackgroundColor(AyudaX[3], 255);
TextDrawFont(AyudaX[3], 1);
TextDrawSetProportional(AyudaX[3], 1);
TextDrawSetSelectable(AyudaX[3], true);

AyudaX[4] = TextDrawCreate(492.869506, 127.583320, "Garage");
TextDrawLetterSize(AyudaX[4], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[4], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[4], 2);
TextDrawColor(AyudaX[4], -1);
TextDrawUseBox(AyudaX[4], 1);
TextDrawBoxColor(AyudaX[4], -1750292664);
TextDrawSetShadow(AyudaX[4], 0);
TextDrawSetOutline(AyudaX[4], 0);
TextDrawBackgroundColor(AyudaX[4], 255);
TextDrawFont(AyudaX[4], 1);
TextDrawSetProportional(AyudaX[4], 1);
TextDrawSetSelectable(AyudaX[4], true);

AyudaX[5] = TextDrawCreate(493.338134, 158.499969, "Chat");
TextDrawLetterSize(AyudaX[5], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[5], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[5], 2);
TextDrawColor(AyudaX[5], -1);
TextDrawUseBox(AyudaX[5], 1);
TextDrawBoxColor(AyudaX[5], -1750292664);
TextDrawSetShadow(AyudaX[5], 0);
TextDrawSetOutline(AyudaX[5], 0);
TextDrawBackgroundColor(AyudaX[5], 255);
TextDrawFont(AyudaX[5], 1);
TextDrawSetProportional(AyudaX[5], 1);
TextDrawSetSelectable(AyudaX[5], true);

AyudaX[6] = TextDrawCreate(493.338104, 189.416625, "Lider");
TextDrawLetterSize(AyudaX[6], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[6], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[6], 2);
TextDrawColor(AyudaX[6], -1);
TextDrawUseBox(AyudaX[6], 1);
TextDrawBoxColor(AyudaX[6], -1750292664);
TextDrawSetShadow(AyudaX[6], 0);
TextDrawSetOutline(AyudaX[6], 0);
TextDrawBackgroundColor(AyudaX[6], 255);
TextDrawFont(AyudaX[6], 1);
TextDrawSetProportional(AyudaX[6], 1);
TextDrawSetSelectable(AyudaX[6], true);

AyudaX[7] = TextDrawCreate(585.637084, 127.583320, "Armas");
TextDrawLetterSize(AyudaX[7], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[7], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[7], 2);
TextDrawColor(AyudaX[7], -1);
TextDrawUseBox(AyudaX[7], 1);
TextDrawBoxColor(AyudaX[7], -1750292664);
TextDrawSetShadow(AyudaX[7], 0);
TextDrawSetOutline(AyudaX[7], 0);
TextDrawBackgroundColor(AyudaX[7], 255);
TextDrawFont(AyudaX[7], 1);
TextDrawSetProportional(AyudaX[7], 1);
TextDrawSetSelectable(AyudaX[7], true);

AyudaX[8] = TextDrawCreate(585.637023, 158.500000, "Trabajo");
TextDrawLetterSize(AyudaX[8], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[8], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[8], 2);
TextDrawColor(AyudaX[8], -1);
TextDrawUseBox(AyudaX[8], 1);
TextDrawBoxColor(AyudaX[8], -1750292664);
TextDrawSetShadow(AyudaX[8], 0);
TextDrawSetOutline(AyudaX[8], 0);
TextDrawBackgroundColor(AyudaX[8], 255);
TextDrawFont(AyudaX[8], 1);
TextDrawSetProportional(AyudaX[8], 1);
TextDrawSetSelectable(AyudaX[8], true);

AyudaX[9] = TextDrawCreate(585.637084, 188.833297, "Negocio");
TextDrawLetterSize(AyudaX[9], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[9], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[9], 2);
TextDrawColor(AyudaX[9], -1);
TextDrawUseBox(AyudaX[9], 1);
TextDrawBoxColor(AyudaX[9], -1750292664);
TextDrawSetShadow(AyudaX[9], 0);
TextDrawSetOutline(AyudaX[9], 0);
TextDrawBackgroundColor(AyudaX[9], 255);
TextDrawFont(AyudaX[9], 1);
TextDrawSetProportional(AyudaX[9], 1);
TextDrawSetSelectable(AyudaX[9], true);

AyudaX[10] = TextDrawCreate(400.102722, 220.916595, "Familia");
TextDrawLetterSize(AyudaX[10], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[10], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[10], 2);
TextDrawColor(AyudaX[10], -1);
TextDrawUseBox(AyudaX[10], 1);
TextDrawBoxColor(AyudaX[10], -1750292664);
TextDrawSetShadow(AyudaX[10], 0);
TextDrawSetOutline(AyudaX[10], 0);
TextDrawBackgroundColor(AyudaX[10], 255);
TextDrawFont(AyudaX[10], 1);
TextDrawSetProportional(AyudaX[10], 1);
TextDrawSetSelectable(AyudaX[10], true);

AyudaX[11] = TextDrawCreate(493.338592, 220.916625, "Banco");
TextDrawLetterSize(AyudaX[11], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[11], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[11], 2);
TextDrawColor(AyudaX[11], -1);
TextDrawUseBox(AyudaX[11], 1);
TextDrawBoxColor(AyudaX[11], -1750292664);
TextDrawSetShadow(AyudaX[11], 0);
TextDrawSetOutline(AyudaX[11], 0);
TextDrawBackgroundColor(AyudaX[11], 255);
TextDrawFont(AyudaX[11], 1);
TextDrawSetProportional(AyudaX[11], 1);
TextDrawSetSelectable(AyudaX[11], true);

AyudaX[12] = TextDrawCreate(585.168701, 220.333282, "Casa");
TextDrawLetterSize(AyudaX[12], 0.307700, 1.477499);
TextDrawTextSize(AyudaX[12], 5.500000, 82.000000);
TextDrawAlignment(AyudaX[12], 2);
TextDrawColor(AyudaX[12], -1);
TextDrawUseBox(AyudaX[12], 1);
TextDrawBoxColor(AyudaX[12], -1750292664);
TextDrawSetShadow(AyudaX[12], 0);
TextDrawSetOutline(AyudaX[12], 0);
TextDrawBackgroundColor(AyudaX[12], 255);
TextDrawFont(AyudaX[12], 1);
TextDrawSetProportional(AyudaX[12], 1);
TextDrawSetSelectable(AyudaX[12], true);

AyudaX[13] = TextDrawCreate(352.781616, 95.500061, "X");
TextDrawLetterSize(AyudaX[13], 0.418740, 1.401667);
TextDrawTextSize(AyudaX[13], 3.500000, 20.000000); // -20.
TextDrawAlignment(AyudaX[13], 2);
TextDrawColor(AyudaX[13], -1);
TextDrawUseBox(AyudaX[13], 1);
TextDrawBoxColor(AyudaX[13], -1626077697);
TextDrawSetShadow(AyudaX[13], 0);
TextDrawSetOutline(AyudaX[13], 0);
TextDrawBackgroundColor(AyudaX[13], 255);
TextDrawFont(AyudaX[13], 1);
TextDrawSetProportional(AyudaX[13], 1);
TextDrawSetSelectable(AyudaX[13], true);

AyudaX[14] = TextDrawCreate(492.869598, 254.166687, "/salirayuda_-_/soporte_-_/informacion");
TextDrawLetterSize(AyudaX[14], 0.387818, 1.716666);
TextDrawTextSize(AyudaX[14], 7.500000, 277.000000);
TextDrawAlignment(AyudaX[14], 2);
TextDrawColor(AyudaX[14], -1689925209);
TextDrawUseBox(AyudaX[14], 1);
TextDrawBoxColor(AyudaX[14], 826030734);
TextDrawSetShadow(AyudaX[14], 0);
TextDrawSetOutline(AyudaX[14], 0);
TextDrawBackgroundColor(AyudaX[14], 223);
TextDrawFont(AyudaX[14], 1);
TextDrawSetProportional(AyudaX[14], 1);
TextDrawSetSelectable(AyudaX[14], true);

	
	
	//********************
	//*******************TextDraws*******************
	box =
	TextDrawCreate			(199.000000, 182.000000, "_");
	TextDrawBackgroundColor (box, 255);
	TextDrawFont			(box, 2);
	TextDrawLetterSize		(box, 1.200000, 8.000000);
	TextDrawColor			(box, -1);
	TextDrawSetOutline		(box, 0);
	TextDrawSetProportional	(box, 1);
	TextDrawSetShadow		(box, 1);
	TextDrawUseBox			(box, 1);
	TextDrawBoxColor		(box, 75);
	TextDrawTextSize		(box, 436.000000, 90.000000);
	textdrawscount++;

	cargando =
	TextDrawCreate			(232.000000, 192.000000, "CARGANDO");
	TextDrawBackgroundColor	(cargando, 255);
	TextDrawFont			(cargando, 2);
	TextDrawLetterSize		(cargando, 0.800000, 3.000000);
	TextDrawColor			(cargando, -1);
	TextDrawSetOutline		(cargando, 0);
	TextDrawSetProportional	(cargando, 1);
	TextDrawSetShadow		(cargando, 1);
	textdrawscount++;

	looking =
	TextDrawCreate			(203.000000, 223.000000, "CARGANDO CUENTA, ESPERA POR FAVOR.");
	TextDrawBackgroundColor	(looking, 255);
	TextDrawFont			(looking, 2);
	TextDrawLetterSize		(looking, 0.260000, 1.000000);
	TextDrawColor			(looking, -1);
	TextDrawSetOutline		(looking, 0);
	TextDrawSetProportional	(looking, 1);
	TextDrawSetShadow		(looking, 1);
	textdrawscount++;

	streamer =
	TextDrawCreate(210.000000, 214.000000, "CARGANDO OBJETOS ESPERA POR FAVOR");
	TextDrawBackgroundColor	(streamer, 255);
	TextDrawFont			(streamer, 2);
	TextDrawLetterSize		(streamer, 0.260000, 1.300000);
	TextDrawColor			(streamer, -1);
	TextDrawSetOutline		(streamer, 0);
	TextDrawSetProportional	(streamer, 1);
	TextDrawSetShadow		(streamer, 1);
	textdrawscount++;

	LoginMenu[0] =
	TextDrawCreate(650.000000, 340.000000, "_"); // Film 2
	TextDrawBackgroundColor(LoginMenu[0], 250);
	TextDrawFont(LoginMenu[0], 1);
	TextDrawLetterSize(LoginMenu[0], 0.000000, 27.400001);
	TextDrawColor(LoginMenu[0], -1);
	TextDrawSetOutline(LoginMenu[0], 0);
	TextDrawSetProportional(LoginMenu[0], 1);
	TextDrawSetShadow(LoginMenu[0], 1);
	TextDrawUseBox(LoginMenu[0], 1);
	TextDrawBoxColor(LoginMenu[0], 0x00000044);
	TextDrawTextSize(LoginMenu[0], -39.000000, 53.000000);
	textdrawscount++;

	LoginMenu[1] =
	TextDrawCreate(650.000000, -110.000000, "_"); // Film 1
	TextDrawBackgroundColor(LoginMenu[1], 250);
	TextDrawFont(LoginMenu[1], 1);
	TextDrawLetterSize(LoginMenu[1], 0.000000, 27.400001);
	TextDrawColor(LoginMenu[1], -1);
	TextDrawSetOutline(LoginMenu[1], 0);
	TextDrawSetProportional(LoginMenu[1], 1);
	TextDrawSetShadow(LoginMenu[1], 1);
	TextDrawUseBox(LoginMenu[1], 1);
	TextDrawBoxColor(LoginMenu[1], 0x00000044);
	TextDrawTextSize(LoginMenu[1], -39.000000, 53.000000);
	textdrawscount++;

	LoginMenu[2] =
	TextDrawCreate(0.000000, 141.000000, "~b~_"); // ARRIBA
	TextDrawBackgroundColor(LoginMenu[2], 255);
	TextDrawFont(LoginMenu[2], 1);
	TextDrawLetterSize(LoginMenu[2], 0.500000, -0.100000);
	TextDrawColor(LoginMenu[2], -1);
	TextDrawSetOutline(LoginMenu[2], 0);
	TextDrawSetProportional(LoginMenu[2], 1);
	TextDrawSetShadow(LoginMenu[2], 1);
	TextDrawUseBox(LoginMenu[2], 1);
	TextDrawBoxColor(LoginMenu[2], 0x05FF1244);
	TextDrawTextSize(LoginMenu[2], 666.000000, -134.000000);
	textdrawscount++;

	LoginMenu[3] =
	TextDrawCreate(0.000000, 337.000000, "~b~_"); // Extra Abajo
	TextDrawBackgroundColor(LoginMenu[3], 255);
	TextDrawFont(LoginMenu[3], 1);
	TextDrawLetterSize(LoginMenu[3], 0.500000, -0.100000);
	TextDrawColor(LoginMenu[3], -1);
	TextDrawSetOutline(LoginMenu[3], 0);
	TextDrawSetProportional(LoginMenu[3], 1);
	TextDrawSetShadow(LoginMenu[3], 1);
	TextDrawUseBox(LoginMenu[3], 1);
	TextDrawBoxColor(LoginMenu[3], 0x05FF1244);
	TextDrawTextSize(LoginMenu[3], 666.000000, -134.000000);
    textdrawscount++;

   	LoginMenu[4] =
 	TextDrawCreate(216.444549, 41.315570, "INFRANET~n~__ROLPLAY");
	TextDrawLetterSize(LoginMenu[4], 0.882889, 3.033599);
	TextDrawAlignment(LoginMenu[4], 1);
	TextDrawColor(LoginMenu[4], -1);
	TextDrawSetShadow(LoginMenu[4], 0);
	TextDrawSetOutline(LoginMenu[4], 2);
	TextDrawBackgroundColor(LoginMenu[4], 51);
	TextDrawFont(LoginMenu[4], 3);
	TextDrawSetProportional(LoginMenu[4], 1);
	textdrawscount++;

	LoginMenu[6] =
	TextDrawCreate(191.000000, 382.000000, "                        ~b~infranet.foroactivo.com");
	TextDrawAlignment(LoginMenu[6], 2);
	TextDrawBackgroundColor(LoginMenu[6], 255);
	TextDrawFont(LoginMenu[6], 2);
	TextDrawLetterSize(LoginMenu[6], 0.770000, 2.000000);
	TextDrawColor(LoginMenu[6], 0x05FF1244);
	TextDrawSetOutline(LoginMenu[6], 0);
	TextDrawSetProportional(LoginMenu[6], 1);
	TextDrawSetShadow(LoginMenu[6], 1);
    textdrawscount++;

	LoginMenu[7] =
	TextDrawCreate(369.000000, 412.000000, "~b~Version "SERVER_GM_TEXT" ~w~Los santos");
	TextDrawAlignment(LoginMenu[7], 2);
	TextDrawBackgroundColor(LoginMenu[7], 255);
	TextDrawFont(LoginMenu[7], 2);
	TextDrawLetterSize(LoginMenu[7], 0.770000, 2.000000);
	TextDrawColor(LoginMenu[7], 0x05FF1244);
	TextDrawSetOutline(LoginMenu[7], 0);
	TextDrawSetProportional(LoginMenu[7], 1);
	TextDrawSetShadow(LoginMenu[7], 1);
	textdrawscount++;

	LoginMenu[8] =
	TextDrawCreate(315.000000, 111.000000, "~b~Usuarios Conectados: ~w~0");
	TextDrawAlignment(LoginMenu[8], 2);
	TextDrawBackgroundColor(LoginMenu[8], 255);
	TextDrawFont(LoginMenu[8], 2);
	TextDrawLetterSize(LoginMenu[8], 0.400000, 2.299999);
	TextDrawColor(LoginMenu[8], 0x05FF1244);
	TextDrawSetOutline(LoginMenu[8], 0);
	TextDrawSetProportional(LoginMenu[8], 1);
	TextDrawSetShadow(LoginMenu[8], 1);
	textdrawscount++;

	MOTD =
	TextDrawCreate(319.000000, 348.000000, "Bienvenidos a INFRANET, recuerda rolear al máximo, invita a tus amigos.");
	TextDrawAlignment(MOTD, 2);
	TextDrawBackgroundColor(MOTD, 255);
	TextDrawFont(MOTD, 2);
	TextDrawLetterSize(MOTD, 0.200000, 1.299999);
	TextDrawColor(MOTD, -1);
	TextDrawSetOutline(MOTD, 0);
	TextDrawSetProportional(MOTD, 1);
	TextDrawSetShadow(MOTD, 1);
	textdrawscount++;

	TutTxt[1] =
	TextDrawCreate(236.000000, 41.000000, "INFRANET");
	TextDrawBackgroundColor(TutTxt[1], 255);
	TextDrawFont(TutTxt[1], 2);
	TextDrawLetterSize(TutTxt[1], 1.000000, 1.799999);
	TextDrawColor(TutTxt[1], -1);
	TextDrawSetOutline(TutTxt[1], 1);
	TextDrawSetProportional(TutTxt[1], 1);
	TextDrawSetSelectable(TutTxt[1], 0);

	TutTxt[2] =
	TextDrawCreate(394.000000, 390.000000, "Presiona: ~w~'Y'");
	TextDrawBackgroundColor(TutTxt[2], 0x000000cc);
	TextDrawFont(TutTxt[2], 3);
	TextDrawLetterSize(TutTxt[2], 1.000000, 1.400000);
	TextDrawColor(TutTxt[2], 0x00C200FF);
	TextDrawSetOutline(TutTxt[2], 1);
	TextDrawSetProportional(TutTxt[2], 1);
	TextDrawSetShadow(TutTxt[2], 1);
	textdrawscount++;

	txtAnimHelper =
	TextDrawCreate(610.0, 400.0, "Presione (ESPACIO) ~w~Para Detener La Animacion");
    TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0);
	TextDrawSetOutline(txtAnimHelper,1);
	TextDrawBackgroundColor(txtAnimHelper,255);
	TextDrawColor(txtAnimHelper,0x00C200FF);
	TextDrawAlignment(txtAnimHelper,3);

	NewStaterp =
	TextDrawCreate(38.000000, 319.000000, "~b~INFRANET - RP ~w~ ");
    TextDrawBackgroundColor(NewStaterp, 255);
    TextDrawFont(NewStaterp, 3);
    TextDrawLetterSize(NewStaterp, 0.519999, 1.499991);
    TextDrawColor(NewStaterp, 0x00C200FF);
    TextDrawSetOutline(NewStaterp, 0);
    TextDrawSetProportional(NewStaterp, 1);
    TextDrawSetShadow(NewStaterp, 1);
    textdrawscount++;

    /*ACRPVERSION =
    TextDrawCreate(498.000000,101.000000,"~b~Version: ~w~2.0");
    TextDrawBackgroundColor(ACRPVERSION, 255);
    TextDrawFont(ACRPVERSION, 3);
    TextDrawLetterSize(ACRPVERSION, 0.399999,1.400000);
    TextDrawColor(ACRPVERSION, 0x00C200FF);
    TextDrawSetOutline(ACRPVERSION, 1);
    TextDrawSetProportional(ACRPVERSION, 1);
    TextDrawSetShadow(ACRPVERSION, 1);
    textdrawscount++;*/

    FechaD = TextDrawCreate(500.000000, 14.000000, "12 de diciembre del 2015");
	TextDrawBackgroundColor(FechaD, 255);
	TextDrawFont(FechaD, 2);
	TextDrawLetterSize(FechaD, 0.190000, 1.000000);
	TextDrawColor(FechaD, -572596481);
	TextDrawSetOutline(FechaD, 1);
	TextDrawSetProportional(FechaD, 1);
	TextDrawSetSelectable(FechaD, 0);

	TiempoD = TextDrawCreate(545.000000, 21.000000, "17:37:35");
	TextDrawBackgroundColor(TiempoD, 255);
	TextDrawFont(TiempoD, 2);
	TextDrawLetterSize(TiempoD, 0.350000, 1.900000);
	TextDrawColor(TiempoD, -572596481);
	TextDrawSetOutline(TiempoD, 1);
	TextDrawSetProportional(TiempoD, 1);
	TextDrawSetSelectable(TiempoD, 0);
	SetTimer("Clock",1000,true);

	// Speedo nuevo.
	
	/*Fondoline = TextDrawCreate(592.664306, 339.916839, "~n~~n~~n~~n~~n~");
	TextDrawLetterSize(Fondoline, 0.401874, 1.600000);
	TextDrawTextSize(Fondoline, 0.000000, 93.000000);
	TextDrawAlignment(Fondoline, 2);
	TextDrawColor(Fondoline, 945553160);
	TextDrawUseBox(Fondoline, 1);
	TextDrawBoxColor(Fondoline, -1549736135);
	TextDrawSetShadow(Fondoline, 0);
	TextDrawSetOutline(Fondoline, 0);
	TextDrawBackgroundColor(Fondoline, 1911520138);
	TextDrawFont(Fondoline, 1);
	TextDrawSetProportional(Fondoline, 1);
	TextDrawSetShadow(Fondoline, 0);*/

	Underline = TextDrawCreate(607.571594, 397.446624, "-");
	TextDrawLetterSize(Underline, 0.000000, -0.212750);
	TextDrawTextSize(Underline, 537.428588, 0.000000);
	TextDrawAlignment(Underline, 1);
	TextDrawColor(Underline, 0xFFFFFFAA);
	TextDrawUseBox(Underline, true);
	TextDrawBoxColor(Underline, -1);
	TextDrawSetShadow(Underline, 0);
	TextDrawSetOutline(Underline, 0);
	TextDrawFont(Underline, 0);
	textdrawscount++;

    KMH = TextDrawCreate(571.428955, 416.426666, "KM/H");
	TextDrawLetterSize(KMH, 0.318951, 1.070932);
	TextDrawAlignment(KMH, 1);
	TextDrawColor(KMH, -1);
	TextDrawSetShadow(KMH, 0);
	TextDrawSetOutline(KMH, 1);
	TextDrawBackgroundColor(KMH, 51);
	TextDrawFont(KMH, 2);
	TextDrawSetProportional(KMH, 1);
	textdrawscount++;
	
	flash =
	TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flash,1);
	TextDrawBoxColor(flash,0xffffff66);
	TextDrawTextSize(flash,660.000000,22.000000);
	TextDrawAlignment(flash,0);
	TextDrawBackgroundColor(flash,0x000000ff);
	TextDrawFont(flash,3);
	TextDrawLetterSize(flash,1.000000,52.200000);
	TextDrawColor(flash,0xffffffff);
	TextDrawSetOutline(flash,1);
	TextDrawSetProportional(flash,1);
	TextDrawSetShadow(flash,1);
	textdrawscount++;
	
	flashback =
	TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flashback,1);
	TextDrawBoxColor(flashback,0x000000FF);
	TextDrawTextSize(flashback,660.000000,22.000000);
	TextDrawAlignment(flashback,0);
	TextDrawBackgroundColor(flashback,0x000000FF);
	TextDrawFont(flashback,3);
	TextDrawLetterSize(flashback,1.000000,52.200000);
	TextDrawColor(flashback,0x000000FF);
	TextDrawSetOutline(flashback,1);
	TextDrawSetProportional(flashback,1);
	TextDrawSetShadow(flashback,1);
	textdrawscount++;
	
    for(new i = 0; i<MAX_PLAYERS; i++) //
	{
 		VehicleNameX[i] = TextDrawCreate(538.285278, 396.800018, " ");
		TextDrawLetterSize(VehicleNameX[i], 0.206952, 1.130664);
		TextDrawAlignment(VehicleNameX[i], 1);
		TextDrawColor(VehicleNameX[i], -1);
		TextDrawSetShadow(VehicleNameX[i], 0);
		TextDrawSetOutline(VehicleNameX[i], 1);
		TextDrawBackgroundColor(VehicleNameX[i], 51);
		TextDrawFont(VehicleNameX[i], 2);
		TextDrawSetProportional(VehicleNameX[i], 1);

		VehicleHealth[i] = TextDrawCreate(570.284912, 407.466613, " ");
		TextDrawLetterSize(VehicleHealth[i], 0.261808, 1.151998);
		TextDrawAlignment(VehicleHealth[i], 1);
		TextDrawColor(VehicleHealth[i], -1);
		TextDrawSetShadow(VehicleHealth[i], 0);
		TextDrawSetOutline(VehicleHealth[i], 1);
		TextDrawBackgroundColor(VehicleHealth[i], 51);
		TextDrawFont(VehicleHealth[i], 2);
		TextDrawSetProportional(VehicleHealth[i], 1);

		VehicleSpeed[i] = TextDrawCreate(537.903259, 402.346588, " ");
		TextDrawLetterSize(VehicleSpeed[i], 0.435141, 2.909866);
		TextDrawAlignment(VehicleSpeed[i], 1);
		TextDrawColor(VehicleSpeed[i], -1);
		TextDrawSetShadow(VehicleSpeed[i], 0);
		TextDrawSetOutline(VehicleSpeed[i], 1);
		TextDrawBackgroundColor(VehicleSpeed[i], 51);
		TextDrawFont(VehicleSpeed[i], 2);
		TextDrawSetProportional(VehicleSpeed[i], 1);

		Title[i] = TextDrawCreate(539.428588, 383.573211, " ");
		TextDrawLetterSize(Title[i], 0.217999, 1.288532);
		TextDrawAlignment(Title[i], 1);
		TextDrawColor(Title[i], -1);
		TextDrawSetShadow(Title[i], 0);
		TextDrawSetOutline(Title[i], 1);
		TextDrawBackgroundColor(Title[i], 51);
		TextDrawFont(Title[i], 2);
		TextDrawSetProportional(Title[i], 1);
	
		TextTut[i] =
		TextDrawCreate(300.000000, 240.000000, "Inicio del Tutorial"); // 8.0 y 218.0
    	TextDrawBackgroundColor(TextTut[i], 255);
  	  	TextDrawAlignment(TextTut[i], 2); // En el Centro.
 		TextDrawUseBox(TextTut[i], 1); // Usar una caja.
		TextDrawFont(TextTut[i], 1); // Antes era 2.
		TextDrawLetterSize(TextTut[i], 0.35, 2.5);
		TextDrawColor(TextTut[i], -1);
		TextDrawSetOutline(TextTut[i], 1);
		TextDrawSetProportional(TextTut[i], 1);
		TextDrawSetSelectable(TextTut[i], 0);

		Experiencia[i] =
		TextDrawCreate(547.000000, 57.000000, "Nvl 1 Exp 0 / 16");    ////sistema experiencia
		TextDrawBackgroundColor(Experiencia[i], 255);
		TextDrawFont(Experiencia[i], 1);
		TextDrawLetterSize(Experiencia[i], 0.229999, 0.600000);
		TextDrawColor(Experiencia[i], -1);
		TextDrawSetOutline(Experiencia[i], 0);
		TextDrawSetProportional(Experiencia[i], 1);
		TextDrawSetShadow(Experiencia[i], 1);
		textdrawscount++;
	}

//**************************************Autos**************************************
// TREN:
TrenVEH[0] = AddStaticVehicleEx(538,1700.7551,-1953.6531,14.8756,200.0,-1,-1, 10); // Train 143-146
// Remolques:
AddStaticVehicleEx(435, 1946.5739, -2649.3745, 13.9858, 0.0000, -1, -1, TIME_RESPAWN); // Aero LS.
AddStaticVehicleEx(450, 1956.5739, -2649.3745, 13.9858, 0.0000, -1, -1, TIME_RESPAWN); // Aero LS.
AddStaticVehicleEx(584, 1966.5739, -2649.3745, 14.2818, 0.0000, -1, -1, TIME_RESPAWN); // Aero LS.
AddStaticVehicleEx(591, 1976.5739, -2649.3745, 13.9858, 0.0000, -1, -1, TIME_RESPAWN); // Aero LS.
// Bicicletas.
CreateVehicle(481, 2485.6311, -1743.8325, 13.0179, 90.0000, -1, -1, 100);
CreateVehicle(481, 2485.6311, -1745.8325, 13.0179, 90.0000, -1, -1, 100);
CreateVehicle(481, 2485.6311, -1747.8325, 13.0179, 90.0000, -1, -1, 100);
CreateVehicle(481, 2485.6311, -1749.8325, 13.0179, 90.0000, -1, -1, 100);
CreateVehicle(481, 2485.6311, -1751.8325, 13.0179, 90.0000, -1, -1, 100);
CreateVehicle(481, 2485.6311, -1753.8325, 13.0179, 90.0000, -1, -1, 100);
CreateVehicle(510, 1925.0000, -1415.1907, 13.1196, 0.0000, -1, -1, 100);
CreateVehicle(510, 1922.1886, -1415.3033, 13.1196, 0.0000, -1, -1, 100);
CreateVehicle(510, 1910.2361, -1415.7145, 13.1196, 0.0000, -1, -1, 100);
CreateVehicle(510, 1919.3958, -1415.4869, 13.1196, 0.0000, -1, -1, 100);
CreateVehicle(510, 1916.3997, -1415.6018, 13.1196, 0.0000, -1, -1, 100);
CreateVehicle(510, 1913.3188, -1415.8076, 13.1196, 0.0000, -1, -1, 100);
CreateVehicle(509, 448.2928, -1800.9081, 4.9982, 180.0000, -1, -1, 100);
CreateVehicle(509, 446.2928, -1800.9081, 4.9982, 180.0000, -1, -1, 100);
CreateVehicle(509, 444.2928, -1800.9081, 4.9982, 180.0000, -1, -1, 100);
CreateVehicle(509, 442.2928, -1800.9081, 4.9982, 180.0000, -1, -1, 100);
CreateVehicle(509, 1366.0000, -1682.0000, 12.9824, 90.0000, -1, -1, 100);
CreateVehicle(509, 1366.0000, -1680.0000, 12.9824, 90.0000, -1, -1, 100);
CreateVehicle(509, 1366.0000, -1678.0000, 12.9824, 90.0000, -1, -1, 100);
CreateVehicle(509, 1366.0000, -1676.0000, 12.9824, 90.0000, -1, -1, 100);

//SAPD
//San Andreas Police Departament Cars. (50).
// 32 Vehículos en LSPD, Los Santos.
SAPD_Vehicle[0] = AddStaticVehicleEx(596, 1595.5118, -1710.7695, 5.6137, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[1] = AddStaticVehicleEx(596, 1591.6061, -1710.7712, 5.6265, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[2] = AddStaticVehicleEx(596, 1587.4557, -1710.7728, 5.6485, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[3] = AddStaticVehicleEx(596, 1583.6981, -1710.7733, 5.6485, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[4] = AddStaticVehicleEx(599, 1526.5481, -1644.4796, 6.0562, 180.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[5] = AddStaticVehicleEx(599, 1530.4292, -1644.5054, 6.1242, 180.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[6] = AddStaticVehicleEx(599, 1534.4344, -1644.5308, 6.1335, 180.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[7] = AddStaticVehicleEx(599, 1538.7587, -1644.5583, 6.1560, 180.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[8] = AddStaticVehicleEx(427, 1571.0710, -1615.4928, 13.5147, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[9] = AddStaticVehicleEx(427, 1561.2168, -1615.4635, 13.5148, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[10] = AddStaticVehicleEx(601, 1544.5381, -1609.6235, 13.1412, 270.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[11] = AddStaticVehicleEx(497, 1563.6600, -1655.2122, 28.5897, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[12] = AddStaticVehicleEx(596, 1535.9159, -1667.8387, 13.1292, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[13] = AddStaticVehicleEx(596, 1535.8901, -1677.3420, 13.1263, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[14] = AddStaticVehicleEx(596, 1578.5010, -1710.9355, 5.6371, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[15] = AddStaticVehicleEx(596, 1574.3030, -1710.9478, 5.6381, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[16] = AddStaticVehicleEx(523, 1558.0000, -1713.1907, 5.4604, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[17] = AddStaticVehicleEx(601, 1544.6089, -1613.6875, 13.1416, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[18] = AddStaticVehicleEx(497, 1560.5781, -1644.7632, 28.5767, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[19] = AddStaticVehicleEx(579, 1545.7762, -1680.3152, 5.6620, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[20] = AddStaticVehicleEx(415, 1545.7765, -1676.0908, 5.5960, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[21] = AddStaticVehicleEx(560, 1545.8765, -1671.9449, 5.5957, 90.0000, 0,1,TIME_RESPAWN);
////////////////////////////////////////////////////////////////////////////////
SAPD_Vehicle[22] = AddStaticVehicleEx(428, 1545.8265, -1684.3949, 5.7971, 90.0000, 0,1,TIME_RESPAWN);
misil = CreateObject(3267,0,0,-1000,0,0,0);
AttachObjectToVehicle(misil, SAPD_Vehicle[22], 0.000000,-1.275000,0.974999,0.000000,0.000000,0.000000);
////////////////////////////////////////////////////////////////////////////////
SAPD_Vehicle[23] = AddStaticVehicleEx(421, 1545.4735, -1667.7288, 5.7731, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[24] = AddStaticVehicleEx(426, 1545.6824, -1662.9381, 5.6339, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[25] = AddStaticVehicleEx(523, 1560.0000, -1713.1907, 5.4604, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[26] = AddStaticVehicleEx(523, 1562.0000, -1713.1907, 5.4604, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[27] = AddStaticVehicleEx(525, 1585.3229, -1671.6707, 5.6866, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[28] = AddStaticVehicleEx(525, 1585.3229, -1667.4867, 5.6866, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[29] = AddStaticVehicleEx(523, 1562.0000, -1708.1907, 5.4604, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[30] = AddStaticVehicleEx(523, 1560.0000, -1708.1907, 5.4604, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[31] = AddStaticVehicleEx(523, 1558.0000, -1708.1907, 5.4604, 0.0000, 0,1,TIME_RESPAWN);
// 2 Vehículos Palomino.
SAPD_Vehicle[32] = AddStaticVehicleEx(599, 2308.5000, 121.0239, 26.3664, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[33] = AddStaticVehicleEx(599, 2308.5000, 117.1640, 26.3664, 90.0000, 0,1,TIME_RESPAWN);
// 4 Vehículos Dillmore.
SAPD_Vehicle[34] = AddStaticVehicleEx(596, 631.2089, -610.3391, 16.0564, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[35] = AddStaticVehicleEx(596, 634.9767, -610.3834, 16.0564, 0.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[36] = AddStaticVehicleEx(599, 613.5255, -601.5044, 17.2500, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[37] = AddStaticVehicleEx(599, 613.0554, -597.0876, 17.2500, -90.0000, 0,1,TIME_RESPAWN);
// 12 Vehículos SAPD - Parking Adicional.
SAPD_Vehicle[38] = AddStaticVehicleEx(598, 1491.1500, -1652.5189, 2003.6443, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[39] = AddStaticVehicleEx(596, 1491.1500, -1667.6531, 2003.6443, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[40] = AddStaticVehicleEx(598, 1491.1500, -1657.6632, 2003.6443, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[41] = AddStaticVehicleEx(596, 1491.1500, -1662.6464, 2003.6443, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[42] = AddStaticVehicleEx(599, 1491.1500, -1647.4679, 2003.9999, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[43] = AddStaticVehicleEx(599, 1491.1500, -1642.3418, 2003.9999, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[44] = AddStaticVehicleEx(560, 1470.3737, -1667.6038, 2003.5177, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[45] = AddStaticVehicleEx(560, 1470.3737, -1662.5306, 2003.5177, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[46] = AddStaticVehicleEx(415, 1470.3737, -1657.5032, 2003.6262, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[47] = AddStaticVehicleEx(411, 1470.3737, -1642.3955, 2003.6262, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[48] = AddStaticVehicleEx(415, 1470.3737, -1652.4214, 2003.6262, -90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[49] = AddStaticVehicleEx(411, 1470.3737, -1647.4246, 2003.6262, -90.0000, 0,1,TIME_RESPAWN);
// + 2 Adicionales.
SAPD_Vehicle[50] = AddStaticVehicleEx(598, 1576.2777, -1715.4741, 4984.6270, 90.0000, 0,1,TIME_RESPAWN);
SAPD_Vehicle[51] = AddStaticVehicleEx(598, 1576.2777, -1720.4741, 4984.6270, 90.0000, 0,1,TIME_RESPAWN);
//FBI
FBI_Vehicle[0] = AddStaticVehicleEx(421,278.43112183,-1535.99670410,24.54375076,236.00000000,0,0,TIME_RESPAWN); //Elegant
FBI_Vehicle[1] = AddStaticVehicleEx(421,281.64566040,-1531.28723145,24.54375076,233.99731445,0,0,TIME_RESPAWN); //Elegant
FBI_Vehicle[2] = AddStaticVehicleEx(421,284.66522217,-1526.72875977,24.54375076,235.99731445,0,0,TIME_RESPAWN); //Elegant
FBI_Vehicle[3] = AddStaticVehicleEx(421,287.99291992,-1521.94006348,24.54375076,233.99230957,0,0,TIME_RESPAWN); //Elegant
FBI_Vehicle[4] = AddStaticVehicleEx(490,290.92388916,-1517.69372559,24.78887749,236.00000000,-1,-1,TIME_RESPAWN); //FBI Rancher
FBI_Vehicle[5] = AddStaticVehicleEx(490,294.15356445,-1512.93969727,24.78887749,235.99731445,-1,-1,TIME_RESPAWN); //FBI Rancher
FBI_Vehicle[6] = AddStaticVehicleEx(490,297.35870361,-1508.31335449,24.78887749,235.99731445,-1,-1,TIME_RESPAWN); //FBI Rancher
FBI_Vehicle[7] = AddStaticVehicleEx(490,300.32995605,-1504.01623535,24.78887749,235.99731445,-1,-1,TIME_RESPAWN); //FBI Rancher
FBI_Vehicle[8] = AddStaticVehicleEx(528,300.04907227,-1490.36193848,24.65375137,235.50000000,-1,-1,TIME_RESPAWN); //FBI Truck
FBI_Vehicle[9] = AddStaticVehicleEx(528,306.08950806,-1481.64025879,24.62875175,235.49743652,-1,-1,TIME_RESPAWN); //FBI Truck
FBI_Vehicle[10] = AddStaticVehicleEx(521,297.53024292,-1536.71789551,24.25412750,50.00000000,0,0,TIME_RESPAWN); //FCR-900
FBI_Vehicle[11] = AddStaticVehicleEx(560,295.46044922,-1540.92248535,24.32372665,54.00000000,0,0,TIME_RESPAWN); //Sultan
FBI_Vehicle[12] = AddStaticVehicleEx(560,302.93893433,-1485.83496094,24.39872551,233.99774170,0,0,TIME_RESPAWN); //Sultan
FBI_Vehicle[13] = AddStaticVehicleEx(487,319.66525269,-1508.03454590,77.93007660,232.00000000,0,0,TIME_RESPAWN); //Maverick
FBI_Vehicle[14] = AddStaticVehicleEx(487,339.3534,-1485.7954,76.7156,220.2925,0,0,TIME_RESPAWN); //Maverick
FBI_Vehicle[15] = AddStaticVehicleEx(487,301.4234,-1532.7819,76.6724,246.3760,0,0,TIME_RESPAWN); //Maverick
//SAEM
//SAEM

SAEM_Vehicle[0] = AddStaticVehicleEx(548, 2745.0000, -2538.7368, 15.4512, -90.0000, 245, 235, TIME_RESPAWN);
SetVehicleHealth(SAEM_Vehicle[0], 5000); // Cargogob.
SAEM_Vehicle[1] = AddStaticVehicleEx(548, 2745.0000, -2520.5000, 15.4512, -90.0000, 245, 235, TIME_RESPAWN);
SetVehicleHealth(SAEM_Vehicle[1], 5000); // Cargogob 2.
SAEM_Vehicle[2] = AddStaticVehicleEx(470, 2775.0000, -2475.0000, 13.3500, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[3] = AddStaticVehicleEx(470, 2775.0000, -2470.0000, 13.3500, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[4] = AddStaticVehicleEx(598, 2775.0000, -2465.0000, 13.3500, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[5] = AddStaticVehicleEx(598, 2775.0000, -2460.0000, 13.3500, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[6] = AddStaticVehicleEx(599, 2775.0000, -2455.0000, 13.3500, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[7] = AddStaticVehicleEx(599, 2775.0000, -2450.0000, 13.3500, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[8] = AddStaticVehicleEx(433, 2683.6116, -2380.4431, 13.8573, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[9] = AddStaticVehicleEx(433, 2689.6116, -2380.4431, 13.8573, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[10] = AddStaticVehicleEx(433, 2642.6116, -2380.4431, 13.8573, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[11] = AddStaticVehicleEx(433, 2636.6116, -2380.4431, 13.8573, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[12] = AddStaticVehicleEx(432, 2742.1296, -2472.7644, 13.6098, -90.0000, 245, 235, TIME_RESPAWN);
SetVehicleHealth(SAEM_Vehicle[12], 10000); // Tanque 1.
SAEM_Vehicle[13] = AddStaticVehicleEx(432, 2704.0000, -2435.8086, 13.5786, 90.0000, 245, 235, TIME_RESPAWN);
SetVehicleHealth(SAEM_Vehicle[13], 10000); // Tanque 2.
SAEM_Vehicle[14] = AddStaticVehicleEx(432, 2704.0000, -2472.4219, 13.5379, 90.0000, 245, 235, TIME_RESPAWN);
SetVehicleHealth(SAEM_Vehicle[14], 10000); // Tanque 3.
SAEM_Vehicle[15] = AddStaticVehicleEx(468, 2752.0000, -2450.0000, 13.2500, -90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[16] = AddStaticVehicleEx(468, 2752.0000, -2447.0000, 13.2500, -90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[17] = AddStaticVehicleEx(468, 2752.0000, -2444.0000, 13.2500, -90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[18] = AddStaticVehicleEx(468, 2752.0000, -2441.0000, 13.2500, -90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[19] = AddStaticVehicleEx(500, 2732.0000, -2490.0000, 13.5770, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[20] = AddStaticVehicleEx(500, 2738.0000, -2490.0000, 13.5770, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[21] = AddStaticVehicleEx(520, 2639.1489, -2294.6150, 12.6013, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[22] = AddStaticVehicleEx(520, 2780.5217, -2306.0977, 12.6013, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[23] = AddStaticVehicleEx(520, 2754.1113, -2295.1162, 12.6013, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[24] = AddStaticVehicleEx(520, 2661.7512, -2304.1924, 12.6013, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[25] = AddStaticVehicleEx(425, 2502.5815, -2581.3972, 14.2275, 90.6060, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[26] = AddStaticVehicleEx(425, 2502.5815, -2562.3972, 14.2275, 90.6060, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[27] = AddStaticVehicleEx(476, 2797.8047, -2366.7410, 14.5999, 125.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[28] = AddStaticVehicleEx(476, 2797.8047, -2385.7410, 14.5999, 125.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[29] = AddStaticVehicleEx(447, 2595.8967, -2448.4736, 13.8935, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[30] = AddStaticVehicleEx(447, 2577.8967, -2448.4736, 13.8935, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[31] = AddStaticVehicleEx(463, 2670.2876, -2488.8716, 13.0993, -45.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[31] = AddStaticVehicleEx(463, 2670.2876, -2478.8716, 13.0993, -45.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[33] = AddStaticVehicleEx(452, 2735.4846, -2325.3508, 0.0165, -90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[34] = AddStaticVehicleEx(452, 2735.5823, -2319.0640, 0.0165, -90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[35] = AddStaticVehicleEx(452, 2738.9756, -2586.8604, 0.1443, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[36] = AddStaticVehicleEx(452, 2728.6631, -2586.9373, 0.1443, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[37] = AddStaticVehicleEx(414, 2534.8870, -2386.6643, 13.6138, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[38] = AddStaticVehicleEx(414, 2529.7666, -2389.0510, 13.6138, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[39] = AddStaticVehicleEx(416, 2634.7000, -2433.7065, 13.6832, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[40] = AddStaticVehicleEx(416, 2649.3972, -2433.7065, 13.6832, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[41] = AddStaticVehicleEx(417, 2665.7659, -2444.1794, 13.6448, 326.7473, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[42] = AddStaticVehicleEx(424, 2405.0698, -2625.0000, 13.3728, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[43] = AddStaticVehicleEx(424, 2397.2319, -2625.0000, 13.3728, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[44] = AddStaticVehicleEx(424, 2408.8469, -2625.0000, 13.3728, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[45] = AddStaticVehicleEx(424, 2400.8987, -2625.0000, 13.3728, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[46] = AddStaticVehicleEx(431, 2786.0386, -2491.7959, 13.5800, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[47] = AddStaticVehicleEx(431, 2786.0386, -2500.7959, 13.5800, 90.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[48] = AddStaticVehicleEx(443, 2416.3870, -2485.9355, 14.1193, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[49] = AddStaticVehicleEx(443, 2416.3870, -2505.9355, 14.1193, 0.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[50] = AddStaticVehicleEx(472, 2761.8362, -2587.0000, 0.0611, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[51] = AddStaticVehicleEx(472, 2752.3589, -2587.0000, 0.0611, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[52] = AddStaticVehicleEx(472, 2771.3501, -2587.0000, 0.0611, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[53] = AddStaticVehicleEx(425, 2749.5266, -2358.7053, 16.9160, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[54] = AddStaticVehicleEx(425, 2717.6160, -2358.1426, 16.9160, 180.0000, 245, 235, TIME_RESPAWN);
SAEM_Vehicle[55] = AddStaticVehicleEx(592, 308.1284, 2039.6354, 18.4385, 180.0000, 245, 235, TIME_RESPAWN);
// Cosechadoras Bug.
AddStaticVehicleEx(532,-113.6863,-5.1287,4.0906,70.6139,0,0,60000);
AddStaticVehicleEx(532,-108.5597,6.1032,4.0919,65.7671,0,0,60000);
AddStaticVehicleEx(532,-104.8710,16.5226,4.0923,66.2940,0,0,60000);
//San Andreas Medical Departament (samd)
SEC_Vehicle[0] = AddStaticVehicleEx(407,1127.5139000,-1367.0000000,13.5500000,180.0000000,1,3,TIME_RESPAWN); //Firetruck
SEC_Vehicle[1] = AddStaticVehicleEx(407,1144.9091000,-1367.0000000,13.5500000,180.0000000,1,3,TIME_RESPAWN); //Firetruck
SEC_Vehicle[2] = AddStaticVehicleEx(407,1136.2288000,-1367.0000000,13.5500000,180.0000000,1,3,TIME_RESPAWN); //Firetruck
SEC_Vehicle[3] = AddStaticVehicleEx(525,1177.2776000,-1337.8721000,13.2000000,0.0000000,1,3,TIME_RESPAWN); //Tow Truck
SEC_Vehicle[4] = AddStaticVehicleEx(416,1116.1133000,-1307.6730000,13.5051000,-90.0000000,1,3,TIME_RESPAWN); //Ambulance
SEC_Vehicle[5] = AddStaticVehicleEx(416,1116.1133000,-1337.9813000,13.5051000,-90.0000000,1,3,TIME_RESPAWN); //Ambulance
SEC_Vehicle[6] = AddStaticVehicleEx(563,1099.1230000,-1371.4579000,27.0121000,-90.0000000,1,3,TIME_RESPAWN); //Raindance
SEC_Vehicle[7] = AddStaticVehicleEx(487,1098.3999000,-1355.1415000,26.4313000,-90.0000000,1,3,TIME_RESPAWN); //Maverick
SEC_Vehicle[8] = AddStaticVehicleEx(552,1177.2876000,-1329.1329000,13.0000000,0.0000000,1,3,TIME_RESPAWN); //Utility
SEC_Vehicle[9] = AddStaticVehicleEx(597,1146.8165000,-1329.5000000,13.0000000,180.0000000,1,3,TIME_RESPAWN); //Police Car (SFPD)
SEC_Vehicle[10] = AddStaticVehicleEx(597,1151.7200000,-1329.5000000,13.0000000,180.0000000,1,3,TIME_RESPAWN); //Police Car (SFPD)
SEC_Vehicle[11] = AddStaticVehicleEx(597,1156.8865000,-1329.5000000,13.0000000,180.0000000,1,3,TIME_RESPAWN); //Police Car (SFPD)
SEC_Vehicle[12] = AddStaticVehicleEx(599,1136.7837000,-1329.5000000,13.4500000,180.0000000,1,3,TIME_RESPAWN); //Police Ranger
SEC_Vehicle[13] = AddStaticVehicleEx(599,1141.8119000,-1329.5000000,13.4500000,180.0000000,1,3,TIME_RESPAWN); //Police Ranger
//SEC_Vehicle[14] = AddStaticVehicleEx(416,1038.9502000,-1971.2407000,13.1436000,355.4498000,1,3,TIME_RESPAWN); //Ambulance
/*SEC_Vehicle[0] = AddStaticVehicleEx(416,1096.09997559,-1329.90002441,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  52
SEC_Vehicle[1] = AddStaticVehicleEx(416,1100.09997559,-1330.00000000,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  53
SEC_Vehicle[2] = AddStaticVehicleEx(416,1109.09997559,-1330.19995117,13.39999962,0.00000000,1,3,TIME_RESPAWN);// Ambulancia 54
SEC_Vehicle[3] = AddStaticVehicleEx(416,1113.09997559,-1330.09997559,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  55
SEC_Vehicle[4] = AddStaticVehicleEx(416,1122.09997559,-1329.80004883,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  56
SEC_Vehicle[5] = AddStaticVehicleEx(416,1126.30004883,-1329.69995117,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  57
SEC_Vehicle[6] = AddStaticVehicleEx(487,1161.40002441,-1367.80004883,26.89999962,0.00000000,1,3,TIME_RESPAWN); // Maverick 58*/
//Los Santos Canal de Television (LSTV)
LSTV_Vehicle[0] = AddStaticVehicleEx(582,672.3952, -1345.80, 13.75, 180.00,2,1,TIME_RESPAWN); //Newsvan
LSTV_Vehicle[1] = AddStaticVehicleEx(582,667.4023, -1345.80, 13.75, 180.00,2,1,TIME_RESPAWN); //Newsvan
LSTV_Vehicle[2] = AddStaticVehicleEx(582,662.2755, -1345.80, 13.75, 180.00,2,1,TIME_RESPAWN); //Newsvan
LSTV_Vehicle[3] = AddStaticVehicleEx(488,718.9205, -1357.98, 30.00, 180.00,2,1,TIME_RESPAWN); // San News 119
LSTV_Vehicle[4] = AddStaticVehicleEx(582,271.5000000,17.5000000,2.6000000,193.0000000,2,1,TIME_RESPAWN);
//CARPOINT
/*Mecanicos_Vehicle[0] = AddStaticVehicleEx(552, 2032.5500, -1771.9410, 12.9014, 180.0000, -1,103,TIME_RESPAWN);   //Utility       98
Mecanicos_Vehicle[1] = AddStaticVehicleEx(552, 2032.5500, -1779.7803, 12.9014, 180.0000, -1,103,TIME_RESPAWN);   //Utility       98
Mecanicos_Vehicle[2] = AddStaticVehicleEx(525, 2063.5000, -1800.3500, 13.1199, 90.0000, -1,103,TIME_RESPAWN);    //Tow Truck     93
Mecanicos_Vehicle[3] = AddStaticVehicleEx(525, 2055.5000, -1800.3500, 13.1199, 90.0000, -1,103,TIME_RESPAWN);    //Tow Truck     93
Mecanicos_Vehicle[4] = AddStaticVehicleEx(525, 2047.5000, -1800.3500, 13.1199, 90.0000, -1,103,TIME_RESPAWN);    //Tow Truck     93
Mecanicos_Vehicle[5] = AddStaticVehicleEx(525, 2039.5000, -1800.3500, 13.1199, 90.0000, -1,103,TIME_RESPAWN);    //Tow Truck     93*/
Mecanicos_Vehicle[0] = AddStaticVehicleEx(525, 1967.0027, -1768.8933, 13.3000, 0.0000, -1,103,TIME_RESPAWN);
Mecanicos_Vehicle[1] = AddStaticVehicleEx(525, 1967.0027, -1776.8933, 13.3000, 0.0000, -1,103,TIME_RESPAWN);
Mecanicos_Vehicle[2] = AddStaticVehicleEx(525, 1967.0027, -1784.8933, 13.3000, 0.0000, -1,103,TIME_RESPAWN);
Mecanicos_Vehicle[3] = AddStaticVehicleEx(552, 2002.0789, -1757.6780, 13.0295, -90.0000, -1,103,TIME_RESPAWN);
Mecanicos_Vehicle[4] = AddStaticVehicleEx(552, 1994.5000, -1757.6780, 13.0295, -90.0000, -1,103,TIME_RESPAWN);
Mecanicos_Vehicle[5] = AddStaticVehicleEx(487, 2020.1582, -1791.2640, 20.1398, 0.0000, -1,103,TIME_RESPAWN);   // Maverick
//////////////////////////////////////
Mecanicos_Vehicle[6] = AddStaticVehicleEx(459, 2010.7043, -1771.8640, 13.7901, 0.0000, 0,0,TIME_RESPAWN);   //Especial Walking Cars Logo.
/////////////////////////////////////
derechaT = CreateObject(19327,0,0,-1000,0,0,0,100);
SetObjectMaterialText(derechaT, "{FFFFFF}Mecánicos\nCar Walking", 0, 20, "ArialBlack", 14, 0, -1, 0xFF000000, 1);
AttachObjectToVehicle(derechaT, Mecanicos_Vehicle[6], -1.049999,-0.675000,0.375000,0.000000,0.000000,-90.0);
//////////////////////////////////////
izquierdaT = CreateObject(19327,0,0,-1000,0,0,0,100);
SetObjectMaterialText(izquierdaT, "{FFFFFF}Mecánicos\nCar Walking", 0, 20, "ArialBlack", 14, 0, -1, 0xFF000000, 1);
AttachObjectToVehicle(izquierdaT, Mecanicos_Vehicle[6], 1.049999,-0.675000,0.375000,0.000000,0.000000,-270.0);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Gobierno
// Antiguo Ayuntamiento.
Gobierno_Vehicle[0] = AddStaticVehicleEx(490,1200.6754, -1822.5000, 13.6925,90.00000000,0,0,TIME_RESPAWN); // FBI Rancher 157
Gobierno_Vehicle[1] = AddStaticVehicleEx(490,1208.9652, -1822.5000, 13.6925,90.00000000,0,0,TIME_RESPAWN); // FBI Rancher 158
Gobierno_Vehicle[2] = AddStaticVehicleEx(409,1236.2722, -1814.3679, 13.1887,180.0000000,0,0,TIME_RESPAWN); //Stretch
// Nuevo Ayuntamiento.
Gobierno_Vehicle[3] = AddStaticVehicleEx(405, 1488.4833, -1845.8392, 13.4366, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[4] = AddStaticVehicleEx(405, 1475.4833, -1845.8392, 13.4366, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[5] = AddStaticVehicleEx(409, 1481.5051, -1846.9874, 13.2920, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[6] = AddStaticVehicleEx(421, 1471.7263, -1845.9868, 13.3527, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[7] = AddStaticVehicleEx(421, 1492.3000, -1845.9868, 13.3527, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[8] = AddStaticVehicleEx(602, 1467.9159, -1845.5006, 13.3506, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[9] = AddStaticVehicleEx(587, 1496.1720, -1845.6855, 12.7175, 180.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[10] = AddStaticVehicleEx(487, 1509.967, -1852.242, 13.846, 0.0000, 0,0,TIME_RESPAWN);
Gobierno_Vehicle[11] = AddStaticVehicleEx(487, 1529.344, -1852.242, 13.846, 0.0000, 0,0,TIME_RESPAWN);

// Corte Judicial.
SJ_Vehicle[0] = AddStaticVehicleEx(431, 1282.0400, -1301.5844, 13.1708, 180.0000, 1,1,TIME_RESPAWN); // Autobús.
SJ_Vehicle[1] = AddStaticVehicleEx(427, 1282.1736, -1316.0579, 13.2918, 180.0000, 1,1,TIME_RESPAWN); // Force LSPD.
SJ_Vehicle[2] = AddStaticVehicleEx(421, 1282.6522, -1379.2000, 13.0876, 0.0000, 1,1,TIME_RESPAWN); // Washington
SJ_Vehicle[3] = AddStaticVehicleEx(421, 1282.6522, -1369.2000, 13.0876, 0.0000, 1,1,TIME_RESPAWN); // Washington
SJ_Vehicle[4] = AddStaticVehicleEx(421, 1282.6522, -1359.2000, 13.0876, 0.0000, 1,1,TIME_RESPAWN); // Washington
SJ_Vehicle[5] = AddStaticVehicleEx(487, 1294.9442, -1360.7823, 35.7525, 180.0000, 1,1,TIME_RESPAWN); // Maverick.
//Santana
Santana_Vehicle[0] = AddStaticVehicleEx(487,1291.40002441,-787.00000000,96.69999695,0.00000000,1,1,TIME_RESPAWN);  //Maverick
Santana_Vehicle[1] = AddStaticVehicleEx(579,1242.69995117,-804.50000000,84.19999695,180.00000000,1,1,TIME_RESPAWN); //Huntley
Santana_Vehicle[2] = AddStaticVehicleEx(579,1248.69995117,-804.00000000,84.19999695,180.00000000,1,1,TIME_RESPAWN); //Huntley
Santana_Vehicle[3] = AddStaticVehicleEx(409,1254.30004883,-806.20001221,84.09999847,177.99993896,1,1,TIME_RESPAWN); //Stretch
Santana_Vehicle[4] = AddStaticVehicleEx(428,1249.59997559,-821.00000000,84.40000153,169.99987793,1,1,TIME_RESPAWN); //Securicar
Santana_Vehicle[5] = AddStaticVehicleEx(560,1288.19995117,-830.79998779,82.90000153,0.00000000,1,1,TIME_RESPAWN); //Sultan
Santana_Vehicle[6] = AddStaticVehicleEx(560,1283.50000000,-830.90002441,82.90000153,0.00000000,1,1,TIME_RESPAWN); //Sultan
Santana_Vehicle[7] = AddStaticVehicleEx(560,1278.69995117,-831.00000000,82.90000153,0.00000000,1,1,TIME_RESPAWN); //Sultan
Santana_Vehicle[9] = AddStaticVehicleEx(522,1270.50000000,-831.79998779,82.80000305,0.00000000,1,1,TIME_RESPAWN); //NRG-500
Santana_Vehicle[10] = AddStaticVehicleEx(522,1272.19995117,-831.79998779,82.80000305,0.00000000,1,1,TIME_RESPAWN); //NRG-500
Santana_Vehicle[11] = AddStaticVehicleEx(522,1274.30004883,-832.00000000,82.80000305,0.00000000,1,1,TIME_RESPAWN); //NRG-500
//CIA, Ahora ALEPH.
/*ALEPH_Vehicle[0] = AddStaticVehicleEx(428,889.9374,-1019.4012,32.0261,179.0699,0,0,TIME_RESPAWN); //Security car
ALEPH_Vehicle[1] = AddStaticVehicleEx(507,883.8329,-1019.2497,31.7230,179.0482,0,0,TIME_RESPAWN); //Elegant
ALEPH_Vehicle[2] = AddStaticVehicleEx(516,878.8994,-1019.0701,31.7326,179.8942,0,0,TIME_RESPAWN); //nebula
ALEPH_Vehicle[3] = AddStaticVehicleEx(529,895.6970,-1032.5165,31.5378,180.2504,0,0,TIME_RESPAWN); //willard
ALEPH_Vehicle[4] = AddStaticVehicleEx(482,902.8379,-1036.7670,32.0155,89.9451,0,0,TIME_RESPAWN); //Burrito
ALEPH_Vehicle[5] = AddStaticVehicleEx(490,880.6274,-1041.1333,31.7318,270.0081,-1,-1,TIME_RESPAWN); //FBI Rancher
ALEPH_Vehicle[6] = AddStaticVehicleEx(490,880.4467,-1047.9762,31.7321,268.0374,-1,-1,TIME_RESPAWN); //FBI Rancher
ALEPH_Vehicle[7] = AddStaticVehicleEx(490,880.9211,-1053.2751,31.7295,270.1649,-1,-1,TIME_RESPAWN); //FBI Rancher
ALEPH_Vehicle[8] = AddStaticVehicleEx(528,892.7791,-1053.1248,31.6442,270.2728,-1,-1,TIME_RESPAWN); //FBI Truck
ALEPH_Vehicle[9] = AddStaticVehicleEx(459,919.2363,-1053.1593,31.6559,89.1760,0,0,TIME_RESPAWN); //van
ALEPH_Vehicle[10] = AddStaticVehicleEx(521,879.1627,-1036.1859,31.4763,268.2280,0,0,TIME_RESPAWN); //FCR-900
ALEPH_Vehicle[11] = AddStaticVehicleEx(560,938.7388,-1053.3126,31.3068,88.7615,0,0,TIME_RESPAWN); //Sultan
ALEPH_Vehicle[12] = AddStaticVehicleEx(560,929.6833,-1053.1095,31.3064,89.7188,0,0,TIME_RESPAWN); //Sultan
ALEPH_Vehicle[13] = AddStaticVehicleEx(487,914.2424,-1021.1593,111.2248,194.0648,0,0,TIME_RESPAWN); //Maverick
ALEPH_Vehicle[14] = AddStaticVehicleEx(487,923.9680,-1020.5174,107.7317,184.5626,0,0,TIME_RESPAWN); //Maverick*/
//ALEPH_Vehicle[0] = AddStaticVehicleEx(487,904.2791,-1021.1885,107.8076,184.0547,0,0,TIME_RESPAWN); //Maverick
// SULTANES.
/*ALEPH_Vehicle[0] = AddStaticVehicleEx(560, 1959.3475, -1173.4530, 2.7007, 180.0000,6,6,TIME_RESPAWN);
ALEPH_Vehicle[1] = AddStaticVehicleEx(560, 1959.3475, -1183.4530, 2.7007, 180.0000,6,6,TIME_RESPAWN);
ALEPH_Vehicle[2] = AddStaticVehicleEx(560, 1959.3475, -1193.4530, 2.7007, 180.0000,6,6,TIME_RESPAWN);
ALEPH_Vehicle[3] = AddStaticVehicleEx(402, 2014.8000, -1173.4530, 2.7877, 180.0000,6,6,TIME_RESPAWN);
ALEPH_Vehicle[4] = AddStaticVehicleEx(402, 2014.8000, -1183.4530, 2.7877, 180.0000,6,6,TIME_RESPAWN);
ALEPH_Vehicle[5] = AddStaticVehicleEx(402, 2014.8000, -1193.4530, 2.7877, 180.0000,6,6,TIME_RESPAWN);*/

//Mafia Rusa
/*Rusa_Vehicle[0] = AddStaticVehicleEx(580,661.20001221,-1299.30004883,13.39999962,179.99993896,3,3,TIME_RESPAWN); //Stafford
Rusa_Vehicle[1] = AddStaticVehicleEx(580,668.79998779,-1299.09997559,13.39999962,179.99450684,3,3,TIME_RESPAWN); //Stafford
Rusa_Vehicle[2] = AddStaticVehicleEx(560,661.00000000,-1288.59997559,13.30000019,180.00000000,3,3,TIME_RESPAWN); //Sultan
Rusa_Vehicle[3] = AddStaticVehicleEx(560,669.09997559,-1288.59997559,13.30000019,180.00000000,3,3,TIME_RESPAWN); //Sultan
Rusa_Vehicle[4] = AddStaticVehicleEx(409,669.20001221,-1266.40002441,13.69999981,179.99993896,3,3,TIME_RESPAWN); //Stretch
Rusa_Vehicle[5] = AddStaticVehicleEx(428,661.50000000,-1266.80004883,13.69999981,179.99450684,3,3,TIME_RESPAWN); //SecuriCar*/
// Nuevos Puntos de respawn.
Rusa_Vehicle[0] = AddStaticVehicleEx(580,706.0000, -1304.1396, 2071.0168, -90.0000,3,3,TIME_RESPAWN); //Stafford
Rusa_Vehicle[1] = AddStaticVehicleEx(580,706.0000, -1308.4291, 2071.1047, -90.0000,3,3,TIME_RESPAWN); //Stafford
Rusa_Vehicle[2] = AddStaticVehicleEx(560,706.0000, -1298.2651, 2071.0188, -90.0000,3,3,TIME_RESPAWN); //Sultan
Rusa_Vehicle[3] = AddStaticVehicleEx(560,706.0000, -1293.9706, 2071.0188, -90.0000,3,3,TIME_RESPAWN); //Sultan
Rusa_Vehicle[4] = AddStaticVehicleEx(409,708.0000, -1318.1908, 2071.0930, -90.0000,3,3,TIME_RESPAWN); //Stretch
Rusa_Vehicle[5] = AddStaticVehicleEx(428,707.0000, -1314.6691, 2071.5088, -90.0000,3,3,TIME_RESPAWN); //SecuriCar
Rusa_Vehicle[6] = AddStaticVehicleEx(522,660.00000000,-1276.19995117,13.30000019,243.99877930,3,3,TIME_RESPAWN); //NRG-500
Rusa_Vehicle[7] = AddStaticVehicleEx(522,660.00000000,-1278.69995117,13.30000019,243.99536133,3,3,TIME_RESPAWN); //NRG-500
Rusa_Vehicle[8] = AddStaticVehicleEx(487,745.09997559,-1271.30004883,13.80000019,0.00000000,3,3,TIME_RESPAWN); //Maverick
//Agencia Hitman
/*Hitman_Vehicle[0] = AddStaticVehicleEx(411,2508.6000977,-955.9000244,82.0999985,0.0000000,0,0,TIME_RESPAWN);  //Infernus
Hitman_Vehicle[1] = AddStaticVehicleEx(411,2512.8999023,-955.9000244,82.0999985,0.0000000,0,0,TIME_RESPAWN); //Infernus
Hitman_Vehicle[2] = AddStaticVehicleEx(579,2525.0000000,-953.5000000,82.4000015,6.0000000,0,0,TIME_RESPAWN); //Huntley
Hitman_Vehicle[3] = AddStaticVehicleEx(579,2529.5000000,-953.0999756,82.5000000,5.9985352,0,0,TIME_RESPAWN); //Huntley
Hitman_Vehicle[4] = AddStaticVehicleEx(487,2534.0000000,-919.0000000,86.8000031,189.9999390,0,0,TIME_RESPAWN); //Maverick
Hitman_Vehicle[5] = AddStaticVehicleEx(487,2544.0000000,-915.0000000,85.8000031,189.9956055,0,0,TIME_RESPAWN); //Maverick*/
Hitman_Vehicle[0] = AddStaticVehicleEx(413, 2368.7441, -653.6308, 127.6070, 327.6747,0,0,TIME_RESPAWN); // Burrito.
Hitman_Vehicle[1] = AddStaticVehicleEx(413, 2374.5269, -654.6129, 127.7270, 327.6747,0,0,TIME_RESPAWN); // Burrito.
//Hitman_Vehicle[2] = AddStaticVehicleEx(424, 2356.4619, -652.4532, 127.6778, -90.0000,0,0,TIME_RESPAWN); // BF Inyection.
//Hitman_Vehicle[3] = AddStaticVehicleEx(461, 2356.0237, -657.8622, 127.5460, 293.1078,0,0,TIME_RESPAWN); // Moto1.
//Hitman_Vehicle[4] = AddStaticVehicleEx(461, 2358.1824, -658.6489, 127.6500, 293.1078,0,0,TIME_RESPAWN); // Moto2.
Hitman_Vehicle[5] = AddStaticVehicleEx(487, 2381.4478, -641.3470, 127.3032, -90.0000,0,0,TIME_RESPAWN); // Maverick.
// Agencia Hitman, nueva HQ.
Hitman_Vehicle[6] = AddStaticVehicleEx(522, 2152.453, -2289.969, 12.940, 225.9279,0,0,TIME_RESPAWN);  //NRG-500.
Hitman_Vehicle[7] = AddStaticVehicleEx(522, 2154.500, -2287.834, 12.932, 225.9279,0,0,TIME_RESPAWN);  //NRG-500.
Hitman_Vehicle[8] = AddStaticVehicleEx(411, 2159.750, -2280.531, 13.099, 225.9279,0,0,TIME_RESPAWN); // Infernus.
Hitman_Vehicle[9] = AddStaticVehicleEx(411, 2167.368, -2273.422, 13.103, 225.9279,0,0,TIME_RESPAWN); // Infernus.
Hitman_Vehicle[10] = AddStaticVehicleEx(579, 2204.736, -2211.453, 13.572, 225.9279,0,0,TIME_RESPAWN); // Huntley.
Hitman_Vehicle[11] = AddStaticVehicleEx(579, 2197.226, -2218.961, 13.550, 225.9279,0,0,TIME_RESPAWN); // Huntley.
Hitman_Vehicle[12] = AddStaticVehicleEx(578, 2188.373, -2224.833, 14.162, 225.9279,0,0,TIME_RESPAWN); // DFT 30.
Hitman_Vehicle[13] = AddStaticVehicleEx(482, 2174.014, -2266.762, 13.517, 225.9279,0,0,TIME_RESPAWN); // Burrito.
Hitman_Vehicle[14] = AddStaticVehicleEx(487, 2147.521, -2303.091, 20.890, 319.1873,0,0,TIME_RESPAWN); // Maverick.
//Hitman_Vehicle[15] = AddStaticVehicleEx(487, 2429.3933, -1990.0795, 18.7, 90.0000,0,0,TIME_RESPAWN); // Maverick.
//Groove Street
Groove_Vehicle[0] =	AddStaticVehicleEx(585, 2509.7419, -1671.1534, 12.9923, 168.3774, 44, 44,TIME_RESPAWN); //
Groove_Vehicle[1] =	AddStaticVehicleEx(492,2506.3511,-1678.6918,13.2421,137.8921,44,0,TIME_RESPAWN); //
Groove_Vehicle[2] =	AddStaticVehicleEx(585,2498.1970,-1682.9766,12.9602,102.2121,44,44,TIME_RESPAWN); //
Groove_Vehicle[3] =	AddStaticVehicleEx(492,2499.3054,-1654.6339,13.2089,69.5431,44,1,TIME_RESPAWN); //
Groove_Vehicle[4] =	AddStaticVehicleEx(517,2485.0928,-1654.0254,13.2480,88.2814,44,1,TIME_RESPAWN); //
Groove_Vehicle[5] =	AddStaticVehicleEx(517,2469.4697,-1670.2765,13.2510,9.5673,44,0,TIME_RESPAWN); //
Groove_Vehicle[6] =	AddStaticVehicleEx(482,2458.9688,-1670.5138,13.6138,0.0187,44,44,TIME_RESPAWN); //
Groove_Vehicle[7] =	AddStaticVehicleEx(481,2512.2698,-1664.1511,13.0907,98.1544,44,44,TIME_RESPAWN); //
Groove_Vehicle[8] =	AddStaticVehicleEx(481,2512.0090,-1662.2184,13.1007,100.2997,44,44,TIME_RESPAWN); //
Groove_Vehicle[9] =	AddStaticVehicleEx(481,2512.8643,-1666.0569,13.0888,93.2912,44,44,TIME_RESPAWN); //
//Ballas the Kings
Ballas_Vehicle[0] = AddStaticVehicleEx(412,1900.59997559,-1083.80004883,24.00000000,150.00000000,179,179,TIME_RESPAWN); //Vodooo
Ballas_Vehicle[1] = AddStaticVehicleEx(517,1907.80004883,-1083.40002441,24.10000038,204.00000000,179,179,TIME_RESPAWN); //Majestic
Ballas_Vehicle[2] = AddStaticVehicleEx(566,1913.00000000,-1083.40002441,24.20000076,203.99963379,179,179,TIME_RESPAWN); //Tahoma
Ballas_Vehicle[3] = AddStaticVehicleEx(566,1919.09997559,-1083.09997559,24.29999924,203.99963379,179,179,TIME_RESPAWN); //Tahoma
Ballas_Vehicle[4] = AddStaticVehicleEx(478,1925.09997559,-1089.50000000,24.70000076,356.00000000,179,179,TIME_RESPAWN); //Walton
Ballas_Vehicle[5] = AddStaticVehicleEx(567,1895.69995117,-1083.50000000,24.00000000,149.99633789,179,179,TIME_RESPAWN); //Savanna
Ballas_Vehicle[6] = AddStaticVehicleEx(567,1889.69995117,-1083.30004883,23.89999962,149.99633789,179,179,TIME_RESPAWN); //Savanna
Ballas_Vehicle[7] = AddStaticVehicleEx(481,1912.80004883,-1091.30004883,24.10000038,0.00000000,179,179,TIME_RESPAWN); //BMX
Ballas_Vehicle[8] = AddStaticVehicleEx(481,1909.30004883,-1091.09997559,24.00000000,0.00000000,179,179,TIME_RESPAWN); //BMX
Ballas_Vehicle[9] = AddStaticVehicleEx(481,1915.40002441,-1091.50000000,24.10000038,0.00000000,179,179,TIME_RESPAWN); //BMX

/*// Ballas - NEW HQ (Joaquin Padilla).
Ballas_Vehicle[10] = AddStaticVehicleEx(412, 2796.6311, -1553.9639, 10.5490, -90.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[11] = AddStaticVehicleEx(517, 2795.7629, -1558.5145, 10.6599, -90.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[12] = AddStaticVehicleEx(566, 2796.0173, -1562.8187, 9.9126, -90.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[13] = AddStaticVehicleEx(567, 2796.0747, -1567.3130, 10.6912, -90.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[14] = AddStaticVehicleEx(482, 2795.7700, -1571.6378, 10.7727, -90.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[15] = AddStaticVehicleEx(482, 2795.7776, -1576.0305, 10.7727, -90.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[16] = AddStaticVehicleEx(481, 2776.6357, -1601.7694, 10.3884, -145.0000, 179,179,TIME_RESPAWN);
Ballas_Vehicle[17] = AddStaticVehicleEx(481, 2778.8030, -1602.1648, 10.3884, -145.0000, 179,179,TIME_RESPAWN);
*/

//Latin Kings
Latin_Vehicle[0] = AddStaticVehicleEx(567,2292.10009766,-1078.59997559,47.40000153,250.00000000,6,6,TIME_RESPAWN); //savanna
Latin_Vehicle[1] = AddStaticVehicleEx(567,2259.69995117,-1104.50000000,38.00000000,245.99945068,6,6,TIME_RESPAWN); //savanna
Latin_Vehicle[2] = AddStaticVehicleEx(482,2261.60009766,-1100.00000000,38.20000076,242.00000000,6,6,TIME_RESPAWN); //Burrito
Latin_Vehicle[3] = AddStaticVehicleEx(482,2285.30004883,-1075.90002441,47.59999847,243.99584961,6,6,TIME_RESPAWN); //Burrito
Latin_Vehicle[4] = AddStaticVehicleEx(481,2297.39990234,-1081.00000000,47.09999847,262.00000000,6,6,TIME_RESPAWN); //BMX
Latin_Vehicle[5] = AddStaticVehicleEx(481,2297.30004883,-1079.69995117,47.20000076,262.00915527,6,6,TIME_RESPAWN); //BMX
Latin_Vehicle[6] = AddStaticVehicleEx(600,2286.50000000,-1117.50000000,37.79999924,3.99682617,6,6,TIME_RESPAWN); //Picador
Latin_Vehicle[7] = AddStaticVehicleEx(600,2276.19995117,-1114.59997559,37.79999924,333.99682617,6,6,TIME_RESPAWN); //Picador
//Sureños 13
//Sureno_Vehicle[0] = AddStaticVehicleEx(536,1817.8407000,-2021.3251000,13.4641000,180.0000000,155,155,TIME_RESPAWN); //Blade
//Sureno_Vehicle[1] = AddStaticVehicleEx(535,1828.3547000,-2020.4197000,13.0980000,180.0000000,155,155,TIME_RESPAWN); //Slavan
//Sureno_Vehicle[2] = AddStaticVehicleEx(412,1817.7429000,-2028.4572000,13.2567000,180.0000000,155,155,TIME_RESPAWN); //Voodoo
//Sureno_Vehicle[3] = AddStaticVehicleEx(413,1920.0126000,-2002.3652000,13.4652000,90.0000000,155,155,TIME_RESPAWN); //Pony
//Sureno_Vehicle[4] = AddStaticVehicleEx(418,1921.7928000,-2012.9851000,13.6623000,0.0000000,155,155,TIME_RESPAWN); //Moonbeam
Sureno_Vehicle[5] = AddStaticVehicleEx(419,1877.9310000,-2021.1306000,13.2635000,180.0000000,155,155,TIME_RESPAWN); //Esperanto
Sureno_Vehicle[6] = AddStaticVehicleEx(575,1877.7411000,-2029.4913000,13.3590000,180.0000000,155,155,TIME_RESPAWN); //Brodway
Sureno_Vehicle[7] = AddStaticVehicleEx(575,1888.1588000,-2021.2059000,13.3590000,180.0000000,155,155,TIME_RESPAWN); //Brodway
Sureno_Vehicle[8] = AddStaticVehicleEx(412,1888.1320000,-2030.3341000,13.1600000,180.0000000,155,155,TIME_RESPAWN); //Premier
Sureno_Vehicle[9] = AddStaticVehicleEx(422,1901.1827000,-2032.5890000,13.4543000,90.0000000,155,155,TIME_RESPAWN); //Bobcat
//Sureno_Vehicle[10] = AddStaticVehicleEx(461,1880.5255000,-2010.6411000,13.3773000,180.0000000,155,155,TIME_RESPAWN); //PCJ-600
//Sureno_Vehicle[11] = AddStaticVehicleEx(461,1878.9435000,-2010.6852000,13.3773000,180.0000000,155,155,TIME_RESPAWN); //PCJ-600
//Sureno_Vehicle[12] = AddStaticVehicleEx(461,1887.4939000,-2010.6692000,13.3595000,180.0000000,155,155,TIME_RESPAWN); //PCJ-600
//Sureno_Vehicle[13] = AddStaticVehicleEx(461,1886.1838000,-2010.6512000,13.3595000,180.0000000,155,155,TIME_RESPAWN); //PCJ-600
//Sureno_Vehicle[14] = AddStaticVehicleEx(466,1828.3510000,-2027.7933000,13.2541000,180.0000000,155,155,TIME_RESPAWN); //Glendale
//Sureno_Vehicle[15] = AddStaticVehicleEx(467,1817.8595000,-2035.3202000,13.1450000,180.0000000,155,155,TIME_RESPAWN); //Oceanic
//Sureno_Vehicle[16] = AddStaticVehicleEx(468,1820.9678000,-2015.5649000,13.2666000,180.0000000,155,155,TIME_RESPAWN); //Sanchez
//Sureno_Vehicle[17] = AddStaticVehicleEx(468,1819.7419000,-2015.4924000,13.2666000,180.0000000,155,155,TIME_RESPAWN); //Sanchez
Sureno_Vehicle[18] = AddStaticVehicleEx(471,1863.0403000,-2026.9701000,12.8676000,90.0000000,155,155,TIME_RESPAWN); //Quad
Sureno_Vehicle[19] = AddStaticVehicleEx(471,1863.0426000,-2024.6007000,12.8676000,90.0000000,155,155,TIME_RESPAWN);//Quad
//Sureno_Vehicle[20] = AddStaticVehicleEx(492,1818.3397000,-2042.1531000,13.8620000,180.0000000,155,155,TIME_RESPAWN); //Greenwood
//Sureno_Vehicle[21] = AddStaticVehicleEx(492,1828.1713000,-2035.3177000,13.8620000,180.0000000,155,155,TIME_RESPAWN); //Greenwood
Sureno_Vehicle[22] = AddStaticVehicleEx(567,1888.1163000,-2038.3579000,13.2462000,180.0000000,155,155,TIME_RESPAWN); //Savanna
Sureno_Vehicle[23] = AddStaticVehicleEx(567,1877.6378000,-2037.5630000,13.2462000,180.0000000,155,155,TIME_RESPAWN); //Savanna
Sureno_Vehicle[24] = AddStaticVehicleEx(481,1892.2601000,-2016.1848000,13.0583000,90.0000000,155,155,TIME_RESPAWN); //BMX
Sureno_Vehicle[25] = AddStaticVehicleEx(481,1892.3503000,-2014.9205000,13.0583000,90.0000000,155,155,TIME_RESPAWN); //BMX
Sureno_Vehicle[26] = AddStaticVehicleEx(481,1892.2603000,-2013.7471000,13.0583000,90.0000000,155,155,TIME_RESPAWN); //BMX
Sureno_Vehicle[27] = AddStaticVehicleEx(481,1892.2230000,-2012.7814000,13.0583000,90.0000000,155,155,TIME_RESPAWN); //BMX
//Sureno_Vehicle[28] = AddStaticVehicleEx(482,1890.4397000,-1995.5551000,13.9179000,90.0000000,155,155,TIME_RESPAWN); //Burrito
//Sureno_Vehicle[29] = AddStaticVehicleEx(482,1890.6537000,-1988.0297000,13.9179000,90.0000000,155,155,TIME_RESPAWN); //Burrito

//La Cosa Nostra (lcn)
LCN_Vehicle[0] = AddStaticVehicleEx(560,1277.09997559,-2009.19995117,58.70000076,88.00000000,0,0,TIME_RESPAWN);  //Sultan
LCN_Vehicle[1] = AddStaticVehicleEx(560,1277.00000000,-2015.19995117,58.70000076,87.99499512,0,0,TIME_RESPAWN); //Sultan
LCN_Vehicle[2] = AddStaticVehicleEx(580,1277.00000000,-2021.59997559,58.70000076,87.99499512,0,0,TIME_RESPAWN); //Sultan
LCN_Vehicle[3] = AddStaticVehicleEx(580,1277.19995117,-2027.59997559,58.79999924,87.99499512,0,0,TIME_RESPAWN); //Sultan
LCN_Vehicle[4] = AddStaticVehicleEx(487,1117.50000000,-2017.30004883,74.69999695,0.00000000,0,0,TIME_RESPAWN); //Maverick
LCN_Vehicle[5] = AddStaticVehicleEx(487,1116.00000000,-2057.30004883,74.69999695,179.99993896,0,0,TIME_RESPAWN); //Maverick
LCN_Vehicle[6] = AddStaticVehicleEx(579,1246.00000000,-2010.59997559,59.90000153,270.00000000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[7] = AddStaticVehicleEx(579,1245.90002441,-2017.09997559,59.90000153,270.00000000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[8] = AddStaticVehicleEx(579,1246.09997559,-2022.40002441,59.90000153,270.00000000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[9] = AddStaticVehicleEx(579,1246.30004883,-2028.69995117,59.90000153,270.00000000,0,0,TIME_RESPAWN); //Huntley
LCN_Vehicle[10] = AddStaticVehicleEx(522,1244.69995117,-2033.80004883,59.50000000,267.99499512,0,0,TIME_RESPAWN); //NRG-500
LCN_Vehicle[11] = AddStaticVehicleEx(522,1244.90002441,-2039.30004883,59.50000000,267.99499512,0,0,TIME_RESPAWN); //NRG-500
LCN_Vehicle[12] = AddStaticVehicleEx(522,1244.90002441,-2044.40002441,59.50000000,267.99499512,0,0,TIME_RESPAWN); //NRG-500
LCN_Vehicle[13] = AddStaticVehicleEx(428,1276.50000000,-2039.19995117,59.29999924,89.99499512,0,0,TIME_RESPAWN); //SecurityCar
LCN_Vehicle[14] = AddStaticVehicleEx(428,1276.4744,-2034.1155,59.1295,91.8585,0,0,TIME_RESPAWN); //SecurityCar
//Yakuzas
Yakuza_Vehicle[0] = AddStaticVehicleEx(560,281.79998779,-1167.69995117,80.69999695,316.00000000,1,1,TIME_RESPAWN);  //Sultan
Yakuza_Vehicle[1] = AddStaticVehicleEx(560,284.50000000,-1170.30004883,80.69999695,316.00000000,1,1,TIME_RESPAWN); //Sultan
Yakuza_Vehicle[2] = AddStaticVehicleEx(560,287.29998779,-1173.40002441,80.69999695,315.99975586,1,1,TIME_RESPAWN); //Sultan
Yakuza_Vehicle[3] = AddStaticVehicleEx(409,288.00000000,-1157.19995117,80.80000305,224.00000000,1,1,TIME_RESPAWN); //Streetch
Yakuza_Vehicle[4] = AddStaticVehicleEx(409,283.89999390,-1160.90002441,80.80000305,223.99475098,1,1,TIME_RESPAWN); //Streetch
Yakuza_Vehicle[5] = AddStaticVehicleEx(487,309.79998779,-1148.00000000,92.40000153,45.99975586,1,1,TIME_RESPAWN); //Maverick
Yakuza_Vehicle[6] = AddStaticVehicleEx(579,292.79998779,-1177.50000000,81.00000000,314.00000000,1,1,TIME_RESPAWN); //Huntley
Yakuza_Vehicle[7] = AddStaticVehicleEx(579,296.70001221,-1181.40002441,81.00000000,314.00000000,1,1,TIME_RESPAWN); //Huntley
Yakuza_Vehicle[8] = AddStaticVehicleEx(579,300.10000610,-1185.30004883,81.00000000,313.99475098,1,1,TIME_RESPAWN); //Huntley
Yakuza_Vehicle[9] = AddStaticVehicleEx(428,305.39999390,-1163.30004883,81.19999695,134.00000000,1,1,TIME_RESPAWN); //Securicar
Yakuza_Vehicle[10] = AddStaticVehicleEx(522,293.50000000,-1147.19995117,80.59999847,172.00000000,1,1,TIME_RESPAWN); //NRG-500
Yakuza_Vehicle[11] = AddStaticVehicleEx(522,295.89999390,-1148.30004883,80.59999847,171.99645996,1,1,TIME_RESPAWN); //NRG-500
Yakuza_Vehicle[12] = AddStaticVehicleEx(522,290.70001221,-1146.50000000,80.59999847,171.99645996,1,1,TIME_RESPAWN); //NRG-500
//Alqaeda
/*Alqaeda_Vehicle[0] = AddStaticVehicleEx(440,1118.1171,-333.5009,74.0945,89.3556,55,55,TIME_RESPAWN);  //rumpo
Alqaeda_Vehicle[1] = AddStaticVehicleEx(468,1058.9689,-288.1523,73.6611,179.7683,55,55,TIME_RESPAWN); //sanchez
Alqaeda_Vehicle[2] = AddStaticVehicleEx(468,1062.0012,-287.9807,73.6613,181.4574,55,55,TIME_RESPAWN); //sanchez
Alqaeda_Vehicle[3] = AddStaticVehicleEx(468,1055.0286,-288.0349,73.6614,181.9211,55,55,TIME_RESPAWN); //sanchez
Alqaeda_Vehicle[4] = AddStaticVehicleEx(478,1117.4033,-338.1820,73.9826,90.3623,55,55,TIME_RESPAWN); //walton
Alqaeda_Vehicle[5] = AddStaticVehicleEx(478,1117.5488,-342.9792,73.9830,88.9579,55,55,TIME_RESPAWN); //walton
Alqaeda_Vehicle[6] = AddStaticVehicleEx(542,1107.1952,-333.5708,73.7284,179.5626,55,55,TIME_RESPAWN); //clover
Alqaeda_Vehicle[7] = AddStaticVehicleEx(542,1102.2507,-333.6396,73.7306,179.1807,55,55,TIME_RESPAWN); //clover
Alqaeda_Vehicle[8] = AddStaticVehicleEx(548,1064.3345,-325.2756,75.7556,90.0000,55,55,TIME_RESPAWN); //cargobob*/
//CDG (Bomberos)
/// CDG - Cartel Del Golfo (Facción).
CDG_Vehicle[0] = AddStaticVehicleEx(409, 1461.5433, -1028.4543, 23.4271, 90.0000, 1,1,TIME_RESPAWN); // Limusina/Streech.
CDG_Vehicle[1] = AddStaticVehicleEx(482, 1451.3065, -1028.4604, 23.7500, 90.0000, 1,1,TIME_RESPAWN); // Burrito
CDG_Vehicle[2] = AddStaticVehicleEx(560, 1441.4633, -1028.4489, 23.3336, 90.0000, 1,1,TIME_RESPAWN); // Sultan
CDG_Vehicle[3] = AddStaticVehicleEx(428, 1473.8271, -1028.4417, 23.8393, 90.0000, 1,1,TIME_RESPAWN); // Securicar
CDG_Vehicle[4] = AddStaticVehicleEx(411, 1484.4949, -1028.4242, 23.4483, 90.0000, 1,1,TIME_RESPAWN); // Infernus
CDG_Vehicle[5] = AddStaticVehicleEx(461, 1514.7665, -1024.1354, 23.3029, 180.0000, 1,1,TIME_RESPAWN); // Moto - PCJ-600
CDG_Vehicle[6] = AddStaticVehicleEx(461, 1517.0848, -1024.2267, 23.3029, 180.0000, 1,1,TIME_RESPAWN); // Moto = PCJ-600
CDG_Vehicle[7] = AddStaticVehicleEx(487, 1502.0505, -1011.2492, 46.9700, 180.0000, 1,1,TIME_RESPAWN); // Maverick
//Jobs
//Pizzeria
PizzaBike[0] = AddStaticVehicleEx(448,2123.00000000,-1784.40002441,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[1] = AddStaticVehicleEx(448,2121.00000000,-1784.40002441,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[2] = AddStaticVehicleEx(448,2119.00000000,-1784.30004883,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[3] = AddStaticVehicleEx(448,2116.50000000,-1784.19995117,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[4] = AddStaticVehicleEx(448,2114.19995117,-1784.30004883,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[5] = AddStaticVehicleEx(448,2111.80004883,-1784.40002441,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[6] = AddStaticVehicleEx(448,2109.00000000,-1784.40002441,13.10000038,0.00000000,17,6,1200); //Pizzaboy
PizzaBike[7] = AddStaticVehicleEx(448,2106.00000000,-1784.50000000,13.10000038,0.00000000,17,6,1200); //Pizzaboy
//Terminal de Buses Los Santos
TBuses[0] = AddStaticVehicleEx(431, 1011.7863, -1366.4510, 13.2405, -90.1200, 2, 1,TIME_RESPAWN); //
TBuses[1] = AddStaticVehicleEx(431, 1011.9499, -1359.1660, 13.2405, -90.1200, 2, 1,TIME_RESPAWN); //
TBuses[2] = AddStaticVehicleEx(431, 1011.9262, -1344.1593, 13.2405, -90.1200, 2, 1,TIME_RESPAWN); //
TBuses[3] = AddStaticVehicleEx(431, 1012.2822, -1351.5768, 13.2405, -90.1200, 2, 1,TIME_RESPAWN); //
// Autobuses:
derecha = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R357", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(derecha, TBuses[0], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
izquierda = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R357", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(izquierda, TBuses[0], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
///////////////////////////////
derecha = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R358", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(derecha, TBuses[1], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
izquierda = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R358", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(izquierda, TBuses[1], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
//////////////////////////////
derecha = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R359", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(derecha, TBuses[2], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
izquierda = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R359", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(izquierda, TBuses[2], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
//////////////////////////////
derecha = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R360", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(derecha, TBuses[3], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
izquierda = CreateObject(19329,0,0,-1000,0,0,0);
SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R360", 0, 20, "Arial", 16, 0, -1, 0, 0);
AttachObjectToVehicle(izquierda, TBuses[3], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
//Taxistas
TaxiTrans[0] = AddStaticVehicleEx(420,1777.7915,-1907.9952,13.3877,270.4367,6,6,TIME_RESPAWN); // 36
TaxiTrans[1] = AddStaticVehicleEx(420,1777.2566,-1913.4215,13.3873,266.0501,6,6,TIME_RESPAWN); // 37
TaxiTrans[2] = AddStaticVehicleEx(420,1777.6688,-1919.8395,13.3876,262.2901,6,6,TIME_RESPAWN); // 38
TaxiTrans[3] = AddStaticVehicleEx(420,1778.7523,-1925.8613,13.3884,265.4234,6,6,TIME_RESPAWN); //39
TaxiTrans[4] = AddStaticVehicleEx(420,1777.7716,-1931.7175,13.3868,260.4101,6,6,TIME_RESPAWN); // 40
TaxiTrans[5] = AddStaticVehicleEx(420,1777.9965,-1901.6207,13.3878,269.1131,6,6,TIME_RESPAWN); // 41
TaxiTrans[6] = AddStaticVehicleEx(420,1802.6761,-1931.9088,13.3868,89.0151,6,6,TIME_RESPAWN); // 42
TaxiTrans[7] = AddStaticVehicleEx(420,1802.6085,-1925.6497,13.3898,90.8951,6,6,TIME_RESPAWN); // 43
TaxiTrans[8] = AddStaticVehicleEx(420,1801.8533,-1920.1860,13.3925,89.9551,6,6,TIME_RESPAWN); // 44
TaxiTrans[9] = AddStaticVehicleEx(420,1802.3735,-1914.1539,13.3954,85.8817,6,6,TIME_RESPAWN); // 45
TaxiTrans[10] = AddStaticVehicleEx(420,1802.6312,-1907.9403,13.3985,85.5683,6,6,TIME_RESPAWN); // 46
TaxiTrans[11] = AddStaticVehicleEx(420,1802.6427,-1901.9677,13.4014,89.3284,6,6,TIME_RESPAWN); // 47
TaxiTrans[12] = AddStaticVehicleEx(420, -1964.5564, 94.3955, 27.6253, 91.1159,6,6,TIME_RESPAWN); // 47
TaxiTrans[13] = AddStaticVehicleEx(420, -1964.4674, 98.0844, 27.6253, 91.1159,6,6,TIME_RESPAWN); // 47
TaxiTrans[14] = AddStaticVehicleEx(420, -1964.5347, 101.6136, 27.6253, 91.1159,6,6,TIME_RESPAWN); // 47
TaxiTrans[15] = AddStaticVehicleEx(420, -1964.5903, 105.1723, 27.6253, 91.1159,6,6,TIME_RESPAWN); // 47
TaxiTrans[16] = AddStaticVehicleEx(438, -1964.5262, 90.8371, 27.5968, 90.5568,6,6,TIME_RESPAWN); // 47
TaxiTrans[17] = AddStaticVehicleEx(438, -1964.4570, 87.5195, 27.5968, 90.5568,6,6,TIME_RESPAWN); // 47
TaxiTrans[18] = AddStaticVehicleEx(438, -1964.4907, 84.1656, 27.5968, 90.5568,6,6,TIME_RESPAWN); // 47
TaxiTrans[19] = AddStaticVehicleEx(438, -1964.6117, 81.1215, 27.5968, 90.5568,6,6,TIME_RESPAWN); // 47
TaxiTrans[20] = AddStaticVehicleEx(437, -1977.3081, 101.8889, 27.7681, 179.9581,6,6,TIME_RESPAWN); // 47
TaxiTrans[21] = AddStaticVehicleEx(437, -1977.7933, 81.4696, 27.7681, 91.5909,6,6,TIME_RESPAWN); // 47
TaxiTrans[22] = AddStaticVehicleEx(437, -1991.3038, 81.2707, 27.7681, 91.5909,6,6,TIME_RESPAWN); // 47
//Camionero Los Santos
TruckerVehicles[0] = AddStaticVehicleEx(414, 2204.1985, -2642.7024, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[1] = AddStaticVehicleEx(414, 2204.9658, -2637.6873, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[2] = AddStaticVehicleEx(414, 2205.4172, -2632.3210, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[3] = AddStaticVehicleEx(414, 2205.8914, -2627.3726, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[4] = AddStaticVehicleEx(414, 2206.1426, -2622.4622, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[5] = AddStaticVehicleEx(414, 2206.0911, -2617.4966, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[6] = AddStaticVehicleEx(414, 2206.3369, -2612.5498, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[7] = AddStaticVehicleEx(414, 2206.7402, -2607.5452, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[8] = AddStaticVehicleEx(414, 2206.0825, -2602.9048, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[9] = AddStaticVehicleEx(414, 2206.2942, -2597.5806, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[10] = AddStaticVehicleEx(414, 2206.5266, -2592.5405, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[11] = AddStaticVehicleEx(414, 2206.6643, -2587.6423, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[12] = AddStaticVehicleEx(414, 2206.5938, -2582.7200, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[13] = AddStaticVehicleEx(414, 2206.9573, -2577.5320, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[14] = AddStaticVehicleEx(414, 2207.1350, -2572.6453, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
TruckerVehicles[15] = AddStaticVehicleEx(414, 2207.7075, -2567.5525, 13.4890, -92.1000,-1,-1,TIME_RESPAWN); //Mule
//Heladero
CochesHeladero[10] = AddStaticVehicleEx(423, 2391.0500, -1484.3591, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[11] = AddStaticVehicleEx(423, 2391.1855, -1490.7537, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[12] = AddStaticVehicleEx(423, 2391.0601, -1497.4470, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[13] = AddStaticVehicleEx(423, 2391.2441, -1503.7714, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
CochesHeladero[14] = AddStaticVehicleEx(423, 2391.6133, -1510.3080, 23.7537, -89.7000, 3, 1,TIME_RESPAWN); //Heladero
// Piloto JOB.
AeroCar[0] = AddStaticVehicleEx(519, 1570.0000, -2635.0000, 14.5592, 0.0000, -1, -1,TIME_RESPAWN); // Shamal X4.
AeroCar[1] = AddStaticVehicleEx(519, 1530.0000, -2635.0000, 14.5592, 0.0000, -1, -1,TIME_RESPAWN);
AeroCar[2] = AddStaticVehicleEx(519, 1490.0000, -2635.0000, 14.5592, 0.0000, -1, -1,TIME_RESPAWN);
AeroCar[3] = AddStaticVehicleEx(519, 1450.0000, -2635.0000, 14.5592, 0.0000, -1, -1,TIME_RESPAWN);
AeroCar[4] = AddStaticVehicleEx(511, 1465.0000, -2440.0000, 14.8871, 180.0000, -1, -1,TIME_RESPAWN); // Eagle X2.
AeroCar[5] = AddStaticVehicleEx(511, 1425.0000, -2440.0000, 14.8871, 180.0000, -1, -1,TIME_RESPAWN); // Maverick X4.
AeroCar[6] = AddStaticVehicleEx(487, 1564.3584, -2414.1577, 13.6179, 180.0000, -1, -1,TIME_RESPAWN);
AeroCar[7] = AddStaticVehicleEx(487, 1646.9879, -2414.2773, 13.6179, 180.0000, -1, -1,TIME_RESPAWN);
AeroCar[8] = AddStaticVehicleEx(487, 1812.7338, -2413.2756, 13.6179, 180.0000, -1, -1,TIME_RESPAWN);
AeroCar[9] = AddStaticVehicleEx(487, 1726.6086, -2414.5071, 13.6179, 180.0000, -1, -1,TIME_RESPAWN);

//job granjero cosechadoras
//AddStaticVehicleEx(532,-113.6863,-5.1287,4.0906,70.6139,0,0,60000);
//AddStaticVehicleEx(532,-108.5597,6.1032,4.0919,65.7671,0,0,60000);
//AddStaticVehicleEx(532,-104.8710,16.5226,4.0923,66.2940,0,0,60000);
//Otros
// HireCar I
Rentbike[0] = AddStaticVehicleEx(462, 1512.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[1] = AddStaticVehicleEx(462, 1510.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[2] = AddStaticVehicleEx(462, 1508.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[3] = AddStaticVehicleEx(462, 1506.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[4] = AddStaticVehicleEx(462, 1516.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[5] = AddStaticVehicleEx(462, 1520.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[6] = AddStaticVehicleEx(462, 1522.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[7] = AddStaticVehicleEx(462, 1518.0000, -1740.8000, 13.0406, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[8] = AddStaticVehicleEx(462, 1224.0000, -1414.6023, 12.7872, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[9] = AddStaticVehicleEx(462, 1228.0000, -1414.6023, 12.7872, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[10] = AddStaticVehicleEx(462, 1226.0000, -1414.6023, 12.7872, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[11] = AddStaticVehicleEx(462, 1216.0000, -1414.6023, 12.7872, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[12] = AddStaticVehicleEx(462, 1214.0000, -1414.6023, 12.7872, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[13] = AddStaticVehicleEx(462, 1212.0000, -1414.6023, 12.7872, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[14] = AddStaticVehicleEx(462, 491.0957, -1270.1649, 15.2399, 216.8087, 1, 1, TIME_RESPAWN);
Rentbike[15] = AddStaticVehicleEx(462, 486.5281, -1273.8702, 15.2399, 216.8087, 1, 1, TIME_RESPAWN);
Rentbike[16] = AddStaticVehicleEx(462, 489.6524, -1271.4834, 15.2399, 216.8087, 1, 1, TIME_RESPAWN);
Rentbike[17] = AddStaticVehicleEx(462, 488.0468, -1272.7214, 15.2399, 216.8087, 1, 1, TIME_RESPAWN);
Rentbike[18] = AddStaticVehicleEx(462, 1860.5000, -1356.0000, 13.0374, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[19] = AddStaticVehicleEx(462, 1860.5000, -1358.0000, 13.0374, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[20] = AddStaticVehicleEx(462, 1860.5000, -1360.0000, 13.0374, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[21] = AddStaticVehicleEx(462, 1860.5000, -1362.0000, 13.0374, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[22] = AddStaticVehicleEx(462, 2001.3268, -2223.5132, 12.9504, 26.7069, 1, 1, TIME_RESPAWN);
Rentbike[23] = AddStaticVehicleEx(462, 1949.9087, -2235.0537, 12.9504, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[24] = AddStaticVehicleEx(462, 1944.8303, -2234.4299, 12.9504, 356.2845, 1, 1, TIME_RESPAWN);
Rentbike[25] = AddStaticVehicleEx(462, 1939.9930, -2234.0200, 12.9504, 356.4741, 1, 1, TIME_RESPAWN);
Rentbike[26] = AddStaticVehicleEx(462, 1991.9325, -2227.6648, 12.9504, 28.7993, 1, 1, TIME_RESPAWN);
Rentbike[27] = AddStaticVehicleEx(462, 1996.5547, -2225.3997, 12.9504, 26.7069, 1, 1, TIME_RESPAWN);
Rentbike[28] = AddStaticVehicleEx(462, 1750.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[29] = AddStaticVehicleEx(462, 1748.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[30] = AddStaticVehicleEx(462, 1746.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[31] = AddStaticVehicleEx(462, 1736.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[32] = AddStaticVehicleEx(462, 1734.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[33] = AddStaticVehicleEx(462, 1732.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[34] = AddStaticVehicleEx(462, 1730.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[35] = AddStaticVehicleEx(462, 1728.0000, -1862.0000, 13.0621, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[36] = AddStaticVehicleEx(462, 1264.2329, -1791.6602, 13.1010, 180.0000, 1, 1, TIME_RESPAWN);
Rentbike[37] = AddStaticVehicleEx(462, 1262.2329, -1791.6602, 13.1010, 180.0000, 1, 1, TIME_RESPAWN);
Rentbike[38] = AddStaticVehicleEx(462, 1266.2329, -1791.6602, 13.1010, 180.0000, 1, 1, TIME_RESPAWN);
Rentbike[39] = AddStaticVehicleEx(462, 1268.2329, -1791.6602, 13.1010, 180.0000, 1, 1, TIME_RESPAWN);
// Coches. +4
// Idelwood.
Rentbike[40] = AddStaticVehicleEx(445, 2154.6958, -1739.4088, 13.2342, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[41] = AddStaticVehicleEx(426, 2169.6477, -1739.4000, 13.2342, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[42] = AddStaticVehicleEx(426, 2159.7744, -1739.4000, 13.2342, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[43] = AddStaticVehicleEx(445, 2164.5188, -1739.4000, 13.2342, 0.0000, 1, 1, TIME_RESPAWN);
// Aero.
Rentbike[44] = AddStaticVehicleEx(445, 1546.2059, -2211.3000, 13.2809, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[45] = AddStaticVehicleEx(426, 1542.8549, -2211.3000, 13.2809, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[46] = AddStaticVehicleEx(445, 1552.7811, -2211.3000, 13.2809, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[47] = AddStaticVehicleEx(426, 1549.5381, -2211.3000, 13.2809, 0.0000, 1, 1, TIME_RESPAWN);
// Barcos + 6
Rentbike[48] = AddStaticVehicleEx(484, 114.4421, -1829.9877, 0.0354, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[49] = AddStaticVehicleEx(484, 114.8546, -1886.7174, 0.0354, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[50] = AddStaticVehicleEx(454, 115.9869, -1842.2665, 0.3659, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[51] = AddStaticVehicleEx(454, 115.8444, -1874.1157, 0.3659, 90.0000, 1, 1, TIME_RESPAWN);
Rentbike[52] = AddStaticVehicleEx(493, 130.1204, -1850.3674, 0.0780, 0.0000, 1, 1, TIME_RESPAWN);
Rentbike[53] = AddStaticVehicleEx(493, 130.0789, -1864.2963, 0.0780, -180.0000, 1, 1, TIME_RESPAWN);
//Autos Vip
//CarVIP[0] = AddStaticVehicleEx(560, 3111.6760,-652.1522,10.6664,268.5829,99,51,TIME_RESPAWN); // Auto Vip 15
//CarVIP[1] = AddStaticVehicleEx(451, 3091.3464,-650.9921,10.8207,355.8454,12,45,TIME_RESPAWN); // Auto Vip 16
///CarVIP[2] = AddStaticVehicleEx(434, 3110.6851,-664.4827,11.0341,268.0104,56,2,TIME_RESPAWN);  // Auto Vip 17
//CarVIP[3] = AddStaticVehicleEx(429, 3111.6465,-656.3209,10.6569,269.1187,3,5,TIME_RESPAWN); // Auto Vip 18
//CarVIP[4] = AddStaticVehicleEx(424, 3105.9866,-652.8840,10.9553,356.8055,5,7,TIME_RESPAWN); // Auto Vip 19
//CarVIP[5] = AddStaticVehicleEx(415, 3087.6616,-651.3013,10.8771,356.2128,7,8,TIME_RESPAWN); // Auto Vip 20
//CarVIP[6] = AddStaticVehicleEx(480, 3111.9724,-646.5659,10.6997,272.1165,1,5,TIME_RESPAWN); // Auto Vip 21
//CarVIP[7] = AddStaticVehicleEx(494, 3102.5271,-651.4576,11.0859,356.3582,8,3,TIME_RESPAWN); // Auto Vip 22
//CarVIP[8] = AddStaticVehicleEx(502, 3098.6997,-651.4344,11.0390,357.9201,5,51,TIME_RESPAWN); // Auto Vip 23
//CarVIP[9] = AddStaticVehicleEx(503, 3095.3970,-651.2744,11.0378,357.8214,8,1,TIME_RESPAWN); // Auto Vip 24
//CarVIP[10] = AddStaticVehicleEx(506, 3084.3352,-650.9185,10.7950,357.0737,9,45,TIME_RESPAWN); // Auto Vip 25
//CarVIP[11] = AddStaticVehicleEx(559, 3111.3301,-660.5445,10.6432,268.2041,13,76,TIME_RESPAWN); // Auto Vip 26
//Autos de chocones
VortexVehicle[0] = AddStaticVehicleEx(539,396.9688, -2054.3696, 7.4113, 180.0000,0,1,TIME_RESPAWN);
VortexVehicle[1] = AddStaticVehicleEx(539,393.2085, -2054.1755, 7.4113, 180.0000,3,125,TIME_RESPAWN);
VortexVehicle[2] = AddStaticVehicleEx(539,389.4496, -2054.2319, 7.4113, 180.0000,6,3,TIME_RESPAWN);
VortexVehicle[3] = AddStaticVehicleEx(539,385.5569, -2054.3420, 7.4113, 180.0000,144,7,TIME_RESPAWN);
VortexVehicle[4] = AddStaticVehicleEx(539,381.6167, -2054.3047, 7.4113, 180.0000,6,17,TIME_RESPAWN);
// IsaLicCar - Test de conducción "DrivingTest" - Autoescuela. 5 Minutos respawn.
Test_Vehicle[0] = AddStaticVehicleEx(405, 2052.4758, -1904.0000, 13.3424, 180.0000, 1, 1, 300);
Test_Vehicle[1] = AddStaticVehicleEx(405, 2055.9727, -1904.0000, 13.3424, 180.0000, 1, 1, 300);
Test_Vehicle[2] = AddStaticVehicleEx(405, 2059.2859, -1904.0000, 13.3424, 180.0000, 1, 1, 300);
Test_Vehicle[3] = AddStaticVehicleEx(405, 2062.4067, -1904.0000, 13.3424, 180.0000, 1, 1, 300);
Test_Vehicle[4] = AddStaticVehicleEx(405, 2065.6514, -1904.0000, 13.3424, 180.0000, 1, 1, 300);
Test_Vehicle[5] = AddStaticVehicleEx(405, 2068.9370, -1904.0000, 13.3424, 180.0000, 1, 1, 300);
// Vehiculos de Entorno. Uso especifico del /puente en estos. // Respawn en 5 minutos.

Entorno_Vehicle[0] = AddStaticVehicleEx(566, 1562.9750, -1011.5674, 23.5058, 180.0000, -1, -1, 300);
Entorno_Vehicle[1] = AddStaticVehicleEx(401, 1623.7865, -1009.9166, 23.5191, 162.8194, -1, -1, 300);
Entorno_Vehicle[2] = AddStaticVehicleEx(404, 1632.4469, -1012.7485, 23.4710, 162.9025, -1, -1, 300);
Entorno_Vehicle[3] = AddStaticVehicleEx(404, 2342.2354, -1314.1765, 23.7245, 0.0000, -1, -1, 300);
Entorno_Vehicle[4] = AddStaticVehicleEx(410, 2414.1270, -1285.6002, 24.0667, 0.0000, -1, -1, 300);
Entorno_Vehicle[5] = AddStaticVehicleEx(412, 2408.8276, -1397.5037, 23.6406, 0.0000, -1, -1, 300);
Entorno_Vehicle[6] = AddStaticVehicleEx(413, 2818.0344, -1187.6563, 25.1775, 90.0000, -1, -1, 300);
Entorno_Vehicle[7] = AddStaticVehicleEx(418, 2537.2986, -1474.9231, 23.9166, -90.0000, -1, -1, 300);
Entorno_Vehicle[8] = AddStaticVehicleEx(418, 2096.0647, -1560.5331, 13.0465, 180.0000, -1, -1, 300);
Entorno_Vehicle[9] = AddStaticVehicleEx(440, 2095.7764, -1568.4220, 13.1434, 180.0000, -1, -1, 300);
Entorno_Vehicle[10] = AddStaticVehicleEx(445, 1932.9326, -1575.9960, 13.1802, 0.0000, -1, -1, 300);
//Entorno_Vehicle[11] = AddStaticVehicleEx(602, 1797.2867, -1694.1200, 13.2860, 90.0000, -1, -1, 300);
Entorno_Vehicle[12] = AddStaticVehicleEx(467, 1687.4237, -1919.4130, 12.9373, 0.0000, -1, -1, 300);
Entorno_Vehicle[13] = AddStaticVehicleEx(474, 1795.0991, -2052.2849, 13.1545, 90.0000, -1, -1, 300);
Entorno_Vehicle[14] = AddStaticVehicleEx(478, 1928.4716, -2141.7629, 13.4057, 0.0000, -1, -1, 300);
Entorno_Vehicle[15] = AddStaticVehicleEx(479, 1947.0747, -2117.3096, 13.1663, -90.0000, -1, -1, 300);
//Entorno_Vehicle[16] = AddStaticVehicleEx(483, 2241.9277, -2236.2017, 13.4178, 0.0000, -1, -1, 300); Sustraidas por nueva HQ Hitman
//Entorno_Vehicle[17] = AddStaticVehicleEx(483, 2247.4565, -2240.9268, 13.4178, 0.0000, -1, -1, 300);
Entorno_Vehicle[18] = AddStaticVehicleEx(485, 1796.7141, -2392.8823, 13.0492, 0.0000, -1, -1, 300);
Entorno_Vehicle[19] = AddStaticVehicleEx(485, 1554.7838, -2656.0156, 13.0391, 90.0000, -1, -1, 300);
Entorno_Vehicle[20] = AddStaticVehicleEx(491, 1391.5635, -2330.2224, 13.2031, 0.0000, -1, -1, 300);
Entorno_Vehicle[21] = AddStaticVehicleEx(404, 1404.5948, -2347.7246, 13.0511, 0.0000, -1, -1, 300);
Entorno_Vehicle[22] = AddStaticVehicleEx(482, 1384.8737, -2331.5562, 13.3598, 180.0000, -1, -1, 300);
Entorno_Vehicle[23] = AddStaticVehicleEx(517, 1441.2542, -2348.1641, 13.2553, 0.0000, -1, -1, 300);
Entorno_Vehicle[24] = AddStaticVehicleEx(498, 1675.2642, -2075.5940, 13.5716, -90.0000, -1, -1, 300);
Entorno_Vehicle[25] = AddStaticVehicleEx(516, 1560.3126, -2331.9265, 13.0482, 90.0000, -1, -1, 300);
Entorno_Vehicle[26] = AddStaticVehicleEx(516, 1438.1077, -2224.8840, 13.0544, 0.0000, -1, -1, 300);
Entorno_Vehicle[27] = AddStaticVehicleEx(527, 1388.5293, -2241.8113, 12.5445, 0.0000, -1, -1, 300);
Entorno_Vehicle[28] = AddStaticVehicleEx(529, 1365.1084, -2214.3953, 12.9845, 90.0000, -1, -1, 300);
Entorno_Vehicle[29] = AddStaticVehicleEx(540, 1365.3439, -2221.3518, 13.1615, -90.0000, -1, -1, 300);
Entorno_Vehicle[30] = AddStaticVehicleEx(542, 1213.9509, -2113.9275, 61.7687, 300.1873, -1, -1, 300);
Entorno_Vehicle[31] = AddStaticVehicleEx(543, 1134.9310, -2351.7224, 12.2961, 84.7612, -1, -1, 300);
Entorno_Vehicle[32] = AddStaticVehicleEx(547, 1014.0906, -1927.0769, 11.9612, 0.0000, -1, -1, 300);
Entorno_Vehicle[33] = AddStaticVehicleEx(551, 850.4015, -2041.2623, 12.4782, 0.0000, -1, -1, 300);
Entorno_Vehicle[34] = AddStaticVehicleEx(604, 1077.6149, -2039.1213, 52.6962, 7.6327, -1, -1, 300);
Entorno_Vehicle[35] = AddStaticVehicleEx(604, 698.1439, -1709.9728, 2.7969, 90.0000, -1, -1, 300);
//Entorno_Vehicle[36] = AddStaticVehicleEx(477, 1778.0640, -1687.8700, 13.2885, 90.0000, -1, -1, 300);
Entorno_Vehicle[37] = AddStaticVehicleEx(605, 2822.5505, -1671.7245, 9.5359, 180.0000, -1, -1, 300);
Entorno_Vehicle[38] = AddStaticVehicleEx(605, 2025.5454, -818.3784, 128.2437, 0.0000, -1, -1, 300);
Entorno_Vehicle[39] = AddStaticVehicleEx(609, 2095.9915, -963.4331, 51.9542, 180.0000, -1, -1, 300);
Entorno_Vehicle[40] = AddStaticVehicleEx(418, 2290.3137, -912.4093, 26.2253, 0.0000, -1, -1, 300);
Entorno_Vehicle[41] = AddStaticVehicleEx(474, 2428.8965, -1017.4684, 53.8156, 13.7662, -1, -1, 300);
Entorno_Vehicle[42] = AddStaticVehicleEx(576, 2581.3965, -1119.7141, 65.6062, 359.2786, -1, -1, 300);
Entorno_Vehicle[43] = AddStaticVehicleEx(575, 2636.1899, -1076.4950, 69.1249, 0.0000, -1, -1, 300);
Entorno_Vehicle[44] = AddStaticVehicleEx(566, 2121.0688, -1164.6121, 23.6578, 90.0000, -1, -1, 300);
Entorno_Vehicle[45] = AddStaticVehicleEx(549, 2123.0657, -1181.1600, 23.4675, 0.0000, -1, -1, 300);
Entorno_Vehicle[46] = AddStaticVehicleEx(546, 2095.6946, -1363.7897, 23.4965, 0.0000, -1, -1, 300);
Entorno_Vehicle[47] = AddStaticVehicleEx(543, 2100.0330, -1363.4846, 23.5958, 180.0000, -1, -1, 300);
Entorno_Vehicle[48] = AddStaticVehicleEx(535, 2210.7759, -1318.0851, 23.3885, 0.0000, -1, -1, 300);
Entorno_Vehicle[49] = AddStaticVehicleEx(516, 2170.3718, -1507.3944, 23.5556, 0.0000, -1, -1, 300);
Entorno_Vehicle[50] = AddStaticVehicleEx(491, 2166.5105, -1508.7043, 23.5405, 180.0000, -1, -1, 300);
//Entorno_Vehicle[51] = AddStaticVehicleEx(491, 2482.9185, -1953.1516, 13.0507, 0.0000, -1, -1, 300);
//Entorno_Vehicle[52] = AddStaticVehicleEx(479, 2489.1392, -1953.3572, 12.9310, 0.0000, -1, -1, 300);
//Entorno_Vehicle[53] = AddStaticVehicleEx(478, 2502.1118, -1953.5696, 13.1234, 180.0000, -1, -1, 300);
Entorno_Vehicle[51] = AddStaticVehicleEx(604, 698.4434, -1728.2041, 8.3232, 273.2831, -1, -1, 300);
Entorno_Vehicle[52] = AddStaticVehicleEx(576, 1471.8654, -1238.1091, 13.2961, 90.0000, -1, -1, 300);
Entorno_Vehicle[53] = AddStaticVehicleEx(605, 2563.7590, -1980.0149, 3.3638, 12.1671, -1, -1, 300);
Entorno_Vehicle[54] = AddStaticVehicleEx(478, 2352.3496, -2095.2676, 13.2582, 90.0000, -1, -1, 300);
Entorno_Vehicle[55] = AddStaticVehicleEx(467, 2296.0178, -2151.0723, 13.0524, -90.0000, -1, -1, 300);
Entorno_Vehicle[56] = AddStaticVehicleEx(459, 2137.1401, -2029.5188, 7.8894, 46.6882, -1, -1, 300);
Entorno_Vehicle[57] = AddStaticVehicleEx(458, 1940.2209, -1981.2578, 13.2529, -90.0000, -1, -1, 300);
Entorno_Vehicle[58] = AddStaticVehicleEx(442, 1920.7731, -1861.5994, 13.1519, 0.0000, -1, -1, 300);
Entorno_Vehicle[59] = AddStaticVehicleEx(436, 1918.3862, -1788.2731, 12.8844, 90.0000, -1, -1, 300);
Entorno_Vehicle[60] = AddStaticVehicleEx(412, 2033.4381, -1688.6672, 13.0543, 0.0000, -1, -1, 300);
Entorno_Vehicle[61] = AddStaticVehicleEx(410, 2030.1615, -1689.8401, 12.9501, 180.0000, -1, -1, 300);
Entorno_Vehicle[62] = AddStaticVehicleEx(404, 1705.7410, -1537.7737, 12.8752, 0.0000, -1, -1, 300);
Entorno_Vehicle[63] = AddStaticVehicleEx(401, 1629.6174, -1551.5126, 13.2223, 0.0000, -1, -1, 300);
Entorno_Vehicle[64] = AddStaticVehicleEx(410, 1576.5566, -1398.6774, 13.3078, 90.0000, -1, -1, 300);
Entorno_Vehicle[65] = AddStaticVehicleEx(422, 477.5395, -1824.0565, 5.1696, 0.0000, -1, -1, 300);
Entorno_Vehicle[66] = AddStaticVehicleEx(436, 447.7259, -1801.7736, 5.0512, 0.0000, -1, -1, 300);
Entorno_Vehicle[67] = AddStaticVehicleEx(440, 444.2422, -1802.5887, 5.3944, 180.0000, -1, -1, 300);
Entorno_Vehicle[68] = AddStaticVehicleEx(466, 181.7009, -1774.7048, 3.4329, 90.0000, -1, -1, 300);
Entorno_Vehicle[69] = AddStaticVehicleEx(467, 197.7375, -1438.4519, 12.6366, 319.1837, -1, -1, 300);
Entorno_Vehicle[70] = AddStaticVehicleEx(478, 195.023, -1436.851, 13.063, 138.7115, -1, -1, 300);
Entorno_Vehicle[71] = AddStaticVehicleEx(492, 211.893, -1423.280, 13.042, 314.3645, -1, -1, 300);
Entorno_Vehicle[72] = AddStaticVehicleEx(499, 439.6331, -1300.7157, 14.8686, 212.5676, -1, -1, 300);
Entorno_Vehicle[73] = AddStaticVehicleEx(518, 770.5792, -1111.8448, 23.5128, 0.0000, -1, -1, 300);
Entorno_Vehicle[74] = AddStaticVehicleEx(527, 813.5001, -1275.9255, 12.5784, 0.0000, -1, -1, 300);
Entorno_Vehicle[75] = AddStaticVehicleEx(529, 930.1049, -1066.7533, 23.7934, 90.0000, -1, -1, 300);
Entorno_Vehicle[76] = AddStaticVehicleEx(540, 1085.5989, -1192.8551, 17.8149, 0.0000, -1, -1, 300);
Entorno_Vehicle[77] = AddStaticVehicleEx(542, 1089.3817, -1192.7715, 17.7661, 180.0000, -1, -1, 300);
Entorno_Vehicle[78] = AddStaticVehicleEx(546, 1126.3180, -1210.6071, 17.5925, 90.0000, -1, -1, 300);
Entorno_Vehicle[79] = AddStaticVehicleEx(550, 1035.9180, -1027.0673, 31.7696, 180.0000, -1, -1, 300);
Entorno_Vehicle[80] = AddStaticVehicleEx(566, 1207.9916, -978.7584, 42.9804, 0.0000, -1, -1, 300);
Entorno_Vehicle[81] = AddStaticVehicleEx(575, 1211.9390, -978.3211, 42.7753, 180.0000, -1, -1, 300);
Entorno_Vehicle[82] = AddStaticVehicleEx(602, 1258.1978, -1431.2502, 13.1382, 0.0000, -1, -1, 300);
Entorno_Vehicle[83] = AddStaticVehicleEx(604, 1207.6047, -1647.5232, 13.1584, 0.0000, -1, -1, 300);
Entorno_Vehicle[84] = AddStaticVehicleEx(605, 965.6667, -1667.5197, 13.0190, 21.7161, -1, -1, 300);
Entorno_Vehicle[85] = AddStaticVehicleEx(576, 887.9802, -1668.3552, 13.0358, 0.0000, -1, -1, 300);
Entorno_Vehicle[86] = AddStaticVehicleEx(549, 883.5344, -1669.1744, 12.5427, 0.0000, -1, -1, 300);
Entorno_Vehicle[87] = AddStaticVehicleEx(546, 870.1611, -1678.6875, 13.0524, 180.0000, -1, -1, 300);
Entorno_Vehicle[88] = AddStaticVehicleEx(540, 795.0365, -1530.0129, 13.0621, 41.0470, -1, -1, 300);
Entorno_Vehicle[89] = AddStaticVehicleEx(605, 1411.3271, -1327.9296, 8.1571, 0.0000, -1, -1, 300);
Entorno_Vehicle[90] = AddStaticVehicleEx(542, 1424.3577, -1293.7539, 13.0593, 0.0000, -1, -1, 300);
Entorno_Vehicle[91] = AddStaticVehicleEx(534, 1681.3331, -1207.3546, 19.3726, 90.0000, -1, -1, 300);
Entorno_Vehicle[92] = AddStaticVehicleEx(604, 2368.4939, -1696.8654, 13.0337, 90.0000, -1, -1, 300);
Entorno_Vehicle[93] = AddStaticVehicleEx(517, 2501.3357, -1755.3676, 13.0779, 0.0000, -1, -1, 300);
Entorno_Vehicle[94] = AddStaticVehicleEx(491, 2454.2183, -2026.6919, 13.1497, 0.0000, -1, -1, 300);
Entorno_Vehicle[95] = AddStaticVehicleEx(483, 2131.1870, -1939.3383, 13.4127, 0.0000, -1, -1, 300);
Entorno_Vehicle[96] = AddStaticVehicleEx(479, 2065.8005, -1882.6790, 13.1519, 90.0000, -1, -1, 300);
Entorno_Vehicle[97] = AddStaticVehicleEx(475, 1208.3295, -1878.8546, 12.9672, 90.0000, -1, -1, 300);
Entorno_Vehicle[98] = AddStaticVehicleEx(467, 362.5070, -2019.7186, 7.4451, 0.0000, -1, -1, 300);
Entorno_Vehicle[99] = AddStaticVehicleEx(458, 478.4814, -1527.4980, 19.5817, 17.3186, -1, -1, 300);
Entorno_Vehicle[100] = AddStaticVehicleEx(479, -40.6772, -1539.1440, 2.3655, 0.0000, -1, -1, 300);
Entorno_Vehicle[101] = AddStaticVehicleEx(478, -71.1179, -1154.1501, 1.5512, 330.1277, -1, -1, 300);
Entorno_Vehicle[102] = AddStaticVehicleEx(492, -65.7628, -1157.6195, 1.2500, 150.1838, -1, -1, 300);
Entorno_Vehicle[103] = AddStaticVehicleEx(604, 327.7709, -567.4158, 9.8966, 0.0000, -1, -1, 300);
Entorno_Vehicle[104] = AddStaticVehicleEx(605, 184.1194, -86.8398, 1.1224, 0.0000, -1, -1, 300);
Entorno_Vehicle[105] = AddStaticVehicleEx(496, 638.1689, -499.9856, 15.8876, -90.000, -1, -1, 300);
Entorno_Vehicle[106] = AddStaticVehicleEx(517, 668.0020, -546.2834, 15.9413, 89.1296, -1, -1, 300);
Entorno_Vehicle[107] = AddStaticVehicleEx(529, 1393.9911, -662.8699, 93.2169, 317.8238, -1, -1, 300);
Entorno_Vehicle[108] = AddStaticVehicleEx(605, 1382.0992, -291.6644, 1.5362, 338.5979, -1, -1, 300);
Entorno_Vehicle[109] = AddStaticVehicleEx(604, 2198.7769, -2521.9685, 13.0420, 0.0000, -1, -1, 300);
//**************************************
/*CreatePickup(1210, 23, 1559.669921,-1649.403320,4990.585937); // Pickup /autorizar.
CreatePickup(1318, 23, 1555.0,-1648.085815,4985.34); // Ascensor Prisión.
//Arriba
CreatePickup(1318, 23, 1554.822021,-1648.085815,4995.55); //
CreatePickup(1318, 23, 1554.630126,-1709.477050,4995.55); //
//Abajo
CreatePickup(1318, 23, 1554.822021,-1648.085815,4990.7); //
CreatePickup(1318, 23, 1554.630126,-1709.477050,4990.7); //
*/
//*******************otros*******************
//*******************pickup ticket*******************
ticketR = CreatePickup(1239,23,359.3290,-2032.0443,7.8359, 0);
//*******************pickup bomba*******************
bombita = CreatePickup(1252,23,1296.5500,-981.9438,32.6953, 0);
//**************************************
//*******************Teléfono público.*******************
CreatePickup(1239, 23, 1723.0403,-1720.8251,13.5440);
CreatePickup(1239, 23, 1540.4768,-1722.1370,13.5546);
CreatePickup(1239, 23, 1828.9257,-1850.9833,13.5781);
CreatePickup(1239, 23, 1710.4623,-1604.9115,13.5469);
CreatePickup(1239, 23, 1711.2399,-1605.5371,13.5469);
CreatePickup(1239, 23, 1310.635742,-911.796226,38.555812);
CreatePickup(1239, 23, 355.3920,-1365.1967,14.4665);
CreatePickup(1239, 23, 356.8177,-1364.4913,14.4850);
CreatePickup(1239, 23, 1801.3276,-1863.0636,13.5755);
CreatePickup(1239, 23, 1803.0021,-1863.0212,13.5756);
CreatePickup(1239, 23, 350.2411,-1785.1615,5.3446);

//**************************************FIN Map icons**************************************

//*******************MAPEOS DE PUERTAS Y OBJETOS*******************
depgateA = CreateDynamicObject(19870, 1630.40356, -1862.23682, 14.25000,   0.00000, 0.00000, 0.00000);
depgateB = CreateDynamicObject(19870, 1639.95410, -1862.23657, 14.25000,   0.00000, 0.00000, -180.00000);
SprayLS = CreateDynamicObject(971, 2071.57642, -1831.40344, 12.94390,   0.00000, 0.00000, 90.00000);
portonbarlcn = CreateDynamicObject(980, 1374.02002, -1883.01721, 13.80000,   0.00000, 0.00000, 0.00000);

//*******************BANCO LS*******************
Bankito = CreateObject(5720, 982.34, -1169.66, 32.82,   0.00, 0.00, 0.00);
SetObjectMaterial(Bankito, 2, 3942, "bistro", "ahoodfence2", 0);
SetObjectMaterial(Bankito, 4, 16016, "des_n", "ranchwall1", 0);
SetObjectMaterial(Bankito, 5, 16005, "des_stownmain2", "des_redslats", 0);
SetObjectMaterial(Bankito, 6, 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0);
SetObjectMaterial(Bankito, 7, 16021, "des_geyser", "shingles1", 0);
SetObjectMaterial(Bankito, 8, 16005, "des_stownmain2", "sanruf", 0);
SetObjectMaterial(Bankito, 9, 6295, "lawland2", "lightglass", 0);
// 2. Próximamente.
//******************* SAPD Prisión *******************
fen1 = CreateDynamicObject(969,1417.90002441,-1554.90002441,4334.70019531,0.00000000,269.74975586,358.50000000); //object(electricgate) (1)
fen2 = CreateDynamicObject(969,1425.90002441,-1555.00000000,4334.70019531,0.00000000,269.74743652,359.49755859); //object(electricgate) (2)
fen3 = CreateDynamicObject(969,1429.50000000,-1554.80004883,4334.70019531,0.00000000,269.74731445,359.49462891); //object(electricgate) (3)
fen4 = CreateDynamicObject(969,1422.19995117,-1567.00000000,4334.60009766,0.00000000,269.74743652,179.99456787); //object(electricgate) (4)
fen5 = CreateDynamicObject(969,1414.80004883,-1566.69995117,4334.60009766,0.00000000,269.74182129,179.99450684); //object(electricgate) (5)
fen6 = CreateDynamicObject(969,1430.19995117,-1566.69995117,4334.70019531,0.00000000,269.74182129,179.99450684); //object(electricgate) (6)
JDoor1 = CreateButton(1418.19995117,-1555.09997559,4340.79980469, 0.0);
JDoor2 = CreateButton(1426.00000000,-1555.09997559,4340.79980469, 0.0);
JDoor3 = CreateButton(1429.80004883,-1554.90002441,4340.79980469, 0.0);
JDoor4 = CreateButton(1425.80004883,-1566.50000000,4340.79980469, 180);
JDoor5 = CreateButton(1433.80004883,-1566.40002441,4340.79980469, 180);
JDoor6 = CreateButton(1418.09997559,-1566.40002441,4340.79980469, 180);
RusosBT = CreateButton(737.2925, -1212.4109, 2217.4765, -90);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Poder Judicial, nueva HQ.
// (Puertas de acceso).
//PJBT = CreateButton(1440.47095, -1469.90955, 1616.74414, 180);
//PJDOOR = CreateDynamicObject(1495, 1440.71216, -1469.97485, 1615.26636,   0.00000, 0.00000, 0.00000);
//PJBT2 = CreateButton(1422.5317, -1469.8695, 1617.8890, 180);
//PJDOOR2 = CreateDynamicObject(1495, 1422.93811, -1469.96814, 1616.24707,   0.00000, 0.00000, 0.00000);
//PJBT3 = CreateButton(1425.13538, -1481.79163, 1617.80505, 180.0);
// (Prisión Judicial).
PJCELDA = CreateDynamicObject(19303, 1436.45630, -1479.50000, 1617.51892,   0.00000, 0.00000, 0.00000);
PJCELDA2 = CreateDynamicObject(19303, 1432.98425, -1479.50000, 1617.51892,   0.00000, 0.00000, 0.00000);
PJCELDA3 = CreateDynamicObject(5856, 1451.96338, -1507.66687, 1605.03467,   0.00000, 0.00000, 90.00000);
PJCELDA4 = CreateDynamicObject(5856, 1444.35950, -1523.42847, 1605.03467,   0.00000, 0.00000, 90.00000);
// Rusos, Nueva HQ.
RusosDoor1 = CreateDynamicObject(1557, 737.41901, -1212.03296, 2216.07910,   0.00000, 0.00000, 90.00000); // Derecha
RusosDoor2 = CreateDynamicObject(1557, 737.41998, -1209.01196, 2216.07910,   0.00000, 0.00000, -90.00000); // Izquierda
//*******************CIA*******************

cia1 = CreateDynamicObject(1536, 244.81964, 72.43684, 1002.63965,   0.00000, 0.00000, 0.00000);
cia2 = CreateDynamicObject(1536, 247.82359, 72.47114, 1002.63959,   0.00000, 0.00000, 180.00000);
//rejacia = CreateDynamicObject(980, 939.32, -1029.41, 33.58,   0.00, 0.00, 359.89); //cerrada
buttomcia = CreateButton(247.64801,72.34955,1004.14624, 0.0);
buttomcia2 = CreateButton(247.59158,72.80640,1004.14624, 180);
// ALEPH, Usando script de CIA.
//rejaALEPH = CreateDynamicObject(980, 1981.42188, -1278.69995, 4.84980,   0.00000, 0.00000, 180.00000);
//rejaALEPH2 = CreateDynamicObject(980, 1992.91956, -1278.72607, 4.84980,   0.00000, 0.00000, 0.00000);
//*******************MAFIA RUSA*******************
portoru = CreateDynamicObject(2990, -2281.21021, 120.32613, 38.03923,   0.00000, 0.00000, 89.07965);
//*******************GUARDIA NACIONAL*******************
saem1 = CreateDynamicObject(980, 2457.80, -2254.76, 26.90,   0.00, 0.00, 45.17); // Cerrada
saem2 = CreateDynamicObject(980, 2338.10571, -2353.88281, 15.2,   0.0, 0.0, 44.0); // Cerrada
saem3 = CreateDynamicObject(980, 2273.59570, -2663.29053, 15.2,   0.0, 0.0, 90.0); // Cerrada
saemSF = CreateDynamicObject(980, -1529.04, 482.44, 9.06,   0.00, 0.00, 0.00);// puerta sf
saemLV = CreateDynamicObject(980, 135.24150, 1941.01294, 20.59000,   0.00000, 0.00000, 0.00000); // LV cerrada.
saemLV2 = CreateDynamicObject(980, 348.98410, 1801.11804, 20.27390,   0.00000, 358.25000, 41.75000); // LV cerrada.
//*******************GOBIERNO*******************
/*gobiernogate = CreateDynamicObject(2990,1390.39941406,-1649.69921875,16.29999924,0.00000000,0.00000000,90.00000000);
gobiernogate1 = CreateDynamicObject(16500,1391.29980469,-1629.89941406,12.52500343,0.00000000,90.00000000,0.00000000);*/
//*******************FBI*******************
//FBILobbyLeftBTN[0] = CreateButton(297.66613770,-1498.67749023,-44.59006119,0.79565430); //Lobby Button Left
//FBILobbyLeftBTN[1] = CreateButton(297.24850464,-1498.23107910,-44.59006119,180); //Lobby Button Left
//FBILobbyRightBTN[0] = CreateButton(300.05300903,-1521.40747070,-44.59006119,180); //Lobby Button Right
//FBILobbyRightBTN[1] = CreateButton(300.16033936,-1521.84387207,-44.59006119,0); //Lobby Button Right
//FBIPrivateBTN[0] = CreateButton(298.87384033,-1495.87316895,-27.32773209,270); //Private Office Button
//FBIPrivateBTN[1] = CreateButton(300.49453735,-1495.33837891,-27.28091812,180.49487305); //Private Office Button
//FBIPrivate[0] = CreateDynamicObject(1536,299.29986572,-1492.82666016,-28.73300552,0.00000000,0.00000000,270.00000000,600); //Private Office Door Left
//FBIPrivate[1] = CreateDynamicObject(1536,299.33737183,-1495.83911133,-28.73300552,0.00000000,0.00000000,90.00000000,600); //Private Office Door Right
FBILobbyLeft = CreateDynamicObject(1536,295.40136719,-1498.43457031,-46.13965225,0.00000000,0.00000000,0.00000000,600); //Lobby Door Left
//FBILobbyRight = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,600); //Lobby Door Right
//*******************LSPD*******************
/*LSPD_Derecha = CreateDynamicObject(1495, 1564.76685, -1688.26770, 4989.52588,   0.00000, 0.00000, 90.00000);
BT_Derecha= CreateButton(1564.68835, -1688.47473, 4991.02637, -90.00000);
CreateDynamicObject(19305, 1564.79236, -1688.47473, 4991.02637,   0.00000, 0.00000, 90.00000); // Por el otro lado.

LSPD_Izquierda = CreateDynamicObject(1495, 1564.73792, -1664.65930, 4989.52588,   0.00000, 0.00000, -90.00000);
BT_Izquierda = CreateButton(1564.69055, -1664.41223, 4991.02637, -90.00000);
CreateDynamicObject(19305, 1564.78650, -1664.41223, 4991.02637,   0.00000, 0.00000, 90.00000); // Por el otro lado.
*/
/////////////////////////////////////////////////////
eastlobby1 = CreateDynamicObject(1536,253.14941406,110.59960938,1002.21502686,0.00000000,0.00000000,270.00000000,-1,10,-1,100.0);
eastlobby2 = CreateDynamicObject(1536,253.18457031,107.59960938,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0);
westlobby1 = CreateDynamicObject(1536,239.71582031,116.09179688,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0);
westlobby2 = CreateDynamicObject(1536,239.67968750,119.09960938,1002.21502686,0.00000000,0.00000000,269.98901367,-1,10,-1,100.0);
locker1 = CreateDynamicObject(1536,267.29980469,112.56640625,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0);
locker2 = CreateDynamicObject(1536,264.29980469,112.52929688,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0);
cctv1 = CreateDynamicObject(1536,264.44921875,115.79980469,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0);
cctv2 = CreateDynamicObject(1536,267.46875000,115.83691406,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0);
chief1 = CreateDynamicObject(1536,229.59960938,119.50000000,1009.21875000,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0);
chief2 = CreateDynamicObject(1536,232.59960938,119.53515625,1009.21875000,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0);
eastin = CreateButton(253.44921875,110.59960938,1003.79998779,90.00000000);
westout = CreateButton(239.79492188,116.18457031,1003.87286377,90.00000000);
westin = CreateButton(239.32031250,116.27441406,1003.87286377,270.00000000);
eastout = CreateButton(253.00000000,110.59960938,1003.79998779,270.00000000);
elevator = CreateButton(275.83984375,120.94921875,1005.12280273,90.00000000);
cctvin = CreateButton(264.55566406,115.97949219,1005.12280273,179.99450684);
cctvout = CreateButton(264.55566406,115.69531250,1005.12280273,0.00000000);
lockerin = CreateButton(267.21679688,112.40917969,1005.12280273,0.00000000);
lockerout = CreateButton(267.21679688,112.66992188,1005.12280273,179.99450684);
chiefout = CreateButton(232.50000000,119.38476562,1010.81384277,0.00000000);
chiefin = CreateButton(229.67089844,119.66992188,1010.81384277,179.99450684);
roofkey = CreateButton(1565.93652344,-1667.35058594,28.85165977,179.99450684);
garagekey = CreateButton(1567.14550781,-1689.62011719,-6.69999981,0.00000000);
pdgate1 = CreateDynamicObject(980,1586.73999, -1638.14319, 14.56300,   0.00000, 0.00000, 180.00000);
//pdgate2 = CreateDynamicObject(2990,1545.90002441,-1627.80004883,16.29999924,0.00000000,0.00000000,90.00000000);
pdgate2 = CreateDynamicObject(980, 1546.19897, -1627.59656, 15.28090, 0.00000, 0.00000, 90.00000);
pdgate3 = CreateDynamicObject(969,1643.5000000,-1719.4000000,14.7000000,0.0000000,0.0000000,90.0000000);
//*******************LSTV*******************
tvp = CreateDynamicObject(969, 649.71960, -1359.09595, 12.88290,   0.00000, 0.00000, 90.00000); // Actualizado. 22/12/2015.
/*tvp1 = CreateDynamicObject(969,774.11444092,-1384.98632812,12.92022705,0.00000000,0.00000000,0.00000000);
tvp = CreateDynamicObject(976, 781.77209500,-1330.31884800,12.68660500,0.00000000,0.00000000,-180.85939924);*/
//*******************santana*******************
SantanaReja = CreateDynamicObject(980, 1245.56, -766.85, 94.06,   0.00, 0.00, 0.00);
//*******************Alqaeda*******************
AlqaedaReja = CreateDynamicObject(980, 1023.59998, -371.70001, 75.30000,   0.00000, 0.00000, 181.00000);
//*******************mecanicos*******************
//fmecareja = CreateDynamicObject(980, 2237.36694, -1962.71606, 14.86170,   0.00, 0.00, 180.00); // Taller Antiguo.
EntradaTaller = CreateDynamicObject(19912, 1975.92395, -1780.50000, 18.00000,   0.00000, -90.00000, 0.00000); // Entrada al taller 1 (Nuevo).
EntradaTaller2 = CreateDynamicObject(19912, 2030.15137, -1790.31531, 15.1176,   0.00000, 0.00000, 90.00000); // Entrada al taller 2.
//*******************Sistema*******************
sisporton = CreateDynamicObject(980, 1457.14, -1505.88, 1510.28,   0.00, 0.00, 257.63); //cerrado
//*******************yakuza*******************
yakuzagate = CreateDynamicObject(980, 321.32, -1188.11, 78.08,   0.00, 0.00, 218.45);
//******************Hitman by Alexey*******************
porhit = CreateDynamicObject(980, 2235.10010, -2216.00000, 15.27796,   0.00000, 0.00000, 315.00000); // Porton Entrada HQ
porhitint = CreateDynamicObject(7891,2178.3999000,-2254.8000000,15.4000000,0.0000000,0.0000000,314.0000000); // Porton Interior - Deposito HQ
//*******************rusos*******************
RejaRusa = CreateDynamicObject(980,787.20361328,-1152.45361328,25.40438461,0.00000000,0.00000000,90.00000000);
RejaRusa2 = CreateDynamicObject(980,658.68890381,-1226.62780762,17.62639618,0.00000000,0.00000000,64.00000000);
RejaRusa3 = CreateDynamicObject(980,665.05010986,-1310.76293945,15.35269642,0.00000000,0.00000000,180.00000000);
// Búnker Rusos.
BunkerRusos = CreateDynamicObject(16775, 720.01898, -1322.44202, 2072.70996,   0.00000, 0.00000, 0.00000);
//*******************hospital*******************
CreateObject(980, 1121.61951, -1315.17566, 7.46392,   0.00000, 0.00000, -90.00000); // Parte de arriba de la puerta.
hospitalgate = CreateDynamicObject(980, 1121.61951, -1315.17566, 1.97200,   0.00000, 0.00000, -90.00000);
//CreateDynamicObject(980,1141.40002441,-1293.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(airportgate) (1)
//*******************vip*******************
rejavip = CreateDynamicObject(980, 2909.96484, -666.21680, 16.56295,   0.00000, 0.00000, 88.61147);
//reja lcn
rejalcn = CreateDynamicObject(980, 1426.66724, -1883.32166, 15.13657,   0.00000, 0.00000, 0.00000); // Acceso Inferior.
rejalcn1 = CreateDynamicObject(986, 1284.10754, -2052.48926, 59.45000,   0.00000, 0.00000, 270.00000); // Principal derecha.
rejalcn2 = CreateDynamicObject(985, 1284.10754, -2060.44092, 59.45000,   0.00000, 0.00000, 270.00000); // Principal Izquierda.
rejalcn3 = CreateDynamicObject(971, 1132.73877, -2080.80762, 71.53810,   0.00000, 0.00000, 0.00000); // Acceso Secundario.
////*******************PEAJE LS-SF*****************************
peaje1 = CreateDynamicObject(976, 35.25729, -1516.96399, 4.24860,   0.00000, 0.00000, 270.00000);
peaje2 = CreateDynamicObject(976, 67.85014, -1545.88879, 4.02450,   0.00000, 0.00000, 89.10002);
//*******************BANCO LOS SANTOS*******************
Pbankazo = CreateDynamicObject(2634, 999.05, -1170.19, 13.30,   0.00, 0.00, 90.00);
//*******************SISTEMA DE ROBO*******************
roboV = CreatePickup(1239,23,2618.5164,-1071.5796,69.7339); //Pos Robo
roboD = CreatePickup(1239,23,1406.8153,-1372.5907,8.1257); //Pos dejar cosas
//*******************CORTAR CESPED*******************
koson = CreatePickup(1210, 23, 2021.5721,-1274.4832,23.9810, -1);
cesped = CreatePickup(1274, 23, 2013.0183,-1282.8282,23.9762, -1);
koscar[0] =  AddStaticVehicleEx(572,2008.3411,-1274.8767,23.8203,358.8771,86,1, 1); // gaz
koscar[1] =  AddStaticVehicleEx(572,2005.4747,-1274.7090,23.8203,359.8171,1,86, 1); // gaz
koscar[2] =  AddStaticVehicleEx(572,2002.5492,-1274.9041,23.8203,357.6237,86,1, 1); // gaz
koscar[3] =  AddStaticVehicleEx(572,1999.5586,-1274.9226,23.8203,357.6237,1,86, 1); // gaz
koscar[4] =  AddStaticVehicleEx(572,1996.6884,-1275.0327,23.8203,357.6237,86,1, 1); // gaz
koscar[5] =  AddStaticVehicleEx(572,1993.6345,-1275.2351,23.8203,357.6237,1,86, 1); // gaz
koscar[6] =  AddStaticVehicleEx(572,1990.7550,-1275.3965,23.8203,357.6237,86,1, 1); // gaz
koscar[7] =  AddStaticVehicleEx(572,1987.7107,-1275.3932,23.8203,357.6237,1,86, 1); // gaz
koscar[8] =  AddStaticVehicleEx(572,1984.8125,-1275.4390,23.8203,357.6237,86,1, 1); // gaz
koscar[9] = AddStaticVehicleEx(572,1981.6827,-1274.9569,23.8203,357.6237,1,86, 1); // gaz
koscar[10] = AddStaticVehicleEx(572,1978.9513,-1275.0441,23.8203,357.6237,86,1, 1); // gaz
//*******************LEÑADOR*******************
lena = CreatePickup(1210,23,-407.2330,-1426.3041,26.3147);
LenadorU = CreatePickup(1239,23,-572.4534,-1498.0902,11.0859);
Arbolvivo[0] = CreateObject(726, -528, -1453.8994140625, 9.8999996185303, 0, 0, 0);
Arbolvivo[1] = CreateObject(763, -513.7998046875, -1470.7998046875, 10.800000190735, 0, 0, 0);
Arbolvivo[2] = CreateObject(766, -525.8994140625, -1473.5, 9.8999996185303, 0, 0, 0);
Arbolvivo[3] = CreateObject(727, -514.69921875, -1457.099609375, 10.89999961853, 0, 0, 0);
Talararbol[0] = CreatePickup(1239,2,-527.2280,-1455.4230,10.9610);
Talararbol[1] = CreatePickup(1239,2,-515.0847,-1470.9744,11.6864);
Talararbol[2] = CreatePickup(1239,2,-527.0183,-1472.3345,10.7982);
Talararbol[3] = CreatePickup(1239,2,-515.7106,-1457.4116,11.8509);
//*******************FIN MAPEOS*******************

	for(new h = 0; h < sizeof(fINFO); h++)
	{
		if(fINFO[h][FamilyUSafe] > 0)
		{
			fINFO[h][FamilyPickup] = CreatePickup(1239, 23, fINFO[h][FamilySafe][0], fINFO[h][FamilySafe][1], fINFO[h][FamilySafe][2]);
		}
		if(fINFO[h][FamilyEntrance][0] != 0.0 && fINFO[h][FamilyEntrance][1] != 0.0)
		{
		    fINFO[h][FamilyEntrancePickup] = CreatePickup(1318, 23, fINFO[h][FamilyEntrance][0], fINFO[h][FamilyEntrance][1], fINFO[h][FamilyEntrance][2]);
			format(string, sizeof(string), "%s", fINFO[h][FamilyName]);
			fINFO[h][FamilyEntranceText] = CreateDynamic3DTextLabel(string,COLOR_YELLOW,fINFO[h][FamilyEntrance][0], fINFO[h][FamilyEntrance][1], fINFO[h][FamilyEntrance][2]+0.6,4.0);
		}
		LoadGangVehicles(h);
	}
	for(new h = 0; h < sizeof(Points); h++)
	{
		if(Points[h][Type] == 3)
		{
			format(string, sizeof(string), " HIERBA DISPONIBLE: %d/9000.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 1;
		}
		else if(Points[h][Type] == 4)
		{
			format(string, sizeof(string), " CRACK DISPONIBLE: %d/9000.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 2;
		}
		CreatePickup(1239, 23, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]);
	}
	new text_info[128];
	for(new d = 0; d < sizeof(CDSInfo); d++)
	{
		if(CDSInfo[d][cdEntranceX] != 0.0 && CDSInfo[d][cdEntranceY] != 0.0)
		{
			CDSInfo[d][cdPickupID] = CreateDynamicPickup(1239, 1, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]);
			if(CDSInfo[d][cdOwned])
			{
	            format(text_info, sizeof(text_info),"Concesionario (%d) %s\nDueño: %s", d,CDSInfo[d][cdMessage], CDSInfo[d][cdOwner]);
	            CDSInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_BLUED,CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]+0.75,2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
			else
			{
	            format(text_info, sizeof(text_info),"Concesionario (%d) %s En Venta\nPrecio: %d", d,CDSInfo[d][cdMessage], CDSInfo[d][cdPrice]);
	            CDSInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_BLUED,CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]+0.75,2.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
		}
		for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	    {
			if (CDSInfo[d][cdVehicleModel][v] != 0)
			{
		        new carcreated = CreateVehicle(CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawnX][v], CDSInfo[d][cdVehicleSpawnY][v], CDSInfo[d][cdVehicleSpawnZ][v], CDSInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		        format(text_info, sizeof(text_info), "%s En Venta | Precio: %d", GetVehicleName(carcreated), CDSInfo[d][cdVehicleCost][v]);
                CDSInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
                CDSInfo[d][cdVehicleId][v] = carcreated;
			}
		}
	}
//**************************************Pickups**************************************
//Tienda Erotica
CreatePickup(1240, 23, 1207.6167,-41.2453,1000.9531); // Corazon Tienda Erotica
//Estacionamiento Privado SAPD
CreatePickup(1239, 23, 1634.1299,-1716.8807,13.4993); // Corazon Tienda Erotica
//Comandos
CreatePickup(1239, 23, 1009.2381,48.5105,55.3221); // Robar tienda electronica.
CreatePickup(1239, 23, 1006.0530,52.7181,55.3221); // Comprar tienda electronica.
//CreatePickup(1239, 23, 1328.0438,-1760.3077,13.5559); // Tienda de muebles
CreatePickup(1239, 23, 985.7003, -1171.2474, 24.9037); // Compra de Tarjeta De Credito LS
CreatePickup(1240, 23, 1131.035644,-1315.619506,13.250149, -1); // DejarPT - SAMD
CreatePickup(1240, 23, 2626.7986, -2443.8145, 13.7, -1); // DejarPT - Guardia Nacional
CreatePickup(1239, 23, 959.3875, -1443.0875, 13.6144, -1); //Google
CreatePickup(1239, 23, 240.4770,112.7777,1003.2188, 500); // Pagar Multas LS
CreatePickup(1240, 23, 1636.041259,-1811.950317,13.524469, -1); // Embargar
CreatePickup(1252, 23, 1628.361938,-1808.970458,13.521308, -1); // / Gasolinera única - Depósito.
CreatePickup(1252, 23, 1880.558105,-2304.451660,14.119070, -1); // / Gasolinera única - Aeropuerto.
//CreatePickup(1247, 23, 912.8051,-1037.6465,31.8984, -1); // Arresto CIA
CreatePickup(1247, 23, 1559.3228,-1693.7491,5.8970, -1); // Arresto SAPD
CreatePickup(1247, 23, 286.91,-1615.54,17.86, -1); // Arresto FBI
CreatePickup(1247, 23, 613.3228,-589.1623,17.2266, -1); // Arresto sapd dillimore
CreatePickup(1247, 23, 1286.58240, -1349.87732, 13.63500); // Arresto Judicial
CreatePickup(1247, 23, 2658.4500, -2372.5000,13.6328); // Arresto SAEM
CreatePickup(1239, 23, 308.15,-141.46,999.60); // Comprar Arma LS
CreatePickup(1239, 23, 305.3528,-141.9280,1004.0625); // PaintBall LS
CreatePickup(1239, 23, 767.6719,13.6320,1000.7010); // GYM LS
CreatePickup(1239, 23, 252.39,117.47,1003.22); // Licencias Compra LS
CreatePickup(1239, 23, 1752.5104,-1903.1664,13.5631); // Licencia de Taxi Compra LS
CreatePickup(1274, 23, -100.9438, 16.4130, 3.0362, -1); // /vendercosecha ls
CreatePickup(1254, 23, 1407.7058,-1307.4529,9.0442); // pickup /contrato
//Equipo de Facciones
CreatePickup(334,  23, 267.0328,109.8991,1004.6172); // pickup SAPD
CreatePickup(334,  23, 326.9050,307.1603,999.1484); // pickup SAPD CAMPO
CreatePickup(347,  23, 310.3287,-1537.2428,-45.1338, -1); // pickup FBI
CreatePickup(348,  23, 278.5487,-1614.5010,51.5); // pickup FBI NUEVO 2.
CreatePickup(356,  23, 332.6553,2345.9578,8905.4180); // pickup SAEM
CreatePickup(356,  23, 2914.18677, 2126.63745, 0.13430); // pickup SAEM 2
CreatePickup(1239, 23, 1188.8640,-1351.4312,2423.2649, -1); // pickup SAMD
CreatePickup(2894, 23, 733.761108,-1352.086914,3018.322814); // pickup LSTV
CreatePickup(365,  23, 3162.8804,-1896.5898,1042.2070); // pickup crazy motors
CreatePickup(365,  23, 1995.458, -1796.01, 13.345); // pickup crazy motors / NUEVO.
CreatePickup(1212, 23, 362.1189,-52.2308,-93.8500); // pickup GOB
CreatePickup(353,  23, 2355.2322,-647.0360,128.0547); // pickup hitman
CreatePickup(353,  23, 2145.4448,-2269.4490,13.2989); // pickup hitman Nuevo HQ by Alexey
CreatePickup(2894, 23, 2135.5605,1300.7083,7698.8999); // pickup s. Judicial
CreatePickup(1212, 23, 1423.673,-1480.3050,1617.2845); // S JUDICIAL NEW.
CreatePickup(353,  23, 675.630,-1257.35,2204.5202); // Nueva HQ de rusos.
CreatePickup(353,  23, -12.3236,44.0121,4013.2021); // pickup rusos
CreatePickup(353,  23, 1201.6417,-2015.9741,71.6094); // pickup LCN (Fuera)
CreatePickup(353,  23, 1100.179931,-2028.344360,2079.132812); // pickup LCN (Dentro)
CreatePickup(353,  23, 1242.5764,-761.2462,5080.7578); // pickup ykz
CreatePickup(353,  23, 1109.7301,244.2895,9001.6875); // pickup santana
CreatePickup(336,  23, 2496.9312,-1696.5073,1014.7422); // pickup groove
CreatePickup(336,  23, 2075.1799,-1585.4727,-13.3922); // pickup ballas
CreatePickup(336,  23, 791.7727,-1713.1125,411.1650); // pickup latin
CreatePickup(336,  23, -827.7561,472.9102,1866.8000); // pickup sureño
CreatePickup(1242, 23, 2035.6, -1294.5, 2996.3); // pickup CIA (Ahora ALEPH)
CreatePickup(353,  23, -3804.9746,1306.9164,75.5859); // pickup Alqaeda
CreatePickup(353,  23, 1013.5875, -606.4736, 1085.0); // pickup bomberos - S.E.C
//Jobs Los Santos
CreatePickup(1210, 23, 499.962921,-20.802886,1000.679687, -1); // bartender
CreatePickup(1210, 23, 1219.6438, -1425.7828, 13.0908); // Vendedor De Moviles LS
CreatePickup(1210, 23, 1029.7059,-1340.5267,13.8093);// Chofer de Viajes LS
CreatePickup(1210, 23, 2104.8408,-1810.0991,13.5547); // Pizzero LS
CreatePickup(1210, 23, 1689.9009,-1494.9858,13.5469); // Vendedor de Drogas LS
CreatePickup(1210, 23, 2218.0525,-2662.2483,13.5536); // Camionero LS
CreatePickup(1210, 23, 2487.4983,-1410.0270,28.8375); // Vendedor de Armas LS
CreatePickup(1210, 23, 1752.7062,-1894.1708,13.5574);// Taxi LS
CreatePickup(1210, 23, 2355.1594,-1169.2037,28.0057); // Traficante De Drogas LS
CreatePickup(1210, 23, 1423.9009,-1355.9692,13.2810); //Vendedor de Chalecos LS
CreatePickup(1210, 23, 659.3577,-634.6320,16.3359, -1); // Artesano LS
CreatePickup(1210, 23, 2420.0740, -1509.0592, 24.0213, -1); // Heladero LS
CreatePickup(1210, 23, -108.705574, -3.399344, 3.117187); // granjero
CreatePickup(1210, 23, -1873.293457,50.047901,1055.189086, -1); // Piloto
CreatePickup(1210, 23, 1685.6, -1944.73, 13.545, -1); // Trenero
//**************************************Fin Pickups**************************************

	InfoEvento[EventRequest] = 999;
	InfoEvento[EventCreator] = 999;
	InfoEvento[EventStaff][0] = 999;
	InfoEvento[EventStaff][1] = 999;
	InfoEvento[EventStaff][2] = 999;
	InfoEvento[EventStaff][3] = 999;
	InfoEvento[EventStaff][4] = 999;

	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
		gTime = tmphour;
	}
	gWeather = 10;
	ManualVehicleEngineAndLights();
 return 1;
}

doesAccountExist(account_name[]){
	new sz_accStr[MAX_PLAYER_NAME + 12];
	format(sz_accStr, sizeof(sz_accStr), USERFILEOLD, account_name);
	if(fexist(sz_accStr)) {
		new File: f_Handle = fopen(sz_accStr, io_read);
		if(flength(f_Handle) > 0) {
			fclose(f_Handle);
			return 1;
		}
		fclose(f_Handle);
	}
	return 0;
}

function SyncTime()
{
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		WeatherCalling++;
		if(WeatherCalling > 3)
		{
		    WeatherCalling = 0;
		    new rand;
		    rand = random(20);
		    switch(rand)
		    {
          		case 0:{ SetWeather(11); gWeather = 11; }
		        case 8:{ SetWeather(12); gWeather = 12; }
		        case 9:{ SetWeather(5); gWeather = 5; }
		        case 16:{ SetWeather(4); gWeather = 4; }
		        case 19:{ SetWeather(20); gWeather = 20; }
		        default:{ SetWeather(rand); gWeather = rand; }
		    }
		}
		ghour = tmphour;
		if(realtime)
		{
			SetWorldTime(tmphour);
			gTime = tmphour;
		}
	}
}


//*******************Función: PayDay*******************
timer SyncUp[60000]() //Cada Minuto.
{
    new hour,minuite,second;
    if(PayDayLeft >= 1)
	{
	    PayDayLeft--;
	}
	else
	{
        PayDayLeft = 60;
	}
	if(PayDaySecond >= 1)
	{
	    PayDaySecond--;
	}
	else
	{
        PayDaySecond = 120;
	}
	SyncTime();
	SyncMinTime();
	DollahScoreUpdate();
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	if(PayDayLeft == 0) PayDay();
	if(PayDaySecond == 0) PayDay2();
	foreach(Player, i)
	{
	   	if(Info[i][pBeingSentenced] > 1) Info[i][pBeingSentenced]--;
	   	if(Info[i][pBeingSentenced] == 1)
		{
			TogglePlayerControllable(i, true);
			SetPVarInt(i, "IsFrozen", 0);
			SetPlayerPos(i, 1452.7971,-1757.7694,13.5469);
			SetPlayerFacingAngle(i, 278.701);
			SendClientMessageEx(i, COLOR_WHITE, "Ningún Juez ha asistido al juicio, eres libre.");
			Info[i][pBeingSentenced] = 0;
		}
	}
	CheckIdiomas();
}
function CheckIdiomas()
{
foreach(Player, i)
{
	if(Info[i][pIngles] == 1 && Info[i][pInglesSkill] <= 0)
	{
		Info[i][pIngles] = 0;
		Info[i][pInglesSkill] = 0;
		SendClientMessageEx(i, COLOR_WHITE, "Olvidaste prácticar inglés, necesitas volver a la universidad.");
	}
	if(Info[i][pAleman] == 1 && Info[i][pAlemanSkill] <= 0)
	{
		Info[i][pAleman] = 0;
		Info[i][pAlemanSkill] = 0;
		SendClientMessageEx(i, COLOR_WHITE, "Olvidaste prácticar alemán, necesitas volver a la universidad.");
	}
	if(Info[i][pItaliano] == 1 && Info[i][pItalianoSkill] <= 0)
	{
		Info[i][pItaliano] = 0;
		Info[i][pItalianoSkill] = 0;
		SendClientMessageEx(i, COLOR_WHITE, "Olvidaste prácticar italiano, necesitas volver a la universidad.");
	}
	if(Info[i][pRuso] == 1 && Info[i][pRusoSkill] <= 0)
	{
		Info[i][pRuso] = 0;
		Info[i][pRusoSkill] = 0;
		SendClientMessageEx(i, COLOR_WHITE, "Olvidaste prácticar ruso, necesitas volver a la universidad.");
	}
	if(Info[i][pJapones] == 1 && Info[i][pJaponesSkill] <= 0)
	{
		Info[i][pJapones] = 0;
		Info[i][pJaponesSkill] = 0;
		SendClientMessageEx(i, COLOR_WHITE, "Olvidaste prácticar japonés, necesitas volver a la universidad.");
	}
	if(Info[i][pArabe] == 1 && Info[i][pArabeSkill] <= 0)
	{
		Info[i][pArabe] = 0;
		Info[i][pArabeSkill] = 0;
		SendClientMessageEx(i, COLOR_WHITE, "Olvidaste prácticar árabe, necesitas volver a la universidad.");
	}
}
}
function SyncMinTime()
{
	new hour, minute, second;
	gettime(hour, minute, second);
	foreach(Player, i)
	{
	    if(GetPlayerVirtualWorld(i) == 133769)
		{
		    SetPlayerWeather(i, 45);
			SetPlayerTime(i, 0, 0);
		}
		else
		{
			SetPlayerTime(i, hour, minute);
		}
	}
	return 1;
}
stock GetClosestPlayer(p1){
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x){
		if(x != p1){
			dis2 = GetDistanceBetweenPlayers(x,p1);
			if(dis2 < dis && dis2 != -1.00){
				dis = dis2;
				player = x;
			}
		}
	}
	return player;
}
function PagasFaccion(playerid)
{
new string[128];
new facc = Info[playerid][pMember];
new rango = Info[playerid][pRank];
new Desempleado; // Pagas para los que tno tienen facción o son de familias no reconocidas como facción. (FAMS)
//GivePlayerCash(playerid, InfoFacc[facc][gPaga]*rango); - El dinero no irá a la mano del usuario, va a la cuenta bancaria.
if(Info[playerid][pLeader] == 0 && Info[playerid][pMember] == 0)
{
	Desempleado = 500;
	format(string, sizeof(string), "{FF8409}[Ingresos]{F3E2A9} Paga del Estado (Desempleados) - %d dólares.", Desempleado);
	SendClientMessage(playerid, 0xF3E2A9FF, string);
}
else
{
    Desempleado = 0;
	format(string, sizeof(string), "{FF8409}[Ingresos]{F3E2A9} Paga %s:{FAAC58} %d dólares. [Paga Extra]: Ninguna.", InfoFacc[facc][gFacc], InfoFacc[facc][gPaga]*rango);
	SendClientMessage(playerid, 0xF3E2A9FF, string);
}
new tax = Info[playerid][pConnectTime]*2;
format(string, sizeof(string), "{FF8409}[Tasa del gobierno]{F3E2A9} Impuesto único: -%d$ - Impuesto específico: -%d$", TaxValue, tax);
SendClientMessage(playerid, 0xF3E2A9FF, string);
new ganancias = (InfoFacc[facc][gPaga]*rango)-TaxValue-tax+Desempleado; // Al dinero ganado del Payday, le quitamos Tasas.
/// Alquiler de casas.
if(Info[playerid][pRenting] != INVALID_HOUSE_ID) // Si está alquilado.
{
	if(HouseInfo[Info[playerid][pRenting]][hRentFee] < Info[playerid][pAccount]) // Si el dinero de la renta está disponible en la cuenta.
	{ // Hay que destacar que la función anterior a esta, quita la casa de renta si no tienes dinero, la función actual retira las ganancias de la renta.
		HouseInfo[Info[playerid][pRenting]][hSafeMoney] += HouseInfo[Info[playerid][pRenting]][hRentFee]; // Dinero va a la casa.
		Info[playerid][pAccount] -= HouseInfo[Info[playerid][pRenting]][hRentFee]; // Se quita dinero al jugador. (Desde la cuenta).
		format(string, sizeof(string), "{FF8409}[Alquiler]{F3E2A9} Se ha retirado %d dólares de tu cuenta bancaria. [Beneficiario: %s]", HouseInfo[Info[playerid][pRenting]][hRentFee], HouseInfo[Info[playerid][pRenting]][hOwner]);
		SendClientMessage(playerid, 0xF3E2A9FF, string);
	}
}
format(string, sizeof(string), "Sus ganancias totales son:{FAAC58} %d$ {F3E2A9}- Balance final:{FAAC58} %d$", ganancias, Info[playerid][pAccount]+ganancias);
SendClientMessage(playerid, 0xF3E2A9FF, string);
Info[playerid][pAccount] += ganancias; // Balance final.
/*if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 1000000 && Impuesto_Extra == 1 ) // Más de un millón y estar activo.
	{
	    new TaxRenta = 5000;  Del 100 por cien de la renta quitamos el 5%, te quedas con el 95%
	    new Extra = random(5000);
	    if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 1000000 && Info[playerid][pAccount]+GetPlayerCash(playerid) < 2000000) {TaxRenta = 20000+Extra;}
	    else if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 2000000 && Info[playerid][pAccount]+GetPlayerCash(playerid) < 3000000) {TaxRenta = 50000+Extra;}
	    else if(Info[playerid][pAccount]+GetPlayerCash(playerid) < 4000000 && Info[playerid][pAccount]+GetPlayerCash(playerid) < 4000000) {TaxRenta = 70000+Extra;}
	    else if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 4000000 && Info[playerid][pAccount]+GetPlayerCash(playerid) < 5000000) {TaxRenta = 90000+Extra;}
	    else if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 5000000 && Info[playerid][pAccount]+GetPlayerCash(playerid) < 6000000) {TaxRenta = 120000+Extra;}
	    else if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 6000000 && Info[playerid][pAccount]+GetPlayerCash(playerid) < 7000000) {TaxRenta = 150000+Extra;}
	    else if(Info[playerid][pAccount]+GetPlayerCash(playerid) > 7000000) {TaxRenta = 180000+(Extra*2);}
		format(string, sizeof(string), "[Impuesto sobre la Renta]{F5A9A9} Debido a que tienes %d$, tienes que pagar al gobierno %d$. (/inforenta)", Info[playerid][pAccount], TaxRenta);
		SendClientMessage(playerid, 0xFA5858FF, string);
		Info[playerid][pAccount] -= TaxRenta;
		format(string, sizeof(string), "La paga de la tasa en su totalidad asciende a {FA5858}%d${F5A9A9} - Balance final:{FA5858} %d$", (TaxValue-tax-TaxRenta)*-1, Info[playerid][pAccount]);
		SendClientMessage(playerid, 0xF5A9A9FF, string);
	}
if(Impuesto_Extra == 1 )
	{
		new TaxExtra = random(50000)+50000;
		Tax += TaxExtra;
		SaveStuff();
		new szMessage [132];
  		format(szMessage, sizeof(szMessage), "[GOB] Se han obtenido %d$ de beneficio gracias al impuesto extra (/impuestoextra), el nuevo balance es %d$.", TaxExtra, Tax);
		SendRadioMessage(7, TEAM_RADIO_COLOR, szMessage);
	}*/
	if(Info[playerid][pAccount] < 0) // Si tiene menos de 0, se le cierra la cuenta.
	{
	Info[playerid][pAccount] = 0;
	if(Info[playerid][pTarjetaCredito] == 1) // Si tiene cuenta, se le quita.
	{
		Info[playerid][pTarjetaCredito] = 0;
		SendClientMessageEx(playerid, 0x00C200FF, "[AVISO]: Su cuenta bancaria no dispone de ninguna liquidez, ha sido cerrada.");
	}
	GivePlayerCash(playerid,-TaxValue-tax); // No tenia cuenta de antes, se le da una multa a pagar.
	SendClientMessageEx(playerid, 0x00C200FF, "[AVISO]: No dispones de cuenta bancaria y debes dinero, si no pagas tus impuestos puedes acabar en prisión.");
	if(GetPlayerCash(playerid) < 0) //  Si después de esto, no tiene dinero en mano. Irá a jail. (Con esto evitamos tener usuarios con números negativos).
		{
			SendClientMessageEx(playerid, 0x00C200FF, "Además de no poseer dinero en la cuenta bancaria, no tienes nada. Has sido embargado y encarcelado.");
			new rand;
 			rand = random(sizeof(LSPDPrisonSpawns));
		    SetPlayerPos(playerid, LSPDPrisonSpawns[rand][0], LSPDPrisonSpawns[rand][1], LSPDPrisonSpawns[rand][2]);
		    ResetPlayerWeaponsEx(playerid);
			GameTextForPlayer(playerid, "Fuiste arrestado", 5000, 5);
			SetPlayerFacingAngle(playerid, 0);
		    LoadObjects(playerid);
			Info[playerid][pJailed] = 2;
			PhoneOnline[playerid] = 1;
			Info[playerid][pArrested] += 1;
			Info[playerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(playerid);
			SetPlayerWantedLevel(playerid, 0);
			ClearAnimations(playerid);
			Info[playerid][pEstado] = 0;
			PlayerCuffedTime[playerid] = 0;
			SetPlayerInterior(playerid, 1);
			Info[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 1);
			Info[playerid][pVW] = 1;
			Info[playerid][pJailTime] = 10*60;
		}
	}
	SubirNivel(playerid); // Revisa que haya subido de nivel.
}
function SubirNivel(playerid)
{
	if(Info[playerid][pLevel] >= 1 && Info[playerid][pLevel] <= 50)
	{
		if(Info[playerid][pExp] >= ((4 * Info[playerid][pLevel]) + (4)))
		{
			new string[144];
			new nxtlevel = Info[playerid][pLevel]+1;
			new expamount = nxtlevel*explevel;
			format(string, sizeof(string), "[AVISO]: Subiste de nivel automáticamente, ahora eres nivel %d.", nxtlevel);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "~g~~h~Nivel %d!", Info[playerid][pLevel] + 1);
			GameTextForPlayer(playerid, string, 8000, 1);
			PlayerPlaySound(playerid, 10214, 0.0, 0.0, 0.0);
			Info[playerid][pLevel]++;
			Info[playerid][pExp] = Info[playerid][pExp]-expamount;
			OnPlayerSavedStats(playerid);
		}
	}
	return 1;
}
function SubirRol(playerid)
{
	if(Info[playerid][pPuntosRol] >=1 && Info[playerid][pPuntosRol] <=10)
	{
		Info[playerid][pROL] = 1; // Básico.
	}
	else if(Info[playerid][pPuntosRol] > 10 && Info[playerid][pPuntosRol] <=20)
	{
		Info[playerid][pROL] = 2; // Audaz.
	}
	else if(Info[playerid][pPuntosRol] > 21 && Info[playerid][pPuntosRol] <=30)
	{
		Info[playerid][pROL] = 3; // Avanzado.
	}
	else if(Info[playerid][pPuntosRol] > 31 && Info[playerid][pPuntosRol] <=40)
	{
		Info[playerid][pROL] = 4; // Experto.
	}
	else if(Info[playerid][pPuntosRol] > 41 && Info[playerid][pPuntosRol] <=50)
	{
		Info[playerid][pROL] = 5; // Profesional.
	}
	else if(Info[playerid][pPuntosRol] > 50)
	{
		Info[playerid][pROL] = 6; // Maestro.
	}
 	else {Info[playerid][pROL] = 0;}
}
function PayDay()
{
	PayDayLeft = 60;
	TotalUptime += 1;
	GiftAllowed = 1;
	SaveStuff();
	SaveServerStats();
	FMemberCounter();
	PaydayOn = 1;
	//TillTimer();
	SetTimer("PayDayOOF", 180000, false);
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			// Sistema de Idiomas.
			if(Info[i][pIngles] == 1 && Info[i][pInglesSkill] > 0) {Info[i][pInglesSkill] -= 1;} // Mayor que 0.
			if(Info[i][pAleman] == 1 && Info[i][pAlemanSkill] > 0) {Info[i][pAlemanSkill] -= 2;} // Mayor que 0.
			if(Info[i][pItaliano] == 1 && Info[i][pItalianoSkill] > 0) {Info[i][pItalianoSkill] -= 1;} // Mayor que 0.
			if(Info[i][pRuso] == 1 && Info[i][pRusoSkill] > 0) {Info[i][pRusoSkill] -= 1;} // Mayor que 0.
			if(Info[i][pJapones] == 1 && Info[i][pJaponesSkill] > 0) {Info[i][pJaponesSkill] -= 2;} // Mayor que 0.
			if(Info[i][pArabe] == 1 && Info[i][pArabeSkill] > 0) {Info[i][pArabeSkill] -= 2;} // Mayor que 0.
		    if(Info[i][pLevel] >= 1)
			{
			    Info[i][YaCobre] = 0;
			    SendClientMessageEx(i, COLOR_WHITE, "");
                SendClientMessageEx(i, 0x00C200FF, "* Hora de pago *");
                SendClientMessageEx(i, NEGATIVO, 		"--------------------------------------------------");
			    SendClientMessageEx(i, VERDE_ADMIN, 		" {00C200}*ESTADO DE CUENTA DEL BANCO DE SAN ANDREAS*  ");
			    SendClientMessageEx(i, VERDE_ADMIN,"Adminstración:{FFFFFF} Tienes 3 minutos para cobrar, usa el comando {00C200}/payday{FFFFFF} e ingresa el código que aparecerá en el diálogo.");
                Info[i][pConnectTime] += 1;
				if(Info[i][pConnectTime] == 2){
					Info[i][pWRestricted] = 0;
					SendClientMessageEx(i, COLOR_GRAD2, "{A2DC35}[NOTA]:{FFFFFF} Cumpliste las 2 horas de juego, la restricción de armas fue eliminada.");
				}
				if(Info[i][pAdiccion] > 0){
				    Info[i][pAdiccion] -= 2;
				}
				if(Info[i][pWRestricted] > 0)
				{
				    Info[i][pWRestricted]--;
					if(Info[i][pWRestricted] == 0) SendClientMessageEx(i, COLOR_LIGHTRED, "Aun te queda una hora de restricción de armas.");
				}
			}
		}
	}
	return 1;
}
function PayDay2()
{
	new paganpc = random(500);
	PayDaySecond = 120;
	SaveStuff();
	SaveServerStats(); // Se obtienen las ganancias Offline. - PagaNPC.
	for(new b = 0; b < MAX_NEGOCIOS; b++)
	{
	    // Todos los negocios perderán un producto de su almacén.
	    NegociosVariables[b][bStock] -= 1;
	    // Se dará una paga a cada negocio de manera aleatoria y random, mediante rol de NPC.
		if (NegociosVariables[b][bType] == 1)
		{
			NegociosVariables[b][bGanancias] += paganpc+700;
		}
		else if (NegociosVariables[b][bType] == 2)
		{
		    NegociosVariables[b][bGanancias] += paganpc+650;
		}
		else if (NegociosVariables[b][bType] == 3)
		{
		    NegociosVariables[b][bGanancias] += paganpc+550;
		}
		else if (NegociosVariables[b][bType] == 4)
		{
		    NegociosVariables[b][bGanancias] += paganpc+950;
		}
		else if (NegociosVariables[b][bType] == 5)
		{
		    NegociosVariables[b][bGanancias] += paganpc+450;
		}
		else if (NegociosVariables[b][bType] == 69) // Negocio del banco.
		{
		    NegociosVariables[b][bGanancias] += paganpc+450*7;
		}
		else // Tienda 6 en adelante.
		{
		    NegociosVariables[b][bGanancias] += paganpc+450;
		}
   	}
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			// Sistema de Idiomas.
			if(Info[i][pIngles] == 1 && Info[i][pInglesSkill] > 0) {Info[i][pInglesSkill] -= 1;} // Mayor que 0.
			if(Info[i][pAleman] == 1 && Info[i][pAlemanSkill] > 0) {Info[i][pAlemanSkill] -= 2;} // Mayor que 0.
			if(Info[i][pItaliano] == 1 && Info[i][pItalianoSkill] > 0) {Info[i][pItalianoSkill] -= 1;} // Mayor que 0.
			if(Info[i][pRuso] == 1 && Info[i][pRusoSkill] > 0) {Info[i][pRusoSkill] -= 1;} // Mayor que 0.
			if(Info[i][pJapones] == 1 && Info[i][pJaponesSkill] > 0) {Info[i][pJaponesSkill] -= 2;} // Mayor que 0.
			if(Info[i][pArabe] == 1 && Info[i][pArabeSkill] > 0) {Info[i][pArabeSkill] -= 2;} // Mayor que 0.
  			if(Info[i][pLevel] >= 1) // Si es nivel 1 o menor, esto no se ejecuta.
			{
				new string[128], nType[12], ganancias = 0, bid = Info[i][pPbizzkey];
				SendClientMessageEx(i, 0x00C200FF, "[-!-] tus stats han sido guardados satisfactoriamente.");
				//SendClientMessageEx(i, 0x00C200FF, "");
				if(Info[i][pPbizzkey] != 9999) // Propietarios de negocios, aviso:
				{
			    	//switch(NegociosVariable[bid][bType]) // El usuario recibirá ganancias extra por estar conectado de su negocio.
					if (NegociosVariables[bid][bType] == 1){ nType = "24/7"; ganancias = 365*NegociosVariables[bid][bLevelNeeded];}
					else if (NegociosVariables[bid][bType] == 2){ nType = "Ropa"; ganancias = 320*NegociosVariables[bid][bLevelNeeded];}
					else if (NegociosVariables[bid][bType] == 3){ nType = "Comida"; ganancias = 285*NegociosVariables[bid][bLevelNeeded];}
					else if (NegociosVariables[bid][bType] == 4){ nType = "Gasolinera"; ganancias = 420*NegociosVariables[bid][bLevelNeeded];}
					else if (NegociosVariables[bid][bType] == 5){ nType = "Armamento"; ganancias = 445*NegociosVariables[bid][bLevelNeeded];}
					else{ nType = "Privado"; ganancias = 245*NegociosVariables[bid][bLevelNeeded];}
					// 1. 24/7 - 2. Ropa - 3. Food - 4. Petrol - 5. Armas
					//new gt = ganancias + NegociosVariables[bid][bGanancias]; // Ganancias totales = Payday2 + Recaudado.
					NegociosVariables[bid][bGanancias] += ganancias; // Se obtienen las ganancias OnLine, con el propietario del negocio conectado.
					//if(strcmp(clr, "black", true)==0) color=0;
					format(string, sizeof(string), "{FF8409}[Balance de ingresos]{F3E2A9} Su negocio [Tipo: %s] tienen ganancias totales de %d dólares.",nType, NegociosVariables[bid][bGanancias]);
					SendClientMessage(i, 0xF3E2A9FF, string);
					if(strcmp("Nadie", NegociosVariables[bid][bExtortion], true) == 1)
					{
				    	format(string, sizeof(string), "{FF8409}[Extorsión]{F3E2A9} %s obtendrá un porcentaje de tus beneficios [1/4] ($%d).",NegociosVariables[bid][bExtortion], ganancias/4);
						SendClientMessage(i, 0xF3E2A9FF, string);
	            	}
				}
				/*else // (Si no tiene negocio, tal vez sea extorsionador) - Extorsionadores de negocios, aviso:
				{
					for(new x = 0; x < MAX_NEGOCIOS; x++) // Loop de negocios, no se cierra por si se tiene más de 1 negocio extorsionado.
					{
	            		if(strcmp(GetPlayerNameEx(i), NegociosVariables[x][bExtortion], true) == 0) // Si el nick es similar al Nombre_Apellido del extorsionista.
						{
	    					format(string, sizeof(string), "{FF8409}[Extorsión]{F3E2A9} El negocio de %s ha obtenido beneficios, ves a solicitar tu parte del pastel. (/recaudar)",NegociosVariables[x][bOwner]);
							SendClientMessage(i, 0xF3E2A9FF, string);
						}
					}
				}*/
			}
		}
	}
	return 1;
}
function PayDayOOF()
{
    PaydayOn = 0;
}

    strtok(const string[], &index){
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' ')){
		index++;
	}
	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

function OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
	    new INI:File = INI_Open(UserPath(playerid));
	    INI_SetTag(File,"data");
     	INI_WriteInt(File,"Password",udb_hash(password));
		INI_Close(File);
		TotalRegister++;
		SendClientMessageEx(playerid, COLOR_YELLOW, "Cuenta registrada, se ha iniciado sesión automáticamente.");
		PlayerLogin(playerid);
	}
	return 1;
}

OnPlayerSavedStats(playerid)
{
    if(GetPVarInt(playerid, "TempName") == 1) return 1;
    if(!gPlayerLogged{playerid}) return 1;
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if(INI_Exist(playername))
    {
		new PlayerFile[13 + MAX_PLAYER_NAME + 1];
	    format( PlayerFile , sizeof PlayerFile, USERFILE, playername);
	    new INI:File = INI_Open(PlayerFile);
	    INI_SetTag(File,"data");
	    INI_WriteInt(File,"TarjetaCredito",Info[playerid][pTarjetaCredito]);
	    INI_WriteInt(File,"Level",Info[playerid][pLevel]);
	    INI_WriteInt(File,"AdminNivelZC",Info[playerid][pAdminZC]);
	    INI_WriteInt(File,"AdminZC",Info[playerid][pLvlAdminZC]);
	    INI_WriteInt(File,"BanAppealer",Info[playerid][pBanAppealer]);
		INI_WriteInt(File,"FactionModerator",Info[playerid][pFactionModerator]);
		INI_WriteInt(File,"ModStaff",Info[playerid][pModStaff]);
		INI_WriteInt(File,"GangModerator",Info[playerid][pGangModerator]);
		INI_WriteInt(File,"Helper",Info[playerid][pHelper]);
		INI_WriteInt(File,"ConnectedTime",Info[playerid][pConnectTime]);
		INI_WriteInt(File,"Registered",Info[playerid][pReg]);
		INI_WriteInt(File,"Sex",Info[playerid][pSex]);
		INI_WriteInt(File,"Age",Info[playerid][pAge]);
		INI_WriteInt(File,"Origin",Info[playerid][pOrigin]);
		INI_WriteInt(File,"Respect",Info[playerid][pExp]);
        INI_WriteInt(File,"Money",GetPVarInt(playerid, "Cash"));
        INI_WriteInt(File,"Bank",Info[playerid][pAccount]);
        INI_WriteString(File,"IP", Info[playerid][pIP]);
        INI_WriteInt(File,"Kills",Info[playerid][pKills]);
        INI_WriteInt(File,"Deaths",Info[playerid][pDeaths]);
        INI_WriteInt(File,"Arrested",Info[playerid][pArrested]);
        INI_WriteInt(File,"JailAdmin",Info[playerid][pJailAdmin]);
        INI_WriteInt(File,"LottoNr",Info[playerid][pLottoNr]);
        INI_WriteInt(File,"Job",Info[playerid][pJob]);
        INI_WriteInt(File,"NewMuted",Info[playerid][pNMute]);
        INI_WriteInt(File,"NewMutedTotal",Info[playerid][pNMuteTotal]);
        INI_WriteInt(File,"Warn",Info[playerid][pWarn]);
        INI_WriteInt(File,"WRestricted",Info[playerid][pWRestricted]);
        INI_WriteInt(File,"Jailed",Info[playerid][pJailed]);
        INI_WriteInt(File,"JailTime",Info[playerid][pJailTime]);
        INI_WriteString(File,"JailedBy",Info[playerid][pJailedBy]);
 		INI_WriteString(File,"JailReason",Info[playerid][pJailReason]);
 		INI_WriteString(File,"MyAD",Info[playerid][pMyAD]);
        INI_WriteInt(File,"Materials",Info[playerid][pMats]);
        INI_WriteInt(File,"Packages",GetPVarInt(playerid, "Packages"));
        INI_WriteInt(File,"Drugs",Info[playerid][pDrugs]);
        INI_WriteInt(File,"Cosecha",Info[playerid][pCosecha]);
        INI_WriteInt(File,"Crack",Info[playerid][pCrack]);
        INI_WriteInt(File,"Pot",Info[playerid][pPot]);
        INI_WriteInt(File,"Ganzuas",Info[playerid][pGanzuas]);
        INI_WriteInt(File,"Crates",Info[playerid][pCrates]);
        INI_WriteInt(File,"Adic",Info[playerid][pAdiccion]);
        INI_WriteInt(File,"Religion",Info[playerid][pReligion]);
		INI_WriteInt(File,"LiderReligioso",Info[playerid][pLiderReligioso]);
        INI_WriteInt(File,"Leader",Info[playerid][pLeader]);
        INI_WriteInt(File,"Member",Info[playerid][pMember]);
        INI_WriteInt(File,"FMember",Info[playerid][pFMember]);
        INI_WriteInt(File,"Division",Info[playerid][pDivision]);
        INI_WriteInt(File,"Rank",Info[playerid][pRank]);
        INI_WriteInt(File,"Char",Info[playerid][pChar]);
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
		    GetPlayerHealth(playerid,Info[playerid][pHealth]);
		}
		INI_WriteFloat(File,"pHealth",Info[playerid][pHealth]);
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
		    GetPlayerArmour(playerid,Info[playerid][pArmour]);
		}
        INI_WriteFloat(File,"pArmour",Info[playerid][pArmour]);
        INI_WriteInt(File,"Team",Info[playerid][pTeam]);
        INI_WriteInt(File,"Model",Info[playerid][pModel]);
        INI_WriteInt(File,"PhoneNr",Info[playerid][pPnumber]);
        INI_WriteInt(File,"Sprunk",Info[playerid][pSprunk]);
        INI_WriteInt(File,"Phonebook",Info[playerid][pPhoneBook]);
        INI_WriteInt(File,"House",Info[playerid][pPhousekey]);
        INI_WriteInt(File,"House2",Info[playerid][pPhousekey2]);
        INI_WriteInt(File,"Propiedad",Info[playerid][pPhousekeyX]);
        INI_WriteInt(File,"Int", Info[playerid][pInt]);
        INI_WriteFloat(File,"Pos_x",Info[playerid][pPos_x]);
        INI_WriteFloat(File,"Pos_y",Info[playerid][pPos_y]);
        INI_WriteFloat(File,"Pos_z",Info[playerid][pPos_z]);
        INI_WriteFloat(File,"SPos_r",Info[playerid][pPos_r]);
        INI_WriteInt(File,"CarLic",Info[playerid][pCarLic]);
        INI_WriteInt(File,"FlyLic",Info[playerid][pFlyLic]);
        INI_WriteInt(File,"BoatLic",Info[playerid][pBoatLic]);
        INI_WriteInt(File,"GunLic",Info[playerid][pGunLic]);
        INI_WriteInt(File,"Gafas",Info[playerid][pGafas]);
        INI_WriteInt(File,"Tutorial",Info[playerid][pTut]);
        INI_WriteInt(File,"Test",Info[playerid][pTestTut]);
        INI_WriteInt(File,"VWorld",Info[playerid][pVW]);
        INI_WriteInt(File,"Lighter",Info[playerid][pLighter]);
        INI_WriteInt(File,"Cigarettes",Info[playerid][pCigarettes]);
        INI_WriteInt(File,"BanZC",Info[playerid][pBannedZC]);
        INI_WriteInt(File,"DisabledZC",Info[playerid][pDisabledZC]);
        INI_WriteInt(File,"BlockBug",Info[playerid][pBlockBug]);
        INI_WriteInt(File,"Multicuenta",Info[playerid][pMulticuenta]);
        INI_WriteInt(File,"BlockG",Info[playerid][pBlockG]);
        INI_WriteInt(File,"DNI",Info[playerid][pDNI]);
        INI_WriteInt(File,"VSkill",Info[playerid][pArmsSkill]);
        INI_WriteInt(File,"TSkill",Info[playerid][pTruckSkill]);
        INI_WriteInt(File,"SmugglerSkill",Info[playerid][pSmugSkill]);
        INI_WriteInt(File,"DrugsSkill",Info[playerid][pDrugsSkill]);
        INI_WriteInt(File,"SIDA",Info[playerid][pSIDA]);
        INI_WriteInt(File,"Cancer" ,Info[playerid][pCancer]);
        INI_WriteInt(File,"Epilepsia",Info[playerid][pEpilepsia]);
        INI_WriteInt(File,"Dengue",Info[playerid][pDengue]);
        INI_WriteInt(File,"FStyle",Info[playerid][pFStyle]);
        INI_WriteInt(File,"Busqueda",Info[playerid][pWantedLevel]);
        INI_WriteInt(File,"AntiSIDA",Info[playerid][pAntiSIDA]);
        INI_WriteInt(File,"AntiCancer",Info[playerid][pAntiCancer]);
        INI_WriteInt(File,"AntiEpilepsia",Info[playerid][pAntiEpilepsia]);
        INI_WriteInt(File,"Rent",Info[playerid][pRenting]);
        INI_WriteInt(File,"prMoney",Info[playerid][p_Pr_Money]);
        INI_WriteInt(File,"Rob",Info[playerid][pRob]);
        INI_WriteInt(File,"Premium",Info[playerid][pVIP]);
        INI_WriteInt(File,"Rol",Info[playerid][pROL]);
        INI_WriteInt(File,"FichasCash",Info[playerid][pPTR]);
        INI_WriteInt(File,"CarPremium",Info[playerid][pCarKey2]);
        INI_WriteInt(File,"BanDuda",Info[playerid][pBanDuda]);
        INI_WriteInt(File,"ReportMuted",Info[playerid][pRMuted]);
        INI_WriteInt(File,"ReportMutedTotal",Info[playerid][pRMutedTotal]);
        INI_WriteInt(File,"ReportMutedTime",Info[playerid][pRMutedTime]);
        INI_WriteInt(File,"Pasaporte",Info[playerid][pPasaporte]);
        INI_WriteInt(File,"Seguro",Info[playerid][pSeguro]);
        INI_WriteInt(File,"RadioP", Info[playerid][pRadio]);
        INI_WriteInt(File,"KHZ",Info[playerid][pRadioFreq]);
        INI_WriteInt(File,"Ipad",Info[playerid][pIpadMusic]);
        INI_WriteInt(File,"GiftTime",Info[playerid][pGiftTime]);
		for( new m = 0; m < 12; m++ )
		{
		    new mStr[24];
		    format(mStr,sizeof(mStr), "Gun%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pWeapons][m]);
		}
		INI_WriteInt(File,"Acento",Info[playerid][pAccent]);
		INI_WriteInt(File,"Ingles",Info[playerid][pIngles]);
		INI_WriteInt(File,"Aleman",Info[playerid][pAleman]);
		INI_WriteInt(File,"Ruso",Info[playerid][pRuso]);
		INI_WriteInt(File,"Japones",Info[playerid][pJapones]);
		INI_WriteInt(File,"Italiano",Info[playerid][pItaliano]);
		INI_WriteInt(File,"Arabe",Info[playerid][pArabe]);
		INI_WriteInt(File,"InglesSkill",Info[playerid][pInglesSkill]);
		INI_WriteInt(File,"AlemanSkill",Info[playerid][pAlemanSkill]);
		INI_WriteInt(File,"RusoSkill",Info[playerid][pRusoSkill]);
		INI_WriteInt(File,"JaponesSkill",Info[playerid][pJaponesSkill]);
		INI_WriteInt(File,"ItalianoSkill",Info[playerid][pItalianoSkill]);
		INI_WriteInt(File,"ArabeSkill",Info[playerid][pArabeSkill]);
		INI_WriteInt(File,"PTokens",Info[playerid][pPaintTokens]);
		INI_WriteInt(File,"Undercover",Info[playerid][pUndercover]);
		INI_WriteInt(File,"Head",Info[playerid][pHead]);
		INI_WriteInt(File,"TaxiLicense", Info[playerid][pTaxiLicense]);
		INI_WriteInt(File,"Hospital",Info[playerid][pHospital]);
		INI_WriteInt(File,"CHits",Info[playerid][pCHits]);
		INI_WriteInt(File,"FHits",Info[playerid][pFHits]);
		INI_WriteInt(File,"Spraycan",Info[playerid][pSpraycan]);
		INI_WriteInt(File,"Married",Info[playerid][pMarried]);
		INI_WriteString(File,"MarriedTo",Info[playerid][pMarriedTo]);
		INI_WriteString(File,"ContractBy",Info[playerid][pContractBy]);
		INI_WriteString(File,"ContractDetail",Info[playerid][pContractDetail]);
		INI_WriteInt(File,"Contract",Info[playerid][pContract]);
		INI_WriteInt(File,"pWExists",Info[playerid][pWExists]);
		INI_WriteFloat(File,"pWX",Info[playerid][pWX]);
		INI_WriteFloat(File,"pWY",Info[playerid][pWY]);
		INI_WriteFloat(File,"pWZ",Info[playerid][pWZ]);
		INI_WriteInt(File,"pWVW",Info[playerid][pWVW]);
		INI_WriteInt(File,"pWInt",Info[playerid][pWInt]);
		INI_WriteInt(File,"pWValue",Info[playerid][pWValue]);
		INI_WriteInt(File,"pWSeeds",Info[playerid][pWSeeds]);
		INI_WriteInt(File,"PayEx",Info[playerid][YaCobre]);
		INI_WriteInt(File,"AdMuted",Info[playerid][pADMute]);
		INI_WriteInt(File,"AdMutedTotal",Info[playerid][pADMuteTotal]);
		INI_WriteString(File,"Warrants",Info[playerid][pWarrant]);
		INI_WriteInt(File,"JudgeJailTime",Info[playerid][pJudgeJailTime]);
		INI_WriteInt(File,"JudgeJailType",Info[playerid][pJudgeJailType]);
		INI_WriteInt(File,"BeingSentenced",Info[playerid][pBeingSentenced]);
		INI_WriteInt(File,"ProbationTime",Info[playerid][pProbationTime]);
		INI_WriteInt(File,"Fishes" ,Info[playerid][pFishes]);
		INI_WriteInt(File,"FishSkill",Info[playerid][pFishSkill]);
		INI_WriteInt(File,"BiggestFish",Info[playerid][pBiggestFish]);
		INI_WriteInt(File,"RewardsHours",Info[playerid][pRHours]);
		INI_WriteInt(File,"ADTime",Info[playerid][pADTime]);
		INI_WriteInt(File,"Otros",Info[playerid][pOther]);
		INI_WriteInt(File,"GGTokens",Info[playerid][pGTokens]);
		INI_WriteInt(File,"HDExp",Info[playerid][pDobleExp]);
		INI_WriteInt(File,"DPHoras",Info[playerid][pDPHours]);
		INI_WriteInt(File,"DPTiempo",Info[playerid][pDPTime]);
		INI_WriteInt(File,"DPTotal",Info[playerid][pDPTotal]);
		INI_WriteInt(File,"Order",Info[playerid][pOrder]);
		INI_WriteInt(File,"TempVIP",Info[playerid][pTempVIP]);
		INI_WriteInt(File,"VIPInviteDay",Info[playerid][pVIPInviteDay]);
		INI_WriteInt(File,"BuddyInvite",Info[playerid][pBuddyInvited]);
		INI_WriteInt(File,"VTokens",Info[playerid][pVTokens]);
		INI_WriteInt(File,"Job2",Info[playerid][pJob2]);
		INI_WriteInt(File,"TypeSpawn",Info[playerid][pTypeSpawn]);
		INI_WriteInt(File,"ShopTech",Info[playerid][pShopTech]);
		INI_WriteInt(File,"Status",Info[playerid][pEstado]);
		INI_WriteString(File,"Estado",Info[playerid][pEstadoX]);
		INI_WriteInt(File,"DayVIP",Info[playerid][pVIPDateD]);
		INI_WriteInt(File,"MonthVIP",Info[playerid][pVIPDateM]);
		INI_WriteInt(File,"IDRegalo",Info[playerid][pRegalo]);
		/*for( new m = 0; m < 11; m++ )
		{
		    new mStr[24];
		    format(mStr,sizeof(mStr), "Mueble%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pMuebles][m]);
		}*/
		INI_WriteInt(File,"Screwdrivers", Info[playerid][pScrewdriver]);
		INI_WriteInt(File,"Firstaid", Info[playerid][pFirstaid]);
		INI_WriteInt(File,"CamOculta", Info[playerid][pSurveillance]);
		INI_WriteInt(File,"Negocio",Info[playerid][pPbizzkey]);
		INI_WriteInt(File,"skinn",Info[playerid][pgskin]);
		INI_WriteInt(File,"robita",Info[playerid][probita]);
		INI_WriteInt(File,"DNIFalse",Info[playerid][pDNIFalse]);
 		INI_WriteString( File, "DNIName",Info[playerid][pDNIName]);
 		INI_WriteInt(File,"Boombox",Info[playerid][pBoombox]);
 		INI_WriteInt(File,"PuntosRol",Info[playerid][pPuntosRol]);
 		INI_WriteInt(File,"TakeAway",Info[playerid][pTakeAway]);
	    for(new v = 0; v < MAX_PLAYERTOYS; v++)
    	{
	    	new string[64];
			format( string,64, "pt%dModelID", v);
			INI_WriteInt(File,string, PlayerToyInfo[playerid][v][ptModelID]);
			format(string, 64, "pt%dBone",v);
			INI_WriteInt(File,string, PlayerToyInfo[playerid][v][ptBone]);
			format(string, 64, "pt%dPosX",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosX]);
			format(string, 64, "pt%dPosY",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosY]);
			format(string, 64, "pt%dPosZ",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosZ]);
			format(string, 64, "pt%dRotX",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotX]);
			format(string, 64, "pt%dRotY",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotY]);
			format(string, 64, "pt%dRotZ",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotZ]);
			format(string, 64, "pt%dSizX",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleX]);
			format(string, 64, "pt%dSizY",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleY]);
			format(string, 64, "pt%dSizZ",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleZ]);
    	}
    	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    	{
    	    new string[64];
        	format(string, 64, "pv%dPosX",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosX]);
        	format(string, 64, "pv%dPosY",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosY]);
        	format(string, 64, "pv%dPosZ",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosZ]);
        	format(string, 64, "pv%dPosAngle",v);
        	INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvPosAngle]);
			format(string, 64, "pv%dVirtualW",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvVW]);
			format(string, 64, "pv%dModelId",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvModelId]);
			format(string, 64, "pv%dLock",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvLock]);
			format(string, 64, "pv%dLocked",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvLocked]);
			format(string, 64, "pv%dPaintJob",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvPaintJob]);
			format(string, 64, "pv%dColor1",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvColor1]);
			format(string, 64, "pv%dColor2",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvColor2]);
			format(string, 64, "pv%dPrice",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvPrice]);
			format(string, 64, "pv%dTicket",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvTicket]);
			format(string, 64, "pv%dWeapon0",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][0]);
			format(string, 64, "pv%dWeapon1",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][1]);
			format(string, 64, "pv%dWeapon2",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][2]);
			format(string, 64, "pv%dWeapon3",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][3]);
			format(string, 64, "pv%dWeapon4",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][4]);
			format(string, 64, "pv%dWeapon5",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][5]);
			format(string, 64, "pv%dWeapon6",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][6]);
			format(string, 64, "pv%dWeapon7",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWeapons][7]);
			format(string, 64, "pv%dWepUpgrade",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvWepUpgrade]);
			format(string, 64, "pv%dFuel",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvFuel]);
			format(string, 64, "pv%dImpound",v);
			INI_WriteInt(File,string,PlayerVehicleInfo[playerid][v][pvImpounded]);
			format(string, 64, "pv%dHealth",v);
			INI_WriteFloat(File,string,PlayerVehicleInfo[playerid][v][pvHealth]);
			for(new m = 0; m < MAX_MODS; m++)
			{
			    new strings[64];
			    format(strings, 64, "pv%dMod%d", v, m);
			    INI_WriteInt(File,strings,PlayerVehicleInfo[playerid][v][pvMods][m]);
			}
			INI_WriteString(File,"Agenda1",Info[playerid][pAgenda1]);
			INI_WriteString(File,"Agenda2",Info[playerid][pAgenda2]);
			INI_WriteString(File,"Agenda3",Info[playerid][pAgenda3]);
			INI_WriteString(File,"Agenda4",Info[playerid][pAgenda4]);
			INI_WriteString(File,"Agenda5",Info[playerid][pAgenda5]);
			INI_WriteString(File,"Agenda6",Info[playerid][pAgenda6]);
			INI_WriteString(File,"Agenda7",Info[playerid][pAgenda7]);
			INI_WriteString(File,"Agenda8",Info[playerid][pAgenda8]);
			INI_WriteString(File,"Agenda9",Info[playerid][pAgenda9]);
			INI_WriteString(File,"Agenda10",Info[playerid][pAgenda10]);
			INI_WriteInt(File,"Libreta",Info[playerid][pLibreta]);
			INI_WriteString(File,"BlocNotas",Info[playerid][pBlocNotas]);
	    	INI_WriteInt(File,"ContactoAgendar",Info[playerid][pContactoAgendar]);
	    	INI_WriteInt(File,"NumeroLibreta1",Info[playerid][pNumeroLibreta1]);
	    	INI_WriteInt(File,"NumeroLibreta2",Info[playerid][pNumeroLibreta2]);
	    	INI_WriteInt(File,"NumeroLibreta3",Info[playerid][pNumeroLibreta3]);
	    	INI_WriteInt(File,"NumeroLibreta4",Info[playerid][pNumeroLibreta4]);
	    	INI_WriteInt(File,"NumeroLibreta5",Info[playerid][pNumeroLibreta5]);
	    	INI_WriteInt(File,"NumeroLibreta6",Info[playerid][pNumeroLibreta6]);
	    	INI_WriteInt(File,"NumeroLibreta7",Info[playerid][pNumeroLibreta7]);
	    	INI_WriteInt(File,"NumeroLibreta8",Info[playerid][pNumeroLibreta8]);
	    	INI_WriteInt(File,"NumeroLibreta9",Info[playerid][pNumeroLibreta9]);
	    	INI_WriteInt(File,"NumeroLibreta10",Info[playerid][pNumeroLibreta10]);
		}
		INI_Close(File);
   	}
   	return 1;
}

function PlayerLogin(playerid)
{
	new string [128];
	TotalLogin++;
	ResetPlayerMoney(playerid);
	CurrentMoney[playerid] = GetPVarInt(playerid, "Cash");
	HideMenuLogin(playerid);
	if(Info[playerid][pLvlAdminZC] > 0)
	{
	    Info[playerid][pLvlAdminZC] = 0;
	    Info[playerid][pAdminZC] = 0;
	    Info[playerid][pBanAppealer] = 0;
	    Info[playerid][pFactionModerator] = 0;
	    Info[playerid][pModStaff] = 0;
	    Info[playerid][pGangModerator] = 0;
	    Info[playerid][pShopTech] = 0;
	    Info[playerid][pHelper] = 0;
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"INFRANET - RP:{FFFFFF} Restauración de administradores general, No reportar esto.");
	}
	if(Info[playerid][pDisabledZC] == 1){
	    SetPlayerName(playerid, "BannedPlayer");
   	    SendClientMessageEx(playerid, COLOR_WHITE,  "{FFFF00}Administración:{FFFFFF} Esta cuenta está deshabilitada.");
   	    Kick(playerid);
	}
	if(Info[playerid][pBannedZC] >= 2){
   	    SetPlayerName(playerid, "BannedPlayer");
   	    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}Administración:{FFFFFF} Tú estás baneado del servidor.");
   	    Kick(playerid);
	}
	if(Info[playerid][pAdminZC] > 0 && Info[playerid][pAdminZC] < 6000){
		new tempip[32];
		GetPlayerIp(playerid, tempip, 32);
		if(strcmp(tempip, Info[playerid][pIP], true)){
			format(string, sizeof(string), "{00F70C}INFRANET - RP:{FFFFFF} %s ha logueado con diferente [IP: %s] - IP original es: %s", GetPlayerNameEx(playerid), tempip, Info[playerid][pIP]);
			ABroadCast(COLOR_GENERAL, string, 4);
		}
	}
	if(Info[playerid][pMember] == 20 || Info[playerid][pMember] == 19) // Si es terrorista.
	{   //Control de miembros CDG.
			format(string, sizeof(string), "{00F70C}[Aviso Update]:{FFFFFF} %s, se te ha sacado de la facción automáticamente, motivo: Cambio de ID.", GetPlayerNameEx(playerid));
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}Administración:{FFFFFF} Sus stats han sido recuperados, su nueva facción es Cartel Del Golfo.");
			// Pérdida de la facción LCN por limpieza.
   			Info[playerid][pLeader] = 0; Info[playerid][pMember] = 17; // Conservan el rango, el líder se resetea y a los miembros, se les cambia la ID.
	}
	if(Info[playerid][pVIP] >= 1){   //Control del sistema VIP.
			format(string, sizeof(string), "{00F70C}[Sistema VIP]:{FFFFFF} %s se le ha retirado el premium. El sistema deja de estar en funcionamiento.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL, string, 2);
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}Administración:{FFFFFF} Tu premium ha sido eliminado. Motivo: desapareción del sistema premium anterior.");
            // Pérdida del premium por bug en los toys.
			Info[playerid][pVIP] = 0; // Rango VIP.
			Info[playerid][pTempVIP] = 0; // Tiempo.
 			Info[playerid][pBuddyInvited] = 0; // Si fuiste invitado por alguien.
            Info[playerid][pPasaporte] = 0; // Resetear pasaportes. (Vinculado anteriormente al sistema VIP)
            Info[playerid][pSeguro] = 0; // Resetear seguros médicos. (Vinculado anteriormente al sistema VIP)
            Info[playerid][pVIPDateM] = -1; // Mes.
			Info[playerid][pVIPDateD] = -1; // Dia.
			Info[playerid][pVIPCHAT] = 0; // Uso del chat VIP.
			Info[playerid][pVIPInviteDay] = 0; // Dia de prueba VIP, invitación.
	}
	// Sistema de perdida de casa. NOTA: No se quitará el label de propietario, motivo: El servidor tiene su propio Timer (HouseUpdate).
	// NOTA: Esto solo sirve para quitar las llaves de las casas cuyo tiempo de renovación se han agotado. [/hinfo] - [hTiempo] puesto a 30 días.
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID) // Tiene casa 1 y dispone de tiempo en esta.
	{
	 	if(HouseInfo[Info[playerid][pPhousekey]][hTiempo] != 0)
	 	{
	    	HouseInfo[Info[playerid][pPhousekey]][hTiempo] = 31; // El tiempo de la casa se vuelve a poner en 31 días.
		}
		else
		{
		    format(string, sizeof(string), "[Atención]:{FFFFFF} Perdiste tu casa ID: %d, motivo: Ausencia injustificada mayor de 30 días.", Info[playerid][pPhousekey]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
	    	Info[playerid][pPhousekey] = INVALID_HOUSE_ID; // Usuario pierde la casa.
		}
	}
	if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID) // Tiene casa 2 y dispone de tiempo en esta.
	{
	 	if(HouseInfo[Info[playerid][pPhousekey2]][hTiempo] != 0)
	 	{
	    	HouseInfo[Info[playerid][pPhousekey2]][hTiempo] = 31; // El tiempo de la casa se vuelve a poner en 31 días.
		}
		else
		{
		    format(string, sizeof(string), "[Atención]:{FFFFFF} Perdiste tu casa ID: %d, motivo: Ausencia injustificada mayor de 30 días.", Info[playerid][pPhousekey2]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
	    	Info[playerid][pPhousekey2] = INVALID_HOUSE_ID; // Usuario pierde la casa.
		}
	}
	if(Info[playerid][pPhousekeyX] != INVALID_HOUSE_ID) // Tiene casa 3 y dispone de tiempo en esta.
	{
 		format(string, sizeof(string), "Atención, una de sus casas (ID: %d) forma parte del nuevo sistema de propiedades, cualquier bug reportélo.", Info[playerid][pPhousekeyX]);
 		SendClientMessageEx(playerid, COLOR_GREY, string);
		SendClientMessageEx(playerid, COLOR_GREY, "Comandos disponibles temporalmente: /casamenu - /armario - /vendercasa3 (Más ayuda acerca del Sistema en el foro).");
	}
	if(Info[playerid][pWRestricted] >= 1) ResetPlayerWeaponsEx(playerid);
	GetPlayerIp(playerid, Info[playerid][pIP], 32);
	SetPlayerScore(playerid, Info[playerid][pLevel]);
	if(Info[playerid][pReg] == 0){
		Info[playerid][pLevel] = 0;
		Info[playerid][pHealth] = 100.0;
		Info[playerid][pPos_x] = 1612.3240;
		Info[playerid][pPos_y] = -2330.1670;
		Info[playerid][pPos_z] = 13.5469;
		Info[playerid][pInt] = 0;
		Info[playerid][pTeam] = 3;
		Info[playerid][pChar] = 299;
		Info[playerid][pPnumber] = 0;
		Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		Info[playerid][pAccount] = 0;
		Info[playerid][pPbizzkey] = 9999;
	}
    if(Info[playerid][pPos_x] == 0.0 && Info[playerid][pPos_y]== 0.0&& Info[playerid][pPos_z]== 0.0){
        Info[playerid][pPos_x] = 1715.12;
		Info[playerid][pPos_y] = -1903.17;
		Info[playerid][pPos_z] = 13.56;
    }
    if(Info[playerid][pShopTech] >= 2) Info[playerid][pShopTech] = 0;
    if(Info[playerid][pAdminZC] == 0) { Info[playerid][pGangModerator] = 0; Info[playerid][pShopTech] = 0; Info[playerid][pBanAppealer] = 0; Info[playerid][pFactionModerator] = 0; Info[playerid][pModStaff] = 0; }
	if(Info[playerid][pHospital] == 1){ Info[playerid][pHospital] = 0; SetPVarInt(playerid, "Hospital", 1); }
	if(Info[playerid][pLevel] < 10 || Info[playerid][pAdminZC] > 0 || Info[playerid][pHelper] > 0) gNewbie[playerid] = 0;
	if(Info[playerid][pNMute] == 1) SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
	if(Info[playerid][pTut] == 1) Info[playerid][pReg] = 1;
    new text[128];
	switch(Info[playerid][pAdminZC]) // Mensaje de bienvenida
	{
		case 1:	SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}INFRANET - RP{FFFFFF} Bienvenido, te has conectado como Moderador.");
		case 2, 3, 4, 5, 6, 1338, 4000, 5000, 6000: SendClientMessage(playerid, -1, def("{00F70C}INFRANET - RP:{FFFFFF} Bienvenido, te has conectado como administrador nivel {FF0000}%d{FFFFFF}.", Info[playerid][pAdminZC]));
		default: SendClientMessage(playerid, COLOR_RED, def("{00F70C}[INFRANET]{FFFFFF} Bienvenido a nuestro servidor, {5ABAFF}%s{FFFFFF}.", GetPlayerNameEx(playerid)));
	}
	//SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, "Ya es navidad en INFRANET - RP, ves a la plaza del Ayuntamiento a abrir su regalo, felices fiestas.");
	switch(Info[playerid][pHelper])
	{
		case 1: SendClientMessageEx(playerid, COLOR_GENERAL, "{00F70C}INFRANET - RP:{FFFFFF}Te has conectado como ayudante.");
		case 2: SendClientMessageEx(playerid, COLOR_GENERAL, "{00F70C}INFRANET - RP:{FFFFFF}Te has conectado como Líder de Ayudantes.");
	}
	SendClientMessageEx(playerid, COLOR_GENERAL, GlobalMOTD);
	CheckVIPExpire(playerid);
	if(Info[playerid][pVIP] >= 1) SendClientMessageEx(playerid, COLOR_VIP, VIPMOTD);
	if(gTeam[playerid] == 0){
		gTeam[playerid] = 3;
	}
	else{
		gTeam[playerid] = Info[playerid][pTeam];
	}
	SetSpawnInfo(playerid, Info[playerid][pTeam], Info[playerid][pChar], Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
	gPlayerLogged{playerid} = 1;
    SpawnPlayer(playerid);
	new ip[32], tmp2[128];
	GetPlayerIp(playerid, ip, 32);
	if(Info[playerid][pAdminZC] >= 1) SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, AdminMOTD);
	if(Info[playerid][pHelper] >= 1) SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, CAMOTD);
	if(Info[playerid][pFMember] < 255){
		format(tmp2, sizeof(tmp2), "Mensaje Familia: %s.", fINFO[Info[playerid][pFMember]][FamilyMOTD]);
		SendClientMessageEx(playerid, COLOR_YELLOW, tmp2);
	}
	if(Info[playerid][pMember] > 0){
		format(tmp2, sizeof(tmp2), "Admin Msj: %s.", FACMOTD);
		SendClientMessageEx(playerid, COLOR_YELLOW, tmp2);
	}
	if(Info[playerid][pFMember] < 255){
		format(tmp2, sizeof(tmp2), "Admin Msj: %s.", FAMMOTD);
		SendClientMessageEx(playerid, COLOR_YELLOW, tmp2);
	}
	if(Info[playerid][pOrder] > 0){
		format(string, sizeof(string), "{00F70C}INFRANET - RP:{FFFFFF} %s está esperando por su compra en la tienda.",GetPlayerNameEx(playerid));
		ShopTechBroadCast(COLOR_SHOP,string);
	}
	if(Info[playerid][pVIP] >= 5 && Info[playerid][pArmsSkill] < 400){
		Info[playerid][pArmsSkill] = 401;
		SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[MODVIP]:{FFFFFF} Ahora eres nivel 5 en el trabajo Vendedor de Armas.");
	}
 	SetPlayerFightingStyle (playerid, Info[playerid][pFStyle]);
 	Info[playerid][pContactoAgendar] = 0;
 	Info[playerid][pSpeedo] = 0; // Se desactiva speedo.
 	WeedLogin(playerid);
 	SetPlayerToTeamColor(playerid);
	LoadPlayerVehicles(playerid);
 	new hcheck, hcheck2, name[MAX_PLAYER_NAME];
	hcheck = INVALID_HOUSE_ID;
	hcheck2 = INVALID_HOUSE_ID;
	GetPlayerName(playerid, name, sizeof(name));
	for(new i = 0; i < MAX_HOUSES; i++)
	{
  		if(!strcmp(name, HouseInfo[i][hOwner], false))
		{
   			if(hcheck != INVALID_HOUSE_ID)
			{
   		        hcheck2 = i;
			}
			else
			{
				hcheck = i;
			}
    	}
	}
	if(hcheck != INVALID_HOUSE_ID) Info[playerid][pPhousekey] = hcheck;
	if(hcheck2 != INVALID_HOUSE_ID) Info[playerid][pPhousekey2] = hcheck2;
	if(hcheck == INVALID_HOUSE_ID) return Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
	if(hcheck2 == INVALID_HOUSE_ID) return Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[128];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[128];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}
/*
function CloseDoorDerecha()
{
	MoveDynamicObject(LSPD_Derecha, 1564.76685, -1689.5956, 4989.52588, 3.5, 0.00000, 0.00000, 90.00000);
	return 1;
}
function CloseDoorIzquierda()
{
	MoveDynamicObject(LSPD_Izquierda, );
	return 1;
}
*/

public OnPlayerPressButton(playerid, buttonid)
{
	if(buttonid == RusosBT)
    {
        if(!Team_Rusa(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso denegado, sólo miembros de la organización.");
        MoveDynamicObject(RusosDoor1,737.41901,-1213.4970,2216.07910,3, 0.00000, 0.00000, 90.00000); // Derecha
        MoveDynamicObject(RusosDoor2,737.41998,-1207.5520,2216.07910,2, 0.00000, 0.00000, -90.00000); // Izquierda
        SetTimer("CloseDoorRusos", 5000, 0);
        //print("JDOOR 1 - Moved");
    }
   	if(buttonid == PJBT)
    {
        if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso denegado, sólo policias y jueces.");
        MoveDynamicObject(PJDOOR,1439.3900, -1469.97485, 1615.26636, 3.5); // Primer acceso.
        SetTimer("CloseDoorPJ", 5000, 0);
        //print("JDOOR 1 - Moved");
    }
   	if(buttonid == PJBT2)
    {
        if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso denegado, sólo policias y jueces.");
        MoveDynamicObject(PJDOOR2,1421.6000, -1469.96814, 1616.24707, 3.5); // Segundo acceso.
        SetTimer("CloseDoorPJ2", 5000, 0);
        //print("JDOOR 1 - Moved");
    }
   	if(buttonid == PJBT3)
    {
        if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso denegado, sólo policias y jueces.");
		ShowPlayerDialog(playerid,DIALOG_PJ,DIALOG_STYLE_LIST,
		"Prisión Judicial","Abrir Celda N1 - (Cierre automático)\nAbrir Celda N2 - (Cierre automático)","Aceptar","Salir");
        //print("JDOOR 1 - Moved");
    } // 1425.13538, -1481.79163, 1617.80505
	if(buttonid == JDoor1)
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso Denegado.");
        MoveDynamicObject(fen1,1417.90002441,-1554.90002441,4330.50000000,6);
        SetTimer("CloseCell1", 5000, 0);
        //print("JDOOR 1 - Moved");
    }
    if(buttonid == JDoor2)
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso Denegado.");
        MoveDynamicObject(fen2,1425.90002441,-1555.00000000,4330.50000000,6);
        SetTimer("CloseCell2", 5000, 0);
        //print("JDOOR 2 - Moved");
    }
    if(buttonid == JDoor3)
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso Denegado.");
        MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4330.50000000,6);
        SetTimer("CloseCell3", 5000, 0);
        //print("JDOOR 3 - Moved");
    }
    if(buttonid == JDoor4)
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso Denegado.");
        MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4330.50000000,6);
        SetTimer("CloseCell4", 5000, 0);
        //print("JDOOR 4 - Moved");
    }
    if(buttonid == JDoor5) // FIX a 6
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso Denegado.");
        MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4330.50000000,6);
        SetTimer("CloseCell5", 5000, 0);
        //print("JDOOR 5 - Moved");
    }
    if(buttonid == JDoor6)
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso Denegado.");
        MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4330.50000000,6);
        SetTimer("CloseCell6", 5000, 0);
        //print("JDOOR 6 - Moved");
    }
    if(buttonid == buttomcia) // CIA
    {
        if(!IsACia(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
      	MoveDynamicObject(cia1,243.91960, 72.43680, 1002.63959,6);
      	MoveDynamicObject(cia2,248.89999, 72.47110, 1002.63959,6);
        SetTimer("CloseCia1", 3000, 0);
        SetTimer("CloseCia2", 3000, 0);
    }
    if(buttonid == buttomcia2) // CIA
    {
        if(!IsACia(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
        MoveDynamicObject(cia2,248.89999, 72.47110, 1002.63959,6);
        MoveDynamicObject(cia1,243.91960, 72.43680, 1002.63959,6);
        SetTimer("CloseCia2", 3000, 0);
        SetTimer("CloseCia1", 3000, 0);
    }

   	if(buttonid == courtbuttons[0])
	{
		if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[3])
	{
		if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[1])
	{
		if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == courtbuttons[2])
	{
		if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
    if(buttonid == FBILobbyLeftBTN[0] || buttonid == FBILobbyLeftBTN[1])
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	        MoveDynamicObject(FBILobbyLeft,293.93002319,-1498.43457031,-46.13965225,4);
			SetTimer("CloseFBILobbyLeft", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
	}
	if(buttonid == FBILobbyRightBTN[0] || buttonid == FBILobbyRightBTN[1])
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	        MoveDynamicObject(FBILobbyRight,303.84756470,-1521.62988281,-46.13965225,4);
			SetTimer("CloseFBILobbyRight", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
	}
	if(buttonid == FBIPrivateBTN[0] || buttonid == FBIPrivateBTN[1])
	{
	    if((Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2) && Info[playerid][pRank] >= 5)
	    {
	        MoveDynamicObject(FBIPrivate[0],299.29986572,-1491.75842285,-28.73300552,4);
	        MoveDynamicObject(FBIPrivate[1],299.33737183,-1496.86145020,-28.73300552,4);
			SetTimer("CloseFBIPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
	}
	if(buttonid == elevator)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		else SafeDialogEx( playerid, ELEVATOR3, DIALOG_STYLE_LIST, "{00F70C}Elevador", "Helipuerto\nGarage", "Ok", "Cancelar");
	}
	if(buttonid == garagekey)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		else SafeDialogEx( playerid, ELEVATOR2, DIALOG_STYLE_LIST, "{00F70C}Elevador", "Helipuerto\nInterior", "Ok", "Cancelar");
	}
	if(buttonid == roofkey)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		else SafeDialogEx( playerid, ELEVATOR, DIALOG_STYLE_LIST, "{00F70C}Elevador", "Interior\nGarage", "Ok", "Cancelar");
	}
	if(buttonid == cctvin || buttonid == cctvout)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(cctv1,263.44921875,115.79980469,1003.61718750,4);
  		MoveDynamicObject(cctv2,268.46875000,115.83691406,1003.61718750,4);
		SetTimer("CloseCCTV", 2500, 0);
	}
	if(buttonid == chiefin || buttonid == chiefout)
	{
		if((Info[playerid][pRank] < 6 && Info[playerid][pMember] == 1) || Info[playerid][pMember] != 1)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(chief1,228.0,119.50000000,1009.21875000,4);
  		MoveDynamicObject(chief2,230.0,119.53515625,1009.21875000,4);
	    SetTimer("CloseChief", 2500, 0);
	}
	if(buttonid == lockerin || buttonid == lockerout)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(locker1,268.29980469,112.56640625,1003.61718750,4);
		MoveDynamicObject(locker2,263.29980469,112.52929688,1003.61718750,4);
		SetTimer("CloseLocker", 2500, 0);
	}
	if(buttonid == westout)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	else if(buttonid == westin)
	{
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	else if(buttonid == eastin)
	{
	    MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
	    MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	else if(buttonid == eastout)
	{
		if(!Team_LSPD(playerid) && !Team_SAEM(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
 		MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
 		MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	return false;
}


//*******************PaintBall*******************
PaintballMainMenu(playerid)
{
	new string[128];
	format(string,sizeof(string),"Elegir Arena\nComprar Fichas");
	SafeDialogEx(playerid,PB_MENU,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Menu:",string,"Ok","Salir");
}

PaintballArenaSelection(playerid)
{
	new string[256];
	format(string,sizeof(string),"DeathMatch Arena \t\t Jugadores:(%d/20)\nDeathMatch Arena 2 \t\t Jugadores:(%d/20)\nTeam DeathMatch \t\t Jugadores:(%d)",TotalDM, TotalDM2, TotalTDM);
	SafeDialogEx(playerid,PB_SARENA,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige una Arena:",string,"Ok","Atrás");
}

PaintballTokenBuyMenu(playerid)
{
	new string[150];
	format(string,sizeof(string),"{FFFFFF}Cuantas fichas deseas comprar?\n\nCada ficha cuesta $%d. Actualmente tienes {AA3333}%d{FFFFFF} fichas.", 20, Info[playerid][pPaintTokens]);
	SafeDialogEx(playerid,PB_FICHAS,DIALOG_STYLE_INPUT,"{00F70C}Paintball Arena - Fichas:",string,"Comprar","Atrás");
	return 1;
}

PaintballScoreboard(playerid)
{
	if(GetPVarInt(playerid, "IsInArena") == 0) { return 1; }
	new titlestring[128];
	new string[2048];
 	foreach(Player, p)
  	{
		if(GetPVarInt(p, "ArenaMode") == 1)
		{
			format(titlestring,sizeof(titlestring),"(DM) Scoreboard - Players: (%d)",TotalDM);
			format(string,sizeof(string),"%s(ID: %d) %s - (Puntos: %d) (Muertes: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],Info[p][pDeaths],GetPlayerPing(p));
  		}
		if(GetPVarInt(p, "ArenaMode") == 3)
		{
			format(titlestring,sizeof(titlestring),"(DM) Scoreboard - Players: (%d)",TotalDM2);
			format(string,sizeof(string),"%s(ID: %d) %s - (Puntos: %d) (Muertes: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],Info[p][pDeaths],GetPlayerPing(p));
  		}
		if(GetPVarInt(p, "ArenaMode") == 2)
		{
		    format(titlestring,sizeof(titlestring),"(TDM) Scoreboard - Rojo: (%d) - Azul: (%d)",TRedKills,TBlueKills);
		    switch(Info[p][pPaintTeam])
		    {   // 1: Red Team - 2: // Blue Team
		        case 1: format(string,sizeof(string),"%s(ID: %d) ({FF0000}Equipo Rojo{FF0000}) %s - (Puntos: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],GetPlayerPing(p));
		        case 2: format(string,sizeof(string),"%s(ID: %d) ({0000FF}Equipo Verde{0000FF}) %s - (Puntos: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],GetPlayerPing(p));
		    }
		}
	}
	SafeDialogEx(playerid,PBARENASCORES,DIALOG_STYLE_LIST,titlestring,string,"Actualizar","Cerrar");
	return 1;
}

SpawnPaintballArena(playerid)
{
    ResetPlayerWeapons(playerid);
	switch(GetPVarInt(playerid, "ArenaMode")) // Deathmatch
	{
	    case 1:
	    {
			Info[playerid][pVW] = 700; Info[playerid][pInt] = 10;
     		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
			SetPlayerInterior(playerid, Info[playerid][pInt]);
			new rand = Random(1,5);
			switch (rand)
			{
	    		case 1:
	    		{
	       			SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
 					SetPlayerFacingAngle(playerid, 116.4942);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    		}
	    		case 2:
				{
		   			SetPlayerPos(playerid, -1126.8611,1020.4957,1345.5922);
 					SetPlayerFacingAngle(playerid, 286.6877);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 3:
				{
		   			SetPlayerPos(playerid, -1087.2578,1094.6459,1343.9775);
 					SetPlayerFacingAngle(playerid, 205.5335);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 4:
				{
		   			SetPlayerPos(playerid, -981.2971,1019.2087,1344.6238);
 					SetPlayerFacingAngle(playerid, 51.9989);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
 			SetHP(playerid, 100);
 			SetPlayerArmour(playerid, 50);
 			GivePlayerWeapon(playerid, 29, 60000);
 			return 1;
		}
		case 3: // Deathmatch 2
		{
			Info[playerid][pVW] = 800; Info[playerid][pInt] = 10;
			SetPlayerInterior(playerid, Info[playerid][pInt]);
			SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
			new rand = Random(1,5);
			switch (rand)
			{
	    		case 1:
	    		{
	    	   		SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
 					SetPlayerFacingAngle(playerid, 116.4942);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    		}
	    		case 2:
				{
			   		SetPlayerPos(playerid, -1126.8611,1020.4957,1345.5922);
 					SetPlayerFacingAngle(playerid, 286.6877);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 3:
				{
			   		SetPlayerPos(playerid, -1087.2578,1094.6459,1343.9775);
 					SetPlayerFacingAngle(playerid, 205.5335);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 4:
				{
			   		SetPlayerPos(playerid, -981.2971,1019.2087,1344.6238);
 					SetPlayerFacingAngle(playerid, 51.9989);
 					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
 			SetHP(playerid, 100);
 			SetPlayerArmour(playerid, 50);
 			GivePlayerWeapon(playerid, 29, 60000);
 			return 1;
		}
		case 2: // Team Deathmatch
		{
	    	Info[playerid][pVW] = 600; Info[playerid][pInt] = 10;
			SetPlayerInterior(playerid, Info[playerid][pInt]);
 			SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
 			SetHP(playerid, 100);
 			SetPlayerArmour(playerid, 50);
 			GivePlayerWeapon(playerid, 29, 60000);
        	switch(Info[playerid][pPaintTeam])
        	{
        	    case 1: //red
			    {
					SetPlayerPos(playerid, -1132.0417,1041.1082,1345.7397);
					SetPlayerFacingAngle(playerid, 116.4942);
					SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 2: // Blue
				{
					SetPlayerPos(playerid, -974.1334,1077.5168,1344.9895);
					SetPlayerFacingAngle(playerid, 351.7867);
			    	SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
			    	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
		}
	}
	return 1;
}

JoinPaintballArena(playerid, modo)
{
	new string[256];

	new Float:oldX, Float:oldY, Float:oldZ, Float:oldHealth, Float:oldArmor;
	GetPlayerPos(playerid, oldX, oldY, oldZ);
	SetPVarFloat(playerid, "pbOldX", oldX);
	SetPVarFloat(playerid, "pbOldY", oldY);
	SetPVarFloat(playerid, "pbOldZ", oldZ);
	GetPlayerHealth(playerid,oldHealth);
	GetPlayerArmour(playerid,oldArmor);
	SetPVarInt(playerid, "pbOldInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "pbOldVW", GetPlayerVirtualWorld(playerid));
	SetPVarFloat(playerid, "pbOldHealth", oldHealth);
	SetPVarFloat(playerid, "pbOldArmor", oldArmor);
	pTazer[playerid] = 0; // Reset Tazer
	switch(modo)
	{
		case 1: // DM
		{
		    if(Info[playerid][pPaintTokens] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} Necesitas 3 fichas para entrar a está Arena.");
            if(TotalDM == 20) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} La Arena está FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 1);
	        SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
 			SetPlayerFacingAngle(playerid, 116.4942);
 			SetHP(playerid, 100);
 			SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 700);
 			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"{00F70C}[Paintball Arena]:{5ABAFF} %s se ha unido al Paintball Arena.", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(1,COLOR_YELLOW,string);
	        SendClientMessageEx(playerid, COLOR_WHITE, "[Comandos Paintball Arena]: /fichas - /armas - /salirarena - /arena - /cequipo - /scores.");
			TotalDM++;
		}
		case 2: // CHOOSE TEAM
		{
		    if(Info[playerid][pPaintTokens] < 8) return SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Necesitas 8 fichas para entrar a está Arena");
		    SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
		}
		case 3: // JOIN TEAM
		{
		    if(TotalTDM == 32) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} La Arena esta FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 2);

			SendClientMessageEx(playerid, COLOR_WHITE, "[Comandos Paintball Arena]: /fichas - /armas - /salirarena - /arena - /cequipo - /scores.");
			switch(Info[playerid][pPaintTeam])
			{
				case 1: //RED
		    	{
		        	format(string,sizeof(string),"{00F70C}[Paintball Arena]:{5ABAFF} %s se ha unido al Paintball Arena - Equipo Rojo!", GetPlayerNameEx(playerid));
	        		SendPaintballArenaMessage(2,COLOR_YELLOW,string);
		        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        	SetPlayerPos(playerid,-1132.0417,1041.1082,1345.7397);
		        	SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 600);
		        	SetPlayerColor(playerid, PAINTBALL_TEAM_RED); SetHP(playerid, 100);
		        	SetPlayerArmour(playerid, 50);
		        	PlayersRed++;
		    	}
		    	case 2: //BLUE
		    	{
		       		format(string,sizeof(string),"{00F70C}[Paintball Arena]:{5ABAFF} %s se ha unido al Paintball Arena - Equipo Azul!", GetPlayerNameEx(playerid));
	        		SendPaintballArenaMessage(2,COLOR_YELLOW,string);
		        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        	SetPlayerPos(playerid,-974.1334,1077.5168,1344.9895);
		        	SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 600);
		        	SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE); SetHP(playerid, 100);
		        	SetPlayerArmour(playerid, 50);
		        	PlayersBlue++;
		    	}
			}
		}
		case 4: // CTF
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Proximamente, Nuevo modo de juego: Captura la Bandera.");
		}
		case 5: // DM2
		{
		    if(Info[playerid][pPaintTokens] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} Necesitas 3 fichas para entrar a está Arena");
            if(TotalDM2 == 20) return SendClientMessageEx(playerid, COLOR_GRAD2, "{00F70C}[Paintball Arena]:{5ABAFF} La Arena 2 está FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 3);
			ResetPlayerWeapons(playerid);
	        SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
 			SetPlayerFacingAngle(playerid, 116.4942);
 			SetHP(playerid, 100);
 			SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 800);
 			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"{00F70C}[Paintball Arena]:{5ABAFF}  %s se ha unido al Paintball Arena!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(1,COLOR_YELLOW,string);
	        SendClientMessageEx(playerid, COLOR_YELLOW, "{00F70C}[Paintball Arena]:{5ABAFF} Te regalamos por tu entrada un MP5, cuando mueras usa /armas para ver las armas disponibles.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "[Comandos Paintball Arena]: /fichas - /armas - /salirarena - /arena - /cequipo - /scores.");
			TotalDM2++;
		}
	}
	return 1;
}

LeavePaintballArena(playerid)
{
    switch(GetPVarInt(playerid, "ArenaMode"))
	{
        case 1:{
            TotalDM -= 1;
        }
        case 2:{
        	TotalTDM -= 1;
        }
        case 3:{
        	TotalDM2 -= 1;
        }
    }
    switch(Info[playerid][pPaintTeam])
	{
        case 1:{
			PlayersRed -= 1;
		}
		case 2:{
		    PlayersBlue -= 1;
		}
    }
    new string[128];
	format(string,sizeof(string),"{00F70C}[Paintball Arena]:{5ABAFF} %s ha dejado el Paintball Arena!", GetPlayerNameEx(playerid));
	SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_YELLOW, string);
	Info[playerid][pKills] = 0;
    Info[playerid][pDeaths] = 0;
	SetPlayerWeapons(playerid);
  	SetPlayerColor(playerid,TEAM_HIT_COLOR);
  	SetPlayerSkin(playerid, Info[playerid][pChar]);
    LoadObjects(playerid);
	SetPVarInt(playerid, "ArenaMode", 0);
	SetPVarInt(playerid, "IsInArena", 0);
	SetPlayerPos(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
	SetHP(playerid, GetPVarFloat(playerid, "pbOldHealth"));
	SetPlayerArmour(playerid, GetPVarFloat(playerid, "pbOldArmor"));
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
	SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
	Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
	Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
    Info[playerid][pPaintTeam] = 0;
}

PaintballDisconnect(playerid)
{
    switch(GetPVarInt(playerid, "ArenaMode"))
    {
        case 1:
        {
            TotalDM -= 1;
        }
        case 2:
        {
        	TotalTDM -= 1;
        }
        case 3:{
        	TotalDM2 -= 1;
        }
    }
    switch(Info[playerid][pPaintTeam])
    {
        case 1:
		{
			PlayersRed -= 1;
		}
		case 2:
		{
		    PlayersBlue -= 1;
		}
    }
	Info[playerid][pKills] = 0;
    Info[playerid][pDeaths] = 0;
  	SetPlayerSkin(playerid, Info[playerid][pChar]);
	SetPlayerPos(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
	SetHP(playerid, GetPVarFloat(playerid, "pbOldHealth"));
	SetPlayerArmour(playerid, GetPVarFloat(playerid, "pbOldArmor"));
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
	SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
	Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
	Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
    Info[playerid][pPaintTeam] = 0;
}

PaintballSwitchTeam(playerid)
{
	new string[128];
	format(string,sizeof(string),"{FF0000}Equipo Rojo (%d/12)\n{0000FF}Equipo Azul (%d/12)",PlayersRed,PlayersBlue);
	SafeDialogEx(playerid,PB_CHOOSE,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elegir Equipo:",string,"Unirse","Cancelar");
}

// EMS
function KillEMSQueue(playerid)
{
    DeletePVar(playerid, "Injured");
    SetPVarInt(playerid, "FirstSpawn", 1);
    DeletePVar(playerid, "EMSAttempt");
	DeletePVar(playerid, "MedicCall");
	return 1;
}

function SendEMSQueue(playerid,type) // CMD: /reanimar.
{
	switch(type)
	{
		case 1:
		{
		    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
	  		SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
			SetPVarInt(playerid, "EMSAttempt", -1);
			ClearAnimations(playerid);
  			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);

			if(GetPlayerInterior(playerid) > 0)
			{
			    LoadObjects(playerid);
			}
			GameTextForPlayer(playerid, "~y~Estas herido~n~~w~/aceptar muerte o /servicios medicos", 5000, 3);
			SetHP(playerid, 100);
			SetPlayerArmour(playerid,0);
			SetPVarInt(playerid,"MedicCall",1);
		}
		case 2:
		{
		    SetPVarInt(playerid,"EMSAttempt", 2);
		 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			SetHP(playerid, 100);
			SetPlayerArmour(playerid,0);
		}
	}
	return 1;
}
SafeDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[]){
    CurrentDialog[playerid] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,Float:fRotX, Float:fRotY, Float:fRotZ,Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = fOffsetX;
    PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = fOffsetY;
    PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = fOffsetZ;
    PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = fRotX;
    PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = fRotY;
    PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = fRotZ;

    PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = fScaleX;
    if(fScaleX < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 0.1;
 	else if(fScaleX > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1.5;

    PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = fScaleY;
 	if(fScaleY < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 0.1;
 	else if(fScaleY > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1.5;

 	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = fScaleZ;
 	if(fScaleZ < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 0.1;
 	else if(fScaleZ > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1.5;

	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
	SendClientMessageEx(playerid, -1, "{A2DC35}[TOYS]:{FFFFFF} Finalizaste de editar este objeto. Usa{2F99B5} /toys {FFFFFF}si quieres editar otro objeto.");
	slotselection[playerid] = -1;
	Editing[playerid] = 0;
    return 1;
}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new sendername[MAX_PLAYER_NAME],giveplayer[MAX_PLAYER_NAME];
	new idcar = GetPlayerVehicleID(playerid),string[180];
	//new idf = InfoFacc[Info[playerid][pMember]][gMateriales];
	new fac = Info[playerid][pMember];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(!isnull(inputtext))
	{
	    if(strfind(inputtext, "%s", true) != -1)
	    {
			format(string, sizeof(string), "INFRANET - RP: %s (ID %d) es un posible dialog-exploiting, intenta enviar string en blanco mediante diálogos.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_GENERAL, string, 2);
  			format(string, sizeof(string), "%s a intentado insertar un falso string en un diálogo. [Exploit]", GetPlayerNameEx(playerid));
  			Log("LOGS/reportbug.log", string);
  			format(string, sizeof(string), "[AdmCmd]: %s ha sido auto expulsado, razón: Teleport.", GetPlayerNameEx(playerid), playerid);
			ABroadCast(COLOR_GENERAL, string, 0 );
			Kick(playerid);
	        return 1;
		}
	}
    // Música. /ponermusica - /musica.
	if(dialogid == D_Musica)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_Musica,DIALOG_STYLE_INPUT,"[INFRANET - RP] Autor - DJ","Inserte el nombre de la canción.","Listo","Salir");
				ShowPlayerDialog(playerid,D_Musica2,DIALOG_STYLE_INPUT,"[INFRANET - RP] Formato MP3 - DJ","Ingrese la URL de la canción.","Listo","Salir");
				new String[120];
				format(String,sizeof(String),"Le has puesto un nombre a la canción, el nombre será: %s.",inputtext);
				SendClientMessage(playerid,-1,String);
				format(NombreCancion[playerid],30,"%s",inputtext);
    			//gMusic[playerid] = 0; // Se le quita a este admin el Tog del canal de música para que pueda oír la canción que puso.
			}
	}
	if(dialogid == D_Musica2)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_Musica2,DIALOG_STYLE_INPUT,"[INFRANET - RP] Formato MP3 - DJ","Ingrese la URL de la canción.","Listo","Salir");
				new Nombre[MAX_PLAYER_NAME]; GetPlayerName(playerid,Nombre,sizeof(Nombre));
   				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
					if(!gMusic[i])
					{
	    				PlayAudioStreamForPlayer(i,inputtext);
						format(string,sizeof(string),"[OOC] El administrador %s , ha colocado una canción llamada: %s. (Para no escuchar, usa /ignorar).",Nombre,NombreCancion[playerid]);
						SendClientMessage(i, -1, string);
						SendClientMessage(i, -1, "Puedes usar /togmusic para dejar de ver el canal de música y eventos OOC en cualquier momento.");
					}
					else
					{
						format(string,sizeof(string),"[OOC] El administrador %s puso una canción en el canal de música. Para activar el canal usa /togmusic.",Nombre);
						SendClientMessage(i,-1, string);
					}
 				}
			}
	}
	if(dialogid == D_MusicaX)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_MusicaX,DIALOG_STYLE_INPUT,"[LSTV] Radio en Directo","Inserte el nombre de la canción.","Listo","Salir");
				ShowPlayerDialog(playerid,D_MusicaX2,DIALOG_STYLE_INPUT,"[LSTV] Formato MP3 - URL","Ingrese la URL de la canción.","Listo","Salir");
				new String[120];
				format(String,sizeof(String),"Le has puesto un nombre a la canción, el nombre será: %s.",inputtext);
				SendClientMessage(playerid,-1,String);
				format(NombreCancion[playerid],30,"%s",inputtext);
			}
	}
	if(dialogid == D_MusicaX2)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_MusicaX2,DIALOG_STYLE_INPUT,"[LSTV] Formato MP3 - URL","Ingrese la URL de la canción.","Listo","Salir");
				new String[128],Nombre[MAX_PLAYER_NAME]; GetPlayerName(playerid,Nombre,sizeof(Nombre));
				format(String,sizeof(String),"[LSTV Live] ((Sonando Ahora: %s - Para no escuchar la canción, usa /ignorar)).",NombreCancion[playerid]);
				SendClientMessageToAll(COLOR_NEWS2,String);
   				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
 					PlayAudioStreamForPlayer(i,inputtext);
 				}
			}
	}
	if(dialogid == CASCO_DIALOG)
	{
		if(response)
		{
			if (listitem == 0)//List option 1(Attach Helmet)
			{
				SetPlayerAttachedObject(playerid, 0, 18645, 2, 0.050000, 0.019999, 0.000000, 100.000000, 100.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); //attaching the object.
				SendClientMessage(playerid,-1,"{FF0000}Te pusiste el casco.");//just sending an informational message.
				return 1;
			}
			if (listitem == 1)//List option 2(Detach Helmet)
			{
				RemovePlayerAttachedObject(playerid, 0); //detaching the object.
				SendClientMessage(playerid,-1,"{FF0000}Te quitaste el casco.");//just sending an informational message.
				return 1;
			}
		}
	}
	if(dialogid == CAMARAS_DIALOGO)
	{
	/*
strcat(CAM1,"\tCamara 1.0\t\t\t\t(Unity Station) \n\tCamara 2.0\t\t\t\t(Ayuntamiento INT)\n\tCamara 3.0\t\t\t\t(Juzgados)\n\tCamara 4.0\t\t\t\t(Grotti)\n");
	    	strcat(CAM1,"\tCamara 5.0\t\t\t\t(Banco Safe)\n\tCamara 6.0\t\t\t\t(Avenida Principal)\n\tCamara 7.0\t\t\t\t(VineWood)\n\tCamara 8.0\t\t\t\t(Comisaria)");
	*/
		if(response == 1)
		{
		    switch(listitem)
		    {
      			case 0:
		        {
		            if(Team_LSPD(playerid))
		            {
		                TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 1.0 - Unity Station.");
	                	SetPlayerCameraPos(playerid,1789.807739,-1868.380737,27.852106);
						SetPlayerCameraLookAt(playerid,1833.0414, -1843.0828, 12.5748);
						SetPosEx(playerid,1850.7146, -1838.3421, 16.0744, 0.0, 0, 0);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						Muted[playerid] = 1;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
					}
					else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
	         	case 1:
		        {
		            if(Team_LSPD(playerid))
		            {
		            	TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 2.0 - Ayuntamiento Interior.");
	                	SetPlayerCameraPos(playerid,1471.192138,-1821.815185,2986.899414); 
						SetPlayerCameraLookAt(playerid,1480.892700,-1765.344238,2982.695312);
						SetPosEx(playerid,1481.818847,-1806.533813,2990.047119, 90.0, 1 ,1);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						Muted[playerid] = 1;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
					}
					else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
	         	case 2:
		        {
		            if(Team_LSPD(playerid))
		            {
		                TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 3.0 - Juzgados - S.E.C.");
	                	SetPlayerCameraPos(playerid,1205.929565,-1413.160644,46.566925);
						SetPlayerCameraLookAt(playerid,1285.7588, -1336.9368, 12.5373);
						SetPosEx(playerid,1296.2250, -1325.4500, 20.1789, 0.0, 0, 0);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						Muted[playerid] = 1;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
					}
					else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
         		case 3:
		        {
			  		if(Team_LSPD(playerid))
			  		{
			  		    TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 4.0 - Concesionario Grotti.");
	                	SetPlayerCameraPos(playerid,541.440673,-1226.614135,41.855060);
						SetPlayerCameraLookAt(playerid,542.7786, -1292.3920, 16.2347);
						SetPosEx(playerid,542.1187, -1300.3973, 29.5366, 0.0, 0, 0);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						Muted[playerid] = 1;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
      				}
				  	else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
        		case 4:
		        {
			  		if(Team_LSPD(playerid))
			  		{
			  			if(Banco_Activo == 0)
			  			{
			  		    	TextDrawShowForPlayer(playerid,flashback);
		                	ClearChatbox(playerid);
		                	SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                	SendClientMessage(playerid, COLOR_WHITE, "Cámara número 5.0 - Caja Fuerte del Banco.");
	                		SetPlayerCameraPos(playerid,1001.057922,-1168.053100,14.994269);
							SetPlayerCameraLookAt(playerid,1013.964111,-1169.690551,12.618314);
							SetPosEx(playerid,1001.248779,-1170.106323,19.274312, 90.0, 0, 0);
							TogglePlayerControllable(playerid, 0);
							Vigilando[playerid] = 0;
							Muted[playerid] = 1;
							SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            	return 1;
						}
						else
						{
	    					TextDrawShowForPlayer(playerid,flashback);
		                	SendClientMessage(playerid, COLOR_WHITE, "");
		                	SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                	SendClientMessage(playerid, COLOR_WHITE, "Cámara número 5.0 - Caja Fuerte del Banco.");
	                		SetPlayerCameraPos(playerid,1001.057922,-1168.053100,14.994269);
							SetPlayerCameraLookAt(playerid,1013.964111,-1169.690551,12.618314);
							SetPosEx(playerid,1001.248779,-1170.106323,19.274312, 90.0, 0, 0);
							TogglePlayerControllable(playerid, 0);
							SendClientMessage(playerid, COLOR_WHITE, "");
							SendClientMessage(playerid, COLOR_WHITE, "");
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "Es raro, no podemos obtener imágenes de esta cámara en estos momentos, disculpa las molestias.");
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "Será mejor enviar una patrulla al banco para ver lo que está pasando en estos momentos.");
							Vigilando[playerid] = 1;
							Muted[playerid] = 1;
			            	return 1;
						}
      				}
				  	else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
        		case 5:
		        {
			  		if(Team_LSPD(playerid))
			  		{
			  		    TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 6.0 - Avenida Principal.");
	                	SetPlayerCameraPos(playerid,1406.212524,-1721.406494,33.915470);
						SetPlayerCameraLookAt(playerid,1352.4080, -1758.0269, 12.4972);
						SetPosEx(playerid,1371.6414, -1819.9547, 14.1741, 0.0, 0, 0);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						Muted[playerid] = 1;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
      				}
				  	else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
				case 6:
		        {
			  		if(Team_LSPD(playerid))
			  		{
			  		    TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 7.0 - Acceso VineWood.");
	                	SetPlayerCameraPos(playerid,1321.642333,-955.738891,61.115142);
						SetPlayerCameraLookAt(playerid,1315.5594, -899.4019, 38.5704);
						SetPosEx(playerid,1309.3085, -880.8484, 39.5000, 0.0, 0, 0);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						Muted[playerid] = 1;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
      				}
				  	else Message(playerid, COLOR_GRAD4, "No eres policía.");
		        }
         		case 7:
		        {
		            if(Team_LSPD(playerid))
		            {
		                TextDrawShowForPlayer(playerid,flashback);
		                ClearChatbox(playerid);
		                SendClientMessage(playerid, COLOR_RED, "Recuerda usar /salircamaras para dejar de vigilar, /camaras para seguir viendo.");
		                SendClientMessage(playerid, COLOR_WHITE, "Cámara número 8.0 - Comisaría Los Santos.");
	                	SetPlayerCameraPos(playerid,1497.372192,-1664.649780,39.912639);
						SetPlayerCameraLookAt(playerid,1554.8239, -1675.7813, 15.1923);
						SetPosEx(playerid,1562.1440, -1675.3260, 30.2151, 0.0, 0, 0);
						TogglePlayerControllable(playerid, 0);
						Vigilando[playerid] = 0;
						SetTimerEx("RemoveFlashBack",2000,0,"d",playerid);
			            return 1;
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "No eres policía.");
		        }
			}
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GREY, "[INFORMACIÓN]: No uses /desbug mientras estés viendo las cámaras. Comandos: /salircamaras - /camaras.");
		}
	}
	//vermapa
	if(dialogid == MAPINTERES)
 	{
 	    if(response == 1)
		{
				if(listitem == 0)
				{
					SetPlayerCheckpoint(playerid, 548.5676, -1270.9442, 16.2286, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Concesionario Grotti.");
				}
				if(listitem == 1)
				{
				    SetPlayerCheckpoint(playerid, 1011.216430, -1312.707153, 13.646875, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Concecionario Market.");
				}
				if(listitem == 2)
				{
				    SetPlayerCheckpoint(playerid, 1047.353637, -918.120361, 42.636753, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Concecionario Mulholland.");
				}
				if(listitem == 3)
				{
				    SetPlayerCheckpoint(playerid, 335.868133,-1786.145751,4.980428, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Concecionario Verona Beach.");
				}
				if(listitem == 4)
				{
				    SetPlayerCheckpoint(playerid, 2126.000732, -1119.311157, 25.357934, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Concecionario de Motos.");
				}
				if(listitem == 5)
				{
				    SetPlayerCheckpoint(playerid, 981.5441, -1156.8528, 22.8605, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Banco Central.");
				}
				if(listitem == 6)
				{
				    SetPlayerCheckpoint(playerid, 1188.8220,-1308.8573,13.5547, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Hospital General.");
				}
				if(listitem == 7)
				{
				    SetPlayerCheckpoint(playerid, 1479.846679,-1750.177612,13.546875, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Ayuntamiento de los Santos.");
				}
				if(listitem == 8)
				{
				    SetPlayerCheckpoint(playerid, 1831.5500, -1842.5154, 12.5772, 2);
				    SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}24/7 Unity.");
				}
				if(listitem == 9)
				{
					SetPlayerCheckpoint(playerid, 1349.569458,-1764.507446,13.317289, 2); // 24/7 Ayuntamiento.
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}24/7 Central.");
				}
				if(listitem == 10)
				{
					SetPlayerCheckpoint(playerid, 1829.6061, -1682.7268, 12.5408, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Discoteca Alhambra.");
				}
				if(listitem == 11)
				{
					SetPlayerCheckpoint(playerid, 2090.2244, -1807.4121, 12.5332, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Pizzeria Idlewood.");
				}
				if(listitem == 12)
				{
					SetPlayerCheckpoint(playerid, 1191.8916,-1131.3612,23.8979, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Tienda de Electrónica.");
				}
				if(listitem == 13)
				{
					SetPlayerCheckpoint(playerid, 1218.916503,-1692.657104,19.734375, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Piscina Municipal.");
				}
				if(listitem == 14)
				{
					SetPlayerCheckpoint(playerid, 1110.470581,-1796.917846,16.593750, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de las {FF4142}Oficinas del Gobierno.");
				}
				if(listitem == 15)
				{
					SetPlayerCheckpoint(playerid, 1453.047363,-1558.802001,13.549827, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Restaurante.");
				}
				if(listitem == 16)
				{
					SetPlayerCheckpoint(playerid, 844.864685,-1044.597778,25.440229, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Biblioteca.");
				}
				if(listitem == 17)
				{
					SetPlayerCheckpoint(playerid, 971.467102,-1114.715576,23.857913, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Funeraria.");
				}
				if(listitem == 18)
				{
					SetPlayerCheckpoint(playerid, 1285.718872,-1329.182250,13.550107, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de los {FF4142}Juzgados.");
				}
				if(listitem == 19)
				{
					SetPlayerCheckpoint(playerid, 2006.043823,-1773.776245,13.345000, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Taller Mecánico.");
				}
				if(listitem == 20)
				{
					SetPlayerCheckpoint(playerid, 2253.280029,-1711.727416,17.601562, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación del {FF4142}Centro Social.");
				}
				if(listitem == 21)
				{
					SetPlayerCheckpoint(playerid, 1752.834350,-1775.515380,13.534690, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Universidad.");
				}
				if(listitem == 22)
				{
					SetPlayerCheckpoint(playerid, 1219.206909,-1812.487792,16.593750, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}DGT (Dirección General de Tráfico).");
				}
				if(listitem == 23)
				{
					SetPlayerCheckpoint(playerid, 1837.622192,-1417.446777,13.562500, 2);
					SendClientMessage(playerid, -1, "{5ABAFF}Se marcó en el mapa la ubicación de la {FF4142}Lavandería.");
				}
		}
		else
		{
		    SendClientMessage(playerid, -1, "[Aviso] Has salido del menú de lugares de interés.");
		}
     	return 1;
	}
	if(dialogid == D_SPEEDCAMRANGE)
	{
		if(response)
		{
			if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_SPEEDCAMRANGE,DIALOG_STYLE_INPUT,"Editar Cámara - Rango","Sólo números.\nEscribe el rango que alcanzará la cámara.","Ok","Cancelar");
			new id = GetPVarInt(playerid, "IDSpeedCam");
			new range = strval(inputtext);
			if(range < 5 || range > 30) return ShowPlayerDialog(playerid,D_SPEEDCAMRANGE,DIALOG_STYLE_INPUT,"Editar Cámara - Rango","* Rango no mayor de 30.\n* Rango no menor de 5.\nEscribe el rango que alcanzará la cámara.","Ok","Cancelar");
			vCameraInfo[id][vCameraRange] = range;
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el rango de la cámara.");
        	saveSpeedCam();
        	DeletePVar(playerid,"IDSpeedCam");
		}
		else return DeletePVar(playerid,"IDSpeedCam");
	}
	if(dialogid == D_SPEEDCAMLIMIT)
	{
		if(response)
		{
			if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_SPEEDCAMLIMIT,DIALOG_STYLE_INPUT,"Editar Cámara - Límite","Sólo números.\nEscribe el límite de velocidad que podrán pasar los coches.","Ok","Cancelar");
			new id = GetPVarInt(playerid, "IDSpeedCam");
			new text_info[90], limit = strval(inputtext);
			if(limit < 10 || limit > 250) return ShowPlayerDialog(playerid,D_SPEEDCAMLIMIT,DIALOG_STYLE_INPUT,"Editar Cámara - Límite","* Límite no mayor de 250.\n* Límite no menor de 10.\nEscribe el límite de velocidad que podrán pasar los coches.","Ok","Cancelar");
			vCameraInfo[id][vCameraLimit] = limit;
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el Límite de la cámara, puedes verlo en el 3dlabel.");
        	saveSpeedCam();
        	DeletePVar(playerid,"IDSpeedCam");
   			switch(vCameraInfo[id][vCameraStatus])
   			{
   				case 0: format(text_info, sizeof(text_info), "{007AFF}[RADAR %d]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}%d{81DAF5} KM/H", id,vCameraInfo[id][vCameraLimit]);
				case 1: format(text_info, sizeof(text_info), "{DF0101}[RADAR %d DESCONECTADO]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}-{81DAF5} KM/H", id);
   			}
			UpdateDynamic3DTextLabelText(vCameraInfo[id][vCameraLabel],-1,text_info);
		}
		else return DeletePVar(playerid,"IDSpeedCam");
	}
	if(dialogid == D_SPEEDCAMSTATUS)
	{
    	if(response)
    	{
        	new id = GetPVarInt(playerid, "IDSpeedCam"), text_info[90];
   			switch(listitem)
   			{
   				case 0:
				{
			   		vCameraInfo[id][vCameraStatus] = 0;
			   		format(text_info, sizeof(text_info), "{007AFF}[RADAR %d]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}%d{81DAF5} KM/H", id,vCameraInfo[id][vCameraLimit]);
				}
   				case 1:
				{
			   		vCameraInfo[id][vCameraStatus] = 1;
			   		format(text_info, sizeof(text_info), "{DF0101}[RADAR %d DESCONECTADO]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}-{81DAF5} KM/H", id);
				}
   			}
			UpdateDynamic3DTextLabelText(vCameraInfo[id][vCameraLabel],-1,text_info);
    		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el estado de la cámara, puedes verlo en el 3dlabel.");
        	saveSpeedCam();
        	DeletePVar(playerid,"IDSpeedCam");
   		}
   		else return DeletePVar(playerid,"IDSpeedCam");
	}
	if(dialogid == D_SPEEDCAMFINE)
	{
    	if(response)
    	{
        	if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_SPEEDCAMFINE,DIALOG_STYLE_INPUT,"Editar Cámara - Límite","Sólo números.\nEscribe la multa que dará la cámara.","Ok","Cancelar");
        	new id = GetPVarInt(playerid, "IDSpeedCam");
        	new fine = strval(inputtext);
        	if(fine < 100 || fine > 15000) return ShowPlayerDialog(playerid,D_SPEEDCAMFINE,DIALOG_STYLE_INPUT,"Editar Cámara - Multa","* Multa no mayor de 15000.\n* Límite no menor de 100.\nEscribe la multa que dará la cámara.","Ok","Cancelar");
        	vCameraInfo[id][vCameraTicket] = fine;
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la multa de la cámara.");
        	saveSpeedCam();
        	DeletePVar(playerid,"IDSpeedCam");
   		}
   		else return DeletePVar(playerid,"IDSpeedCam");
	}
// Dialog_Duda
// ¿Hay facciones libres? - ¿Cuáles son?\n¿Buscan administradores? - ¿Cómo postulo?\n¿Dónde consigo un teléfono? - ¿Qué hay en esa tienda?\n¿Por qué tengo restricción de armas? -¿Cómo se elimina?\n¿Por qué no aparece el checkpoint en el mapa? - GPS
// \n¿Hay mecánicos On? - ¿Cómo los puedo encontrar?\n¿Cuántos Jobs hay? - ¿Cuál da más dinero?\n¿Cómo hago un anuncio? - ¿Normas del sistema?\n¿Estoy bugeado, qué hago? - ¿Lo reporto?\n¿Cómo dejo una facción? - ¿Se rolea?
	if(dialogid == DIALOG_DUDAS)
	{
        if(response)
	    {
	            if(listitem == 0)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Hay facciones libres? - ¿Cuáles son?");
					SendClientMessage(playerid, -1, "{819FF7} Si usted desea conocer las facciones disponibles del servidor, lo tendrá que revisar en el foro.");
					SendClientMessage(playerid, -1, "{819FF7} Encontrará un post de lideres de facción que estará en constante actualización. /facc - /infofacciones.");
					SendClientMessage(playerid, -1, "{819FF7} El E.F. es el encargado de facciones, puede comunicarse con él a través del foro. (/foro)");
					SendClientMessage(playerid, -1, "{819FF7} No se realizan pruebas In Game para liderar una facción, se realiza mediante postulación via foro.");
				}
				if(listitem == 1)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Buscan administradores? - ¿Cómo postulo?");
					SendClientMessage(playerid, -1, "{819FF7} La administracin de INFRANET - RP rechazará toda solicitud de usuarios que desean ser administradores sin postulación.");
					SendClientMessage(playerid, -1, "{819FF7} Es obligatorio solicitar un puesto administrativo via foro siguiendo el formato correcto a realizar.");
					SendClientMessage(playerid, -1, "{819FF7} Las postulaciones serán revisadas cada domingo de la semana por los administradores propietarios del servidor.");
					SendClientMessage(playerid, -1, "{819FF7} Exigir una respuesta a sus solicitudes inmediatamente harán que sean rechazadas su postulaciónes, sean pacientes.");
				}
				if(listitem == 2)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Dónde consigo un teléfono? - ¿Qué hay en esa tienda?");
					SendClientMessage(playerid, -1, "{819FF7} Los teléfonos podrán ser comprados en las tiendas de electrónica del servidor (Aparece en el mapa)");
					SendClientMessage(playerid, -1, "{819FF7} Se pueden comprar Ipods, Boombox y otros elementos tecnologícos. Entre otras cosas.");
					SendClientMessage(playerid, -1, "{819FF7} Si quiere realizar el robo a la tienda (/robarshop), tendrá que rolear el entorno y el robo en si.");
					SendClientMessage(playerid, -1, "{819FF7} No se permite el uso de este sistema como medio de obtener dinero sin rol. El staff será avisado.");
				}
				if(listitem == 3)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Por qué tengo restricción de armas? -¿Cómo se elimina?");
					SendClientMessage(playerid, -1, "{819FF7} La restricción de armas se obtiene desde el primer minuto que entras al servidor.");
					SendClientMessage(playerid, -1, "{819FF7} No te permite portar armas durante las 2 primeras horas de juego. (Puede verse en /cuenta).");
					SendClientMessage(playerid, -1, "{819FF7} Esto es una medida para evitar el uso de armas como medio para hacer DM. Serán vigilados.");
					SendClientMessage(playerid, -1, "{819FF7} Las restricciones sólo serán retiradas si el usuario demustra su nivel de rol y que hará un buen uso de las armas.");
				}
				if(listitem == 4)
				{
				   	SendClientMessage(playerid, -1, "{2E2EFE} ¿Por qué no aparece el checkpoint en el mapa?");
					SendClientMessage(playerid, -1, "{819FF7} En ocasiones por temas de lag no aparece el siguiente checkpint. Existe un sistema Anti/Abuso.");
					SendClientMessage(playerid, -1, "{819FF7} Si llegas a un lugar en menos del tiempo establecido, será tomado como uso de cheats y se activará el sistema.");
					SendClientMessage(playerid, -1, "{819FF7} Puedes eliminar el checkpint usando el comando /removegps. Si encuntra problemas con el sistema, reporte via foro.");
					SendClientMessage(playerid, -1, "{819FF7} No puede tener activado 2 checkpoints al mismo tiempo, tendrá que iniciar de nuevo el comando usado.");
				}
				if(listitem == 5)
				{
				   	SendClientMessage(playerid, -1, "{2E2EFE} ¿Hay mecánicos On? - ¿Cómo los puedo encontrar?");
					SendClientMessage(playerid, -1, "{819FF7} Podrá encontrar el taller mecánico usando canales IC, actualmente es una única HQ.");
					SendClientMessage(playerid, -1, "{819FF7} Dispone del comando /servicios para solicitar un mecánico. Tendrá que ser paciente en su búsqueda.");
					SendClientMessage(playerid, -1, "{819FF7} Si no hay mecánicos ON, los administradores no repararán sus vehículo. Tendrá que esperar a que uno se conecte.");
					SendClientMessage(playerid, -1, "{819FF7} Está prohibo solicitar a un mecánico por canales OOC que no haga rol de tunning, serán enviados a jail por No-Rol.");
				}
				if(listitem == 6)
				{
		   			SendClientMessage(playerid, -1, "{2E2EFE} ¿Cuántos Jobs hay? - ¿Cuál da más dinero?");
					SendClientMessage(playerid, -1, "{819FF7} Dispone del comando /buscartrabajo para ver el listado de Jobs disponibles. CMD de ayuda en /ayudatrabajo(2).");
					SendClientMessage(playerid, -1, "{819FF7} Ciertos Jobs precisan de tener un cierto número de horas jugadas, al igual que rolear sus comandos.");
					SendClientMessage(playerid, -1, "{819FF7} Los jobs han sido creados para que se gane por igual. Recomendable estar en un Job que se adecue a tú rol.");
					SendClientMessage(playerid, -1, "{819FF7} Se recomienda el Job de Camionero por el momento. Estos empleos estarán en constante actualización.");
				}
				if(listitem == 7)
				{
 					SendClientMessage(playerid, -1, "{2E2EFE} ¿Cómo hago un anuncio? - ¿Normas del sistema?");
					SendClientMessage(playerid, -1, "{819FF7} El comando de creación de anuncios es /ad, su coste está fijado por LSTV. Normas del sistema en /infoad.");
					SendClientMessage(playerid, -1, "{819FF7} Sólo se puede enviar un anuncio por minuto, siempre solicitando información IC, sin uso OOC.");
					SendClientMessage(playerid, -1, "{819FF7} Es obligatorio el uso del TAG en los anuncios, [Empleo LS], [Ventas LS] y estar bien redactados.");
					SendClientMessage(playerid, -1, "{819FF7} Importante, el uso de términos -Mafia, drogas, facción -, entre otros no se permiten, será jail por MA. (Mal AD)");
				}
				if(listitem == 8)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Estoy bugeado, qué hago? - ¿Lo reporto?");
					SendClientMessage(playerid, -1, "{819FF7} El comando básico en temas de bug es el /desbug, te cambia al interior 0 y Mundo Virtual 0.");
					SendClientMessage(playerid, -1, "{819FF7} Usar este comando en interiores hará que te caigas y pierdas vida, hagan buen uso del comando.");
					SendClientMessage(playerid, -1, "{819FF7} Si el bug es por animaciones o congelación, usen del /desbugmanos para volver a su estado anterior.");
					SendClientMessage(playerid, -1, "{819FF7} Si creen que el bug afectará a más personas, lo pueden reportar (/reportarbug) o mediante un post via foro.");
				}
				if(listitem == 9)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Cómo dejo una facción? - ¿Se rolea?");
					SendClientMessage(playerid, -1, "{819FF7} Toda salida de una facción se tiene que rolear con el líder de esta, por motivos IC si es posible.");
					SendClientMessage(playerid, -1, "{819FF7} La administración le podrá sacar de su facción si esta carece de líder, es inactiva o será cerrada.");
					SendClientMessage(playerid, -1, "{819FF7} Si es sacado de la facción por motivos OOC del líder, podrán ser consensuados con el Encargado de Facciones.");
					SendClientMessage(playerid, -1, "{819FF7} Los lideres están obligados a permanecer en una facción al menos 7 días, su salida previa será jail por PG.");
				}
		}
		else
		{
  			new dudasfq2[] = "¿Hay VIP? - ¿Cómo se obtiene?\n¿Cuál es el foro? - ¿Cuándo aceptan mi cuenta?\n¿Se puden crear familias? - ¿Qué requísitos son?\n¿Por qué tengo estrellas de búsqueda? -¿Se quitan?\n¿Hay casas nivel 2? - ¿Sus interiores pueden ser editados?\n¿Dónde veden coches? - ¿Cuántos concesionarios hay?\n¿Se puede usar HKB? - ¿Hay macros?\n¿En que ciudad se rolea? - ¿Y ya?\n¿Pueden traer mi coche? - ¿Me llevan a los Santos?\n¿Hay stats de inicio? - ¿Algo más?";
	 		SafeDialogEx(playerid, DIALOG_DUDAS2, DIALOG_STYLE_LIST, "{FFFFFF}Soporte:{088A4B} Respuesta a preguntas frecuentes 2/2",dudasfq2 , "Aceptar", "Salir");
		}
	}
// Dialog_Dudas2
	if(dialogid == DIALOG_DUDAS2)
	{
        if(response)
	    {
	            if(listitem == 0)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Hay VIP? - ¿Cómo se obtiene?");
					SendClientMessage(playerid, -1, "{819FF7} El sistema VIP funciona según el nivel de rol del usuario y sus horas dedicadas en el servidor.");
					SendClientMessage(playerid, -1, "{819FF7} Según su rol, podrá tener acceso a cierto nivel de VIP de manera limitada, no se paga por ello.");
					SendClientMessage(playerid, -1, "{819FF7} Se tienen que intentar rolear los comandos PREMIUM, sea reparar el coche o pintarlo.");
					SendClientMessage(playerid, -1, "{819FF7} Pueden obtener puntos de rol para tener acceso a más nivel VIP o solicitarlo via foro con SS de los roles.");
				}
				if(listitem == 1)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Cuál es el foro? - ¿Cuándo aceptan mi cuenta?");
					SendClientMessage(playerid, -1, "{819FF7} El foro del servidor lo pueden contrar usando el comando /foro. Es importante estar registrado.");
					SendClientMessage(playerid, -1, "{819FF7} En el registro tendrán que usar como cuenta el formato Nombre_Apellido, al igual que dentro del servidor.");
					SendClientMessage(playerid, -1, "{819FF7} Su solicitud de cuenta podrá ser rechazada si no cumple el requísito citado anteriormente sin aviso alguno.");
					SendClientMessage(playerid, -1, "{819FF7} Hay encargados del foro (Webmasters) que se ocupan de activar cuentas, sea paciente y su cuenta será activada.");
				}
				if(listitem == 2)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Se puden crear familias? - ¿Qué requísitos son?");
					SendClientMessage(playerid, -1, "{819FF7} Pueden crear familias dentro del servidor, siendo roleadas In Game su creación, no recibirán dinero en el Payday.");
					SendClientMessage(playerid, -1, "{819FF7} Las familias tendran que buscar mediante rol su fuente de ingreso, además de tener un rol claro.");
					SendClientMessage(playerid, -1, "{819FF7} Si desean crear una familia, tienen que realizar su solicitud via foro poniendo los datos necesarios.");
					SendClientMessage(playerid, -1, "{819FF7} Los requísitos serán encontrados en el foro, es importante tener al menos 3 miembros activos para ser creadas.");
				}
				if(listitem == 3)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Por qué tengo estrellas de búsqueda? -¿Se quitan?");
					SendClientMessage(playerid, -1, "{819FF7} Las estrellas de búsqueda aperecen tras realizar un robo y no tener la máscara activada.");
					SendClientMessage(playerid, -1, "{819FF7} Si creen que un policía le puso estrellas sin pruebas alguno, lo tendrá que demostrar en el foro.");
					SendClientMessage(playerid, -1, "{819FF7} El rol de entorno es obligatorio en los robos, habrán camaras que permiten el reconocimiento de la persona.");
					SendClientMessage(playerid, -1, "{819FF7} Se quitará las estrellas mediante rol, en caso de haber MG en el rol, los administradores decidirán que hacer.");
				}
				if(listitem == 4)
				{
				   	SendClientMessage(playerid, -1, "{2E2EFE} ¿Hay casas nivel 2? - ¿Sus interiores pueden ser editados?");
					SendClientMessage(playerid, -1, "{819FF7} El nivel mínimo al ingresar en el servidor es 2, sólo los apartamentos de alquiler serán a este nivel.");
					SendClientMessage(playerid, -1, "{819FF7} El resto de casas son nivel 3, para evitar que sean compradas nada más acceder al servidor.");
					SendClientMessage(playerid, -1, "{819FF7} Importante destacar que esto permite que no hayan propietarios ausentes con sus casas, serán limpiadas cada 30 días.");
					SendClientMessage(playerid, -1, "{819FF7} Si dispones de una casa la cual su interior no se adapta a su exterior, tiene el derecho de reclamar su interior adecuado.");
				}
				if(listitem == 5)
				{
				   	SendClientMessage(playerid, -1, "{2E2EFE} ¿Dónde veden coches? - ¿Cuántos concesionarios hay?");
					SendClientMessage(playerid, -1, "{819FF7} Disponen de una variedad básica de coches alrededor de los concesionarios de los Santos.");
					SendClientMessage(playerid, -1, "{819FF7} Podrán encontrar 5 diferentes tipos de variedad, en lo que se refiere a concesionarios. Organizados por tipo.");
					SendClientMessage(playerid, -1, "{819FF7} Concesionarios de Gama Alta, Básicos, Modernos, Helicópteros y Barcos. Si no encuentra su coche, podrá rolearlo.");
					SendClientMessage(playerid, -1, "{819FF7} Una vez rolee la compra de su coche, la administración le dará el coche deseado. (Sólo vehículos permitidos)");
				}
				if(listitem == 6)
				{
		   			SendClientMessage(playerid, -1, "{2E2EFE} ¿Se puede usar HKB? - ¿Hay macros?");
					SendClientMessage(playerid, -1, "{819FF7} Se permite el uso del programa Hot Key Board, usado para la creación de macros dentro del servidor.");
					SendClientMessage(playerid, -1, "{819FF7} El máximo de lineas permitida a cada usuario es de 3 linéas, los macros no pueden tener el CMD /intentar dentro.");
					SendClientMessage(playerid, -1, "{819FF7} El uso de macros están obligados en roles de arma, choque, o reviones. Entre otros roles básicos.");
					SendClientMessage(playerid, -1, "{819FF7} En caso de no disponer del HKB, lo pueden descargar en el foro. Usen el comando /macros para ver los disponibles.");
				}
				if(listitem == 7)
				{
 					SendClientMessage(playerid, -1, "{2E2EFE} ¿En que ciudad se rolea? - ¿Y ya?");
					SendClientMessage(playerid, -1, "{819FF7} El rol del servidor está centrado en Los Santos y sus alrededores,");
					SendClientMessage(playerid, -1, "{819FF7} Fuera de la ciudad podrán encontrar casas en venta y mapeos especiales.");
					SendClientMessage(playerid, -1, "{819FF7} Se permite el acceso IC al resto de San Andreas, ciertos jobs te obligan a ir al resto de las ciudades.");
					SendClientMessage(playerid, -1, "{819FF7} Si estás buscando mapeados especiales, podrás encontrarlo en las zonas centro.");
				}
				if(listitem == 8)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Pueden traer mi coche? - ¿Me llevan a los Santos?");
					SendClientMessage(playerid, -1, "{819FF7} Por regla general un administrador no podrá traerte el coche ni darte teleport a los Santos, interfiriendo IC en el rol.");
					SendClientMessage(playerid, -1, "{819FF7} Sus coches podrán ser devueltos en caso de Respawn de emergencia o bug al estacionarlos o respawnear.");
					SendClientMessage(playerid, -1, "{819FF7} Serán llevados a los Santos en el punto que queden bugeados dentro de un interior o por motivos OOC.");
					SendClientMessage(playerid, -1, "{819FF7} Si desean desplazarse por la ciudad, llamen a un taxi (/servicios) o alquilen un vehículo.");
				}
				if(listitem == 9)
				{
					SendClientMessage(playerid, -1, "{2E2EFE} ¿Hay stats de inicio? - ¿Algo más?");
					SendClientMessage(playerid, -1, "{819FF7} Los stats son actualizados según el número de usuarios y la económia del servidor. CMD para la info, /recibirstats.");
					SendClientMessage(playerid, -1, "{819FF7} Si han perdido parte de sus stats, recuerden tener SS que lo demuestren, la pérdida de stats se solicita via foro.");
					SendClientMessage(playerid, -1, "{819FF7} El servidor comenzó sus inicios en Septiembre del 2015,en Diciembre se cambió de Host para mayor calidad.");
					SendClientMessage(playerid, -1, "{819FF7} Normativa general del servidor disponible en el /foro. Más comandos en /pesca, /idiomas, /ayudajob(2), entre otros.");
					SendClientMessage(playerid, -1, "{819FF7} En caso de activarse el Discord, disponrán de la IP en /discord. Créditos del servidor en /creditos. Agradecimiento a A-RP.");
				}
		}
		else
		{
  		SendClientMessage(playerid, -1, "Puedes usar el comando /soporte siempre que necesites ayuda, también usa el canal /duda en caso de ser otro tipo de problema.");
		}
	}
//BOOMBOX DIALOGS
	if(dialogid == DIALOG_BOOMBOX)
    {
    	if(!response)
     	{
            SendClientMessage(playerid, -1, "* Has cancelado la selección de emisoras de radio.");
        	return 1;
        }
		switch(listitem)
  		{
    		case 0:
      		{
      		    ShowPlayerDialog(playerid,DIALOG_BOOMBOX1,DIALOG_STYLE_LIST,"Lista de música Jazz","Smooth Jazz\nJazz FM","Sintonizar","Cancelar");
            }
            case 1:
            {
                ShowPlayerDialog(playerid,DIALOG_BOOMBOX2,DIALOG_STYLE_LIST,"Lista de música Pop","Power FM\nDEFJAY.COM","Sintonizar","Cancelar");
            }
            case 2:
            {
                ShowPlayerDialog(playerid,DIALOG_BOOMBOX3,DIALOG_STYLE_LIST,"Lista de música Rap","Rap City Radio\nFlow 103 Rap","Sintonizar","Cancelar");
            }
            case 3:
            {
                ShowPlayerDialog(playerid,DIALOG_BOOMBOX4,DIALOG_STYLE_LIST,"Lista de música Hip Hop","Hot 108 Jamz\nBlackBeats.FM","Sintonizar","Cancelar");
			}
			case 4:
			{
			    ShowPlayerDialog(playerid,DIALOG_BOOMBOX5,DIALOG_STYLE_LIST,"Lista de música Rock","Radio Paradise\n181.FM","Sintonizar","Cancelar");
			}
			case 5:
			{
			    ShowPlayerDialog(playerid,DIALOG_BOOMBOX6,DIALOG_STYLE_LIST,"Lista de música Reggaeton","Reggaeton 24/7\nReggaeton Stereo","Sintonizar","Cancelar");
			}
			case 6:
			{
			    if(Info[playerid][pLevel] < 3) return SendClientMessage(playerid, -1, "* Debes ser mínimo nivel 3 para usar esta opción.");
			    ShowPlayerDialog(playerid,DIALOG_BOOMBOX7,DIALOG_STYLE_INPUT, "{00F70C}Boombox URL", "Introduzca la URL del MP3 o radio on-line que desee escuchar", "Continuar", "Salir");
			}
			case 7:
			{
                if(GetPVarType(playerid, "BBArea"))
			    {
			        foreach(Player, i)
					{
			            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
			            {
			                StopStream(i);
						}
					}
			        DeletePVar(playerid, "BBStation");
				}
				SendClientMessage(playerid, -1, "* Has apagado la Boombox");
			}
        }
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX1)//JAZZ
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Seleccionar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99179772");
				}
			}
		 	if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119894", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119894");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX2)//POP
	{
	    if(!response)
	    {
            ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Seleccionar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=158237", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=158237");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=81263", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=81263");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX3)//RAP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Seleccionar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
        			foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500");
    			}
   			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=281301", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=281301");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX4)//HIP HOP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Seleccionar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99188676", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99188676");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=137513", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=137513");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX5)//ROCK
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Seleccionar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181110", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181110");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181395", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181395");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX6)//REGGAETON
	{
	    if(!response)
	    {
	       ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Seleccionar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=98237", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=98237");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX7)//SET URL
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "*No has introducido ninguna URL." );
		        return 1;
		    }
		    if(strlen(inputtext))
		    {
		        if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", inputtext);
				}
			}
		}
		else
		{
		    return 1;
		}
	}
	//***************
	if(dialogid == MPSPAYTICKETS)
	{
	    if(response)
	    {
			/*new
				szMessage[128];*/

			if(Info[playerid][pWantedLevel] != 0)
			{
				format(szMessage, sizeof(szMessage), "%s intenta pagar multas y es buscado por la policía - Nivel de búsqueda: %i.", GetPlayerNameEx(playerid), Info[playerid][pWantedLevel]);
				SendRadioMessage(1, TEAM_RADIO_COLOR, szMessage);
				SendRadioMessage(2, TEAM_RADIO_COLOR, szMessage);
				return SendClientMessageEx(playerid, COLOR_YELLOW, "La policía ha dado comunicado que usted está buscado, y están en camino.");
			}
			if(PlayerVehicleInfo[playerid][listitem][pvTicket])
			{
				Tax += PlayerVehicleInfo[playerid][listitem][pvTicket];
				format(szMessage, sizeof(szMessage), "Pagaste la multa de $%d de tu %s.", PlayerVehicleInfo[playerid][listitem][pvTicket], VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
			}
			else if(PlayerVehicleInfo[playerid][listitem][pvImpounded])
			{

				new
					iCost = (PlayerVehicleInfo[playerid][listitem][pvPrice] / 40) + PlayerVehicleInfo[playerid][listitem][pvTicket] + (Info[playerid][pLevel] * 2);

				if(GetPlayerCash(playerid) < iCost)
				{
					return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero para pagar la multa.");
				}

				format(szMessage, sizeof(szMessage), "Liberaste tu %s por $%i.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400], iCost);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tu auto se encuentra en el depósito municipal, contácta con un policia para que lo saque.");
				GivePlayerCash(playerid, -iCost);
				Tax += iCost;
				PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0; // Depósito.
				PlayerVehicleInfo[playerid][listitem][pvPosX] = 1655.4379;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = -1829.5668;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = 13.2677;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = 91.6165;
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
				PlayerVehicleInfo[playerid][listitem][pvVW] = 0;
                ++PlayerCars;
				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				SetPlayerVirtualWorld(PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvVW]);
    			VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Este coche, o bien no existe, o no es necesario liberar o tiene sus multas pagadas.");
	    }
		return 1;
	}
	else if(dialogid == DIALOG_CDBUY)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid,COLOR_GRAD2,"{A2DC35}[INFO]:{FFFFFF} Necesitas estar en el vehículo que desea comprar.");
			return 1;
		}

		new vehicleid = GetPlayerVehicleID(playerid);
		new v = GetCarDealershipVehicleId(vehicleid);
		new d = GetCarDealershipId(vehicleid);
		if(response)
		{
		    if(carsforplayer[playerid] == 15) return SendClientMessageEx(playerid,COLOR_WHITE,"{A2DC35}[INFO]:{FFFFFF} Tienes 15 coches liberados, primero guarda uno para comprar otro.");
            if(CDSInfo[d][cdVehicleSpawn][0] == 0.0 && CDSInfo[d][cdVehicleSpawn][1] == 0.0 && CDSInfo[d][cdVehicleSpawn][2] == 0.0)
            {
				SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} El propietario de este Concesionario no ha configurado completamente los puntos de spawn de coches.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            new playervehicleid = GetPlayerFreeVehicleId(playerid);
            new carsamount = VehicleCount(playerid);
            if((Info[playerid][pROL] == 0) && carsamount >= 4) // Info[playerid][pVIP] == 0 VIP MIERDA
			{
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches, usuarios normales sólo pueden tener 4 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
			}
            if(Info[playerid][pROL] == 1 && carsamount >= 5)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más vehículos debido a tu nivel de rol, sólo puede tener 5 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pROL] == 2 && carsamount >= 6)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más vehículos debido a tu nivel de rol, sólo puede tener 6 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pROL] == 3 && carsamount >= 7)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más vehículos debido a tu nivel de rol, sólo puede tener 7 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pROL] == 4 && carsamount >= 8)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más vehículos debido a tu nivel de rol, sólo puede tener 8 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pROL] == 5 && carsamount >= 9)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más vehículos debido a tu nivel de rol, sólo puede tener 9 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(Info[playerid][pROL] == 6 && carsamount >= 10)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más vehículos debido a tu nivel de rol, sólo puede tener 10 coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
		    if(playervehicleid == -1)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Este jugador no puede tener más coches.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
		    }
		    new randcolor1 = Random(0, 126);
		    new randcolor2 = Random(0, 126);
		    TogglePlayerControllable(playerid, 1);
		    new cost;
		    if(Info[playerid][pVIP] < 1)
            {
                cost = CDSInfo[d][cdVehicleCost][v];
	            if(GetPVarInt(playerid, "Cash") < CDSInfo[d][cdVehicleCost][v])
	            {
					SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente para comprar este coche.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }
                format(string, sizeof(string), "{A2DC35}[CONCE]:{FFFFFF} Gracias por comprar en %s.", CDSInfo[d][cdMessage]);
		        SendClientMessageEx(playerid, COLOR_GRAD1, string);
		        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-CDSInfo[d][cdVehicleCost][v]);
		        CDSInfo[d][cdTill] += ( CDSInfo[d][cdVehicleCost][v] * 40 ) / ( 100 );
	        }
	        else
	        {
				cost = ( CDSInfo[d][cdVehicleCost][v] * 80 ) / ( 100 );
	            if(GetPVarInt(playerid, "Cash") < cost)
	            {
					SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente para comprar este coche.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }

                format(string, sizeof(string), "{A2DC35}[CONCE]:{FFFFFF} Gracias por comprar en %s.", CDSInfo[d][cdMessage]);
		        SendClientMessageEx(playerid, COLOR_GRAD1, string);
		        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash") - cost );
				CDSInfo[d][cdTill] += cost;
     		}
            new car = CreatePlayerVehicle(playerid, playervehicleid, CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawn][0], CDSInfo[d][cdVehicleSpawn][1], CDSInfo[d][cdVehicleSpawn][2], CDSInfo[d][cdVehicleSpawn][3], randcolor1, randcolor2, cost);
            SetPlayerPos(playerid, CDSInfo[d][cdVehicleSpawn][0], CDSInfo[d][cdVehicleSpawn][1], CDSInfo[d][cdVehicleSpawn][2]+2);
			SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
            SavecDealership(d);
		}
		else
		{
            RemovePlayerFromVehicle(playerid);
            new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+1.2);
            TogglePlayerControllable(playerid, 1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDEDIT)
	{ //Concesionario
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0)
			{
				format(string, sizeof(string),"Por favor, escriba la identificación del modelo del nuevo vehículo.");
		        SafeDialogEx(playerid,DIALOG_CDNEWVEH,DIALOG_STYLE_INPUT,"{00F70C}Advertencia:",string,"Ok","Cancelar");
			}
			else if(listitem == 1) // My Vehicles
			{
				new vehicles;
                for(new i=0; i<MAX_DEALERSHIPVEHICLES; i++)
	            {
					if(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][i] != 0)
					{
						vehicles++;
		                format(string, sizeof(string), "Vehiculo %d| Nombre: %s | Precio: %d.",i+1,GetVehicleName(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][i]),CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleCost][i]);
		                SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				if(vehicles)
				{
				    SafeDialogEx(playerid, DIALOG_CDEDITCARS, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elija un vehículo para editar:", "Editar", "Atrás");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Este Concesionario no tiene ningún coche.");
				}
			}
			else if(listitem == 2) // Upgrade
			{
				new listitems[] = "1 Vehicle Spawn\n2 Radio\n3 Nombre del Negocio";
			    SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continua.", listitems,"Ok","Cancelar");
			}
			else if(listitem == 3) // Till
			{
				new listitems[] = "1 Retirar\n2 Depositar";
			    SafeDialogEx(playerid,DIALOG_CDTILL,DIALOG_STYLE_LIST,"Elige y continua.", listitems,"Ok","Cancelar");
			}
		}
		else
		{
			SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDTILL)
	{ // Concesionario dialog
	    if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Withdraw
			{
				format(string, sizeof(string), "Tienes $%d en la cuenta de tu caja.\n\n\tCuanto deseas retirar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SafeDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"{00F70C}Retirar", string,"Ok","Cancelar");
			}
			else if(listitem == 1) // Deposit
			{
				format(string, sizeof(string), "Tienes $%d en la cuenta de tu caja.\n\n\tCuanto deseas depositar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SafeDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"{00F70C}Depositar", string,"Ok","Cancelar");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDWITHDRAW)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (isnumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill] < money)
	             {
                     format(string, sizeof(string), "No tienes ese dinero en tu caja!\n\nTienes $%d en tu caja.\n\n\tCuanto dinero quieres retirar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     SafeDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"{00F70C}Retirar", string,"Ok","Cancelar");
                     return 1;
	             }
	             CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill] -= money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	             format(string, sizeof(string), "Retiraste $%d de tu caja, nuevo balance: $%d", money, CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, string);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
        }
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDSELL)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "editingcd") == -1) return 1;
            SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+ (CDSInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2));
			SellCarDealership(GetPVarInt(playerid, "editingcd"));
			PlayerPlayMusic(playerid);
			format(string, sizeof(string), "Concesionario de coches vendido con éxito por %d.", CDSInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
            SetPVarInt(playerid, "editingcd", -1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDDEPOSIT)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (isnumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(GetPVarInt(playerid, "Cash") < money)
	             {
                     format(string, sizeof(string), "No tienes el dinero especificado!\n\nTienes $%d en tu caja.\n\n\tCuanto dinero quieres depositar?", CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     SafeDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"{00F70C}Depositar", string,"Select","Cancel");
                     return 1;
	             }
	             CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill] += money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-money);
	             format(string, sizeof(string), "Depositaste $%d a tu caja, Nuevo Balance: $%d", money, CDSInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, string);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
		}
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDNEWVEH)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new modelid, d;
			new Float: x, Float: y, Float: z, Float: a;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
	        if (!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} El modelo debe ser números.");
            if (IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 100 || modelid > 611) { SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} ID's  No menor de 400 y no mayor de 611."); return 1; }
	             new cdvehicleid = CreateCarDealershipVehicle(d, modelid, x, y, z, a, 1337);
	             if(cdvehicleid == -1)
		         {
		             SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El coche no se puede crear.");
		         }
	             else
	             {
					 PutPlayerInVehicle(playerid, CDSInfo[d][cdVehicleId][cdvehicleid], 0);
                     format(text_info, sizeof(text_info), "{A2DC35}[INFO]:{FFFFFF} Vehículo de Concesionario creado con la ID {5ABAFF}%d.", cdvehicleid-1);
		             SendClientMessageEx(playerid, COLOR_WHITE, text_info);
		             SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Por favor, ponte donde quieres añadir tu nuevo vehículo.");
				     SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Una vez listo, presiona el botón {FF0000}FIRE - DISPARAR {FFFFFF}(CLICK).");
				     SetPVarInt(playerid, "editingcdvehnew", 1);
		             SetPVarInt(playerid, "editingcdveh", cdvehicleid);
	             }
	        }
	        else
	        {
                 SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Estas fuera del radio del Concesionario, por favor vuelve a intentarlo.");
                 TogglePlayerControllable(playerid, true);
	        }
		}
		else
		{
            TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDEDITCARS)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new cdvid;
            if (isnumeric(inputtext))
	        {
	             cdvid = strval(inputtext);
	             if(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][cdvid-1])
	             {
	                 SetPVarInt(playerid, "editingcdveh", cdvid-1);
	                 new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			         SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
				 }
	        }
		}
		else
		{
		    new listitems[] = "1 Nuevo Coche\n2 Mis Coches\n3 Mejorar\n4 Ganancias";
			SafeDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"{00F70C}Elige y Continua", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDUPGRADE)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Vehicle Spawn
			{
		        SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Por favor, ponte donde quieres que este el vehiculo para la venta.");
				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Una vez listo, presiona el botón {FF0000}FIRE - DISPARAR {FFFFFF}(CLICK).");
				SetPVarInt(playerid, "editingcdvehpos", 2);
			}
            if(listitem == 1) // Radio
			{
				SafeDialogEx(playerid, DIALOG_CDRADIUS, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elige el nuevo Radio:", "Editar", "Atrás");
			}
			else if(listitem == 2) // Dealership Name
			{
				SafeDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elige el nuevo Nombre:", "Editar", "Atrás");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDEDITONE)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
            if(listitem == 0) // Edit Model
			{
	             SafeDialogEx(playerid, DIALOG_CDEDITMODEL, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " * Elige el nuevo modelo (id):", "Editar", "Atrás");
	        }
	        else if(listitem == 1) // Edit Cost
			{
	             SafeDialogEx(playerid, DIALOG_CDEDITCOST, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:",  " * Elige el nuevo precio del coche:", "Editar", "Atrás");
	        }
	        else if(listitem == 2) // Edit Park
			{
				 PutPlayerInVehicle(playerid, CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")], 0);
	             SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Por favor, ponte donde quieres aparcar el vehículo.");
				 SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Una vez listo, presiona el botón {FF0000}FIRE - DISPARAR {FFFFFF}(CLICK).");
				 SetPVarInt(playerid, "editingcdvehpos", 1);
	        }
	        else if(listitem == 3) // Delete Vehicle
			{
	             format(string, sizeof(string), "¿Seguro que quieres eliminar este %s?\nNota: No recibirás ningún tipo de dinero.",
				 GetVehicleName(CDSInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")]));
		         SafeDialogEx(playerid,DIALOG_CDDELVEH,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia:",string,"Ok","Cancel");
	        }
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcdveh", -1);
		}
	}
	else if(dialogid == DIALOG_CDRADIUS)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
			new Float:radius = floatstr(inputtext);
			new Float:radiusex = CDSInfo[d][cdRadius];
			new test = floatround(radius), test1 = floatround(radiusex);
            if (CDSInfo[d][cdRadius] > radius)
	        {
				 new cost = ( test - test1 ) * ( test1 * 1000 );
				 if(GetPVarInt(playerid, "Cash") < cost)
				 {
                     format(string, sizeof(string), "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero de esta mejora ($%d).",cost);
                     SendClientMessageEx(playerid, COLOR_GREY, string);
                     return 1;
				 }
				 format(string, sizeof(string), "{1DF5F7} Concesionario:{FFFFFF} Radio actualizado desde %.1f a %.1f por $%d.",radiusex, radius, cost);
                 SendClientMessageEx(playerid, COLOR_GREY, string);
	             CDSInfo[d][cdRadius] = radius;
        		 format(string, sizeof(string),"{A2DC35}Concesionario (%d) %s\n{2F99B5}Dueño: %s", d, CDSInfo[d][cdMessage], CDSInfo[d][cdOwner]);
	             UpdateDynamic3DTextLabelText(CDSInfo[d][cdTextLabel], COLOR_GENERAL, string);
	             new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario\n4 Precio";
			     SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
			     SavecDealership(GetPVarInt(playerid, "editingcd"));
	        }
		}
		else
		{
		    new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDNAME)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
            if (!strlen(inputtext))
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Debes escribir un nombre.");
    	        SafeDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "{00F70C}Concesionario:", " Elige el nuevo nombre:", "Editar", "Atrás");
		        return 1;
			}
			new cost = strlen(inputtext) * 50;
			format(string, sizeof(string), "{A2DC35}[INFO]:{FFFFFF} Nombre del Concesionario fue mejorado de %s a %s por $%d.", CDSInfo[d][cdMessage], inputtext, cost);
            SendClientMessageEx(playerid, COLOR_GREY, string);
	        strmid(CDSInfo[d][cdMessage], inputtext, 0, strlen(inputtext), 255);
	        format(string, 128,"{A2DC35}Concesionario (%d) %s\n{2F99B5}Dueño: %s", d, CDSInfo[d][cdMessage], CDSInfo[d][cdOwner]);
	        UpdateDynamic3DTextLabelText(CDSInfo[d][cdTextLabel], COLOR_GENERAL, string);
	        new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
		    new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige y continúa", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDEDITPARK)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1 &&  GetPVarInt(playerid, "editingcdvehpos") == 1 || GetPVarInt(playerid, "editingcdvehnew"))
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d, v, text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
			GetVehiclePos(CDSInfo[d][cdVehicleId][v], x, y, z);
	        GetVehicleZAngle(CDSInfo[d][cdVehicleId][v], a);
			if(IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		    {
			     CDSInfo[d][cdVehicleSpawnX][v] = x;
                 CDSInfo[d][cdVehicleSpawnY][v] = y;
                 CDSInfo[d][cdVehicleSpawnZ][v] = z;
                 CDSInfo[d][cdVehicleSpawnAngle][v] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
                 SetPVarInt(playerid, "editingcdvehnew", 0);
                 DestroyDynamic3DTextLabel(CDSInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CDSInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicle(CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawnX][v], CDSInfo[d][cdVehicleSpawnY][v], CDSInfo[d][cdVehicleSpawnZ][v], CDSInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info), "%s En Venta | Precio: %d", GetVehicleName(carcreated), CDSInfo[d][cdVehicleCost][v]);
                 CDSInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CDSInfo[d][cdVehicleId][v] = carcreated;
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			     SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Estás fuera del radio de este Concesionario, por favor vuelve a intentarlo.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d;
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
			d = GetPVarInt(playerid, "editingcd");
			if(IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		    {
			     CDSInfo[d][cdVehicleSpawn][0] = x;
                 CDSInfo[d][cdVehicleSpawn][1] = y;
                 CDSInfo[d][cdVehicleSpawn][2] = z;
                 CDSInfo[d][cdVehicleSpawn][3] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
			     SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige para continuar", listitems,"Ok","Cancelar");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Estás fuera del radio de este Concesionario, por favor vuelve a intentarlo.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 1)
		{
            new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
            new listitems[] = "1 Spawn de Vehiculo\n2 Radio\n3 Nombre del Concesionario";
		    SafeDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"{00F70C}Elige para continuar", listitems,"Ok","Cancelar");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
	}
    else if(dialogid == DIALOG_CDEDITMODEL)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new modelid, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (isnumeric(inputtext))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ID´s: No puede ser menos de 400 o mayor 611 !"); return 1; }
	             CDSInfo[d][cdVehicleModel][v] = modelid;
	             DestroyDynamic3DTextLabel(CDSInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CDSInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicle(CDSInfo[d][cdVehicleModel][v], CDSInfo[d][cdVehicleSpawnX][v], CDSInfo[d][cdVehicleSpawnY][v], CDSInfo[d][cdVehicleSpawnZ][v], CDSInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info),"%s En Venta | Precio: %d", GetVehicleName(carcreated), CDSInfo[d][cdVehicleCost][v]);
                 CDSInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CDSInfo[d][cdVehicleId][v] = carcreated;
	             new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			     SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDEDITCOST)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new price, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (isnumeric(inputtext))
	        {
	             price = strval(inputtext);
	             CDSInfo[d][cdVehicleCost][v] = price;
	             format(text_info, sizeof(text_info), "%s En Venta | Precio: %d", GetVehicleName(CDSInfo[d][cdVehicleId][v]), CDSInfo[d][cdVehicleCost][v]);
	             UpdateDynamic3DTextLabelText(CDSInfo[d][cdVehicleLabel][v], COLOR_MAGENTA, text_info);
	             new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			     SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
		}
	}
	else if(dialogid == DIALOG_CDDELVEH)
	{ // Concesionario dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			DestroyCarDealershipVehicle(GetPVarInt(playerid, "editingcd"), GetPVarInt(playerid, "editingcdveh"));
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
  			new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Vehiculo";
			SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"{00F70C}Concesionario:", listitems,"Ok","Cancelar");
		}
	}
 	if (dialogid == ELEVATOR3 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
		 	SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 500);
		}
		else
		{
			SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR2 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 500);
		}
	}
	if (dialogid == ELEVATOR4 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 301.5812,-1490.6759,-45.1302);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 600);
		}
		else
		{
			SetPlayerPos(playerid, 308.8113,-1509.8134,77.7645);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR5 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 316.2381,-1513.3770,24.9219);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 308.8113,-1509.8134,77.7645);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR7 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 301.5812,-1490.6759,-45.1302);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 600);
		}
		else
		{
			SetPlayerPos(playerid, 316.2381,-1513.3770,24.9219);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	else if(dialogid == HQENTRANCE)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
	            DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
            	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, x, y, z);
				format(string, sizeof(string), "%s", fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
            	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 4.0);
            	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} HQ, entrada cambiada.");
            	TogglePlayerControllable(playerid, true);
            	saveFamiliesHQ();
            	return 1;
			}
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
         	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreateDynamicPickup(1318, 23, x, y, z);
			format(string, sizeof(string), "%s", fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
   			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 4.0);
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} HQ entrada guardada, Por favor colocate en el lugar de la salida, y presiona el boton {FF0000}FIRE{FFFFFF}.");
            SetPVarInt(playerid, "editingfamhqaction", 2);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Se ha cancelado el cambio exterior de esta HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Ha cancelado la creación de esta HQ.");
	        if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQEXIT)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
	            fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        	fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            	SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Exit changed!.");
            	TogglePlayerControllable(playerid, true);
            	saveFamiliesHQ();
            	return 1;
	        }
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            format(string,128,"HQ Salida guardada!\n\n¿Es esto un interior de un mapeado personalizado?");
        	SafeDialogEx(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia:",string,"Si","No");
            SetPVarInt(playerid, "editingfamhqaction", 3);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Se ha cancelado el cambio interior de esta HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has cancelado la creación de esta HQ.");
	        if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQCUSTOMINT)
	{
	    if(response)
	    {
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 1;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 255;
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has cambiado el interior personalizado para esta HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has creado correctamente este HQ.");
   			}
	        SetPVarInt(playerid, "editingfamhq", 255);
	        saveFamiliesHQ();
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has cambiado el interior personalizado para esta HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Has creado correctamente este HQ.");
   			}
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 0;
	        SetPVarInt(playerid, "editingfamhq", 255);
	        saveFamiliesHQ();
	    }
	}
	else if(dialogid == HQDELETE)
	{
	    if(!response)
	    {
	    }
	    else
	    {
	        format(string,128,"{A2DC35}[INFO]:{FFFFFF} Has eliminado correctamente '%s' HQ", fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
	        SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			if(IsValidDynamicPickup(fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup])) DestroyDynamicPickup( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        fINFO[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	        saveFamiliesHQ();
	    }
	}
	if((dialogid == BUYTOYSCOP) && response)
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "Nada";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		SafeDialogEx(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
	}
	if((dialogid == BUYTOYSCOP2) && response)
	{
	    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8 && Info[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser un nivel mayor de {FFFF00}PREMIUMVIP{FFFFFF} para usar este slot.");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[ERROR]:{FFFFFF} Ya tienes algo en esa ranura, eliminala con /toys");

		slotselection[playerid] = listitem;

		new stringg[512];
		for(new x;x<sizeof(HoldingObjectsCop);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsCop[x][holdingmodelname], HoldingObjectsCop[x][holdingprice]);
		}
		SafeDialogEx(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Objeto", stringg, "Comprar", "Cancelar");
	}
	if((dialogid == BUYTOYSCOP3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar eso.");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];
		    Tax += HoldingObjectsCop[listitem][holdingprice];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}

			format(string, sizeof(string), "* Has comprado un %s por $%d (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], HoldingObjectsCop[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[TOYS]:{FFFFFF} Usa /toys para editar tus objetos");
		}
	}
	if((dialogid == BUYTOYSGOLD) && response)
	{
 		if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes acceso a este comando.");
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++){
  			new name[24] = "Nada";
			for(new i;i<sizeof(HoldingObjectsAll);i++){
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID]){
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		SafeDialogEx(playerid, BUYTOYSGOLD2, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
	}
	if((dialogid == BUYTOYSGOLD2) && response)
	{
        if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes acceso a este comando.");
	    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8 && Info[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser un nivel mayor de Premium para usar este slot.");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[TOYS]:{FFFFFF} Ya tienes algo en esa ranura, eliminala con /toys");

		slotselection[playerid] = listitem;
		new stringg[1536];
		for(new x;x<sizeof(HoldingObjectsGold);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsGold[x][holdingmodelname], HoldingObjectsGold[x][holdingprice]);
		}
		SafeDialogEx(playerid, BUYTOYSGOLD3, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Objeto", stringg, "Comprar", "Cancelar");
	}
	if((dialogid == BUYTOYSGOLD3) && response){
	    if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes acceso a este comando.");
		if(GetPlayerCash(playerid) < HoldingObjectsGold[listitem][holdingprice]){
		    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero para esto.");
		}
		else{
			GivePlayerCash(playerid, -HoldingObjectsGold[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsGold[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140)){
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910){
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935){
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920){
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078){
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890){
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}

			format(string, sizeof(string), "* Compraste un %s por $%d (Slot: %d)", HoldingObjectsGold[listitem][holdingmodelname], HoldingObjectsGold[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[TOYS]:{FFFFFF} Usa /toys para editar tus objetos");
		}
	}
	if((dialogid == BUYTOYS) && response)
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24];
	    	format(name, sizeof(name), "Nada");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		SafeDialogEx(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
	}
	if((dialogid == BUYTOYS) && !response)
	{
	    if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} No tienes acceso a esta función. (VIP Gold o Mayor.)");
	    return SafeDialogEx(playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "{00F70C}Tienda de Accesorios VIP", "Bienvenido a la tienda de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir un slot.","Ok", "Salir");
	}
	if((dialogid == BUYTOYS2) && response)
	{
	    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8 && Info[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser un nivel mayor de Premium para usar este slot.");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[TOYS]:{FFFFFF} Ya tienes algo en esa ranura, eliminala con /toys");
		slotselection[playerid] = listitem;
		new stringg[3730]; //
		for(new x;x<sizeof(HoldingObjects);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjects[x][holdingmodelname], HoldingObjects[x][holdingprice]);
		}
		SafeDialogEx(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Objeto", stringg, "Comprar", "Cancelar");
	}
	if((dialogid == BUYTOYS3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice]) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
		else
		{
			GivePlayerCash(playerid, -HoldingObjects[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjects[listitem][holdingmodelid];
		    new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			else if(modelid == 19317)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.079;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = -0.10;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.09;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 30.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
				PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
			}
			format(string, sizeof(string), "* Compraste un %s por $%d (Slot: %d)", HoldingObjects[listitem][holdingmodelname], HoldingObjects[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[TOYS]:{FFFFFF} Usa /toys para editar tus objetos");
		    //TillEx(2, 150); // Ropa.
		}
	}
	if((dialogid == TOYS) && response)
	{
		if(listitem == 0)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, WEARTOY, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Objeto", stringg, "Seleccionar", "Cancelar");
	    }
		else if(listitem == 1)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Objeto", stringg, "Seleccionar", "Cancelar");
   		}
		else if(listitem == 2)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, DELETETOY, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Objeto", stringg, "Borrar", "Cancelar");
		}
	}
	if((dialogid == EDITTOYS) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        SafeDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{00C200}Menu Accesorios: {00C200}Edición", "No tiene nada en ese slot!", "OK", "");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Posiciona bien la cámara y usa /headmove para una edición mucho mejor.");
		    slotselection[playerid] = listitem;
		    ShowEditMenu(playerid);
		}
	}
	if((dialogid == EDITTOYS2))
	{
	    if(response)
	    {
	        switch(listitem)
			{
			    case 0: SafeDialogEx(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "{00F70C}Selecciona una Parte", "Columna\nCabeza\nBrazo Izq Sup\nBrazo Der Sup\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAnteBrazo Izq\nAnteBrazo Der\nClavicula Izq\nClavicula Der\nCuello\nQuijada", "Select", "Cancel");
			    case 1: SafeDialogEx(playerid, EDITTOYSPX, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un numero para la posición X, de -100 a 100 (Ejm: 55, o 33.4)", "OK", "Cancelar");
			    case 2: SafeDialogEx(playerid, EDITTOYSPY, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un numero para la posición Y, de -100 a 100 (Ejm: 55, o 33.4)", "OK", "Cancelar");
			    case 3: SafeDialogEx(playerid, EDITTOYSPZ, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un numero para la posición Z, de -100 a 100 (Ejm: 55, o 33.4)", "OK", "Cancelar");
			    case 4: SafeDialogEx(playerid, EDITTOYSRX, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un numero para la rotación X,de 0 a 360 (Ejm: 90, o 270.4)", "OK", "Cancelar");
			    case 5: SafeDialogEx(playerid, EDITTOYSRY, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un numero para la rotación Y, de 0 a 360 (Ejm: 90, o 270.4)", "OK", "Cancelar");
			    case 6: SafeDialogEx(playerid, EDITTOYSRZ, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un numero para la rotación Z, de 0 a 360 (Ejm: 1, o 0.93)", "OK", "Cancelar");
			    case 7: SafeDialogEx(playerid, EDITTOYSIZX, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un número para el tamaño X, de 0.1 a 1.5 (Ejm: 1, o 0.93)", "OK", "Cancelar");
			    case 8: SafeDialogEx(playerid, EDITTOYSIZY, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un número para el tamaño Y, de 0.1 a 1.5 (Ejm: 1, o 0.93)", "OK", "Cancelar");
			    case 9: SafeDialogEx(playerid, EDITTOYSIZZ, DIALOG_STYLE_INPUT, "{00F70C}Menu Accesorios {FFFFFF}- Edición", "Escribe un número para el tamaño Z, de 0.1 a 1.5 (Ejm: 1, o 0.93)", "OK", "Cancelar");
				case 10:
				{
					SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
					EditAttachedObject(playerid, slotselection[playerid]);
					Editing[playerid] =1;
				    return SendClientMessage(playerid, -1, "* Mantén presionado {00C200}~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
				}
			}
		}
		else
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			SafeDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "{00F70C}Selecciona un Accesorio", stringg, "Seleccionar", "Cancelar");
		}
	}
	if(dialogid == EDITTOYSPX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
     		if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
			offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSIZX)
	{
	    if(response)
	    {
	        if(Info[playerid][pAdminZC] == 6000)
	        {
	        	new Float:offset = floatstr(inputtext);
		        if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = offset;
	        }
	        else
	        {
	        	new Float:offset = floatstr(inputtext);
	        	if(offset < 0.1) offset = 0.1;
				else if(offset > 1.5) offset = 1.5;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = offset;
	        }
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSIZY)
	{
	    if(response)
	    {
	        if(Info[playerid][pAdminZC] == 6000)
	        {
	        	new Float:offset = floatstr(inputtext);
		        if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = offset;
	        }
	        else
	        {
	        	new Float:offset = floatstr(inputtext);
	        	if(offset < 0.1) offset = 0.1;
				else if(offset > 1.5) offset = 1.5;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = offset;
	        }
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSIZZ)
	{
	    if(response)
	    {
	        if(Info[playerid][pAdminZC] == 6000)
	        {
	        	new Float:offset = floatstr(inputtext);
		        if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = offset;
	        }
	        else
	        {
	        	new Float:offset = floatstr(inputtext);
	        	if(offset < 0.1) offset = 0.1;
				else if(offset > 1.5) offset = 1.5;
	        	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = offset;
	        }
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSBONE)
	{
	    if(response)
	    {
	        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;
		}
	 	ShowEditMenu(playerid);
	}
	if((dialogid == WEARTOY) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        SafeDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{00C200}Menu Accesorios: {0000FF}Poner/Quitar", "No tienes ningún objeto en este slot!", "OK", "");
		}
		else
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
			    new name[24];
			    format(name, sizeof(name), "Nada");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(string, sizeof(string), "{A2DC35}[TOYS]:{FFFFFF} Te quitaste correctamente tu %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			    RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
			    SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ], PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], PlayerToyInfo[playerid][listitem][ftscaleX],
				PlayerToyInfo[playerid][listitem][ftscaleY], PlayerToyInfo[playerid][listitem][ftscaleZ]);
			    new name[24];
			    format(name, sizeof(name), "Nada");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(string, sizeof(string), "%s puesto correctamente. (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}

	if((dialogid == DELETETOY) && response)
	{
		PlayerToyInfo[playerid][listitem][ptModelID] = 0;
		PlayerToyInfo[playerid][listitem][ptBone] = 0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleY] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleX] = 0.0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem)) RemovePlayerAttachedObject(playerid, listitem);
		format(string, sizeof(string), "{A2DC35}[TOYS]:{FFFFFF} Usted ha eliminado su accesorio del slot %d", listitem);
	    SafeDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "{00F70C}Menu Accesorios", string, "OK", "");
	}
	if(dialogid == GOOGLE)
	      {
		    if(response == 1)
		    {
		        Bought(playerid, 3);
	    	    if(strfind(inputtext, "Concesionarios", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_BLUE, "www.mundoauto.com - Todo tipo de vehículos a tu alcance.");
				    SetPlayerCheckpoint(playerid, 1654.5254,-1655.7502,22.5156, 10.0);
				    SendClientMessageEx(playerid, 0xD9006CFF, "* Dirígete al Checkpoint!");
				    return 1;
				}
				else if(strfind(inputtext, "Ropa", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_RED2, "www.binco.com - Llévalo con orgullo.");
			    	SetPlayerCheckpoint(playerid, 460.6988,-1501.1395,31.0564, 10.0);
			    	SendClientMessageEx(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
			    	return 1;
				}
				else if(strfind(inputtext, "Trabajos", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "Trabajo de disponibles en: www.trabajos.com");
				    SendClientMessageEx(playerid, COLOR_GRAD2, "- Bartender");
			    	SendClientMessageEx(playerid, COLOR_GRAD2, "- Chofer de Viajes");
			    	SendClientMessageEx(playerid, COLOR_GRAD2, "- Pizzero");
			    	SendClientMessageEx(playerid, COLOR_GRAD2, "- Camionero");
			    	SendClientMessageEx(playerid, COLOR_GRAD2, "- Leñador");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Taxista");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Granjero");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Vendedor de Chalecos");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Artesano");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Heladero");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Jardinero");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Piloto");
		    		SendClientMessageEx(playerid, COLOR_GRAD2, "- Trenero");
		    		return 1;
				}
				else if(strfind(inputtext, "Banco", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "www.banconacional.com - Banco central de Los Santos.");
				    SetPlayerCheckpoint(playerid, 300.0895,-1611.6455,33.1248, 10.0);
				    SendClientMessageEx(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
				    return 1;
				}
				else if(strfind(inputtext, "Biblioteca", true) != -1)
				{
				    SendClientMessageEx(playerid, COLOR_GREEN, "www.bookandstudy.org - Biblioteca de Los Santos.");
			    	SetPlayerCheckpoint(playerid, 1546.6545,-1097.5780,25.0625, 10.0);
                	SendClientMessageEx(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
                	return 1;
            	}
				else if(strfind(inputtext, "Ammunation", true) != -1)
				{
			    	SendClientMessageEx(playerid, COLOR_RED, "www.armas-legales.com - Ammunation Roosevelt.");
			    	SetPlayerCheckpoint(playerid, 1368.4303,-1280.0046,13.5469, 10.0);
			    	SendClientMessageEx(playerid, 0xD9006CFF, "- Dirígete al Checkpoint!");
			    	return 1;
				}
	    	}
		}
		    if(dialogid == BANCO_MENU)
    {
    	if(!response)
            {
                return 1;
            }

		 switch(listitem)
            {

                case 0:
				{
				SafeDialogEx(playerid,BANCO_SACAR, DIALOG_STYLE_INPUT, "{00F70C}Retirar Dinero", "{FFFFFF}Por favor ingrese la cantidad ha retirar.", "Retirar", "Cancelar");
				}
				case 1:
				{
				SafeDialogEx(playerid,BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "{00F70C}Depositar Dinero", "{FFFFFF}Por favor ingrese la cantidad ha depositar.", "Depositar", "Cancelar");
				}
				case 2:
				{
				SafeDialogEx(playerid,BANCO_TRANSFERIR, DIALOG_STYLE_INPUT, "{00F70C}Transferir Dinero * PASO 1 *", "{FFFFFF}Por favor ingrese la {00C200}ID Del Jugador a Transferir El Dinero", "Siguiente", "Cancelar");
				}
				case 3:
				{
		            SendClientMessageEx(playerid, COLOR_WHITE, "Banco Los santos.");
					format(string, sizeof(string), "Saldo Disponible:  %d$",Info[playerid][pAccount]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					return 1;
				}
    		}
	}


	if(dialogid == BANCO_TRANSFERIR)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{00F70C}Banco Los santos", "{FFFFFF}Retirar Dinero\n{FFFFFF}Depositar Dinero\n{FFFFFF}Transferir Dinero\n{FFFFFF}Balance de Fondos", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {
        new idjugador = strval(inputtext);
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
		if(playerid == idjugador) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes transferirte dinero a ti mismo.");
        if(!IsPlayerConnected(idjugador)) return SendClientMessage(playerid, COLOR_GRAD2, "Jugador no conectado.");
        if (GetPVarInt(playerid, "GiveMoneyTimer") > 0)
		{
					format(string, sizeof(string), "Tienes que esperar %d segundos después de transferido dinero.", GetPVarInt(playerid, "GiveMoneyTimer"));
					SendClientMessageEx(playerid,COLOR_WHITE,string);
					return 1;
        }
		SetPVarInt(playerid,"JugadorATransferir",idjugador);
 	    SafeDialogEx(playerid,BANCO_TRANSFERIR2, DIALOG_STYLE_INPUT, "{00F70C} Transferir dinero paso 2.", "{FFFFFF}Por favor ingrese la {00C200}Cantidad de Dinero A Transferir", "Transferir", "Cancelar");
        }
        return 1;
    }


    if(dialogid == BANCO_TRANSFERIR2)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{00F70C}Banco Los santos", "{FFFFFF}Retirar Dinero\n{FFFFFF}Depositar Dinero\n{FFFFFF}Transferir Dinero\n{FFFFFF}Balance de Fondos", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {
          if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
          new giveplayerid = GetPVarInt(playerid, "JugadorATransferir");
          new money = strval(inputtext);
          if(money > Info[playerid][pAccount]) return SendClientMessageEx(playerid, COLOR_WHITE, "Cantidad incorrecta.");
          if(money < 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes transferir menos de 0.");

                DeletePVar(playerid,"JugadorATransferir");
          		SetPVarInt(playerid, "GiveMoneyTimer", 60);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
      			Info[playerid][pAccount] -= money;
                Info[giveplayerid][pAccount] += money;
       			format(string, sizeof(string), "* Has hecho una transferencia de %d$ a %s", money, GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "* Recibiste una transferencia de %d$ de %s", money, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "INFRANET - RP: %s hizo una transferencia de $%d a %s", GetPlayerNameEx(playerid), money, GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_YELLOW,string,2);
				format(string, sizeof(string), "[TRANSFER BANCO] - %s hizo una transferencia de $%d a %s.", GetPlayerNameEx(playerid), money, GetPlayerNameEx(giveplayerid));
				Log("LOGS/banco.log", string);

        }
        return 1;
    }

	if(dialogid == BANCO_DEPOSITAR)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{00F70C}Banco Los santos", "{FFFFFF}Retirar Dinero\n{FFFFFF}Depositar Dinero\n{FFFFFF}Transferir Dinero\n{FFFFFF}Balance de Fondos", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {
         new money = strval(inputtext);
         if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFF00}[ERROR]:{FFFFFF} La cantidad tiene que ser números.");
         if (money > GetPlayerCash(playerid) || money < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Cantidad incorrecta");
         if(money < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes retirar menos de 0.");

         	Bought(playerid,money);
			Info[playerid][pAccount]+=money;
         	format(string, sizeof(string), "[ATM]  Depositaste: $%d - Nuevo Balance total: $%d",money,Info[playerid][pAccount]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s hace una transacción bancaria.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "[DEPOSITO BANCO] - %s hizo un depósito de $%d.", GetPlayerNameEx(playerid), money);
			Log("LOGS/banco.log", string);

        }
        return 1;
    }

    if(dialogid == BANCO_SACAR)
    {
    if(!response)
            {
                SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{00F70C}Banco Los santos", "{FFFFFF}Retirar Dinero\n{FFFFFF}Depositar Dinero\n{FFFFFF}Transferir Dinero\n{FFFFFF}Balance de Fondos", "Seleccionar", "Cancelar");
                return 1;
            }

        else
        {

         new money = strval(inputtext);
         if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFF00}[ERROR]:{FFFFFF} La cantidad tiene que ser números!");
         if(money > Info[playerid][pAccount] || money < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Cantidad incorrecta");
         if(money < 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes retirar menos de 0.");

         	Earn(playerid,money);
         	Info[playerid][pAccount]-= money;
         	format(string, sizeof(string), "[ATM]  Extrajiste: $%d - Nuevo Balance total: $%d",money,Info[playerid][pAccount]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s hace una transacción bancaria.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "[RETIRO BANCO] - %s hizo un retiro de $%d.", GetPlayerNameEx(playerid), money);
			Log("LOGS/banco.log", string);

        }
        return 1;
    }
    if(dialogid == ACEPTAR_TER)
	{
    	if(response)
    	{
    		SetPlayerJoinCamera(playerid);
    		ClearChatbox(playerid);
			TextDrawHideForPlayer(playerid, box);
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
    		TextDrawHideForPlayer(playerid, cargando);
    		TextDrawHideForPlayer(playerid, looking);
    		TextDrawHideForPlayer(playerid, box);
			if(INI_Exist(playername))
			{
	    		gPlayerAccount[playerid] = 1;
        		ShowMainMenuDialog(playerid, 1);
				return 1;
			}
			else
			{
	    		if(strfind( playername, "_", true) == -1)
				{
		    		SetPlayerName(playerid, "InvalidNick");
					SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}INFRANET - RP:{FFFFFF} Vuelve a entrar con el formato indicado. Ejemplo: Nombre_Apellido");
					SetTimerEx("TimerKICK",500,false,"d",playerid);
				}
				else
				{
					gPlayerAccount[playerid] = 0;
        			ShowMainMenuDialog(playerid, 2);
	    		}
	    		return 1;
 			}
		}
		if(!response)
		{
		    SetPlayerJoinCamera(playerid);
    		ClearChatbox(playerid);
			TextDrawHideForPlayer(playerid, box);
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
    		TextDrawHideForPlayer(playerid, cargando);
    		TextDrawHideForPlayer(playerid, looking);
    		TextDrawHideForPlayer(playerid, box);
			if(INI_Exist(playername))
			{
	    		gPlayerAccount[playerid] = 1;
        		ShowMainMenuDialog(playerid, 1);
				return 1;
			}
			else
			{
	    		if(strfind( playername, "_", true) == -1)
				{
		    		SetPlayerName(playerid, "InvalidNick");
					SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}INFRANET - RP:{FFFFFF} Vuelve a entrar con el formato indicado. Ejemplo: Nombre_Apellido");
					SetTimerEx("TimerKICK",500,false,"d",playerid);
				}
				else
				{
					gPlayerAccount[playerid] = 0;
        			ShowMainMenuDialog(playerid, 2);
	    		}
	    		return 1;
 			}
     		/*SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}INFRANET - RP:{FFFFFF} Has sido expulsado del servidor por que no has aceptado las normas.");
     		SetTimerEx("TimerKICK",500,false,"d",playerid);*/
		}
 	}
 	if(dialogid == ACEPTAR_ROBO)
	{
    	if(response)
    	{
			//new string[128];
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendRadioMessage(1, 0x8D8DFFFF, "* Central: Estan robando en la tienda de electrónica.");
	   		format(string, sizeof(string), "* Sospechoso identificado como: %s.", GetPlayerNameEx(playerid));
	   		SendRadioMessage(1,COLOR_VIP,string);
			SendClientMessage(playerid, COLOR_GENERAL,"LA ALARMA HA COMENZADO A SONAR!, LSPD ESTARÁ EN CAMINO.");
    		GameTextForPlayer(playerid,"~r~PERMANECE 2 MINUTOS EN LA TIENDA PARA ROBAR UN OBJETO!",7000,3);
    		SendClientMessage(playerid, COLOR_GENERAL,"Si sales de la tienda no lograrás robar el objeto.");
			SetTimerEx("RobadoCosas",100000,0,"i",playerid);
			Info[playerid][probita] = 1;
			SetTimerEx("TimerROB",1200000,false,"d",playerid);
			LoadMoneyy[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadMoneyy[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadMoneyy[playerid]);
			return SetTimerEx("LoadMonn", 1000, 0, "d", playerid);
		}
		if(!response)
		{
     	SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}ROBARSHOP:{FFFFFF} Recuerde que si realiza el robo a la tienda, rolearlo al detalle.");
		}
 	}
	if(dialogid == EQUIPO_CNN)
	{
	    if(response == 1)
	    {
            ResetPlayerWeaponsEx(playerid);
			switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31); Skin(playerid, 164);
					SetHP(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 41);
					GivePlayerValidWeapon(playerid, 43);
					SetHP(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de Periodista.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
				{
				    Skin(playerid, Info[playerid][pChar]);
			        GivePlayerValidWeapon(playerid, 24);
				    format(string, sizeof(string), "* %s se viste con ropa normal.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	if(dialogid == EQUIPO_CDG)
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s Coge un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s Coge una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 31);
					format(string, sizeof(string), "* %s Coge una M4 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 4:
		        {
					GivePlayerValidWeapon(playerid, 34);
					format(string, sizeof(string), "* %s Coge una Sniper del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 5:
		        {
					GivePlayerValidWeapon(playerid, 25);
					format(string, sizeof(string), "* %s Coge una Shotgun del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
				case 6:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	if(dialogid == EQUIPO_MECANICO)
    {
	        if(response == 1)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
	            	{
		                SetPlayerSkin(playerid, 8);
		                SetHP(playerid, 100);
	    	            format(string, sizeof(string), "* %s se viste con uniforme de Ayudante.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 1:
		            {
                        SetPlayerSkin(playerid, 16);
                        SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con uniforme de Trucker.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
		            case 2:
		            {
                        SetPlayerSkin(playerid, 50);
                        SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con uniforme de Mecanico.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 3:
		            {
	    	            SetPlayerSkin(playerid, 185);
	    	            SetHP(playerid, 100);
	            	    format(string, sizeof(string), "* %s se viste con uniforme de Supervisor.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 4:
		            {
	    	            SetPlayerSkin(playerid, 192);
	    	            SetHP(playerid, 100);
	            	    format(string, sizeof(string), "* %s se viste con uniforme de Mujer.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	    	        case 5:
		            {
		                SetPlayerSkin(playerid, 268);
		                SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con su uniforme de Director.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	            	case 6:
		            {
		                GivePlayerValidWeapon(playerid, 41);
	        	        format(string, sizeof(string), "* %s coge un spray del armario.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
	            	case 7:
		            {
		                GivePlayerValidWeapon(playerid, 22);
						format(string, sizeof(string), "* %s coge una 9mm del armario.", sendername);
    					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
	            	}
		            case 8:
		            {
	    	            SetPlayerSkin(playerid, Info[playerid][pChar]);
						SetHP(playerid, 100);
	        	        format(string, sizeof(string), "* %s se viste con su ropa normal.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            	}
	     		}
	     		ActualizarFaccion(fac);
		    }
		}
	if(dialogid == EQUIPO_SistemaJ)
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 25);
					GivePlayerValidWeapon(playerid, 29);
					GivePlayerValidWeapon(playerid, 31);
					SetPlayerSkin(playerid, 163);
					SetHP(playerid, 100);
                    SetPlayerArmour(playerid, 100);
                    SetPlayerColor(playerid, TEAM_SISTEMAJUDICIAL_COLOR);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 29);
					SetHP(playerid, 100);
                    SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 255);
					SetPlayerColor(playerid, TEAM_SISTEMAJUDICIAL_COLOR);
		            format(string, sizeof(string), "* %s coge el equipo de chofér.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					SetHP(playerid, 100);
                    SetPlayerArmour(playerid, 100);
					SetPlayerSkin(playerid, 228);
					SetPlayerColor(playerid, TEAM_SISTEMAJUDICIAL_COLOR);
		            format(string, sizeof(string), "* %s coge el equipo de Director.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 3:
				{
				    SetPlayerSkin(playerid, Info[playerid][pChar]);
				    SetHP(playerid, 100);
				    SetPlayerToTeamColor(playerid);
				    format(string, sizeof(string), "* %s se viste con ropa normal.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	if(dialogid == EQUIPO_GOB)
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 29);
	    			new srand = random(5);
		    		switch(srand)
		    		{
          				case 0:{SetPlayerSkin(playerid, 163);}
		        		case 1:{SetPlayerSkin(playerid, 164);}
		        		case 2:{SetPlayerSkin(playerid, 165);}
		        		case 3:{SetPlayerSkin(playerid, 166);}
		        		default:{SetPlayerSkin(playerid, 166);}
		    		}
					SetHP(playerid, 100);
		            format(string, sizeof(string), "* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 1:
		        {
					SetHP(playerid, 100);
					GivePlayerValidWeapon(playerid, 3);
					if(Info[playerid][pSex] == 1){SetPlayerSkin(playerid, 189);}
					else {SetPlayerSkin(playerid, 194);}
		            format(string, sizeof(string), "* %s coge el equipo de chofér.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 2:
		        {
					SetHP(playerid, 100);
					if(Info[playerid][pSex] == 1){SetPlayerSkin(playerid, 171);}
					else {SetPlayerSkin(playerid, 172);}
		            format(string, sizeof(string), "* %s coge el equipo de recepcionista.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					SetHP(playerid, 100);
					if(Info[playerid][pSex] == 1){SetPlayerSkin(playerid, 185);}
					else {SetPlayerSkin(playerid, 150);}
		            format(string, sizeof(string), "* %s coge el equipo de Secretario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 4:
		        {
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 147);
		            format(string, sizeof(string), "* %s coge el equipo de Ministro.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 5:
		        {
		            if(Info[playerid][pRank] != 5) return SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso] Opción disponible solo para el Vicepresidente.");
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 295);
		            format(string, sizeof(string), "* %s coge el equipo de VicePresidente.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 6:
		        {
		            if(Info[playerid][pRank] != 6) return SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso] Opción disponible solo para el presidente.");
					SetHP(playerid, 100);
					SetPlayerSkin(playerid, 187);
		            format(string, sizeof(string), "* %s coge el equipo de Presidente.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 7:
		        {
		            SetPlayerArmour(playerid, 100);
					format(string, sizeof(string), "* %s coge un chaleco antibalas.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 8:
				{
				    SetPlayerSkin(playerid, Info[playerid][pChar]);
				    format(string, sizeof(string), "* %s se viste con ropa normal.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	if(dialogid == TELEPORTS_FACCIONES){
	    if(response == 1){
	        switch (listitem){
	            case 0:{
					SetPosEx(playerid, 1553.1155,-1675.7045,16.1953,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} San Andreas Police Department.{FFFFFF} (SAPD)");
				}
				case 1:{
					SetPosEx(playerid, 330.59,-1518.60,35.87,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Federal Bureau Of Investigation.{FFFFFF} (FBI)");
				}
				case 2:{
				    SetPosEx(playerid, 2751.28,-2447.02,13.64,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} San Andreas Ejercito Militar.{FFFFFF} (SAEM)");
				}
				case 3:{
    				SetPosEx(playerid, 1185.36,-1324.42,13.57,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} San Andreas Medical Department.{FFFFFF} (SEC)");
				}
				case 4:{
				    SetPosEx(playerid, 763.42,-1360.69,13.52,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Los Santos Television.{FFFFFF} (LSTV)");
				}
				case 5:{
					SetPosEx(playerid, 1984.2726,-1773.2605,13.7788,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Taller de mecanicos.{FFFFFF} (Crazy Motors)");
				}
				case 6:{
					SetPosEx(playerid, 1491.0322,-1839.4261,13.5469,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Gobierno de San Andreas.{FFFFFF} (GOB)");
				}
				case 7:{
					SetPosEx(playerid, 2196.8105,-2245.2878,13.5469,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Agencia Hitman.");
				}
				case 8:{
					SetPosEx(playerid, 1276.9174, -1338.3859, 13.72,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Sistema Judicial.");
				}
				case 9:{
					SetPosEx(playerid, 2494.59,-1682.50,13.34,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Groove Street.");
				}
				case 10:{
				    SetPosEx(playerid, 1877.7764,-1081.6593,23.8369 ,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Ballas the Kings.");
				}
				case 11:{
				    SetPosEx(playerid, 2287.89,-1106.10,37.98,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Latin Kings.");
				}
				case 12:{
				    SetPosEx(playerid, 1823.607788,-2032.511352,13.382812,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Sureños 13.");
				}
				case 13:{
					SetPosEx(playerid, 665.06,-1292.82,13.46,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Mafia Rusa.");
				}
				case 14:{
				    SetPosEx(playerid, 1132.77,-2037.53,69.01,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} La cosa nostra.{FFFFFF} (LCN)");
				}
				case 15:{
					SetPosEx(playerid, 298.60,-1155.93,80.91,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Mafia Yakuza.{FFFFFF} (YKZ)");
				}
				case 16:{
					SetPosEx(playerid, 1487.91, -1030.60, 23.66,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} Cartel del Golfo.");
				}
				case 17:{
					SetPosEx(playerid,1280.26,-819.14,84.14,0,0,0);
					SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Estas en la faccion:{00FFFF} EE.UU.");
				}
			}
		}
	}
	if(dialogid == PETITION_DIALOG)
	{
	    if(response == 1)
	    {
	        format(string, sizeof(string), "* %s acepta una petición.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(Petition_ID[playerid] == 2)
	        {
	            GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "* Pagaste una multa de $%d al oficial %s.", TicketMoney[playerid], giveplayer);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s te ha pagado la multa de $%d.", sendername, TicketMoney[playerid]);
				SendClientMessageEx(TicketOffer[playerid], COLOR_WHITE, string);
				GivePlayerCash(playerid, - TicketMoney[playerid]);
				GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
				Tax += TicketMoney[playerid];
				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
				Petition_ID[playerid] = 0;
	        }
	    }
	    else
	    {
	        format(string, sizeof(string), "* %s rechaza una petición.", sendername);
      		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        if(Petition_ID[playerid] == 2)
	        {
				SendClientMessageEx(playerid, COLOR_WHITE, "* Multa rechazada.");
				format(string, sizeof(string), "* %s te rechazó la multa.", sendername);
				SendClientMessageEx(TicketOffer[playerid], COLOR_RED2, string);
				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
				Petition_ID[playerid] = 0;
	        }
	    }
	}
	else if(dialogid == DIALOG_CDGLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetGangVehicleCount(Info[playerid][pFMember]) != 0)
				{
				    if(GetPlayerCash(playerid) < 1000)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No tienes 1.000 para hacer esto.");
						return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
          if(FVINFO[Info[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehiculo %d | Modelo: %s.",i+1,GetVehicleName(FVINFO[Info[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
 				     }
				    }
				    SafeDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "{00F70C}24-7","Selecciona el vehiculo donde instalarás el seguro:", "Ok", "Cancelar");

				}
  		else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes coches, ¿donde podemos instalar este elemento?.");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetGangVehicleCount(Info[playerid][pFMember]) != 0)
				{
					if(GetPlayerCash(playerid) < 5000)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF}No tienes 5000 para hacer esto");
						return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
          if(FVINFO[Info[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehiculo %d | Modelo: %s.",i+1,GetVehicleName(FVINFO[Info[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
          }
				    }
				    SafeDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "{00F70C}24-7","Selecciona el vehiculo donde instalarás el seguro:", "Ok", "Cancelar");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes coches, ¿donde podemos instalar este elemento?.");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDGLOCKMENU)
	{
		if(response)
		{
		if(GetPVarInt(playerid, "lockmenu") == 1)
		{
            new fvid;
            if (isnumeric(inputtext))
	        {
				fvid = strval(inputtext)-1;
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvId] == INVALID_VEHICLE_ID)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} No tienes un vehículo en esta ranura.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvLock] == 1)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} Ya tienes instalado ese seguro en el coche.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
				format(string, sizeof(string), "{A2DC35}[24/7]:{FFFFFF} Compraste un seguro de alarma!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Ahora puedes usar /fseguro para bloquear el coche.");
			    FVINFO[Info[playerid][pFMember]][fvid][fvLock] = 1;
			    SetPVarInt(playerid, "lockmenu", 0);
				if(Info[playerid][pVIP] == 0)
				{
				   	return GivePlayerCash(playerid, -500);
				}
				else
				{
   					GivePlayerCash(playerid, -500);
				}
		    }
		}
		else if(GetPVarInt(playerid, "lockmenu") == 2)
		{
		    new fvid;
            if (isnumeric(inputtext))
	        {
                fvid = strval(inputtext)-1;
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvId] == 0)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} No tienes un vehículo en esta ranura.");
				    SetPVarInt(playerid, "lockmenu", 0);
	                return 1;
			    }
			    if(FVINFO[Info[playerid][pFMember]][fvid][fvLock] == 3)
		  	    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} Ya tienes instalado ese seguro en el coche.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "{A2DC35}[24/7]:{FFFFFF} Has adquirido un seguro industrial!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Ahora puedes usar /fseguro para bloquear el coche.");
			    FVINFO[Info[playerid][pFMember]][fvid][fvLock] = 3;
			    SetPVarInt(playerid, "lockmenu", 0);
				if(Info[playerid][pVIP] == 0)
				{
				   	return GivePlayerCash(playerid, 0);
				}
				else
				{
   					GivePlayerCash(playerid, 0);
				}
		    }
		}
		}
	}
	if(dialogid == NGMENU)
	{
 		if(response) switch(listitem)
		{
			case 0: // NG Duty
			{
				if(OnDuty[playerid]==0)
				{
					format(string, sizeof(string), "* Soldado %s toma una placa y una pistola de su casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, COLOR_NG);
					//
     				if(YoActivado[playerid] == 1){Delete3DTextLabel(YO[playerid]);}
                    YO[playerid] = Create3DTextLabel("- SAEM - ONDUTY",0x9ACD3200,30.0,40.0,50.0,40.0,0);
                    YoActivado[playerid] = 1;
                    Attach3DTextLabelToPlayer(YO[playerid], playerid, 0.0, 0.0, 0.5);
                    //
					SetPlayerSkin(playerid, 287);
					Info[playerid][pModel] = 287;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24);
					GivePlayerValidWeapon(playerid, 31);
					OnDuty[playerid] = 1;
					InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(OnDuty[playerid]==1)
				{
					format(string, sizeof(string), "* Soldado %s deja su placa y armas en el casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					//
 					if(YoActivado[playerid] == 1){Delete3DTextLabel(YO[playerid]); YoActivado[playerid] = 0;}
					//
					ResetPlayerWeaponsEx(playerid);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, Info[playerid][pChar]);
					OnDuty[playerid] = 0;
				}
			}
			case 1: // NG Uniforms
			{
			    SafeDialogEx(playerid, NGMENUSKIN, DIALOG_STYLE_LIST, "{00F70C}SAEM Skins", "Coronel\nOficial 1 (OFF)\nOfcial 2 (OFF)\nRanger\nOff Duty Hombre\nOff Duty Mujer\n\
				Seguridad Negro\nSeguridad Blanco\nMédico\nTraje Táctico", "Ok", "Cancelar");
			}
			case 2: // NG Weapons
			{
				SafeDialogEx(playerid, NGMENUWEP, DIALOG_STYLE_LIST, "{00F70C}SAEM Armas","Cuchillo\nDeagle\nShotgun\nMP5\nM4\nAK47\nSniper Rifle\nRifle\n\
				SD Pistol\nGranada\nTear Gas\nNitestick\nSpray\nCamara", "Purchase", "Cancelar");
			}
			case 3: // NG Undercover
			{
				SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "{00F70C}Encubierto","Escoge un skin (por ID).", "Ok", "Cancelar");
			}
    		case 4: // NG Heal
			{
				SetPlayerArmour(playerid, 100);
    		}
			case 5: SetHP(playerid, 100);
			case 6: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "{00F70C}Accesorios", "Bienvenido a la taquilla de accesorios de SAEM","Continuar", "Cancelar" );
			case 7: GivePlayerValidWeapon(playerid, 46);
		}
		ActualizarFaccion(fac);
	}
	if(dialogid == NGMENUSKIN)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
			    if(Info[playerid][pRank] == 6)
			    {
					SetPlayerSkin(playerid, 295);
					Info[playerid][pModel] = 295;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres rango 6.");
				}
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 240);
				Info[playerid][pModel] = 240;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 186);
				Info[playerid][pModel] = 240;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 287);
				Info[playerid][pModel] = 287;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 179);
				Info[playerid][pModel] = 179;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 191);
				Info[playerid][pModel] = 191;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 163);
				Info[playerid][pModel] = 163;
			}
			if(listitem == 7) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 164);
				Info[playerid][pModel] = 164;
			}
			if(listitem == 8) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 276);
				Info[playerid][pModel] = 16;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				Info[playerid][pModel] = 285;
			}
		}
		ActualizarFaccion(fac);
	}
	if(dialogid == NGMENUWEP)
	{
 		if(response)
		{
 			if(listitem == 0) return GivePlayerValidWeapon(playerid, 4);
			if(listitem == 1) return GivePlayerValidWeapon(playerid, 24);
			if(listitem == 2) return GivePlayerValidWeapon(playerid, 25);
			if(listitem == 3) return GivePlayerValidWeapon(playerid, 29);
			if(listitem == 4) return GivePlayerValidWeapon(playerid, 31);
			if(listitem == 5) return GivePlayerValidWeapon(playerid, 30);
			if(listitem == 6) return GivePlayerValidWeapon(playerid, 34);
			if(listitem == 7) return GivePlayerValidWeapon(playerid, 33);
			if(listitem == 8) return GivePlayerValidWeapon(playerid, 23);
			if(listitem == 9) return GivePlayerValidWeapon(playerid, 16);
			if(listitem == 10) return GivePlayerValidWeapon(playerid, 17);
			if(listitem == 11) return GivePlayerValidWeapon(playerid, 3);
			if(listitem == 12) return GivePlayerValidWeapon(playerid, 41);
			if(listitem == 13) return GivePlayerValidWeapon(playerid, 43);
			InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		}
		ActualizarFaccion(fac);
	}
	switch(dialogid){
  		case DIALOG_CREATEGUN:{
			if(!response)
				return 1;
		    switch(listitem){
				case 0:{
					if(Info[playerid][pMats] >= 150){
						GivePlayerValidWeapon(playerid, 8);
				        Info[playerid][pMats] -= 150;
				        SendClientMessage(playerid, COLOR_WHITE, "Creaste una katana. Usa /venderarma [playerid] para dar el arma.");
				        format(string, sizeof(string), "* %s crea una katana con sus materiales.", GetPlayerNameEx(playerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
							case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear armas más poderes.",Info[playerid][pArmsSkill]/50);
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
				    }
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 1: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 15);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste una Caña. Usa /venderarma [playerid] para dar el arma.");
				        format(string, sizeof(string), "* %s crea una caña con sus materiales.", GetPlayerNameEx(playerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
							case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 2: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 7);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste un palo de Billar. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea un palo de billar con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 3: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 5);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste un bate. Usa /venderarma [playerid] para dar el arma.");
 						format(string, sizeof(string), "* %s crea un bate con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 4: {
					if(Info[playerid][pMats] >= 90) {
						GivePlayerValidWeapon(playerid, 6);
						Info[playerid][pMats] -= 90;
						SendClientMessage(playerid, COLOR_WHITE,"Creaste una Pala. Usa /venderarma [playerid] para dar el arma.");
 						format(string, sizeof(string), "* %s crea una Pala con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				        Info[playerid][pArmsSkill]++;
				        Info[playerid][pScrewdriver]--;
				        SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 5: {
					if(Info[playerid][pMats] >= 300) {
						GivePlayerValidWeapon(playerid, 22);
						Info[playerid][pMats] -= 300;
						SendClientMessage(playerid, COLOR_WHITE,"Creastes una pistola 9mm. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una pistola 9mm con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 6: {
					if(Info[playerid][pMats] >= 400) {
						GivePlayerValidWeapon(playerid, 23);
						Info[playerid][pMats] -= 400;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una pistola con silenciador. Usa /Venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una pistola con silenciador con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
									case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 7: {
					if(Info[playerid][pMats] >= 450) {
						GivePlayerValidWeapon(playerid, 25);
						Info[playerid][pMats] -= 450;
						SendClientMessage(playerid, COLOR_WHITE,"Creastes una shotgun. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string),"* %s crea una shotgun con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "No tienes suficientes materiales.");
				}
				case 8: {
					if(Info[playerid][pMats] >= 800) {
						GivePlayerValidWeapon(playerid, 24);
						Info[playerid][pMats] -= 800;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una Desert Eagle. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una Desert Eagle con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
									case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 9: {
					if( Info[playerid][pMats] >= 1200){
						GivePlayerValidWeapon(playerid, 29);
						Info[playerid][pMats] -= 1200;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una MP5. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una MP5 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
									case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 10: {
					if(Info[playerid][pMats] >= 2000) {
						GivePlayerValidWeapon(playerid, 30);
						Info[playerid][pMats] -= 2000;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una AK-47. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una AK-47 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 11:{
					if(Info[playerid][pMats] >= 2000){
						GivePlayerValidWeapon(playerid, 31);
						Info[playerid][pMats] -= 2000;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes una M4A1. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una M4A1 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 12: {
					if(Info[playerid][pMats] >= 4000) {
						GivePlayerValidWeapon(playerid, 34);
						Info[playerid][pMats] -= 4000;
						SendClientMessage(playerid, COLOR_WHITE,"Creastes un sniper rifle. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea un sniper rifle con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
				case 13: {
					if(Info[playerid][pMats] >= 3000) {
						GivePlayerValidWeapon(playerid, 27);
						Info[playerid][pMats] -= 3000;
						SendClientMessage(playerid, COLOR_WHITE, "Creastes un SPAS12. Usa /venderarma [playerid] para dar el arma.");
						format(string, sizeof(string), "* %s crea una SPAS12 con sus materiales.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						Info[playerid][pArmsSkill]++;
						Info[playerid][pScrewdriver]--;
						SetPVarInt(playerid, "ArmsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
						switch(Info[playerid][pArmsSkill]) {
								case 50, 100,300, 600: {
								format(string,sizeof(string),"Felicitaciones! Tu nivel de creación de armas aumentó. Ahora puedes crear armas más poderosas.");
								SendClientMessage(playerid,COLOR_WHITE,string);
							}
						}
					}
					else return SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficientes materiales.");
				}
			}
		}
		// VIP Locker /viplocker
		case DIALOG_VIPLOCKER:{
			if(response){
				if(listitem == 0){
 					new Float:health;
 					GetPlayerHealth(playerid, health);
					new hpint = floatround( health, floatround_round );
		    		if( hpint >= 100 ) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ya tienes la vida al tope.");
			    	SetHP(playerid, 100);
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Usaste el Botiquín HP, ahora tienes 100 de vida.");
				}
				if(listitem == 1){
					new Float:armour;
					GetPlayerArmour(playerid, armour);
					if(armour >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ya tienes la armadura al tope.");
					if(Info[playerid][pVIP] == 1){
						if(GetPlayerCash(playerid) < 15000) return SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $15000!");
						GivePlayerCash(playerid, -15000);
						SetPlayerArmour(playerid, 100);
						SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Pagaste $15000 por una armadura.");
					}
					else if(Info[playerid][pVIP] == 2){
						if(GetPlayerCash(playerid) < 10000) return SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $10000!");
						GivePlayerCash(playerid, -10000);
						SetPlayerArmour(playerid, 100);
						SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Pagaste $10000 por una armadura.");
					}
					if(Info[playerid][pVIP] >= 3) SetPlayerArmour(playerid, 100);
				}
				if(listitem == 2){
					if(Info[playerid][pVIP] >= 1) return SafeDialogEx(playerid, DIALOG_VIPWEAPONS, DIALOG_STYLE_LIST, "{00F70C}Armas VIP", "Desert Eagle (3)\nSPAS-12 (5)\nM4 (4)\nAK-47 (4)\nShotgun (2)\nMP5 (3)\nSniper (5)\nPistola SD (2)\nGolf Club (1)\nBat (1)\nDildo (1)\nSword (1)", "Ok", "Cancelar");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No puedes acceder a los lockers de armas.");
				}
				if(listitem == 3){
            		if(Info[playerid][pVIP] >= 2) return SafeDialogEx( playerid, DIALOG_VIPCLOTHES, DIALOG_STYLE_INPUT, "{00F70C}Selector de Skin","Por favor ingresa una Skin ID!\n\nNote: Los cambios de Skin son Gratis.", "Cambiarse", "Cancelar" );
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Debes ser VIP Silver o mayor para acceder a los lockers de Ropa.");
				}
				if(listitem == 4){
  					if(Info[playerid][pVIP] >= 2) return SafeDialogEx(playerid, DIALOG_VIPJOB, DIALOG_STYLE_LIST, "{00F70C}VIP: Trabajos", "Bartender\nVendedor de moviles\nChofer de viajes\nPizzero\nVendedor de drogas\nCamionero\nVendedor de armas\nTaxista\nGranjero\nTraficante de drogas\nVendedor de chalecos\nArtesano", "Ok", "Cancelar");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Debes ser VIP Silver o mayor para acceder a los trabajos.");
				}
				if(listitem == 5) SafeDialogEx(playerid, DIALOG_VIPCOLOR, DIALOG_STYLE_LIST, "{00F70C}VIP Color", "On\nOff", "Ok", "Cancelar");
			}
		}
		case DIALOG_VIPJOB:
		{
	    	if(!response) return 1;
	    	switch(listitem){
            	case 0: SetPVarInt(playerid, "jobSelection", 1);
            	case 1: SetPVarInt(playerid, "jobSelection", 2);
            	case 2: SetPVarInt(playerid, "jobSelection", 3);
            	case 3: SetPVarInt(playerid, "jobSelection", 4);
            	case 4: SetPVarInt(playerid, "jobSelection", 5);
            	case 5: SetPVarInt(playerid, "jobSelection", 6);
            	case 6: SetPVarInt(playerid, "jobSelection", 7);
            	case 7: SetPVarInt(playerid, "jobSelection", 8);
            	case 8: SetPVarInt(playerid, "jobSelection", 9);
            	case 9: SetPVarInt(playerid, "jobSelection", 10);
            	case 10: SetPVarInt(playerid, "jobSelection", 11);
            	case 11: SetPVarInt(playerid, "jobSelection", 12);
        	}
        	SafeDialogEx(playerid, DIALOG_VIPJOB2, DIALOG_STYLE_LIST, "{00F70C}VIP Trabajos", "Job slot 1\nJob slot 2", "Ok", "Cancelar");
    	}
		case DIALOG_VIPJOB2:{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					Info[playerid][pJob] = GetPVarInt(playerid, "jobSelection");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Cambiaste tu primer trabajo.");
				}
				case 1:
				{
					Info[playerid][pJob2] = GetPVarInt(playerid, "jobSelection");
					SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Cambiaste tu segundo trabajo.");
				}
			}
		}
		case DIALOG_VIPCOLOR:{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0: SetPlayerColor(playerid, COLOR_VIP) && SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Activaste el color VIP en tu nombre.");
	        	case 1: SetPlayerToTeamColor(playerid) && SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Desactivaste el color VIP en tu nombre.");
	    	}
		}
		case DIALOG_VIPWEAPONS:{
	    	if(!response) return 1;
	    	if(Info[playerid][pVIP] < 3 && Info[playerid][pVTokens] == 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes fichas VIP no puedes canjear por armas o no eres VIP Gold.");
	    	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Actualmente tienes restricción de armas!");
	    	switch( listitem ){
	        	case 0:{
    				if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 3) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 3;
						format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un Deagle, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 24);
	        	}
	        	case 1:{
 					if(Info[playerid][pVIP] < 3){
       					if(Info[playerid][pVTokens] >= 5){
							Info[playerid][pVTokens] -= 5;
 							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un SPAS-12, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
    		 				SendClientMessageEx(playerid, COLOR_YELLOW, string);
       					}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
					GivePlayerValidWeapon(playerid, 27);
	        	}
	        	case 2:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 4) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 4;
 						format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un M4, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 31);
	        	}
	        	case 3:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 4) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 4;
						format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un AK-47, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 30);
	        	}
	        	case 4:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 2) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 2;
						format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un Shotgun, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 25);
	        	}
	        	case 5:{
 					if(Info[playerid][pVIP] < 3){
			        	if(Info[playerid][pVTokens] < 3) return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
						Info[playerid][pVTokens] -= 3;
						format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un MP5, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
    					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}
					GivePlayerValidWeapon(playerid, 29);
				}
	        	case 6:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 4){
							Info[playerid][pVTokens] -= 5;
							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por un Sniper Rifle, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 34);
	        	}
	        	case 7:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 1){
							Info[playerid][pVTokens] -= 2;
							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tus fichas por una Pistola SD, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 23);
	        	}
	        	case 8:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tu ficha por un palo de golf, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
   	 				GivePlayerValidWeapon(playerid, 2);
	        	}
	        	case 9:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tu ficha por un bat de béisbol, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 5);
	        	}
	        	case 10:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tu ficha por un dildo, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 10);
	        	}
	        	case 11:{
 					if(Info[playerid][pVIP] < 3){
   						if(Info[playerid][pVTokens] > 0){
							Info[playerid][pVTokens] -= 1;
							format(string, sizeof(string), "{FFFF00}[VIP]:{FFFFFF} Cambiaste tu ficha por una sword, ahora tienes %d ficha(s).", Info[playerid][pVTokens]);
			        		SendClientMessageEx(playerid, COLOR_YELLOW, string);
  						}
			        	else return SendClientMessageEx(playerid, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} No tienes suficientes fichas para esto.");
					}
                	GivePlayerValidWeapon(playerid, 8);
	        	}
	    	}
		}
		case DIALOG_VIPCLOTHES: //vip clothes corner
		{
			new skinid = strval(inputtext);
			if(!response) { }
			else{
				if(!IsValidSkin(skinid))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Ese skin no está disponible, skins: IDs son de 1 a 311 !");
    				SafeDialogEx( playerid, DIALOG_VIPCLOTHES, DIALOG_STYLE_INPUT, "VIP: Skin","Por favor ingresa una Skin ID!\n\nNota: Los cambios de skin son Libres.", "Cambiar", "Cancelar" );
				}
				else{
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: Te cambiaste tu skin en los lockers VIP.");
					Info[playerid][pChar] = skinid;
					SetPlayerSkin(playerid, skinid);
				}
  			}
			return 1;
		}
		case DIALOG_ADMAIN: if(response) switch(listitem)
		{
			case 0:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "{00F70C}Anuncios - Compra Venta","Ingresa el de anuncio, recuerda que los anuncios son exclusivamente para compra y venta\nNota: Tamaño del texto sólo será máximo 128 Letras.\nNota: Este anuncio se hará desde SA News y el costo es de $8", "Enviar", "Atrás");
			}
			case 1:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP2, DIALOG_STYLE_INPUT, "{00F70C}Anuncios - Clasificados","Ingresa el anuncio, recuerda que los anuncios son exclusivamente para clasificados\nNota: Tamaño del texto sólo será máximo 128 Letras.\nNota: Este anuncio se hará desde SA News y el costo es de $10", "Enviar", "Atrás");
			}
			case 2:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP3, DIALOG_STYLE_INPUT, "{00F70C}Anuncios - Empleo","Ingresa el anuncio, recuerda que los anuncios son exclusivamente para busqueda de trabajo\nNota: Tamaño del texto sólo será máximo 128 Letras.\nNota: Este anuncio se hará desde SA News y el costo es de $10", "Enviar", "Atrás");
			}
			case 3:
			{
				if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás prohibido de hacer anuncios.");
				if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes un teléfono.");
				if(iAdverTimer >= 1)
				{
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
                    new szerror[128];
					format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
					return SendClientMessageEx(playerid, COLOR_GREY, szerror);
				}
				else SafeDialogEx(playerid, DIALOG_ADPLACEP4, DIALOG_STYLE_INPUT, "{00F70C}Anuncios - Extras","Ingresa el anuncio, recuerda que los anuncios son exclusivamente para extras y noticias\nNota: Tamaño del texto sólo será máximo 128 Letras.\nNota: Este anuncio se hará desde SA News y el costo es de $15", "Enviar", "Atrás");
			}
		}
		case DIALOG_ADPLACE:{
			if(response){
				new
					iLength = strlen(inputtext);
				if(Info[playerid][pAdverID] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "Ya hiciste un anuncio, primero borra el anterior.");
				if(isnull(inputtext)){
				    SafeDialogEx(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "{00F70C}Anuncios - Hacer Anuncio", "Ingresa el anuncio que dejarás, recuerda que los anuncios son exclusivamente para compra y venta\nNota: Tamaño del texto sólo será máximo 128 Letras", "Enviar", "Atrás");
				    return SendClientMessageEx(playerid, COLOR_GREY, "No ingresaste nada.");
				}
				if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio\nPoner un Anuncio Rápido", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iLength *= 5;
				if(GetPlayerCash(playerid) < iLength) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes suficiente dinero para pagar el anuncio.");
				GivePlayerCash(playerid, -iLength);
				SendAD(playerid, inputtext, Info[playerid][pPnumber]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones tu anuncio saldrá en la lista.");
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio\nPoner un Anuncio Rápido", "Seleccionar", "Cancelar");
		}
  		case DIALOG_ADPLACEP:{
			if(response){
				if(GetPlayerCash(playerid) < 100){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, 200);
				/*new
					szMessage[255];*/
                new st[128];
				format(szMessage, sizeof(szMessage), "[Compra-Venta]: %s {00FFFF}[Contacto(%i)]", inputtext, Info[playerid][pPnumber]);
				OOCNews(TEAM_GROVE_COLOR,szMessage);
				format(st,128,"[Anunciante]: %s (%d)",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_GREY,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
		}
		case DIALOG_ADPLACEP2:{
			if(response){
				if(GetPlayerCash(playerid) < 100){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -200  );
				/*new
					szMessage[255];*/
                new st[128];
				format(szMessage, sizeof(szMessage), "[Clasificados]: %s {00FFFF}[Contacto(%i)]", inputtext, Info[playerid][pPnumber]);
				OOCNews(TEAM_GROVE_COLOR,szMessage);
                format(st,128,"[Anunciante]: %s (%d)",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_GREY,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
		}
		case DIALOG_ADPLACEP3:{
			if(response){
				if(GetPlayerCash(playerid) < 50){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -50);
				/*new
					szMessage[255];*/
				new st[128];
				format(szMessage, sizeof(szMessage), "[Empleos]: %s {00FFFF}[Contacto(%i)]", inputtext, Info[playerid][pPnumber]);
				OOCNews(TEAM_GROVE_COLOR,szMessage);
				format(st,128,"[Anunciante]: %s (%d)",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_GREY,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
		}
		case DIALOG_ADPLACEP4:{
			if(response){
				if(GetPlayerCash(playerid) < 500){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero para hacer este anuncio.");
				}
				else if(strlen(inputtext) >= 128){
					SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
					return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
				}
				iAdverTimer = 60;
				GivePlayerCash(playerid, -500);
				/*new
					szMessage[255];*/
				new st[128];
				format(szMessage, sizeof(szMessage), "[Extras]: %s {00FFFF}[Contacto(%i)]", inputtext, Info[playerid][pPnumber]);
				OOCNews(TEAM_GROVE_COLOR,szMessage);
                format(st,128,"[Anunciante]: %s (%d)",GetPlayerNameEx(playerid),playerid);
				SendAdminMessage(COLOR_GREY,st);
				return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{00F70C}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
		}
  		case DIALOG_GMX:
  		{
  				if(!response)
	                return SendClientMessage(playerid, COLOR_GREY, "Intento de reiniciar servidor cancelado.");
	            SendClientMessage(playerid, COLOR_YELLOW, "---- REINICIO DE SERVIDOR ----");
	            foreach(Player, x){
				    if(Info[x][pAdminZC] > 1){
	         			if(GetPVarInt(x, "TempName") == 1){
	         			    new name[MAX_PLAYER_NAME];
							GetPVarString(x, "TempNameName", name, sizeof(name));
							SetPVarInt(x, "TempName", 0);
							SetPlayerName(x, name);
							SendClientMessage(x, COLOR_WHITE, "El servidor será reiniciado; se forzó tu cambio de nombre original para evitar perdidas en tu cuenta.");
						}
					}
				}
				saveAccounts();
				SendClientMessageToAllEx(COLOR_GREY,"[AVISO GENERAL] El servidor será reiniciado en segundos de manera automática. Disculpen las molestias.");
				SendClientMessage(playerid, COLOR_YELLOW, "---- Guardado de .cfg y .ini ----");
				SaveStuff();
        		UpdatePoints();
				SaveDynamicDoors();
				foreach(Player, i)
				{
				    GameTextForPlayer(i, "Iniciando reinicio...", 2000, 4);
   					//Kick(i);
   					SetTimerEx("KickxD",5000,0,"d",i);
				}
				iGMXTick = 6;
				iGMXTimer = SetTimer("restartTimer", 1000, true);
				SendClientMessage(playerid, COLOR_YELLOW, "---- Servidor reiniciandose ----");
		}
	    case DOORLOCK:
		{
			if(response == 1)
			{
			    new i = GetPVarInt(playerid, "Door");
			    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "No ingresaste nada." );
			    if(strlen(inputtext) > 24) return SendClientMessageEx(playerid, COLOR_GREY, "La contraseña no es más de 24 letras o números.");
			    if(strcmp(inputtext, DDoorsInfo[i][dPass], true) == 0){
			        if(DDoorsInfo[i][dLocked] == 0){
						DDoorsInfo[i][dLocked] = 1;
						SendClientMessageEx(playerid, COLOR_WHITE, "Contraseña Aceptada, puerta bloqueada.");
			        }
			        else{
			            DDoorsInfo[i][dLocked] = 0;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Contraseña Aceptada, puerta desbloqueada.");
			        }
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "¡Contraseña Incorrecta!");
			}
		}
		case ADMUTE:
		{
		    if(response == 1)
		    {
		        switch(listitem)
		        {
		            case 0: // Jailtime
					{
					    if(Info[playerid][pADMuteTotal] < 4)
					    {
						    Info[playerid][pADMute] = 0;
					        ResetPlayerWeaponsEx(playerid);
							if(Info[playerid][pJailed] != 0)
							{
							    Info[playerid][pJailTime] += Info[playerid][pADMuteTotal]*15*60;
							}
							else
							{
							    GameTextForPlayer(playerid, "~w~Bienvenido a ~n~~r~Fort DeMorgan", 5000, 3);
								Info[playerid][pJailed] = 4; PhoneOnline[playerid] = 1;
								Info[playerid][pJailTime] = Info[playerid][pADMuteTotal]*15*60;
								SetPlayerFacingAngle(playerid, 0);
								TogglePlayerControllable(playerid, 1);
								new rand = random(sizeof(OOCJail));
								LoadObjects(playerid);
								SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
								SetPlayerVirtualWorld(playerid, 1000);
								SetPlayerInterior(playerid,0);
								SetPlayerSkin(playerid, 50);
								SetPlayerToTeamColor(playerid);
							}
					    }
					    else if(Info[playerid][pADMuteTotal] >= 4 || Info[playerid][pADMuteTotal] < 7)
					    {
						    Info[playerid][pADMute] = 0;
							ResetPlayerWeaponsEx(playerid);
							if(Info[playerid][pJailed] != 0)
							{
							    Info[playerid][pJailTime] += Info[playerid][pADMuteTotal]*15*60;
							}
							else
							{
							    GameTextForPlayer(playerid, "~w~Bienvenido a ~n~~r~Fort DeMorgan", 5000, 3);
								new rand = random(sizeof(OOCJail));
								LoadObjects(playerid);
								SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
								SetPlayerVirtualWorld(playerid, 1000);
								SetPlayerInterior(playerid,0);
								SetPlayerSkin(playerid, 50);
								Info[playerid][pJailed] = 4;
								Info[playerid][pJailTime] = Info[playerid][pADMuteTotal]*15*60;
								PhoneOnline[playerid] = 1;
								SetPlayerToTeamColor(playerid);
								SetPlayerWantedLevel(playerid, 0);
								ClearAnimations(playerid);
								SetPlayerSkin(playerid, 50);
							}
					    }
						format(string,sizeof(string),"[AdmWarning]: %s estará en prisión %d Minutos, gracias a la oportunidad de AD Unmuted.",GetPlayerNameEx(playerid),Info[playerid][pADMuteTotal]*15);
						ABroadCast(COLOR_GENERAL,string,2);
	            	}
	            	case 1: // Fine
	            	{
	            	    new playername[MAX_PLAYER_NAME];
	            	    GetPlayerName(playerid, playername, sizeof(playername));

		                new allmoney;
	 					if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
						{
	 						allmoney = HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+Info[playerid][pAccount];
	   					}
	   					else
	    				{
	   						allmoney = GetPlayerCash(playerid)+Info[playerid][pAccount];
	    				}
	                    Info[playerid][pADMute] = 0;
					    new fine = 10*allmoney/100;
		                format(string,sizeof(string),"[AdmWarning]: %s pagó $%d por la oportunidad de AD Unmuted.",GetPlayerNameEx(playerid),fine);
		                GivePlayerCash(playerid,-fine);
						ABroadCast(COLOR_GENERAL,string,2);
		            }
		        }
		    }
		    else
		    {
		        format(string,sizeof(string),"[AdmWarning]: %s canceló su oportunidad de ser desmuteado del comando /ad.",GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GENERAL,string,2);
		    }
		}
		case DUTYMENU:
		{
 			if(response)
			{
				if(listitem == 0) // LSPD Duty
				{
					if(OnDuty[playerid] == 0)
					{
						format(string, sizeof(string), "* Oficial %s coje una placa y su pistola.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerColor(playerid, TEAM_BLUE_COLOR);
						SetPlayerSkin(playerid, 280);
						Info[playerid][pModel] = 280;
	    				SetPlayerArmour(playerid, 100.0);
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 41);
						GivePlayerValidWeapon(playerid, 3);
						OnDuty[playerid] = 1;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					else if(OnDuty[playerid] == 1)
					{
						format(string, sizeof(string), "* Oficial %s deja sus cosas en su casillero.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerColor(playerid, TEAM_HIT_COLOR);
						SetPlayerArmour(playerid, 0.0);
						SetPlayerSkin(playerid, Info[playerid][pChar]);
						OnDuty[playerid] = 0;
					}
				}
				if(listitem == 1) // LSPD Weapons
				{
					SafeDialogEx(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "LSPD Equipo","Mace\nNite Stick\nDesert Eagle\n9 Milímetros - Taser\nEscopeta\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessorios", "Ok", "Cancelar");
				}
				if(listitem == 2) // LSPD SWAT Uniform
				{
				    if(Info[playerid][pDivision] == 5)
				    {
						SetPlayerSkin(playerid, 285);
						Info[playerid][pModel] = 285;
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "No eres de la división de SWAT.");
					}
				}
				if(listitem == 3) // LSPD Uniforms
				{
					SafeDialogEx(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "Uniformes LSPD","Cadete\nOficial Femenina\nOficial 1\nOficial 2\nOficial 3\nOficial Negro\nOficial Latino\nOficial Moto.\nOficial SWAT\nSargento\nCapitan\nComisario", "Ponerse", "Cancelar");
				}
				if(listitem == 4) // LSPD Undercover Uniform
				{
					SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Elige un Skin (por ID).", "Ok", "Cancelar");
				}
			}
			ActualizarFaccion(fac);
		}
	 	case DUTYMENU2:
		{
 			if(response)
			{
		    	if(Tax > 0) switch(listitem) {
					case 0: // LSPD Mace
					{
						GivePlayerValidWeapon(playerid, 41);
						Tax -= 20;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 1: // LSPD Nite Stick
					{
						GivePlayerValidWeapon(playerid, 3);
						Tax -= 20;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 2: // LSPD Deagle
					{
						GivePlayerValidWeapon(playerid, 24);
						Tax -= 500;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 3: // LSPD 9 mm silenciosa
					{
						GivePlayerValidWeapon(playerid, 23);
						Tax -= 500;
						SendClientMessageEx(playerid,COLOR_WHITE,"Usa /tazear para activar el modo taser y desactivalo usando el mismo comando.");
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 4: // LSPD Spas12 *
					{
						if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
						{
							GivePlayerValidWeapon(playerid, 25);
							Tax -= 10000;
							InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, "No eres de la división SWAT, o no eres mayor al rango 2.");
						}
					}
					case 5: // LSPD mp5
					{
						GivePlayerValidWeapon(playerid, 29);
						Tax -= 400;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 6: // LSPD m4 *
					{
						GivePlayerValidWeapon(playerid, 31);
						Tax -= 4000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 7: // LSPD ak-47 *
					{
						if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
						{
							GivePlayerValidWeapon(playerid, 30);
							Tax -= 4000;
							InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, "No eres de la división SWAT, o no eres mayor al rango 3.");
						}
					}
					case 8: // LSPD Smoke Bomb *
					{
						if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
						{
							GivePlayerValidWeapon(playerid, 17);
							Tax -= 800;
							InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, "No eres de la división SWAT, o no eres mayor al rango 3.");
						}
					}
					case 9: // LSPD Shotgun
					{
						GivePlayerValidWeapon(playerid, 25);
						Tax -= 200;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 10: // LSPD rifle
					{
						GivePlayerValidWeapon(playerid, 33);
						Tax -= 1000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 11: // LSPD Sniper *
					{
						if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
						{
							GivePlayerValidWeapon(playerid, 34);
							Tax -= 10000;
							InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
						}
						else
						{
   						    SendClientMessageEx(playerid, COLOR_GRAD2, "No eres de la división SWAT, o no eres mayor al rango 3.");
						}
					}
					case 12: // LSPD Kevlar
					{
						SetPlayerArmour(playerid, 100.0);
						Tax -= 2000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 13: SetHP(playerid, 100);
					case 14: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessorios", "Bienvenido al casillero de accesorios del LSPD","Continuar", "Cancelar" );
				}
				else return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
			}
			ActualizarFaccion(fac);
		}
		case DUTYMENU3:
		{
 			if(response)
			{
				if(listitem == 0) // LSPD Uniforms
				{
					SetPlayerSkin(playerid, 71);
					Info[playerid][pModel] = 71;
				}
				if(listitem == 1) //LSPD Uniforms
				{
					SetPlayerSkin(playerid, 141);
					Info[playerid][pModel] = 141;
				}
				if(listitem == 2) // LSPD Uniforms
				{
					SetPlayerSkin(playerid, 280);
					Info[playerid][pModel] = 280;
				}
				if(listitem == 3) //LSPD Uniforms
				{
					SetPlayerSkin(playerid, 266);
					Info[playerid][pModel] = 266;
				}
				if(listitem == 4) //LSPD Uniforms
				{
					SetPlayerSkin(playerid, 281);
					Info[playerid][pModel] = 281;
				}
				if(listitem == 5) // LSPD Uniforms
				{
					SetPlayerSkin(playerid, 265);
					Info[playerid][pModel] = 265;
				}
				if(listitem == 6) // LSPD Uniforms
				{
					SetPlayerSkin(playerid, 267);
					Info[playerid][pModel] = 267;
				}
				if(listitem == 7) // LSPD Uniforms
				{
					SetPlayerSkin(playerid, 284);
					Info[playerid][pModel] = 284;
				}
				if(listitem == 8) // LSPD Uniforms
				{
					SetPlayerSkin(playerid, 285);
					Info[playerid][pModel] = 285;
				}
				if(listitem == 9) //LSPD Uniforms
				{
					SetPlayerSkin(playerid, 282);
					Info[playerid][pModel] = 282;
				}
				if(listitem == 10) //LSPD Uniforms
				{
					SetPlayerSkin(playerid, 283);
					Info[playerid][pModel] = 283;
				}
				if(listitem == 11) //LSPD Uniforms
				{
					SetPlayerSkin(playerid, 288);
					Info[playerid][pModel] = 288;
				}
			}
		}
		case FDUTYMENU:
		{
 			if(response)
			{
				if(listitem == 0) // FBI Duty
				{
					if(OnDuty[playerid] == 0)
					{
						format(string, sizeof(string), "* Agente %s coge una placa y una pistola de su casillero.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerColor(playerid, TEAM_FBI_COLOR);
						SetPlayerArmour(playerid, 100.0);
						GivePlayerValidWeapon(playerid, 24);
						GivePlayerValidWeapon(playerid, 41);
						GivePlayerValidWeapon(playerid, 3);
						GivePlayerValidWeapon(playerid, 29);
						OnDuty[playerid] = 1;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					else if(OnDuty[playerid] == 1)
					{
						format(string, sizeof(string), "* Agente %s deja su placa y su arma en su casillero.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerColor(playerid, TEAM_HIT_COLOR);
						SetPlayerSkin(playerid, Info[playerid][pChar]);
						SetPlayerArmour(playerid, 0.0);
						OnDuty[playerid] = 0;
					}
				}
			}
			if(listitem == 1) // FBI Weapons
			{
				SafeDialogEx(playerid, FDUTYMENU2, DIALOG_STYLE_LIST, "{00F70C}Armamento","Mace\nNite Stick\nDesert Eagle\n9 Milímetros - Taser\nEscopeta\nMP5\nM4A1\nAK-47\nSmoke Grenade\nCamara\nSniper Rifle\nTactical Vest\nFirst Aid Kit\nAccesorios", "Ok", "Cancelar");
			}
			if(listitem == 2) // FBI SWAT Uniform
			{
           	    if(Info[playerid][pRank] > 3)
				{
    				SetPlayerSkin(playerid, 285);
	    			Info[playerid][pModel] = 285;
				}
				else
				{
    				SendClientMessageEx(playerid, COLOR_GRAD2, "No tienes el rango requerido (3).");
    				return 1;
				}
			}
			if(listitem == 3) // FBI Uniforms
			{
				SafeDialogEx(playerid, FDUTYMENU3, DIALOG_STYLE_LIST, "{00F70C}Uniformes","Agente con escudo\nAgente 1\nAgente 2\nAgente Asiatico\nAgente Asiatico 2\nSWAT\nMujer", "Poner", "Cancelar");
			}
			if(listitem == 4) // FBI Undercover Uniform
			{
				SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "{00F70C}Encubierto","Elige un skin (por ID).", "Ok", "Cancelar");
			}
		}
		case FDUTYMENU2:
		{
 			if(response)
			{
		    	if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
		    	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes obtener armas debido a tu restricción de dos horas.");
					else switch(listitem) {
					case 0: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 41);
						Tax -= 100;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 1: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 3);
						Tax -= 100;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 2: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 24);
						Tax -= 500;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 3: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 23);
						Tax -= 500;
						SendClientMessageEx(playerid,COLOR_WHITE,"Usa /tazear para activar el modo taser y desactivalo usando el mismo comando.");
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 4: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 25);
						Tax -= 10000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 5: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 29);
						Tax -= 400;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 6: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 31);
						Tax -= 4000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 7: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 30);
						Tax -= 4000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 8: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 17);
						Tax -= 800;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 9: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 43);
						Tax -= 300;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 10: // FBI Weapons
					{
						GivePlayerValidWeapon(playerid, 34);
						Tax -= 10000;
						InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 11: // FBI Weapons
					{
						SetPlayerArmour(playerid, 100);
						Tax -= 2000;
					}
					case 12: SetHP(playerid, 100);
					default: SafeDialogEx( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "{00F70C}Accesorios", "Bienvenido al casillero de accesorios del FBI.","Continuar", "Cancelar" );
				}
			}
		}
		case FDUTYMENU3:
		{
 			if(response)
			{
				if(listitem == 0) // FBI Uniforms
				{
					SetPlayerSkin(playerid, 286);
					Info[playerid][pModel] = 286;
				}
				if(listitem == 1) //FBI Uniforms
				{
					SetPlayerSkin(playerid, 166);
					Info[playerid][pModel] = 166;
				}
				if(listitem == 2) // FBI Uniforms
				{
					SetPlayerSkin(playerid, 165);
					Info[playerid][pModel] = 165;
				}
				if(listitem == 3) // FBI Uniforms
				{
					SetPlayerSkin(playerid, 294);
					Info[playerid][pModel] = 294;
				}
				if(listitem == 4) // FBI Uniforms
				{
					SetPlayerSkin(playerid, 120);
					Info[playerid][pModel] = 120;
				}
				if(listitem == 5) //FBI Uniforms
				{
					SetPlayerSkin(playerid, 285);
					Info[playerid][pModel] = 285;
				}
				if(listitem == 6) //FBI Uniforms
				{
					SetPlayerSkin(playerid, 141);
					Info[playerid][pModel] = 141;
				}
			}
		}
		case FDUTYMENU4:
		{
 			if(response)
			{
	 	        new skinid = strval(inputtext);
 		        if(!IsValidSkin(skinid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Debes de escoger una id de skin entre 1 y 311.");
				if(!IsPublicSkin(skinid)) return SafeDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "{00F70C}Encubierto","Skin inválido. Escoge otro.", "Seleccionar", "Cancelar");
				Info[playerid][pChar] = skinid;
				Info[playerid][pModel] = skinid;
				SetPlayerSkin(playerid, Info[playerid][pChar]);
			}
		}
		case DIALOG_LOADTRUCK: // TRUCKER JOB LOAD TRUCK
		{
 			if(response)
			{
				if(listitem == 0) // Legal goods
				{
			    	SafeDialogEx(playerid, DIALOG_LOADTRUCKL, DIALOG_STYLE_LIST, "{00F70C}¿Que quieres transportar?","{00F70C}Comida y Bebida\n{00F70C}Ropa\n{00F70C}Materiales\n{00F70C}Objetos del 24/7", "Ok", "Cancelar");
				}
				if(listitem == 1) // Illegal goods
				{
					new level = Info[playerid][pTruckSkill];
					if(level >= 0 && level <= 50)
					{
            			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{00F70C}¿Que quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 1 Bonus: puño americano\n{FF0606}Drogas 			{FFFFFF}(Nivel 1 Bonus: 1gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 1 Bonus: 15 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 51 && level <= 100)
					{
		    			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{00F70C}¿Que quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 2 Bonus: bate de baseball y un puño americano\n{FF0606}Drogas 			{FFFFFF}(Nivel 2 Bonus: 2gr de Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 2 Bonus: 25 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 101 && level <= 200)
					{
		    			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{00F70C}¿Que quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 3 Bonus: 9mm\n{FF0606}Drogas 			{FFFFFF}(Nivel 3 Bonus: 3gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 3 Bonus: 35 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 201 && level <= 400)
					{
            			SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{00F70C}¿Que quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 4 Bonus: SD pistol y  katana\n{FF0606}Drogas 			{FFFFFF}(Nivel 4 Bonus: 4gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 4 Bonus: 50 materiales)", "Ok", "Cancelar");
					}
					else if(level >= 401)
					{
 		 				SafeDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "{00F70C}¿Que quieres transportar?","{FF0606}Armas 		{FFFFFF}(Nivel 5 Bonus: mp5 o shotgun\n{FF0606}Drogas 			{FFFFFF}(Nivel 5 Bonus: 5gr de cada Droga)\n{FF0606}Materiales I.  	{FFFFFF}(Nivel 5 Bonus: 100 materiales)", "Ok", "Cancelar");
					}
				}
			}
			else
			{
		    	DeletePVar(playerid, "IsFrozen");
				TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Cancelaste la carga del camión, usa /cargarcamion para intentarlo de nuevo.");
			}
		}
		case DIALOG_LOADTRUCKL: // TRUCKER JOB LEGAL GOODS
		{
 			if(response)
			{
				if(listitem == 0) // Food & beverages
				{
					new route = Random(1, 4);
    				if(route == 1)
					{
    					SetPVarInt(playerid, "TruckDeliver", 1);
    				}
    				if(route == 2)
					{
    					SetPVarInt(playerid, "TruckDeliver", 2);
    				}
    				if(route == 3)
					{
    					SetPVarInt(playerid, "TruckDeliver", 3);
    				}
    				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con comida y bebidas.");
				}
				if(listitem == 1) // Clothing
				{
					new route = Random(1, 4);
    				if(route == 1)
					{
    					SetPVarInt(playerid, "TruckDeliver", 4);
    				}
    				if(route == 2)
					{
    					SetPVarInt(playerid, "TruckDeliver", 5);
    				}
    				if(route == 3)
					{
    					SetPVarInt(playerid, "TruckDeliver", 6);
    				}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con ropa y calzado.");
				}
				if(listitem == 2) // Materials
				{
					SetPVarInt(playerid, "TruckDeliver", 7);
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con materiales.");
				}
				if(listitem == 3) // 24/7 Items
				{
					new route = Random(1, 4);
    				if(route == 1)
					{
    					SetPVarInt(playerid, "TruckDeliver", 8);
    				}
    				if(route == 2)
					{
    					SetPVarInt(playerid, "TruckDeliver", 9);
    				}
    				if(route == 3)
					{
    					SetPVarInt(playerid, "TruckDeliver", 10);
    				}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con artículos del 24/7.");
				}
  				LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadTruckBar[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
				SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
			}
			else
			{
		    	DeletePVar(playerid, "IsFrozen");
				TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has cancelado la carga de los camiones, usa /cargarcamion para intentarlo de nuevo.");
			}
		}
		case DIALOG_LOADTRUCKI: // TRUCKER JOB ILLEGAL GOODS
		{
 			if(response)
			{
		    	new level = Info[playerid][pTruckSkill];
				if(listitem == 0) // Weapons
				{
					if(level >= 0 && level <= 50)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 11); // Bonus: 9mm
					}
					else if(level >= 51 && level <= 100)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 12); // Bonus: MP5
					}
					else if(level >= 101 && level <= 200)
					{
                		SetPVarInt(playerid, "TruckDeliver", 13); // Bonus: Deagle
					}
					else if(level >= 201 && level <= 400)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 14); // Bonus: AK-47
					}
					else if(level >= 401)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 15); // Bonus: Ak-47 or M4
					}
    				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con armas.");
				}
				if(listitem == 1) // Drugs
				{
					if(level >= 0 && level <= 50)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 16); // Bonus: 10 pot, 5 crack
					}
					else if(level >= 51 && level <= 100)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 17); // Bonus: 20 pot, 10 crack
					}
					else if(level >= 101 && level <= 200)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 18); // Bonus: 30 pot, 15 crack
					}
					else if(level >= 201 && level <= 400)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 19); // Bonus: 40 pot, 20 crack
					}
					else if(level >= 401)
					{
                   		SetPVarInt(playerid, "TruckDeliver", 20); // Bonus: 50 pot, 25 crack
					}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espere un momento mientras el camión está siendo cargado con drogas.");
				}
				if(listitem == 2) // Illegal materials
				{
					if(level >= 0 && level <= 50)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 21); // Bonus: 100 materials
					}
					else if(level >= 51 && level <= 100)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 22); // Bonus: 300 materials
					}
					else if(level >= 101 && level <= 200)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 23); // Bonus: 750 materials
					}
					else if(level >= 201 && level <= 400)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 24); // Bonus: 1500 materials
					}
					else if(level >= 401)
					{
                    	SetPVarInt(playerid, "TruckDeliver", 25); // Bonus: 2500 materials
					}
                	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Por favor, espera un momento mientras el camión está siendo cargado con mercancía ilegal.");
				}
  				LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadTruckBar[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
				SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
			}
			else
			{
		    	DeletePVar(playerid, "IsFrozen");
				TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has cancelado la carga de los camiones, usa /cargarcamion para intentarlo de nuevo.");
			}
		}
		case DIALOG_HITMAN:
		{
 	    	if(response == 1)
 	    	{
 	        	switch(listitem)
 	        	{
 	            	case 0:
 	            	{
                        if(GetPlayerCash(playerid) < 1500)
						{
		    				return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero suficiente!");
						}
 	                	GivePlayerValidWeapon(playerid, 4);
 	                	GivePlayerValidWeapon(playerid, 23);
 	                	GivePlayerCash(playerid, -1500);
 	            	}
  	            	case 1:
 	            	{
                        if(GetPlayerCash(playerid) < 250)
						{
		    				return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero suficiente!");
						}
               	    	GivePlayerValidWeapon(playerid, 34);
               	    	GivePlayerCash(playerid, -250);
 	            	}
  	            	case 2:
  	            	{
                    	SafeDialogEx(playerid, DIALOG_HIT, DIALOG_STYLE_INPUT, "{00F70C}Disfraz", "{78F700}Escribe el ID del que desees\n{FFFFFF}Skin's libres para Hitman's.\nTIP <1 - 299>\n", "Ok", "Salir");
  	            	}
				}
			}
		}
	    case DIALOG_HIT:
 	  	{
 	    	if(response == 1)
 	    	{
 	        	if(strval(inputtext) < 1 || strval(inputtext) > 311) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Debes de escoger una id de skin entre 1 y 311.");
				Info[playerid][pChar] = strval(inputtext);
                SetPlayerSkin(playerid, Info[playerid][pChar]);
		    	return 1;
	    	}
		}
		case DIALOG_ESTADO:
		{
			if(response)
			{
  				switch(listitem)
	        	{
	            	case 0:
	            	{
	                    ShowPlayerDialog(playerid,DIALOG_REG_ESTADO,DIALOG_STYLE_INPUT,"{FFFFFF}Escribe tu estado","{FFFFFF}Como máximo puedes escribir 17 carácteres","Aceptar","Cancelar");
    	         	}
					case 1:
					{
					    if(EstadoON[playerid] == 0)
						{
							Delete3DTextLabel(Estado[playerid]);
							Estado[playerid] = Create3DTextLabel(Info[playerid][pEstadoX], 0x00A5AAFF, 1.0, 1.0, 1.0, 15.0, 0,1);
							Attach3DTextLabelToPlayer(Estado[playerid], playerid, 0.0, 0.0, 0.5);
							EstadoON[playerid] = 1;
							DialogoEstado(playerid);
						}
						else if(EstadoON[playerid] == 1)
						{
							Delete3DTextLabel(Estado[playerid]);
							EstadoON[playerid] = 0;
							DialogoEstado(playerid);
						}
					}
				}
			}
		}
		case DIALOG_REG_ESTADO:
		{
			if(response)
			{
        	    if(!isnumeric(inputtext) && strlen(inputtext) < 18 && strlen(inputtext) > 1 && strfind(inputtext, "=", true) == -1 && strfind(inputtext, "\n", true) == -1)
				{
					strmid(Info[playerid][pEstadoX], inputtext, 0, strlen(inputtext), 20);
					DialogoEstado(playerid);
				}
				else
				{
				    //strmid(Info[playerid][pEstadoX], "Ninguno", 0, strlen("Ninguno"), 20);
					ShowPlayerDialog(playerid,DIALOG_REG_ESTADO,DIALOG_STYLE_INPUT,"{FFFFFF}Formato Inválido","{FFFFFF}Has insertado un formato inválido. Límite 18 carácteres prohibido usar números.\n Ejemplo: Triste, -Tatuaje en el mano derecha-","Aceptar","Cancelar");
				}
	        }
    	}
		case CPASS:
		{
		    if( strlen( inputtext ) > 12 )
		    {
		        SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes cambiar una password a más de 12 carácteres." );
		    }
		    else
		    {
		        if( strlen( inputtext ) >= 1 )
		        {
		            if(!response) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No has cambiado tu contraseña." ); }
		            else
		            {
			            new String[ 84 ];
	    				new INI:File = INI_Open(UserPath(playerid));
	    				INI_SetTag(File,"data");
     					INI_WriteInt(File,"Password",udb_hash(inputtext));
						INI_Close(File);
						format( String, sizeof( String ), "%s (IP: %s) a cambiado su contraseña.", GetPlayerNameEx(playerid), Info[playerid][pIP]);
						Log("LOGS/password.log", String);
			            format( String, sizeof( String ), "Has cambiado tu contraseña a: '%s'", inputtext );
			            SendClientMessageEx( playerid, COLOR_YELLOW, String );
		            }
		        }
		        else SendClientMessageEx( playerid, COLOR_WHITE, "No has cambiado tu contraseña." );
		    }
		}
		case JOBHELPMENU:
		{
	 		if(response)
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no estar en otra función usando checkpoints.");
			    switch(listitem)
			    {
					case 1: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Bartender", "Información:\nEste trabajo puedes usarlo vendiendo bebidas a otros usuarios.\nEste trabajo es legal y el más buscado ultimamente.\n\nComandos:\n/venderbebida\nLocalización: En Los Bares De Las Ciudades Los Santos y San Fierro, en un icono.", "OK", "");
					case 2: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Vendedor de Moviles", "Información:\nSe basa en vender celulares a otros usuarios.\nEste trabajo es legal.\n\nComandos:\n/vendertelefono\nLocalización: Ciudad Los Santos en un icono.", "OK", "");
					case 3: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Chofer de Viajes", "Información:\nEste trabajo se basa en hacer viajes desde Los Santos a San Fierro\nEste trabajo es legal.\n\nComandos:\n/choferduty\n/carnet\n/precioviaje - /rutabus\nLocalización: Ciudades Los Santos y San Fierro, en un icono (Amarillo i).", "OK", "");
					case 4: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Pizzero", "Información:\nEste trabajo puedes usarlo repartiendo pizzas por Los Santos.\nEste trabajo es legal y muy rentable.\n\nComandos:\n/tomarpizzals\nLocalización: Ciudades Los Santos y San Fierro, en un icono (Amarillo i).", "OK", "");
					case 5: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Vendedor de Drogas","Información:\nEste trabajo es ilegal debes comprar drogas en las casas para después venderlas al precio que desees.\nComandos:\n/vendercrack\n/venderhierba\n/comprarcrack\n/comprarhierba\n/plantar - /checkplanta - /sacarplanta\n/habilidad\nLocalización: Desconocida, debes de buscar mas información.", "OK", "");
					case 6: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Camionero", "Información:\nEste trabajo se basa en usar camiones y entregar paquetes a distintos puntos de SA.\n\nTIP: Tienes que cojer el camión e ir al punto de carga.\n*Cada nivel que subas te irán pagando más.\n\nEste trabajo es legal y muy cansado pero muy rentable.\n\nComandos:\n/cargarcamion\n/robarcamion\n/habilidad\nLocalización: Ciudades Los Santos y San Fierro, en un icono (Amarillo i).", "OK", "");
                    case 7: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Vendedor de Armas","Información:\nEste trabajo es ilegal debes conseguir clientes para venderles armas.\nEs necesario obtener materiales para fabricarlas, en algún punto de matariales usa /materiales.\nComandos:\n/creararma\n/materiales\n/habilidad\nLocalización: Desconocida, debes buscar mas información.", "OK", "");
                    case 8: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Taxista", "Información:\nEste trabajo es legal debes esperar llamadas de personas que te necesiten, para llevarlas a un destino.\nComandos:\n/tarifa\nLocalización: Ciudades Los Santos y San Fierro - En un icono. (Amarillo i)\n\n\nTIP: Recuerda que puedes sacar tu licencia de taxista y ya no será necesario trabajar en taxis, puedes hacarlo con un auto particular.","OK", "");
					case 9: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Granjero", "Información:\nEste trabajo es legal debes cosechar en la granja para después vender los productos a los 24/7.\nComandos:\n/cosechar\n/dcosechar\n/vendercosecha\nLocalización: Ciudades Los Santos y San Fierro - En un icono. (Amarillo i)","OK", "");
					case 10: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Traficante de drogas", "Información:\nEste trabajo es ilegal debes de transportar las drogas a la ciudad Los Santos.\nComandos:\n/paquete\nLocalización: Desconocida, debes de buscar mas información","OK", "");
					case 11: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Vendedor de chalecos", "Información:\nEste trabajo es legal debes de ofrecer chalecos antibalas.\nComandos:\n/venderchaleco\nLocalización: Ciudad Los Santos en un icono.(Amarillo i)","OK", "");
					case 12: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Artesano", "Información:\nEste trabajo es legal podras crear varias herramientas con este trabajo.\nComandos:\n/crear\nLocalización: Pueblo Dillimore en las afueras de Los Santos(Amarillo i)","OK", "");
					case 13: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Jardinero", "Información:\nEste trabajo es legal debes de cuidar las zonas verdes de la ciudad.\nComandos:\n/recogercesped\nLocalización: Ciudad Los Santos en un icono.(Amarillo i)","OK", "");
					case 14: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Heladero", "Información:\nEste trabajo es legal debes de vender helados por toda la ciudad.\nComandos:\n/hduty /venderhelado\nLocalización: Ciudad Los Santos en un icono.(Amarillo i)","OK", "");
					case 15: SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{00F70C}Leñador", "Información:\nEste trabajo es legal debes de talar arboles en las afueras de la ciudad.\nLocalización: En las afueras de la ciudad de Los Santos(Amarillo i)","OK", "");
				}
			}
		}
	/////////////////////////////////////////////////////////// SISTEMA DE NEGOCIOS ///////////////////////////////////////////////////////////////////
 	case DIALOG_MYBUSINESS: if(response)
	{
	    switch(listitem)
	    {
			case 0:
			{
			    new x = Info[playerid][pPbizzkey];
		    	format(string, sizeof(string), "[Negocio] - Disponible: %d", NegociosVariables[x][bGanancias]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_RET,DIALOG_STYLE_INPUT,string,"Ingresa la cantidad que deseas retirar","Retirar","Atrás");
			}
			case 1:
			{
			    new x = Info[playerid][pPbizzkey];
		    	format(string, sizeof(string), "[Negocio] - Disponible: $%d", NegociosVariables[x][bGanancias]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_DEP,DIALOG_STYLE_INPUT,string,"Ingresa la cantidad que deseas depositar","Depositar","Atrás");
			}
			case 2:
			{
			    new x = Info[playerid][pPbizzkey];
		    	format(string, sizeof(string), "Tiene la opción de crear un mensaje de bienvenida a su negocio:\n{F81414}%s", NegociosVariables[x][bInfo]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_NAME,DIALOG_STYLE_INPUT,"[Negocio] - Mensaje de bienvenida",string,"Aceptar","Salir");

			}
			case 3:
			{
			    new x = Info[playerid][pPbizzkey];
		    	format(string, sizeof(string), "[Negocio] - Stock de productos disponibles: %d", NegociosVariables[x][bStock]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_STO,DIALOG_STYLE_MSGBOX,"Stock",string,"Atrás","Salir");
			}
	    }
	}
	case DIALOG_MYBUSINESS_RET:
	{
	    new money = strval(inputtext);
		new id = Info[playerid][pPbizzkey];
		if(response)
		{
		    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado nada.");
	        if (isnumeric(inputtext))
	        {
	            if(NegociosVariables[id][bGanancias] < money) return SendClientMessage(playerid, COLOR_GREY, "* No hay la cantidad de dinero que ingresaste.");
				Earn(playerid, money);
				NegociosVariables[id][bGanancias] -= money;
				format(string, sizeof(string), "* Retiraste: $%d - Dinero disponible: $%d",money,NegociosVariables[id][bGanancias]);
				SendClientMessageEx(playerid, -1, string);
				SaveVarBusiness(1,id, "Vault",NegociosVariables[id][bGanancias]);
				printf("[Negocio ID:%d] %d", id, NegociosVariables[id][bGanancias]);
				//SaveVarPlayer(1,playerid, "Money", GetPVarInt(playerid, "Cash") );
			}
			else return SendClientMessageEx(playerid, -1, "* Sólo puedes ingresar números.");
		}
		else
		{
		    new strings[128];
		    format(strings, sizeof(strings), "[Negocio] - Ganancias totales: %d dólares", NegociosVariables[id][bGanancias]);
		    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,strings,"* Retirar Dinero\n* Depositar Dinero\n* Mensaje al Cliente\n* Revisar Stock", "Seleccionar", "Salir");
		}
	}
	case DIALOG_MYBUSINESS_DEP:
	{
	    new money = strval(inputtext);
		new id = Info[playerid][pPbizzkey];
		if(response)
		{
		    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado nada.");
	        if(isnumeric(inputtext))
	        {
	            if(money > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_GREY, "* No tienes la cantidad de dinero que ingresaste.");
				Bought(playerid, money);
				NegociosVariables[id][bGanancias] += money;
				format(string, sizeof(string), "* Depositaste: $%d - Dinero disponible: $%d",money,NegociosVariables[id][bGanancias]);
				SendClientMessageEx(playerid, -1, string);
				SaveVarBusiness(1,id, "Vault",NegociosVariables[id][bGanancias]);
				printf("[Negocio ID:%d] %d", id, NegociosVariables[id][bGanancias]);
				//SaveVarPlayer(1,playerid, "Money", GetPVarInt(playerid, "Cash") );
			}
			else return SendClientMessageEx(playerid, -1, "* Sólo puedes ingresar números.");
		}
		else
		{
		    new strings[128];
		    format(strings, sizeof(strings), "[Negocio] - Ganancias totales: %d dólares", NegociosVariables[id][bGanancias]);
		    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,strings,"* Retirar Dinero\n* Depositar Dinero\n* Mensaje al Cliente\n* Revisar Stock", "Seleccionar", "Salir");
		}
	}
	case DIALOG_MYBUSINESS_NAME:
	{
		if(response)
		{
			new idx = Info[playerid][pPbizzkey];
		    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado ningún texto.");
		    if(strlen(inputtext) < 96 && strlen(inputtext) > 1 && strfind(inputtext, "\n", true) == -1)
		    {
				strmid(NegociosVariables[idx][bInfo], inputtext, 0, strlen(inputtext), 96);
				new stringbizz[128];
				format(stringbizz, sizeof(stringbizz), "Mensaje de bienvenida: %s",NegociosVariables[idx][bInfo]);
				SendClientMessageEx(playerid, COLOR_WHITE, stringbizz);
				saveNegocios(idx);
				printf("[Negocio ID:%d] %s", idx, stringbizz);
				
   			}
   			else SendClientMessage(playerid, COLOR_GREY, "* Texto máximo 96 carácteres. Spam detected en logs.");
		}
		else
		{
		    new idx = Info[playerid][pPbizzkey];
		    new strings[128];
		    format(strings, sizeof(strings), "[Negocio] - Ganancias totales: %d dólares", NegociosVariables[idx][bGanancias]);
		    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,strings,"* Retirar Dinero\n* Depositar Dinero\n* Mensaje al Cliente\n* Revisar Stock", "Seleccionar", "Salir");
		}
	}
	case DIALOG_MYBUSINESS_STO:
	{
	    new id = getPlayerBusinessID(playerid);
		if(response)
		{
		    new strings[128];
		    format(strings, sizeof(strings), "[Negocio] - Ganancias totales: %d dólares", NegociosVariables[id][bGanancias]);
		    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,strings,"* Retirar Dinero\n* Depositar Dinero\n* Mensaje al Cliente\n* Revisar Stock", "Seleccionar", "Salir");
		}
		else { return 1; }
	}
 case DIALOG_MYBUSINESS_PSTO:
	{
		if(response)
		{
		    //new stocke = strval(inputtext);
		    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado nada.");
		    if(strlen(inputtext) > 1001) return SendClientMessage(playerid, COLOR_GREY, "* No puedes comprar mas de 1.000 productos.");
	    	if(isnumeric(inputtext))
	    	{
		    	/*new string[84],
					IGV = 18,
					value = 4,
					total;
		    	total = (stocke * value) + 18;
		    	SetPVarInt(playerid,"BusinessStock",total);
		    	SetPVarInt(playerid,"Stock",stocke);
		    	format(string, sizeof(string), "Pedido de productos:\n\nCosto: %d\nImpuesto: %d\n\nTOTAL: %d.",stocke*value,IGV,total);
		    	ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_PSTO2,DIALOG_STYLE_MSGBOX,"Factura:",string, "Pagar", "Salir");*/
		    	SendClientMessageEx(playerid, -1, "Los productos de los negocios no están todavía ajustados, serán publicados en la 5.0. Estamos trabajando en ello.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY,"* Sólo puedes ingresar números.");
		}
		else { return 1; }
	}
	/*case DIALOG_MYBUSINESS_PSTO2:
	{
		if(response)
		{
		    new newtotal = GetPVarInt(playerid,"BusinessStock"), newstock = GetPVarInt(playerid,"Stock");
		    if(newtotal > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_GREY,"* No tienes el dinero que necesitas en tu mano, sácalo de la caja fuerte de tu negocio o del banco.");
            Bought(playerid,newtotal);
            Tax += newtotal;
			format(szMessage, sizeof(szMessage), "* Hiciste la compra de stock para tu negocio de %d por $%d",newstock,newtotal);
			SendClientMessageEx(playerid, -1, szMessage);
			new id = getPlayerBusinessID(playerid);
			businessVariables[id][bStock] += newstock;
			SaveVarBusiness(1,id, "Stock",businessVariables[id][bStock]);
			SendClientMessageEx(playerid, -1, "Los productos de los negocios no están todavía ajustados, serán publicados en la 5.0. Estamos trabajando en ello.");
			return 1;
		}
		else { return 1; }
	}*/
 //////////////////////////////// SISTEMA DE CASAS ////////////////////////////////////
	case MENU_CASA:
	{
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
					SafeDialogEx(playerid, MENU_CASA2, DIALOG_STYLE_LIST, "Dinero de la casa", "* Retirar dinero\n* Guardar dinero", "Aceptar", "Cancelar");
				}
				/*case 1:
				{
					SafeDialogEx(playerid, MENU_CASA3, DIALOG_STYLE_LIST, "Editar muebles", "* Acomodar muebles\n* Colocar un nuevo mueble\n* Eliminar mueble\n* Esconder mueble", "Aceptar", "Cancelar");
				}*/

			}
		}
		else
		{

		}
	}
    case HOUSE_OPTIONS:
	if(response)
    {
        switch(listitem)
        {
            case 0:
            {
                ShowPlayerDialog(playerid,HOUSE_DINERO,DIALOG_STYLE_LIST,"{BE81F7}Seleccionar:","{BE81F7}» {FFFFFF} Retirar dinero\n{BE81F7}» {FFFFFF} Depositar dinero","Ingresar","Atrás");
            }
            case 1:
            {
                SendClientMessageEx(playerid, COLOR_GREY, "[SISTEMA DE ARMARIO V.3] Comando en uso: /armario [Opción].");
                SendClientMessageEx(playerid, COLOR_GREY, "Para guardar un arma, use /armario guardar, para sacar, use /armario sacar.");
            }
            case 2:
            {
				new weaponsinlocker;
				for(new s = 0; s < 5; s++){if(ProInfo[Info[playerid][pPhousekeyX]][hW][s] != 0){weaponsinlocker++;}}
                format(sDialog, sizeof(sDialog), "{BE81F7}» {FFFFFF}Materiales {BE81F7}(-)\n{BE81F7}» {FFFFFF}Hierba {BE81F7}(-)\n{BE81F7}» {FFFFFF}Crack {BE81F7}(-)\n{BE81F7}» {FFFFFF}Armas {BE81F7}(%d/5)",weaponsinlocker);
                ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,"{BE81F7}Menú General:",sDialog,"Ingresar","Atrás");
            }
            case 3: ShowPlayerDialog(playerid,DIALOG_MENU_FURNITURE,DIALOG_STYLE_LIST,"{FFFFFF}Opciones:","{BE81F7}» {FFFFFF}Seleccionar Muebles\n{BE81F7}» {FFFFFF}Colocar/Editar Muebles\n{BE81F7}» {FFFFFF}Vender Muebles","Ingresar","Atrás");
            case 4:
            {
            	if(GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekeyX])
				{
					new slot1casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero1];
					new slot2casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero2];
					new slot3casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero3];
					new slot4casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero4];
					new slot5casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero5];
					new slot6casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero6];
					new slot7casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero7];
					new slot8casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero8];
					new slot9casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero9];
					new slot10casa = ProInfo[Info[playerid][pPhousekeyX]][hSlotRopero10];
					//new string[280];
					format(string, sizeof(string), "1 - Skin: %d\n2 - Skin: %d\n3 - Skin: %d\n4 - Skin: %d\n5 - Skin: %d\n6 - Skin: %d\n7 - Skin: %d\n8 - Skin: %d\n9 - Skin: %d\n10 - Skin: %d", slot1casa, slot2casa, slot3casa, slot4casa, slot5casa, slot6casa, slot7casa, slot8casa, slot9casa, slot10casa);
					ShowPlayerDialog(playerid, DIALOG_ROPEROMENU, DIALOG_STYLE_LIST, "Ropero", string, "Aceptar", "Cancelar");
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "* No estás dentro de tu casa.");
            }
        }
    }
    case DIALOG_MENU_FURNITURE:
    {
        if(!response) return ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"Selecciona:","» Dinero\n» Items\n» Muebles","Seleccionar","Atrás");
        switch(listitem)
        {
            case 0:
            {
				SelectObject(playerid);
				SendClientMessage(playerid, -1,"Ahora puedes seleccionar el objeto con el cursor.");
				SendClientMessageEx(playerid, COLOR_GENERAL, "TIP: Si no puedes seleccionar el objeto, selecciónalo desde el menú de tu casa. (Ver Objetos)");
            }
            case 1:
            {
				new hID = getPlayerHouseID(playerid),bigstring[2048];
				for(new i = 0; i < MAX_FURNITURE; i++)
				{
					if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID) { format(string, 64, "%d. Vacío", i+1); }
					else
					{
						if(HouseInfo[hID][FPosX][i] != 0.0) format(string, 64, "%d. ID: %d (en la casa)", i+1, HouseInfo[hID][FModel][i]); // Edit
						else format(string, 64, "%d. ID: %d (guardado)", i+1, HouseInfo[hID][FModel][i]); // Place
					}
					format(bigstring, sizeof(bigstring), "%s%s\n", bigstring, string);
				}
				ShowPlayerDialog(playerid, DIALOG_EDIT_FURNITURE, DIALOG_STYLE_LIST, "Selecciona (Poner o Editar)", bigstring, "Editar/Poner", "Cancelar");
			}
			case 2:
			{
				new bigstring[2048];
				new hID = getPlayerHouseID(playerid);
				for(new i = 0; i < MAX_FURNITURE; i++)
				{
					if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID){format(string, 64, "%d. Vacío", i+1);}
					else{format(string, 64, "%d. ID: %d", i+1,HouseInfo[hID][FModel][i]);}
					format(bigstring, sizeof(bigstring), "%s%s\n", bigstring, string);
				}
				ShowPlayerDialog(playerid, DIALOG_SELL_FURNITURE, DIALOG_STYLE_LIST, "{33AA33}Selecciona un objeto para venderlo.", bigstring, "Vender", "Cancelar");
				return 1;
			}
		}
	}
	case DIALOG_EDIT_FURNITURE:
	{
		if(!response) return 1;
		new i = listitem;
		new hID = getPlayerHouseID(playerid);
		if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "* Objeto seleccionado inválido.");
		if(HouseInfo[hID][FPosX][i] != 0.0)
		{
			if(!IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) return SendClientMessageEx(playerid, COLOR_GREY, "* Objeto seleccionado inválido.");
			EditDynamicObject(playerid, HouseInfo[hID][FurnitureObj][i]);
		}
		else
		{
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			HouseInfo[hID][FPosX][i] = X; HouseInfo[hID][FPosY][i] = Y; HouseInfo[hID][FPosZ][i] = Z;
			HouseInfo[hID][FRotX][i] = 0; HouseInfo[hID][FRotY][i] = 0; HouseInfo[hID][FRotZ][i] = 0;
			HouseInfo[hID][FurnitureObj][i] = CreateDynamicObject(HouseInfo[hID][FModel][i], HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i], HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i], hID+6000, HouseInfo[hID][hHInteriorWorld], -1, 50.0);
			SaveFurniturePosition(hID, i);
		}
		return 1;
	}
	case DIALOG_BUY_FURNITURE:
	{
        new house = Info[playerid][pPhousekeyX];
		if(house == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "* No eres dueño de una casa.");
		if(!response) return 1;
		switch(listitem)
		{
		    case 0: ShowModelSelectionMenu	(playerid, DormitorioFur, 	"Dormitorio", 		0x000000FF, COLOR_GREY, 0xFFF6BDFF);
		    case 1: ShowModelSelectionMenu	(playerid, ComedorFur, 		"Comedor", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 2: ShowModelSelectionMenu	(playerid, BanoFur, 		"Tocador", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 3: ShowModelSelectionMenu	(playerid, LobbyFur, 		"Lobby", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 4: ShowModelSelectionMenu	(playerid, CocinaFur, 		"Cocina", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 5: ShowModelSelectionMenu	(playerid, ElectroFur, 		"Electro", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			case 6: ShowModelSelectionMenu	(playerid, ParedesFur, 		"Paredes", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			case 7: ShowModelSelectionMenu	(playerid, OtrosFur,        "Otros",            0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			default: SendClientMessageEx	(playerid, COLOR_GREY, 		"* En proceso.");
		}
		return 1;
	}
	case DIALOG_FURNITURE_BOUGHT: if(response) return ShowFurnitureMenu(playerid);

	case DIALOG_EDITOBJECT:
	{
		if(!response) return DeletePVar(playerid,"ObjetcIDFur");
		new hID = getPlayerHouseID(playerid);
		new i = GetPVarInt(playerid,"ObjetcIDFur");
		switch(listitem)
		{
		    case 0:
			{
    			EditDynamicObject(playerid, HouseInfo[hID][FurnitureObj][i]);
				DeletePVar(playerid,"ObjetcIDFur");
			}
			case 1:
		    {
				HouseInfo[hID][FPosX][i] = 0.0; HouseInfo[hID][FPosY][i] = 0.0; HouseInfo[hID][FPosZ][i] = 0.0;
				HouseInfo[hID][FRotX][i] = 0.0; HouseInfo[hID][FRotY][i] = 0.0; HouseInfo[hID][FRotZ][i] = 0.0;
				SaveFurniturePosition(hID, i);
				if(IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) DestroyDynamicObject(HouseInfo[hID][FurnitureObj][i]);
				DeletePVar(playerid,"ObjetcIDFur");
				SendClientMessageEx(playerid, -1, "Se ha guardado correctamente tu objeto.");
		    }
		    case 2:
		    {
		        new price = GetPricebyObject(HouseInfo[hID][FModel][i]);
				new money = price / 2, fname[42]; //cambiar
				GivePlayerCash(playerid, money);
				format(szMessage, 128, "{FFFFFF}Vendiste objeto id\"%d\"{FFFFFF} por %d$.", HouseInfo[hID][FModel][i], money);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				HouseInfo[hID][FModel][i] = INVALID_FURNITURE_ID;
				HouseInfo[hID][FPosX][i] = 0; HouseInfo[hID][FPosY][i] = 0; HouseInfo[hID][FPosZ][i] = 0;
				HouseInfo[hID][FRotX][i] = 0; HouseInfo[hID][FRotY][i] = 0; HouseInfo[hID][FRotZ][i] = 0;
				if(IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) DestroyDynamicObject(HouseInfo[hID][FurnitureObj][i]);
				HouseInfo[hID][FurnitureObj][i] = 0;
				HouseInfo[hID][FCount] -= 1;
				format(fname, 128, PROPIEDADES_FILE, hID);
				new key[24];
			    new INI:File = INI_Open(fname);
			    INI_SetTag(File,"PropiedadData");
				INI_WriteInt(File,"FCount", HouseInfo[hID][FCount]);
				format(key, 24, "FModel%d", i); INI_WriteInt(File, key, INVALID_FURNITURE_ID);
				INI_Close(File);
		        SaveFurniturePosition(hID, i);
		        DeletePVar(playerid,"ObjetcIDFur");
		    }
		}
	}
	case DIALOG_FURNITURE_KEEPSELL:
	{
		if(!response) return ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"Selecciona:","» Dinero\n» Items\n» Muebles","Seleccionar","Atrás");
		new bigstring[2048];
		new hID = getPlayerHouseID(playerid);
		for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID){format(string, 64, "%d. Vacío", i+1);}
			else{format(string, 64, "%d. ID: %d", i+1,HouseInfo[hID][FModel][i]);}
			format(bigstring, sizeof(bigstring), "%s%s\n", bigstring, string);
		}
		ShowPlayerDialog(playerid, DIALOG_SELL_FURNITURE, DIALOG_STYLE_LIST, "Selecciona un objeto para venderlo.", bigstring, "Vender", "Cancelar");
		return 1;
	}
	case DIALOG_SELL_FURNITURE:
	{
		if(!response) return 1;
		new i = listitem;
		new fname[128];
		new hID = getPlayerHouseID(playerid);
		if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "* Objeto seleccionado inválido.");
        new price = GetPricebyObject(HouseInfo[hID][FModel][i]);
		new money = price / 2; //cambiar
		GivePlayerCash(playerid, money);
		format(fname, 128, "{FFFFFF}Vendiste objeto id\"%d\"{FFFFFF} por %d$.", HouseInfo[hID][FModel][i], money);
		SendClientMessageEx(playerid, COLOR_WHITE, fname);
		HouseInfo[hID][FModel][i] = INVALID_FURNITURE_ID;
		HouseInfo[hID][FPosX][i] = 0; HouseInfo[hID][FPosY][i] = 0; HouseInfo[hID][FPosZ][i] = 0;
		HouseInfo[hID][FRotX][i] = 0; HouseInfo[hID][FRotY][i] = 0; HouseInfo[hID][FRotZ][i] = 0;
		if(IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) DestroyDynamicObject(HouseInfo[hID][FurnitureObj][i]);
		HouseInfo[hID][FurnitureObj][i] = 0;
		HouseInfo[hID][FCount] -= 1;
		format(fname, 128, PROPIEDADES_FILE, hID);
		new key[24];
	    new INI:File = INI_Open(fname);
	    INI_SetTag(File,"PropiedadData");
		INI_WriteInt(File,"FCount", HouseInfo[hID][FCount]);
		format(key, 24, "FModel%d", i); INI_WriteInt(File, key, INVALID_FURNITURE_ID);
		INI_Close(File);
        SaveFurniturePosition(hID, i);
        ShowPlayerDialog(playerid, DIALOG_FURNITURE_KEEPSELL, DIALOG_STYLE_MSGBOX, "Vender objetos", "Deseas seguir vendiendo tus objetos?", "Seguir", "Cancelar");
		return 1;
	}
    case	HOUSE_DINERO: if(response)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    format(sDialog, sizeof(sDialog), "Ingresa el monto que quieres retirar del baúl tu casa.\n\nTienes $%d.",HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney]);
                    ShowPlayerDialog(playerid,HOUSE_RETIRAR,DIALOG_STYLE_INPUT,"Ingresa monto:",sDialog,"Ingresar","Atrás");
                }
                case 1:
                {
				    format(sDialog, sizeof(sDialog), "Ingresa el monto que quieres depositar del baúl tu casa.\n\nTienes $%d.",HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney]);
                    ShowPlayerDialog(playerid,HOUSE_DEPOSITAR,DIALOG_STYLE_INPUT,"Ingresa monto:",sDialog,"Ingresar","Atrás");
                }
	        }
		}
	    else ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"Selecciona:","» Dinero\n» Items\n» Muebles","Seleccionar","Atrás");
    }
    case	HOUSE_RETIRAR:
    {
        if(response)
        {
            new amount = strval(inputtext);
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar menos de un dolar.");
			if(HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney] >= amount)
			{
			    HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney] -= amount;
				GivePlayerCash(playerid, amount);
				format(szMessage, sizeof(szMessage), "Retiraste $%d de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
    			SaveVarHouses(1,Info[playerid][pPhousekeyX], "SafeMoney",HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney]);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero en tu baúl para retirar.");
		}
		else ShowPlayerDialog(playerid,HOUSE_DINERO,DIALOG_STYLE_LIST,"Seleccionar:","»  Retirar dinero\n»  Depositar dinero","Ingresar","Atrás");
    }
    case	HOUSE_DEPOSITAR:
    {
        if(response)
        {
            new amount = strval(inputtext);
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar menos de un dolar.");
			if(GetPlayerCash(playerid) >= amount)
			{
			    HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney] += amount;
			    GivePlayerCash(playerid, -amount);
				format(szMessage, sizeof(szMessage), "Depositaste $%d en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "SafeMoney",HouseInfo[Info[playerid][pPhousekeyX]][hSafeMoney]);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para depositar.");
		}
		else ShowPlayerDialog(playerid,HOUSE_DINERO,DIALOG_STYLE_LIST,"Seleccionar:","»  Retirar dinero\n»  Depositar dinero","Ingresar","Atrás");
    }
    case	HOUSE_ITEM:
    {
        if(response)
        {
            new tittlestr[64];
        	switch(listitem)
        	{
        	    case 0:
        	    {
        	        format(tittlestr, sizeof(tittlestr), "Materiales (%d)",HouseInfo[Info[playerid][pPhousekeyX]][hMaterials]);
        	        ShowPlayerDialog(playerid,HOUSE_ITEM_MAT,DIALOG_STYLE_LIST,tittlestr,"» Depositar\n» Retirar",">","Atrás");
        	    }
        	    case 1:
        	    {
        	        format(tittlestr, sizeof(tittlestr), "Hierba (%d)",HouseInfo[Info[playerid][pPhousekeyX]][hPot]);
                    ShowPlayerDialog(playerid,HOUSE_ITEM_POT,DIALOG_STYLE_LIST,tittlestr,"» Depositar\n» Retirar",">","Atrás");
				}
        	    case 2:
        	    {
        	        format(tittlestr, sizeof(tittlestr), "Crack (%d)",HouseInfo[Info[playerid][pPhousekeyX]][hCrack]);
                    ShowPlayerDialog(playerid,HOUSE_ITEM_CRACK,DIALOG_STYLE_LIST,tittlestr,"» Depositar\n» Retirar",">","Atrás");
				}
				case 3:
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Puedes depositar armas en tu baúl con el comando /garma [Slot]. (No disponible)");
				    SendClientMessageEx(playerid, COLOR_WHITE, "Puedes depositar armas en tu baúl con el comando /sarma [Slot]. (No disponible)");
				}
        	}
        }
		else ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"Selecciona:","» Dinero\n» Items\n» Muebles","Seleccionar","Atrás");
    }
    case    HOUSE_ITEM_MAT:
    {
        if(response)
        {
        	switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,HOUSE_ITEM_MAT_D,DIALOG_STYLE_INPUT,"Depositar Materiales:","Ingresa el monto de materiales que depositarás en el baúl de tu casa.","Ingresar","Atrás");
				case 1: ShowPlayerDialog(playerid,HOUSE_ITEM_MAT_R,DIALOG_STYLE_INPUT,"Retirar Materiales:","Ingresa el monto de materiales que retirarás del baúl de tu casa.","Ingresar","Atrás");
        	}
        }
        else
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++){if(HouseInfo[Info[playerid][pPhousekeyX]][hWeapons][s] != 0){weaponsinlocker++;}}
			format(sDialog, sizeof(sDialog), "» Materiales (%d)\n» Hierba (%d)\n» Crack (%d)\n» Armas (%d/5)", HouseInfo[Info[playerid][pPhousekeyX]][hMaterials],HouseInfo[Info[playerid][pPhousekeyX]][hPot],HouseInfo[Info[playerid][pPhousekeyX]][hCrack],weaponsinlocker);
            ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,"Menú General:",sDialog,"Ingresar","Atrás");
        }
    }
    case    HOUSE_ITEM_POT:
    {
        if(response)
        {
        	switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,HOUSE_ITEM_POT_D,DIALOG_STYLE_INPUT,"Depositar Hierba:","Ingresa el monto de hierba que depositarás en el baúl de tu casa.","Ingresar","Atrás");
				case 1: ShowPlayerDialog(playerid,HOUSE_ITEM_POT_R,DIALOG_STYLE_INPUT,"Retirar Hierba:","Ingresa el monto de hierba que retirarás del baúl de tu casa.","Ingresar","Atrás");
        	}
        }
        else
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++){if(HouseInfo[Info[playerid][pPhousekeyX]][hWeapons][s] != 0){weaponsinlocker++;}}
			format(sDialog, sizeof(sDialog), "» Materiales (%d)\n» Hierba (%d)\n» Crack (%d)\n» Armas (%d/5)", HouseInfo[Info[playerid][pPhousekeyX]][hMaterials],HouseInfo[Info[playerid][pPhousekeyX]][hPot],HouseInfo[Info[playerid][pPhousekeyX]][hCrack],weaponsinlocker);
            ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,"Menú General:",sDialog,"Ingresar","Atrás");
        }
    }
    case    HOUSE_ITEM_CRACK:
    {
        if(response)
        {
        	switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,HOUSE_ITEM_CRACK_D,DIALOG_STYLE_INPUT,"Depositar Crack:","Ingresa el monto de crack que depositarás en el baúl de tu casa.","Ingresar","Atrás");
				case 1: ShowPlayerDialog(playerid,HOUSE_ITEM_CRACK_R,DIALOG_STYLE_INPUT,"Retirar Crack:","Ingresa el monto de crack que retirarás del baúl de tu casa.","Ingresar","Atrás");
        	}
        }
        else
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++){if(HouseInfo[Info[playerid][pPhousekeyX]][hWeapons][s] != 0){weaponsinlocker++;}}
			format(sDialog, sizeof(sDialog), "» Materiales (%d)\n» Hierba (%d)\n» Crack (%d)\n» Armas (%d/5)", HouseInfo[Info[playerid][pPhousekeyX]][hMaterials],HouseInfo[Info[playerid][pPhousekeyX]][hPot],HouseInfo[Info[playerid][pPhousekeyX]][hCrack],weaponsinlocker);
            ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,"Menú General:",sDialog,"Ingresar","Atrás");
        }
    }
    case    HOUSE_ITEM_MAT_D:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar menos de un material.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if( Info[playerid][pMats] >= amount )
			{
				HouseInfo[Info[playerid][pPhousekeyX]][hMaterials] += amount;
				Info[playerid][pMats] -= amount;
				format(szMessage, sizeof(szMessage), "Depositaste %d materiales en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "Materials",HouseInfo[Info[playerid][pPhousekeyX]][hMaterials]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes materiales para depositar.");
		}
    }
    case    HOUSE_ITEM_MAT_R:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar menos de un material.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(HouseInfo[Info[playerid][pPhousekeyX]][hMaterials] >= amount)
			{
				HouseInfo[Info[playerid][pPhousekeyX]][hMaterials]-=amount;
				Info[playerid][pMats] += amount;
				format(szMessage, sizeof(szMessage), "Retiraste %d materiales de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "Materials",HouseInfo[Info[playerid][pPhousekeyX]][hMaterials]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes materiales para retirar.");
		}
    }
    case    HOUSE_ITEM_POT_D:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(Info[playerid][pPot] >= amount)
			{
			    if(HouseInfo[Info[playerid][pPhousekeyX]][hPot] > 20000) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes más de 20000 de hierba en tu casa, no puedes dejar más.");
				HouseInfo[Info[playerid][pPhousekeyX]][hPot]+=amount;
				Info[playerid][pPot] -= amount;
				format(szMessage, sizeof(szMessage), "Depositaste %d de hierba en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "Pot",HouseInfo[Info[playerid][pPhousekeyX]][hPot]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente hierba para depositar.");
		}
    }
    case    HOUSE_ITEM_POT_R:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(HouseInfo[Info[playerid][pPhousekeyX]][hPot] >= amount)
			{
			    if(Info[playerid][pPot] > 49) return SendClientMessageEx(playerid, COLOR_GREY,"* Ya tienes 50 de hierba no puedes llevar más.");
				HouseInfo[Info[playerid][pPhousekeyX]][hPot]-=amount;
				Info[playerid][pPot] += amount;
				format(szMessage, sizeof(szMessage), "Retiraste %d de hierba de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "Pot",HouseInfo[Info[playerid][pPhousekeyX]][hPot]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente hierba para retirar.");
		}
    }
    case	HOUSE_ITEM_CRACK_D:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if( Info[playerid][pCrack] >= amount )
			{
			    if(HouseInfo[Info[playerid][pPhousekeyX]][hCrack] > 19999) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes más de 30000 de crack en tu casa, no puedes dejar más.");
				HouseInfo[Info[playerid][pPhousekeyX]][hCrack]+=amount;
				Info[playerid][pCrack] -= amount;
				format(szMessage, sizeof(szMessage), "Depositaste %d de crack en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "Crack",HouseInfo[Info[playerid][pPhousekeyX]][hCrack]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente crack para depositar.");
		}
    }
    case    HOUSE_ITEM_CRACK_R:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(HouseInfo[Info[playerid][pPhousekeyX]][hCrack] >= amount)
			{
			    if(Info[playerid][pCrack] > 25) return SendClientMessageEx(playerid, COLOR_GREY,"* Ya tienes 25 de crack no puedes llevar más.");
				HouseInfo[Info[playerid][pPhousekeyX]][hCrack]-=amount;
				Info[playerid][pCrack] += amount;
				format(szMessage, sizeof(szMessage), "Retiraste %d de crack de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekeyX], "Crack",HouseInfo[Info[playerid][pPhousekeyX]][hCrack]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente crack para retirar.");
		}
	}
	/*case MENU_CASA3:
	{
	    new stringf[350];
    	new house = Info[playerid][pPhousekey];
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
				if(house != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ]))
		 			{
						format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\n* Mueble 5 [MUEBLE ID: %d]\
						\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]\
						", HouseInfo[house][hMuebles][0],HouseInfo[house][hMuebles][1],HouseInfo[house][hMuebles][2],HouseInfo[house][hMuebles][3],HouseInfo[house][hMuebles][4],
						HouseInfo[house][hMuebles][5], HouseInfo[house][hMuebles][6], HouseInfo[house][hMuebles][7], HouseInfo[house][hMuebles][8], HouseInfo[house][hMuebles][9], HouseInfo[house][hMuebles][10]);
						SafeDialogEx(playerid, COLOCAR_M2, DIALOG_STYLE_LIST, "{85AB6B}Guardar mueble", stringf, "Confirmar", "Salir");
					}
				}
				case 1:
				{
				    new mueble0 = Info[playerid][pMuebles][0], mueble1 = Info[playerid][pMuebles][1], mueble2 = Info[playerid][pMuebles][2], mueble3 = Info[playerid][pMuebles][3];
				    new mueble4 = Info[playerid][pMuebles][4], mueble5 = Info[playerid][pMuebles][5], mueble6 = Info[playerid][pMuebles][6], mueble7 = Info[playerid][pMuebles][7];
				    new mueble8 = Info[playerid][pMuebles][8], mueble9 = Info[playerid][pMuebles][9], mueble10 = Info[playerid][pMuebles][10];
					format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\
					\n* Mueble 5 [MUEBLE ID: %d]\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\
					\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]", mueble0, mueble1, mueble2, mueble3, mueble4, mueble5, mueble6, mueble7, mueble8, mueble9, mueble10);
					SafeDialogEx(playerid, COLOCAR_M, DIALOG_STYLE_LIST, "{85AB6B}Colocar mueble", stringf, "Confirmar", "Salir");
				}
				case 2:
				{
                	if(house != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ]))
		 			{
						format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\n* Mueble 5 [MUEBLE ID: %d]\
						\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]\
						", HouseInfo[house][hMuebles][0],HouseInfo[house][hMuebles][1],HouseInfo[house][hMuebles][2],HouseInfo[house][hMuebles][3],HouseInfo[house][hMuebles][4],
						HouseInfo[house][hMuebles][5], HouseInfo[house][hMuebles][6], HouseInfo[house][hMuebles][7], HouseInfo[house][hMuebles][8], HouseInfo[house][hMuebles][9], HouseInfo[house][hMuebles][10]);
						SafeDialogEx(playerid, COLOCAR_M3, DIALOG_STYLE_LIST, "{85AB6B}Guardar mueble", stringf, "Confirmar", "Salir");
					}
				}
				case 3:
				{
					if(house != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[house][hInteriorX], HouseInfo[house][hInteriorY], HouseInfo[house][hInteriorZ]))
		 			{
						format(stringf, sizeof(stringf), "* Mueble 1 [MUEBLE ID: %d]\n* Mueble 2 [MUEBLE ID: %d]\n* Mueble 3 [MUEBLE ID: %d]\n* Mueble 4 [MUEBLE ID: %d]\n* Mueble 5 [MUEBLE ID: %d]\
						\n* Mueble 6 [MUEBLE ID: %d]\n* Mueble 7 [MUEBLE ID: %d]\n* Mueble 8 [MUEBLE ID: %d]\n* Mueble 9 [MUEBLE ID: %d]\n* Mueble 10 [MUEBLE ID: %d]\
						", HouseInfo[house][hMuebles][0],HouseInfo[house][hMuebles][1],HouseInfo[house][hMuebles][2],HouseInfo[house][hMuebles][3],HouseInfo[house][hMuebles][4],
						HouseInfo[house][hMuebles][5], HouseInfo[house][hMuebles][6], HouseInfo[house][hMuebles][7], HouseInfo[house][hMuebles][8], HouseInfo[house][hMuebles][9], HouseInfo[house][hMuebles][10]);
						SafeDialogEx(playerid, COLOCAR_M1, DIALOG_STYLE_LIST, "{85AB6B}Guardar mueble", stringf, "Confirmar", "Salir");
					}

				}

			}
		}
		else
		{

		}
	}*/
	case MENU_CASA2:
	{
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
					SafeDialogEx(playerid, MENU_CASA6, DIALOG_STYLE_INPUT, "Retirar", "Escribe la cantidad a retirar", "Aceptar", "Cancelar");
				}
				case 1:
				{
					SafeDialogEx(playerid, MENU_CASA7, DIALOG_STYLE_INPUT, "Guardar", "Escribe la cantidad a guardar", "Aceptar", "Cancelar");
				}
			}
		}
		else
		{

		}
	}
	case MENU_CASA7:
	{
		if(response)
		{
			new Dinero_asd = strval(inputtext);
  			if(IsNumeric(inputtext))
    		{
				if(Dinero_asd > GetPlayerMoney(playerid) || Dinero_asd < 1) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes todo ese dinero para depositarlo.");
				GivePlayerCash(playerid,-Dinero_asd);
				HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] += Dinero_asd;
				format(string, sizeof(string), " Has depositado $%d en la caja fuerte de la casa ahora hay: $%d ", Dinero_asd, HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
	 			SendClientMessageEx(playerid, COLOR_GREY, string);
				return 1;
			}
			else
			{
				SafeDialogEx(playerid, MENU_CASA7, DIALOG_STYLE_INPUT, "Guardar", "Escribe la cantidad a guardar", "Aceptar", "Cancelar");
				SendClientMessageEx(playerid, COLOR_GREY, "Sólo se pueden escribir números.");
			}
		}
		return 1;
	}
	case MENU_CASA6:
	{
		if(response)
		{
			new Dinero_asd = strval(inputtext);
  			if(IsNumeric(inputtext))
    		{
				if(Dinero_asd > HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] || Dinero_asd < 1)return SendClientMessage(playerid, COLOR_GREY, "El local no configura con esta cantidad.");
				GivePlayerCash(playerid,Dinero_asd); // +
				HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] -= Dinero_asd;
				format(string, sizeof(string), "Has sacado %d$ de tu casa.",strval(inputtext));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SafeDialogEx(playerid, MENU_CASA6, DIALOG_STYLE_INPUT, "Retirar", "Escribe la cantidad a retirar", "Aceptar", "Cancelar");
				SendClientMessageEx(playerid, COLOR_GREY, "Sólo se pueden escribir números.");
			}
		}
		return 1;
	}
	case DIALOG_ROPEROMENU:
	{
		new casaid = Info[playerid][pPhousekeyX];
		if(response)
  		{
			if(listitem == 0)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero1] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero1]);
					ProInfo[casaid][hSlotRopero1] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
					ProInfo[casaid][hSlotRopero1] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 1)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 1)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero2] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero2]);
					ProInfo[casaid][hSlotRopero2] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero2] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 2)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 2)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero3] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero3]);
					ProInfo[casaid][hSlotRopero3] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero3] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 3)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 3)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero4] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero4]);
					ProInfo[casaid][hSlotRopero4] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero4] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 4)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 4)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero5] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero5]);
					ProInfo[casaid][hSlotRopero5] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero5] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 5)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 5)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero6] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero6]);
					ProInfo[casaid][hSlotRopero6] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero6] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 6)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 6)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero7] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero7]);
					ProInfo[casaid][hSlotRopero7] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero7] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 7)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 7)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero8] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero8]);
					ProInfo[casaid][hSlotRopero8] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero8] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 8)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 8)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero9] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero9]);
					ProInfo[casaid][hSlotRopero9] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero9] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 9)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 9)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(ProInfo[casaid][hSlotRopero10] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, ProInfo[casaid][hSlotRopero10]);
					ProInfo[casaid][hSlotRopero10] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				ProInfo[casaid][hSlotRopero10] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 10)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 10)
			{
				if(EstaComprandoRopa[playerid] == 1)
				{
					Info[playerid][pChar] = RopaElegida[playerid];
					SetPlayerSkin(playerid, Info[playerid][pChar]);
					RopaElegida[playerid] = 0;
					SendClientMessage(playerid, -1, "Compraste ropa y decides vestirte con ella.");
				}
			}
		}
		if(EstaComprandoRopa[playerid] == 1) {SendClientMessage(playerid, 0xFF0000FF, "Skin Cambiada, costo 50$");}
		else {SendClientMessage(playerid, 0xFF0000FF, "Te has cambiado el skin, usa /ropero para volverte a cambiar de ropa.");}
		savePropiedades(casaid);
	}
	case DIALOG_ARMARIO:
	{
		new hID = Info[playerid][pPhousekeyX];
		if(response)
  		{
			if(listitem == 0)
			{
				if(GuardarArma[playerid] == 1) // Va a guardar el arma.
				{
					if(ProInfo[hID][hW][0] != 0) return SendClientMessage(playerid, -1, "Este Slot ya está ocupado!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid), stringw[128];
					if(weapon == 1 || weapon == 2) return SendClientMessage(playerid, -1, "No tienes armas para guardar!");
					// Información.
					ProInfo[hID][hW][0] = weapon; // El Arma es puesta en el armario.
					ProInfo[hID][hM][0] = ammo; // La munición queda registrada.
					RemovePlayerWeapon(playerid, weapon); // Se le quita el arma al usuario.
					// Avisos del chat.
					format(stringw, sizeof(stringw), "[Armario]: Has guardado el arma [%s] en el Slot número [0]. (CMD: /armario).", WeaponNames[weapon]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, stringw);
					format(stringw, sizeof(stringw), "* %s guarda un arma en el armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, stringw, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					// Abuso de armas Prohibidas.
					if(weapon >= 35 && weapon <= 38)
					{
						format(stringw, sizeof(stringw), "[ATENCIÓN] %s [ID:%d] ha guardado en su armario un arma prohibida. [%s].", GetPlayerNameEx(playerid), playerid, WeaponNames[weapon]);
						ABroadCast(COLOR_ORANGE, stringw, 2); Log("LOGS/armasprohibidas.log", stringw);
					}
				}
				else // Va a sacar el arma.
				{
					if(ProInfo[hID][hW][0] == 0) return SendClientMessage(playerid, -1, "No hay ninguna arma en este slot!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					// Información.
					GivePlayerValidWeapon(playerid, ProInfo[hID][hW][0]); // El arma es dada al usuario. (Ammo : 999).
					ProInfo[hID][hW][0] = 0; ProInfo[hID][hM][0] = 0; // Arma y munición quedan en cero.
					// Avisos del chat.
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "[Armario]: Has sacado un arma del slot número [0]. (CMD: /armario).");
					format(string, sizeof(string), "* %s saca un arma del armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(listitem == 1)
			{
				if(GuardarArma[playerid] == 1) // Va a guardar el arma.
				{
					if(ProInfo[hID][hW][1] != 0) return SendClientMessage(playerid, -1, "Este Slot ya está ocupado!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid), stringw[128];
					if(weapon == 1 || weapon == 2) return SendClientMessage(playerid, -1, "No tienes armas para guardar!");
					// Información.
					ProInfo[hID][hW][1] = weapon; // El Arma es puesta en el armario.
					ProInfo[hID][hM][1] = ammo; // La munición queda registrada.
					RemovePlayerWeapon(playerid, weapon); // Se le quita el arma al usuario.
					// Avisos del chat.
					format(stringw, sizeof(stringw), "[Armario]: Has guardado el arma [%s] en el Slot número [1]. (CMD: /armario).", WeaponNames[weapon]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, stringw);
					format(stringw, sizeof(stringw), "* %s guarda un arma en el armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, stringw, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					// Abuso de armas Prohibidas.
					if(weapon >= 35 && weapon <= 38)
					{
						format(stringw, sizeof(stringw), "[ATENCIÓN] %s [ID:%d] ha guardado en su armario un arma prohibida. [%s].", GetPlayerNameEx(playerid), playerid, WeaponNames[weapon]);
						ABroadCast(COLOR_ORANGE, stringw, 2); Log("LOGS/armasprohibidas.log", stringw);
					}
				}
				else // Va a sacar el arma.
				{
					if(ProInfo[hID][hW][1] == 0) return SendClientMessage(playerid, -1, "No hay ninguna arma en este slot!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					// Información.
					GivePlayerValidWeapon(playerid, ProInfo[hID][hW][1]); // El arma es dada al usuario. (Ammo : 999).
					ProInfo[hID][hW][1] = 0; ProInfo[hID][hM][1] = 0; // Arma y munición quedan en cero.
					// Avisos del chat.
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "[Armario]: Has sacado un arma del slot número [1]. (CMD: /armario).");
					format(string, sizeof(string), "* %s saca un arma del armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(listitem == 2)
			{
				if(GuardarArma[playerid] == 1) // Va a guardar el arma.
				{
					if(ProInfo[hID][hW][2] != 0) return SendClientMessage(playerid, -1, "Este Slot ya está ocupado!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid), stringw[128];
					if(weapon == 1 || weapon == 2) return SendClientMessage(playerid, -1, "No tienes armas para guardar!");
					// Información.
					ProInfo[hID][hW][2] = weapon; // El Arma es puesta en el armario.
					ProInfo[hID][hM][2] = ammo; // La munición queda registrada.
					RemovePlayerWeapon(playerid, weapon); // Se le quita el arma al usuario.
					// Avisos del chat.
					format(stringw, sizeof(stringw), "[Armario]: Has guardado el arma [%s] en el Slot número [2]. (CMD: /armario).", WeaponNames[weapon]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, stringw);
					format(stringw, sizeof(stringw), "* %s guarda un arma en el armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, stringw, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					// Abuso de armas Prohibidas.
					if(weapon >= 35 && weapon <= 38)
					{
						format(stringw, sizeof(stringw), "[ATENCIÓN] %s [ID:%d] ha guardado en su armario un arma prohibida. [%s].", GetPlayerNameEx(playerid), playerid, WeaponNames[weapon]);
						ABroadCast(COLOR_ORANGE, stringw, 2); Log("LOGS/armasprohibidas.log", stringw);
					}
				}
				else // Va a sacar el arma.
				{
					if(ProInfo[hID][hW][2] == 0) return SendClientMessage(playerid, -1, "No hay ninguna arma en este slot!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					// Información.
					GivePlayerValidWeapon(playerid, ProInfo[hID][hW][2]); // El arma es dada al usuario. (Ammo : 999).
					ProInfo[hID][hW][2] = 0; ProInfo[hID][hM][2] = 0; // Arma y munición quedan en cero.
					// Avisos del chat.
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "[Armario]: Has sacado un arma del slot número [2]. (CMD: /armario).");
					format(string, sizeof(string), "* %s saca un arma del armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(listitem == 3)
			{
				if(GuardarArma[playerid] == 1) // Va a guardar el arma.
				{
					if(ProInfo[hID][hW][3] != 0) return SendClientMessage(playerid, -1, "Este Slot ya está ocupado!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid), stringw[128];
					if(weapon == 1 || weapon == 2) return SendClientMessage(playerid, -1, "No tienes armas para guardar!");
					// Información.
					ProInfo[hID][hW][3] = weapon; // El Arma es puesta en el armario.
					ProInfo[hID][hM][3] = ammo; // La munición queda registrada.
					RemovePlayerWeapon(playerid, weapon); // Se le quita el arma al usuario.
					// Avisos del chat.
					format(stringw, sizeof(stringw), "[Armario]: Has guardado el arma [%s] en el Slot número [3]. (CMD: /armario).", WeaponNames[weapon]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, stringw);
					format(stringw, sizeof(stringw), "* %s guarda un arma en el armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, stringw, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					// Abuso de armas Prohibidas.
					if(weapon >= 35 && weapon <= 38)
					{
						format(stringw, sizeof(stringw), "[ATENCIÓN] %s [ID:%d] ha guardado en su armario un arma prohibida. [%s].", GetPlayerNameEx(playerid), playerid, WeaponNames[weapon]);
						ABroadCast(COLOR_ORANGE, stringw, 2); Log("LOGS/armasprohibidas.log", stringw);
					}
				}
				else // Va a sacar el arma.
				{
					if(ProInfo[hID][hW][3] == 0) return SendClientMessage(playerid, -1, "No hay ninguna arma en este slot!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					// Información.
					GivePlayerValidWeapon(playerid, ProInfo[hID][hW][3]); // El arma es dada al usuario. (Ammo : 999).
					ProInfo[hID][hW][3] = 0; ProInfo[hID][hM][3] = 0; // Arma y munición quedan en cero.
					// Avisos del chat.
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "[Armario]: Has sacado un arma del slot número [3]. (CMD: /armario).");
					format(string, sizeof(string), "* %s saca un arma del armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(listitem == 4)
			{
				if(GuardarArma[playerid] == 1) // Va a guardar el arma.
				{
					if(ProInfo[hID][hW][4] != 0) return SendClientMessage(playerid, -1, "Este Slot ya está ocupado!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					new weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid), stringw[128];
					if(weapon == 1 || weapon == 2) return SendClientMessage(playerid, -1, "No tienes armas para guardar!");
					// Información.
					ProInfo[hID][hW][4] = weapon; // El Arma es puesta en el armario.
					ProInfo[hID][hM][4] = ammo; // La munición queda registrada.
					RemovePlayerWeapon(playerid, weapon); // Se le quita el arma al usuario.
					// Avisos del chat.
					format(stringw, sizeof(stringw), "[Armario]: Has guardado el arma [%s] en el Slot número [4]. (CMD: /armario).", WeaponNames[weapon]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, stringw);
					format(stringw, sizeof(stringw), "* %s guarda un arma en el armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, stringw, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					// Abuso de armas Prohibidas.
					if(weapon >= 35 && weapon <= 38)
					{
						format(stringw, sizeof(stringw), "[ATENCIÓN] %s [ID:%d] ha guardado en su armario un arma prohibida. [%s].", GetPlayerNameEx(playerid), playerid, WeaponNames[weapon]);
						ABroadCast(COLOR_ORANGE, stringw, 2); Log("LOGS/armasprohibidas.log", stringw);
					}
				}
				else // Va a sacar el arma.
				{
					if(ProInfo[hID][hW][4] == 0) return SendClientMessage(playerid, -1, "No hay ninguna arma en este slot!");
					if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
					{
						format(string, sizeof(string), "Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado/sacado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
						SendClientMessageEx(playerid,COLOR_WHITE,string);
						return 1;
					}
					// Información.
					GivePlayerValidWeapon(playerid, ProInfo[hID][hW][4]); // El arma es dada al usuario. (Ammo : 999).
					ProInfo[hID][hW][4] = 0; ProInfo[hID][hM][4] = 0; // Arma y munición quedan en cero.
					// Avisos del chat.
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "[Armario]: Has sacado un arma del slot número [4]. (CMD: /armario).");
					format(string, sizeof(string), "* %s saca un arma del armario de su casa.", GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					// Timers Anti-Abuso.
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
		}
		savePropiedades(hID); // Se guardan los cambios en las casas.
	}
	/*case COLOCAR_M:
	{
	    new Float:X,Float:Y,Float:Z, Float:fAngle;

	    if(response == 1)
	    {
	        if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
			{
	    	GetPlayerPos(playerid, X,Y,Z);
			GetPlayerFacingAngle(playerid, fAngle);

        	switch(listitem)
			{
				case 0:
				{
	 		 			if(Info[playerid][pMuebles][0] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][0];
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 1;

						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][0], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 1:
				{
	 		 			if(Info[playerid][pMuebles][1] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][1];
				        ObjetoUsar[playerid] = 1;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][1], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 2:
				{

	 		 			if(Info[playerid][pMuebles][2] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][2];
				        ObjetoUsar[playerid] = 2;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][2], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 3:
				{
	 		 			if(Info[playerid][pMuebles][3] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][3];
				        ObjetoUsar[playerid] = 3;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][3], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 4:
				{
	 		 			if(Info[playerid][pMuebles][4] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][4];
				        ObjetoUsar[playerid] = 4;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][4], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 5:
				{
	 		 			if(Info[playerid][pMuebles][5] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][5];
				        ObjetoUsar[playerid] = 5;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][5], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
				}
				case 6:
				{
	 		 			if(Info[playerid][pMuebles][6] != -1)
				        {
				        IDObjetoUsar[playerid] = Info[playerid][pMuebles][6];
				        ObjetoUsar[playerid] = 6;
				        ObjetoUsarEnCasa[playerid] = 1;
						GetPlayerPos(playerid, X,Y,Z);
						GetPlayerFacingAngle(playerid, fAngle);
						Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][6], X,Y,Z, 0,0,fAngle,100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);
						InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 7:
				{
	 		 			if(Info[playerid][pMuebles][7] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][7];
				        	ObjetoUsar[playerid] = 7;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][7], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 8:
				{
	 		 			if(Info[playerid][pMuebles][8] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][8];
				        	ObjetoUsar[playerid] = 8;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][8], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 9:
				{
	 		 			if(Info[playerid][pMuebles][9] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][9];
				        	ObjetoUsar[playerid] = 9;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][9], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				case 10:
				{
	 		 			if(Info[playerid][pMuebles][10] != -1)
				        {
				        	IDObjetoUsar[playerid] = Info[playerid][pMuebles][10];
				        	ObjetoUsar[playerid] = 10;
				        	ObjetoUsarEnCasa[playerid] = 1;
							GetPlayerPos(playerid, X,Y,Z);
							GetPlayerFacingAngle(playerid, fAngle);
							Objeto_Por_Jugador[playerid] = CreateObject(Info[playerid][pMuebles][10], X,Y,Z, 0,0,fAngle,100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							InfoCasaMuebles(playerid);
						} else SendClientMessage(playerid, -1, "No mueble en ese espacio");
					}
				}
            }
		}
		else
		{

		}
	}
	case COLOCAR_M1:
	{
       	new house = Info[playerid][pPhousekey];

	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][0] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 0);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 1:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][1] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 1);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 2:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][2] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 2);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 3:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][3] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 3);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 4:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][4] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 4);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 5:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][5] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 5);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 6:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][6] > 0)
	    				{
	    				GuardarmuebleUser(playerid, house, 6);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 7:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][7] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 7);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 8:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][8] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 8);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 9:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][9] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 9);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 10:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][10] > 0)
	    				{
	    					GuardarmuebleUser(playerid, house, 10);
       					} else SendClientMessage(playerid, -1, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, -1, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			}
		}
		else
		{

		}
	}
	case COLOCAR_M2:
	{
//	    new Float:fAngle;
       	new house = Info[playerid][pPhousekey];
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][0] > 0)
	    				{
				        	IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][0];
				        	DestroyDynamicObject(HouseInfo[house][hMuebleId][0]);
				        	ObjetoUsar[playerid] = 0;
				        	ObjetoUsarEnCasa[playerid] = 1;
                        	HouseInfo[house][hMuebles][0] = -1;
							Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][0],HouseInfo[house][hMueblesPOSY][0],HouseInfo[house][hMueblesPOSZ][0], HouseInfo[house][hMueblesPOSRx][0],HouseInfo[house][hMueblesPOSRy][0],HouseInfo[house][hMueblesPOSRz][0],100.0);
							EditObject(playerid, Objeto_Por_Jugador[playerid]);
							SendClientMessageEx(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
							SendClientMessageEx(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
							SendClientMessageEx(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					}
				   		else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			}
					else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 1:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][1] > 0)
	    				{


				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][1];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][1]);
				        ObjetoUsar[playerid] = 1;
				        ObjetoUsarEnCasa[playerid] = 1;
                        HouseInfo[house][hMuebles][1] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][1],HouseInfo[house][hMueblesPOSY][1],HouseInfo[house][hMueblesPOSZ][1], HouseInfo[house][hMueblesPOSRx][1],HouseInfo[house][hMueblesPOSRy][1],HouseInfo[house][hMueblesPOSRz][1],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 2:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][2] > 0)
	    				{


				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][2];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][2]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 2;
                        HouseInfo[house][hMuebles][2] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][2],HouseInfo[house][hMueblesPOSY][2],HouseInfo[house][hMueblesPOSZ][2], HouseInfo[house][hMueblesPOSRx][2],HouseInfo[house][hMueblesPOSRy][2],HouseInfo[house][hMueblesPOSRz][2],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 3:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][3] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][3];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][3]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 3;
                        HouseInfo[house][hMuebles][3] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][3],HouseInfo[house][hMueblesPOSY][3],HouseInfo[house][hMueblesPOSZ][3], HouseInfo[house][hMueblesPOSRx][3],HouseInfo[house][hMueblesPOSRy][3],HouseInfo[house][hMueblesPOSRz][3],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 4:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][4] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][4];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][4]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 4;
                        HouseInfo[house][hMuebles][4] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][4],HouseInfo[house][hMueblesPOSY][4],HouseInfo[house][hMueblesPOSZ][4], HouseInfo[house][hMueblesPOSRx][4],HouseInfo[house][hMueblesPOSRy][4],HouseInfo[house][hMueblesPOSRz][4],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 5:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][5] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][5];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][5]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 5;
                        HouseInfo[house][hMuebles][5] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][5],HouseInfo[house][hMueblesPOSY][5],HouseInfo[house][hMueblesPOSZ][5], HouseInfo[house][hMueblesPOSRx][5],HouseInfo[house][hMueblesPOSRy][5],HouseInfo[house][hMueblesPOSRz][5],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 6:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][6] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][6];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][6]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 6;
                        HouseInfo[house][hMuebles][6] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][6],HouseInfo[house][hMueblesPOSY][6],HouseInfo[house][hMueblesPOSZ][6], HouseInfo[house][hMueblesPOSRx][6],HouseInfo[house][hMueblesPOSRy][6],HouseInfo[house][hMueblesPOSRz][6],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			 	case 7:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][7] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][7];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][7]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 7;
                        HouseInfo[house][hMuebles][7] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][7],HouseInfo[house][hMueblesPOSY][7],HouseInfo[house][hMueblesPOSZ][7], HouseInfo[house][hMueblesPOSRx][7],HouseInfo[house][hMueblesPOSRy][7],HouseInfo[house][hMueblesPOSRz][7],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 8:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][8] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][8];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][8]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 8;
                        HouseInfo[house][hMuebles][8] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][8],HouseInfo[house][hMueblesPOSY][8],HouseInfo[house][hMueblesPOSZ][8], HouseInfo[house][hMueblesPOSRx][8],HouseInfo[house][hMueblesPOSRy][8],HouseInfo[house][hMueblesPOSRz][8],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 9:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][9] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][9];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][9]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 9;
                        HouseInfo[house][hMuebles][9] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][9],HouseInfo[house][hMueblesPOSY][9],HouseInfo[house][hMueblesPOSZ][9], HouseInfo[house][hMueblesPOSRx][9],HouseInfo[house][hMueblesPOSRy][9],HouseInfo[house][hMueblesPOSRz][9],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 10:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][10] > 0)
	    				{

				        IDObjetoUsar[playerid] = HouseInfo[house][hMuebles][10];
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][10]);
				        ObjetoUsar[playerid] = 0;
				        ObjetoUsarEnCasa[playerid] = 10;
                        HouseInfo[house][hMuebles][10] = -1;
						Objeto_Por_Jugador[playerid] = CreateObject(IDObjetoUsar[playerid], HouseInfo[house][hMueblesPOSX][10],HouseInfo[house][hMueblesPOSY][10],HouseInfo[house][hMueblesPOSZ][10], HouseInfo[house][hMueblesPOSRx][10],HouseInfo[house][hMueblesPOSRy][10],HouseInfo[house][hMueblesPOSRz][10],100.0);
						EditObject(playerid, Objeto_Por_Jugador[playerid]);

						SendClientMessage(playerid, COLOR_GREY, "Presiona 'ESPACIO' para cambiar la posición de la cámara para la edición");
						SendClientMessage(playerid, COLOR_WHITE, "Presiona 'ESQ' para cancelar y no poner el mueble");
						SendClientMessage(playerid, COLOR_GREY, "Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			}
		}
		else
		{

		}
	}

	case COLOCAR_M3:
	{
       	new house = Info[playerid][pPhousekey];
	    if(response == 1)
	    {
        	switch(listitem)
			{
				case 0:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][0] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][0]);
				        HouseInfo[house][hMuebles][0] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 1:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][1] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][1]);
				        HouseInfo[house][hMuebles][1] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 2:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][2] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][2]);
				        HouseInfo[house][hMuebles][2] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 3:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][3] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][3]);
				        HouseInfo[house][hMuebles][3] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 4:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][4] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][4]);
				        HouseInfo[house][hMuebles][4] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 5:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][5] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][5]);
				        HouseInfo[house][hMuebles][5] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
				}

				case 6:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][6] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][6]);
				        HouseInfo[house][hMuebles][6] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 7:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1  && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][7] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][7]);
				        HouseInfo[house][hMuebles][7] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 8:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1  && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][8] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][8]);
				        HouseInfo[house][hMuebles][8] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 9:
				{
	                if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][9] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][9]);
				        HouseInfo[house][hMuebles][9] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
				case 10:
				{
	                if(Info[playerid][pPhousekey] != -1  || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 30.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))
					{
				        if(HouseInfo[house][hMuebles][10] > 0)
	    				{
				        DestroyDynamicObject(HouseInfo[house][hMuebleId][10]);
				        HouseInfo[house][hMuebles][10] = -1;
                        SendClientMessage(playerid, COLOR_GREY, "Mueble de la casa desechado a la basura.");
       					} else SendClientMessage(playerid, COLOR_GREY, "No hay ningún mueble en ese espacio de la sala");
        			} else SendClientMessage(playerid, COLOR_GREY, "No estas dueño de una casa, o no estás en una de ellas.");
			 	}
			}
		}
		else
		{

		}
	}
		***********************************AYUDA POR DIALOG*********************************
		case MENUAYUDA:
		{
	 		if(response)
			{
			    switch(listitem)
			    {
			        case 0:
					{
						ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - General", "{FFFF00}[PJ]\n{FFFFFF}/cuenta /subirnivel /cambiarclave /tiendacash /tirar /mostrar /trabajoayuda /removergps /dnifalso\n{FFFF00}[CMD'S]\n{FFFFFF}/pagar /payday /id /cfumar /cropa /comprarlicencia /animaciones /ven /google\n/ap /cp /apgarage /cpgarage /togduda /buscartrabajo /tognews /togfam /togphone /darcheque\n/eject /fumarcrack /fumarhierba /llenar /moneda /dar /contrato  /duda /re", "Cerrar", "");
					}
                    case 1:
		{
		if(IsAPolice(playerid))
		    {
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Comandos - SAPD", "/radio /r /d /m /su /esposar /desesposar /ta(off) /ap /radargun /limpiarcamion /vmaletero /ram /luces\n/quitar /multar /detener /bk /bkc /tlc /derechos /bar(2)(3) /qb /placa /embargar /tgunmaletero /(q)(p)spikes /placaex\n/limpiar /sospechosos /sapddiv /verllaves /registroveh /dejarmulta /sapd /arrestar /destruirplanta /deposito /cono /bengala", "Cerrar", "");

		    }
		    else if(Team_Groove(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Groove Street", "{FFFF00}Comandos disponibles para la faccion Groove Street:\n{FFFFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_Latin(playerid))
			{
   				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Latin Kings", "{FFFF00}Comandos disponibles para la faccion Latin Kings:\n{FFFFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Yakuza(playerid))
			{
				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Yakuza", "{FFFF00}Comandos disponibles para la faccion Yakuza:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Santana(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Santana", "{FFFF00}Comandos disponibles para la faccion Santana:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_BomberosLS(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Bomberos LS", "{FFFF00}Comandos disponibles para la faccion Bomberos:\n{FFFFFF}/bduty /d /m /r(adio) /equipo /gob /qfuego /buscarfuego\n\n{FFFF00}Informacion:\n{FFFFFF}*Estar siempre duty y con el skin de facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Alqaeda(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Alqaeda", "{FFFF00}Comandos disponibles para la faccion Alqaeda:\n{FFFFFF}/equipo /miembros /f /apgarage\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Rusa(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Rusa", "{FFFF00}Comandos disponibles para la faccion Rusos:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Ballas(playerid))
			{
		       	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ballas the Kings", "{FFFF00}Comandos disponibles para la Ballas:\n{FFFFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n{FFFFFF}*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_Sureno(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Sureños 13", "{FFFF00}Comandos disponibles para la faccion Sureños 13:\n{FFFFFF}/equipo /robar /miembros /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n{FFFFFF}*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_LCN(playerid))
			{
				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Italiana LCN", "{FFFF00}Comandos disponibles para la faccion LCN:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
		    else if(Team_SAMD(playerid))
			{
       			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}SAMD", "{FFFF00}Comandos disponibles para la faccion SAMD:\n{FFFFFF}/equipo /gob /sacarsangre /pcinfo /apgarage /samduty /placa (/r)adio (/d)epartaments\n/subirpt /dejarpt /curar /irpt", "Cerrar", "");
			}
			else if(Team_Mecanicos(playerid))
			{
          		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Crazy Motors", "{FFFF00}Comandos disponibles para la faccion Crazy Motors:\n{FFFFFF}/miembros /menu /mduty /nitro /hyd \n/venderspray /remolcar /reparar /recargar /f\n/apgarage /equipo", "Cerrar", "");
			}
			else if(Hitman(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Agencia Hitman", "{FFFF00}Comandos disponibles para la faccion Hitman:\n{FFFFFF}/miembros /buscar /acontrato /amascara\n/darhit /hrangos /borrarhit /equipo /hits", "Cerrar", "");
			}
			else if(Team_SAEM(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}SAEM", "{FFFF00}Comandos disponibles para la faccion SAEM:\n{FFFFFF}/misil /saem (/r)adio /d /m (/ta)zer /tgunmaletero /placaex /saemdiv /su /derechos /deposito\n/revisar /bar /placa /qb /esposar /gob /limpiarcamion /vmaletero /(q)(p)spikes /detener /prision\nDiv Médicos: /dejarpt - /subirpt", "Cerrar", "");
			}
			else if(Team_LSTV(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}LSTV", "{FFFF00}Comandos disponibles para la faccion LSTV:\n{FFFFFF}/miembros /nr (Noticias) - /entrevista /f /apgarage\n /equipo /activarlinea /panum", "Cerrar", "");
			}
			else if(Gobierno(playerid))
			{
			  	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Gobierno", "{FFFF00}Comandos disponibles para la faccion Gobierno:\n{FFFFFF}/miembros /equipo /gob /impuesto\n/dejarfondos /gobdiv /apgarage /d /(r)adio", "Cerrar", "");
			}
			else if(Team_Judicial(playerid))
			{
       			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Sistema Judicial", "{FFFF00}Comandos disponibles para la faccion Judicial:\n{FFFFFF}/miembros (/r)adio /d /orden /qorden\n/multajudicial /scarcel /sprision /buscados /juicio\n/librarcargos /recompensar /verjuicios /revertir /presentar /arrestojudicial", "Cerrar", "");
			}
			else if(Team_FBI(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}FBI", "{FFFF00}Comandos disponibles para la faccion FBI:\n{FFFFFF}/miembros (/r)adio /d (/m)egaphone /su /encontrarveh\n/esposar /desesposar /ta(off) /vmaletero /fbi /arrestar /revisar /placa\n/deposito /quitar /multar /detener /derechos /encontrar /gob\n/limpiar /sospechosos /fbidiv /tgunmaletero /ram /placaex /luces", "Cerrar", "");
			}
			else if(Team_ALEPH(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}CIA", "{FFFF00}Comandos disponibles para la faccion CIA:\n{FFFFFF}/d (/r)adio /ciadiv /su /sospechosos /m\n/quitar /gob /derechos /deposito /verllaves /vcoche\n/dejarmulta /limpiarcamion /ta(off) /vmaletero /bar(2)(3) /bengala\n/cono /qb /(q)(p)spikes /ram /esposar /desesposar\n/arrestar /cia /placaex /arrestar /limpiar", "Cerrar", "");
			}
		}
		case 2:
		{
 			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chat", "{FFFF00}Comandos IC:\n{FFFFFF}(/g)ritar (/s)usurar /me /c (/r)adio\n\n{FFFF00}Comandos OOC:\n{FFFFFF}/b (/w)hisper (/f)accion", "Cerrar", "");
		}
		case 3:
		{
            ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Lider", "{FFFF00}Facciones Legales:\n{FFFFFF}/contratar /despedir /darrango /gob\n\n{FFFF00}Facciones Ilegales\n{FFFFFF}/contratar /despedir /darrango /robarbanco", "Cerrar", "");
		}
		case 4:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Telefono", "{FFFFFF}/llamar /sms /altavoz", "Cerrar", "");
		}
		case 5:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Casa", "{FFFFFF}/comprarcasa /rentar /desrentar /timbre /vendercasa(2)\n /ponerrenta /preciorenta /sarma /garma /cdepositar\n/cretirar /cmejorar /cajaestado /cseguro /vendermicasa(2)", "Cerrar", "");
		}
		case 6:
		{
		   ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Coche", "{FFFFFF}/estacionar /v (nombre) /gps /qmod /seguro\n/velocimetro /gunlocker /vendermicoche /borrarcoche /llenar\n /smaletero /gmaletero /darllave /quitarllave", "Cerrar", "");
		}
		case 7:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Banco", "{FFFFFF}/depositar /sacar /transferir\n /balance /atm /tarjeta", "Cerrar", "");
		}
		case 8:
		{
		    if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No eres {FFFF00}VIP{FFFFFF}!");
            if(Info[playerid][pVIP] >= 1)
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Premium", "{FFFFFF}/invitaramigo /viplocker /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/spawncasa /skinpremium /repararpremium", "Cerrar", "");
			}
		}
		case 9:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Matrimonio", "{FFFFFF}/testigo /proponer /divorcio", "Cerrar", "");
		}
		case 10:
		{
      		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - armas", "{FFFFFF}/tarma /rarma /tirararma\n /aceptar (arma) /cancelar (arma)", "Cerrar", "");
		}
		case 11:
		{
		    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Negocio", "{FFFFFF}/comprarnegocio /vendernegocio /sganancias /binfo\n/extorcion /qextorcion /recaudar", "Cerrar", "");
		}
		case 12:
		{
		    if (Info[playerid][pFMember] != 255)
		    {
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Familias", "{FFFFFF}/festado /familias /fdepositar /fretirar /cfdepositar\n/fropa /fsarma /fgarma\n\n{FFFF00}Comandos Lider:\n{FFFFFF}/ajustar /famrango /anombrerango /fseguro /festacionar\n/famllaves /fcomprarseguro(En 24/7)", "Cerrar", "");
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de una familia o banda.");
		}
		case 13:
		{
		    switch(Info[playerid][pJob])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer de viajes", "{FFFFFF}/precioviaje", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Pizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de droga", "{FFFFFF}/vendercrack /venderhierba /comprarcrack /comprarhierba\n/plantar /checkplanta /sacarplanta", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/removergps", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bodyguard", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		        default: SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un trabajo!");
		    }
		    switch(Info[playerid][pJob2])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer de viajes", "{FFFFFF}/precioviaje", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Pizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de droga", "{FFFFFF}/vendercrack /venderhierba /comprarcrack /comprarhierba\n/plantar /checkplanta /sacarplanta", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/removergps", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bodyguard", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		    }
		}
}
}
}*/
//******************************DIALOG MERCADO NEGRO******************************

		case MENUMC:
		{
	 		if(response)
			{
			    switch(listitem)
			    {
			        case 0:
					{
					    if(CheckMoney(playerid, 20)){
					        if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego");
							Bought(playerid, 20);
							SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste un puño americano");
							GivePlayerValidWeapon(playerid, 1);
							return 1;
						}
					}
					case 1:{
					    if(CheckMoney(playerid, 50)){
					        if(Info[playerid][pLevel] <= 2) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Debes ser mayor a nivel 2.");
							Bought(playerid, 50);
							SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Máscara comprada, utiliza /mascara");
							Info[playerid][pMask] = 1;
							return 1;
						}
					}
					case 2:{
					    if(CheckMoney(playerid, 500))
						{
      						if(Info[playerid][pGanzuas] > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Tienes los bolsillos llenos de ganzúas, no puedes comprar más.");
							//Ganzuas[playerid] = 1;
							Bought(playerid, 600);
							Info[playerid][pGanzuas] += 5; // 5 Ganzúas más.
							SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste un pack de 5 ganzúas. Podrás usarlos en /puente.");
							return 1;
						}
					}
					case 3:{
					    if(CheckMoney(playerid, 120)){
					        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste una kit de secuestro. Podrás usar /atar y /vendar.");
							Rope[playerid] = 1;
							Bought(playerid, 120);
							return 1;
						}
					}
					case 4:{
					    if(CheckMoney(playerid, 18000)){
					    if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego.");
					    Bought(playerid, 18000);
					        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste una desert eagle.");
					        GivePlayerValidWeapon(playerid, 24);
							return 1;
						}
					}
					case 5:{
					    if(CheckMoney(playerid, 35000)){
					    if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego.");
					    Bought(playerid, 35000);
					        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste una MP5.");
					        GivePlayerValidWeapon(playerid, 29);
							return 1;
						}
					}
					/*case 6:{
					    if(CheckMoney(playerid, 15000)){
					    if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego");
					    Bought(playerid, 15000);
					        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste una M4");
					        GivePlayerValidWeapon(playerid, 31);
							return 1;
						}
					}
					case 7:{
					    if(CheckMoney(playerid, 20000)){
					    if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego");
					    Bought(playerid, 20000);
					        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste una MP5 + Silenced Pistol");
					        GivePlayerValidWeapon(playerid, 29);
					        GivePlayerValidWeapon(playerid, 23);
							return 1;
						}
					}
					case 8:{
					    if(CheckMoney(playerid, 25000)){
					    if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego");
					    Bought(playerid, 25000);
					        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MC]:{FFFFFF} Compraste una M4 + desert eagle");
					        GivePlayerValidWeapon(playerid, 31);
					        GivePlayerValidWeapon(playerid, 24);
							return 1;
						}
					}*/
				}
			}
		}
		case JOBFINDMENU:
		{
	 		if(response)
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no estar en otra función usando checkpoints.");
			    SetPVarInt(playerid, "FindJob", 1);
			    if(listitem == 0)
				{
				   SetPlayerCheckpoint(playerid, 1836.8391,-1682.6100,13.3312, 2); //bartender
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 1)
				{
				   SetPlayerCheckpoint(playerid, 2104.8408,-1810.0991,13.5547, 2); // Pizzero
				    SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 2)
				{
				    SetPlayerCheckpoint(playerid, 2218.0525,-2662.2483,13.5536, 2); // camionero
				    SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 3)
				{
				    SetPlayerCheckpoint(playerid, 1219.6438, -1425.7828, 13.0908, 2); // moviles
				    SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 4)
				{
				    SetPlayerCheckpoint(playerid, 1752.7062,-1894.1708,13.5574, 2); //taxista
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 5)
				{
				    SetPlayerCheckpoint(playerid, 2021.5721,-1274.4832,23.9810, 2); //jardinero
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 6)
				{
				    SetPlayerCheckpoint(playerid, -572.9537,-1498.6639,11.0859, 2); //leñador
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 7)
				{
				   SetPlayerCheckpoint(playerid, 2487.4983,-1410.0270,28.8375, 2); //vendedor armas
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 8)
				{
				    SetPlayerCheckpoint(playerid, 1689.9009,-1494.9858,13.5469, 2); //vendedor drogas
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 9)
				{
    				SetPlayerCheckpoint(playerid, 2355.1594,-1169.2037,28.0057, 2); //traficante drogas
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 10)
				{
    				SetPlayerCheckpoint(playerid, 1029.7059,-1340.5267,13.8093, 2); //chofer de viajes
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 11)
				{
    				SetPlayerCheckpoint(playerid, -108.705574, -3.399344, 3.117187, 2); //granjero
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 12)
				{
    				SetPlayerCheckpoint(playerid, 1423.9009,-1355.9692,13.2810, 2); //vendedor de chalecos
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 13)
				{
    				SetPlayerCheckpoint(playerid, 659.3577,-634.6320,16.3359, 2); //artesano
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 14)
				{
    				SetPlayerCheckpoint(playerid, 2420.0740, -1509.0592, 24.0213, 2); //Heladero
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 15)
				{
    				SetPlayerCheckpoint(playerid, 1685.6, -1944.73, 13.545, 2); //Trenero
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
				if(listitem == 16)
				{
    				SetPlayerCheckpoint(playerid, 1974.154, -2250.25, 13.465, 2); //Piloto: 1974.154, -2250.25, 13.465
					SendClientMessageEx(playerid, COLOR_WHITE, "Se marcó en el radar un checkpoint. (Marcado Rojo)");
				}
			}
		}
		case DIALOG_LICENSE_BUY:
		{
	 		if(response){
				switch (listitem){
					case 0:{
				    	if(Info[playerid][pCarLic] == 0){
				        	if(GetPlayerCash(playerid) < 2000){
				            	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar esta licencia de conducir.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-2000);
							Tax += 200000;
							Info[playerid][pCarLic] = 1;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de conducción.");
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ya tienes la licencia de conducción.");
					}
					case 1:{
				    	if(Info[playerid][pBoatLic] == 0){
				        	if(GetPlayerCash(playerid) < 3000){
				            	SendClientMessageEx(playerid, COLOR_GREY, "No puedes pagar esta licencia de navegación.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-3000);
							Tax += 3000;
							Info[playerid][pBoatLic] = 0;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de navegación.");
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes la licencia de navegación.");
					}
					case 2:{
				    	if(Info[playerid][pFlyLic] == 0){
				    		if(Info[playerid][pLevel] >=2){
				    	    	if(GetPlayerCash(playerid) < 5000){
				            		SendClientMessageEx(playerid, COLOR_GREY, "No puedes pagar esta licencia de piloto.");
				            		return 1;
				        		}
								GivePlayerCash(playerid,-5000);
								Tax += 5000;
								Info[playerid][pFlyLic] = 1;
      							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de piloto; ahora será capaz de manejar aeronaves.");
							}
							else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para comprar la licencia de piloto.");
						}
        	      		else SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes la licencia de piloto.");
					}
					case 3:{
				    	if(Info[playerid][pTaxiLicense] == 0){
				        	if(GetPlayerCash(playerid) < 2000){
				            	SendClientMessageEx(playerid, COLOR_GREY, "No puedes pagar esta licencia de taxi.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-2000);
							Tax += 10000;
							Info[playerid][pTaxiLicense] = 1;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de taxi; podrás utilizar /tarifa en cualquier vehículo y aceptar llamadas de taxis.");
						}
            	    	else SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes la licencia de taxista.");
					}
					/*case 4:{
			    		if(Info[playerid][pGunLic] == 0){
			    	    	if(GetPlayerCash(playerid) < 15000){
			    	        	SendClientMessageEx(playerid, COLOR_GREY, "No puedes pagar esta licencia de armas.");
			    	        	return 1;
			    	    	}
							GivePlayerCash(playerid,-15000);
							Tax += 15000;
							Info[playerid][pGunLic] = 1;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido con éxito una licencia de armas.");
						}
            	    	else SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes la licencia de armas.");
					}*/
				}
			}
		}
		case DIALOG_IDIOMA_BUY:
		{
	 		if(response){
				switch (listitem){
					case 0:{
				    	if(Info[playerid][pIngles] == 0){
				        	if(GetPlayerCash(playerid) < 25000)
							{
				            	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-25000);
							Tax += 25000;
							Info[playerid][pIngles] = 1;
							Info[playerid][pInglesSkill] = 10;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido estudios básicos de inglés, recuerda prácticar el idioma para no olvidarlo.");
							SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda hablar con otras personas usando el CMD /ing para no olvidar el idioma y ganar habilidad.");
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes solicitar clases de inglés, ya tienes el curso realizado.");
					}
					case 1:{
				    	if(Info[playerid][pAleman] == 0){
				        	if(GetPlayerCash(playerid) < 35000)
							{
				            	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-35000);
							Tax += 35000;
							Info[playerid][pAleman] = 1;
							Info[playerid][pAlemanSkill] = 10;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido estudios básicos de alemán, recuerda prácticar el idioma para no olvidarlo.");
							SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda hablar con otras personas usando el CMD /ale para no olvidar el idioma y ganar habilidad.");
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes solicitar clases de alemán, ya tienes el curso realizado.");
					}
					case 2:{
				    	if(Info[playerid][pItaliano] == 0){
				        	if(GetPlayerCash(playerid) < 45000)
							{
				            	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-45000);
							Tax += 45000;
							Info[playerid][pItaliano] = 1;
							Info[playerid][pItalianoSkill] = 10;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido estudios básicos de italiano, recuerda prácticar el idioma para no olvidarlo.");
							SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda hablar con otras personas usando el CMD /ita para no olvidar el idioma y ganar habilidad.");
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes solicitar clases de italiano, ya tienes el curso realizado.");
					}
					case 3:{
				    	if(Info[playerid][pRuso] == 0){
				        	if(GetPlayerCash(playerid) < 45000)
							{
				            	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
				            	return 1;
				        	}
							GivePlayerCash(playerid,-45000);
							Tax += 45000;
							Info[playerid][pRuso] = 1;
							Info[playerid][pRusoSkill] = 10;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido estudios básicos de ruso, recuerda prácticar el idioma para no olvidarlo.");
							SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda hablar con otras personas usando el CMD /rus para no olvidar el idioma y ganar habilidad.");
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes solicitar clases de ruso, ya tienes el curso realizado.");
					}
					case 4:{
			    		if(Info[playerid][pJapones] == 0){
			    	    	if(GetPlayerCash(playerid) < 45000)
							{
			    	        	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
			    	        	return 1;
			    	    	}
							GivePlayerCash(playerid,-45000);
							Tax += 45000;
							Info[playerid][pJapones] = 0;
							Info[playerid][pJaponesSkill] = 0;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido estudios básicos de japonés, recuerda prácticar el idioma para no olvidarlo.");
							SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda hablar con otras personas usando el CMD /jap para no olvidar el idioma y ganar habilidad.");
						}
            	    	else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes solicitar clases de japonés, ya tienes el curso realizado.");
					}
					case 5:{
			    		if(Info[playerid][pArabe] == 0){
			    	    	if(GetPlayerCash(playerid) < 55000)
							{
			    	        	SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
			    	        	return 1;
			    	    	}
							GivePlayerCash(playerid,-55000);
							Tax += 55000;
							Info[playerid][pArabe] = 1;
							Info[playerid][pArabeSkill] = 10;
							SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Has adquirido estudios básicos de árabe, recuerda prácticar el idioma para no olvidarlo.");
							SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda hablar con otras personas usando el CMD /ara para no olvidar el idioma y ganar habilidad.");
						}
            	    	else SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes solicitar clases de árabe, ya tienes el curso realizado.");
					}
				}
			}
		}
     	case TIENDA_GAS:
		{
			if(response == 1)
 			{
				switch(listitem)
  				{
					case 0:
       				{
				        if(CheckMoney(playerid,200))
			        	{
			        	autorepara[playerid] = 1;
			        	SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[GAS]:{FFFFFF} Compraste una lata de gasolina.");
			        	SendClientMessageEx(playerid, COLOR_WHITE, "Usa /rellenarauto para rellenar tu vehículo de gasolina.");
			        	GivePlayerCash(playerid, -200);
			        	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 200);}
			        	}
			        	return 1;
					}
					case 1:
					{
					    if(CheckMoney(playerid,30))
			        	{
                    	new Float:Health;
					 	GetPlayerHealth(playerid, Health);
		        	    if(Health < 101)	{	SetHP(playerid, Health+20); 	}
         				format(string, sizeof(string), "* %s come unas bolsa de patatas", GetPlayerNameEx(playerid));
		            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	GivePlayerCash(playerid, -30);
		            	ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
		            	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 30);}
		            	}
		            	return 1;
		            }
		            case 2:
	            	{
	            	    if(CheckMoney(playerid,20))
			        	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+2); 	}
	        	        format(string, sizeof(string), "* %s se bebe un refresco.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	GivePlayerCash(playerid, 20);
	                	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 20);}
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		                }
		                return 1;
	        	    }
		        	case 3:
			        {
			            if(CheckMoney(playerid,40))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pCigarettes] = 8;
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[GAS]:{FFFFFF}Has comprado una cajetilla de 8 cigarros, utilza /cfumar.");
				            GivePlayerCash(playerid, -40);
				            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 40);}
						}
						return 1;
			        }
		        	case 4:
			        {
						if(CheckMoney(playerid,20))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pLighter] = 1;
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[GAS]:{FFFFFF} Compraste un encendedor.");
				            GivePlayerCash(playerid, -20);
				            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 20);}
						}
						return 1;
                    }
				}
			}
		}
		case TIENDA_ELEC:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
			    case 0:
			        {
			        	if(CheckMoney(playerid,500))
			        	{
			        	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			                new randphone = 100000 + random(899999);
							Info[playerid][pPnumber] = randphone;
							format(string, sizeof(string), "{A2DC35}[24/7]:{FFFFFF}Has comprado un nuevo teléfono. Tú número es: %d",Info[playerid][pPnumber]);
				            SendClientMessageEx(playerid, COLOR_WHITE, string);
				            Tax += 500; Bought(playerid, 500);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 500);}
				            return 1;
						}
			        }
			  case 1:
		        {
		            if(CheckMoney(playerid,200))
		            {
		                if(Info[playerid][pLibreta] == 0)
						{
		                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		                    Bought(playerid, 200);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 200);}
		                    Info[playerid][pLibreta] = 1;
		                    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Has comprado una agenda teléfonica.");
			            	SendClientMessageEx(playerid, COLOR_WHITE, "Ahora puedes usar /agenda para agregar contactos.");
                            Info[playerid][pNumeroLibreta1] = 0;
                            Info[playerid][pNumeroLibreta2] = 0;
                            Info[playerid][pNumeroLibreta3] = 0;
                            Info[playerid][pNumeroLibreta4] = 0;
                            Info[playerid][pNumeroLibreta5] = 0;
                            format(Info[playerid][pAgenda1], 40, "Ninguno");
							format(Info[playerid][pAgenda2], 40, "Ninguno");
							format(Info[playerid][pAgenda3], 40, "Ninguno");
							format(Info[playerid][pAgenda4], 40, "Ninguno");
							format(Info[playerid][pAgenda5], 40, "Ninguno");
							format(Info[playerid][pAgenda6], 40, "Ninguno");
							format(Info[playerid][pAgenda7], 40, "Ninguno");
							format(Info[playerid][pAgenda8], 40, "Ninguno");
							format(Info[playerid][pAgenda9], 40, "Ninguno");
							format(Info[playerid][pAgenda10], 40, "Ninguno");
							return 1;
						}
						else SendClientMessageEx(playerid, COLOR_WHITE, "[Agenda] Ya dispones de tu propia agenda, para borrar todo, usa /agenda [Opción borrar].");
					}
		        }
	         	case 2:
			        {
			            if(CheckMoney(playerid,150))
			            {
			                if(Info[playerid][pLevel] > 2)
			                {
			                    if(Info[playerid][pPuntosRol] < 20) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[ATENCION]:{FFFFFF} Tienes que tener 20 puntos de rol para comprar esto.");
			                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			                    Info[playerid][pPhoneBook] = 1;
				            	SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Has comprado un PhoneBook. Ahora puedes ver los números telefonicos de otra persona.");
	                            SendClientMessageEx(playerid, COLOR_GREY, "{FF8000}[INDICACION]:{FFFFFF} /numero <id>.");
	 			            	Tax += 150; Bought(playerid, 150);
								if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 150);}
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GRAD3, "{A2DC35}[24/7]:{FFFFFF} Sólo usuarios mayores a nivel 3 pueden comprar un PhoneBook");
						}
			        }
				case 3:
			        {
			            if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[ATENCION]:{FFFFFF} No puedes comprar esto las 2 primeras horas de juego");
			            if(CheckMoney(playerid,120))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            GivePlayerValidWeapon(playerid, 43);
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Has comprado una cámara de fotos.");
				            Tax += 120; Bought(playerid, 120);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 120);}
				            return 1;
						}
			        }
				case 4:
					{
						if(CheckMoney(playerid,800))
						{
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pRadio] = 1;
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Compraste un radio portátil /pr (/wa-/wt) [Hablar] - /frecuencia - /togpr [Prender/Apagar]");
				            Tax += 800; Bought(playerid, 800);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 800);}
						}
					}
				case 5:
			        {
						if(CheckMoney(playerid,850))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 850;
							SendClientMessageEx(playerid, COLOR_GRAD4, "{A2DC35}[24/7]:{FFFFFF} Compraste un reproductor de musica. Usa /Ipod para prender tu Ipod.");
							Info[playerid][pIpadMusic] = 1; Bought(playerid, 850);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 850);}
				            return 1;
						}
			        }
				case 6:
			        {
						if(CheckMoney(playerid, 1000))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 750;
							SendClientMessageEx(playerid, COLOR_GRAD4, "{A2DC35}[Tienda de electónica]:{FFFFFF} Compraste una Boombox (Utiliza /boombox).");
							Info[playerid][pBoombox] = 1;
							Bought(playerid, 750);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 750);}
				            return 1;
						}
			        }
			    }
		 	}
		}
		case TIENDA_MENU:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
		         	case 0:
			        {
			            if(CheckMoney(playerid,10))
			            {
				            SafeDialogEx(playerid, LOTTO_BUY, DIALOG_STYLE_INPUT, "{00F70C}Lotería Nacional","Inserta un número entre 1 y 102. Mucha Suerte!","Comprar","Cancelar");
	                    	Tax += 10; Bought(playerid, 10);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 10);}
							return 1;
						}
			        }
		            case 1:
			        {
			            if(CheckMoney(playerid,100))
						{
				    		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pSpraycan] += 3;
				            Tax += 100; Bought(playerid, 100);
				            SendClientMessageEx(playerid, COLOR_GRAD4, "{A2DC35}[24/7]:{FFFFFF} Compraste 3 Botes de Spray. Puedes usar /paintcoche - /colorcoche dentro de tu coche para pintarlo.");
                            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 100);}
							return 1;
						}
			        }
		         	case 2:
			        {
			            if(CheckMoney(playerid,40))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pCigarettes] = 8;
							Tax += 40; Bought(playerid, 40);
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Has una cajetilla de 8 cigarros, utilza /cfumar.");
				            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 40);}
				            return 1;
						}
			        }
		         	case 3:
			        {
						if(CheckMoney(playerid,20))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pLighter] = 1;
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Compraste un encendedor.");
				            Tax += 20; Bought(playerid, 20);
				            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 20);}
				            return 1;
						}
			        }
					case 4:
			        {
			     		if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[ATENCION]:{FFFFFF} No puedes comprar esto las 2 primeras horas de juego");
						if(CheckMoney(playerid,7))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 7; Bought(playerid, 7);
							SendClientMessageEx(playerid, COLOR_GRAD4, "{A2DC35}[24/7]:{FFFFFF} Has comprado unas flores");
							GivePlayerValidWeapon(playerid, 14);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 7);}
				            return 1;
						}
					}
					case 5:
			        {
						if(CheckMoney(playerid,8))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Info[playerid][pSprunk]++;
							SendClientMessageEx(playerid, COLOR_GRAD4, "{A2DC35}[24/7]:{FFFFFF} Has comprado un Sprunk ");
							SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Usa /bebersprunk para beber un sprunk. Botón izquierdo del ratón para tomar, F para botarlo.");
				            Tax += 8; Bought(playerid, 8);
				            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 8);}
						}
			        }
					case 6:
			        {
          					if(CheckMoney(playerid,500))
          					{
								SetPVarInt(playerid, "lockmenu", 1);
      							for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                			{
					    			if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					    			{
		                		    	format(string, sizeof(string), "Coche %d | Modelo: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                		    	SendClientMessageEx(playerid, COLOR_WHITE, string);
							     	}
					    		}
					    		SafeDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "{00F70C}Selecciona"," Selecciona el vehiculo en el cual instalarás el seguro:", "Ok", "Cancelar");
							}
					}
					case 7:
					{
				   			if(CheckMoney(playerid,2000))
					        {
								SetPVarInt(playerid, "lockmenu", 2);
				    			for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                			{
					     			if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     			{
		                     			format(string, sizeof(string), "Coche %d | Modelo: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     			SendClientMessageEx(playerid, COLOR_WHITE, string);
					     			}
				    			}
								SafeDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "{00F70C}Selecciona"," Selecciona el vehiculo en el cual instalarás el seguro:", "Ok", "Cancelar");
							}
					}
				}
			}
		}
		case TIENDA_EROS:
		{
			if(response == 1)
			{
				switch(listitem)
			    {
			    case 0:
			        {
			        	if(CheckMoney(playerid,350))
			        	{
			        	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "{A2DC35}[EROS]:{FFFFFF}Has comprado un dildo, podrás hacer espectáculos sexuales, llama al mayor putón de todos. [TEL: %d]",Info[playerid][pPnumber]);
				            SendClientMessageEx(playerid, COLOR_WHITE, string);
                			GivePlayerValidWeapon(playerid, 10);
	            			format(string, sizeof(string), "* %s ha comprado el mayor dildo morado jamás creado por el ser humano.", GetPlayerNameEx(playerid));
	            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				            Tax += 350; Bought(playerid, 350);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 350);}
				            return 1;
						}
			        }
	         	case 1:
			        {
			            if(CheckMoney(playerid,200))
			            {
			                if(Info[playerid][pLevel] > 2)
			                {
			                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            	SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[EROS]:{FFFFFF} Has comprado un consolador, eligiste el mejor producto de la tienda, recomendado por STAFF.");
	                            GivePlayerValidWeapon(playerid, 12);
		            			format(string, sizeof(string), "* %s obtiene un consolador recién fabricado.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 			            	Tax += 200; Bought(playerid, 200);
								if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 200);}
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GRAD3, "{A2DC35}[EROS]:{FFFFFF} Sólo usuarios mayores a nivel 3 pueden comprar consoladores.");
						}
			        }
				case 2:
			        {
			            if(CheckMoney(playerid,50))
			            {
               				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[EROS]:{FFFFFF} Has comprado un condón, parece usado pero todavía sirve.");
	                        SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Abre el envoltorio por un lado, arodilate y te lo pones. Recomendable usar en espacios abiertos.");
	 			            Tax += 50; Bought(playerid, 50);
							if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 50);}
							return 1;
						}
			        }
				case 3:
					{
						if(CheckMoney(playerid,5000))
						{
						    if(Info[playerid][pLevel] > 4)
			                {
			                	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            	GivePlayerValidWeapon(playerid, 13);
		            			format(string, sizeof(string), "* %s obtiene el pack 50 Gray's. La versión Original de 50 Sombras de Grey. (Fifty Shades of Grey).", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				            	SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[EROS]:{FFFFFF} Compraste un Kit Erótico, disfrutalo al máximo.");
				            	Tax += 5000; Bought(playerid, 5000);
								if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 5000);}
								return 1;
							}
							else SendClientMessageEx(playerid, COLOR_GRAD3, "{A2DC35}[24/7]:{FFFFFF} Sólo usuarios mayores a nivel 5 pueden comprar el Pack 50 Sombras de Gray.");
						}
					}
			    }
		 	}
		}
		case TRAFICDRUGS:
		{
		    if(GetPVarInt(playerid, "ChoosingDrugs") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás traficando drogas!");
		    AntiAbuso[playerid] = 1;
			SetTimerEx("AntiAbusoTimer", 150000, false, "i", playerid); // 2,5 Minutos.
 		    if(response)
	 	    {
				new mypoint = -1;
				for (new i=0; i<MAX_POINTS; i++)
				{
					if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
					{
						mypoint = i;
					}
				}
				if (mypoint == -1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás en el punto especificado!");
					return 1;
				}
				if(Info[playerid][pCrates])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[JOB]:{FFFFFF} No se puede sostener más paquetes de drogas!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					return 1;
				}
				if(GetPlayerCash(playerid) > 150)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $150 por un poco de paquetes de hierba.");
					GivePlayerCash(playerid, -150);
					Info[playerid][pCrates] = 1;
					SetPVarInt(playerid, "CrateDeliver", 1);
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					SetPVarInt(playerid, "tpDrugRunTimer", 45);
					SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
					SendClientMessageEx(playerid, COLOR_WHITE,"{FF8000}[INDICACION]:{FFFFFF} Ahora déjalo en en lugar indicado para tu paga. (Vé al checkpoint)");
					SetPlayerCheckpoint(playerid, 2165.8655,-1675.2634,15.0859, 2);
					for(new i = 0; i < sizeof(fINFO); i++)
					{
						if(strcmp(Points[mypoint][Owner], fINFO[i][FamilyName], true) == 0)
						{
							fINFO[i][FamilyBank] += 500;
						}
					}
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE," No tienes $100!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
   					return 1;
				}
			}
			else
			{
				new mypoint = -1;
				for (new i=0; i<MAX_POINTS; i++)
				{
					if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
					{
						mypoint = i;
					}
				}
				if (mypoint == -1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás en el punto especificado!");
					return 1;
				}
				if(Info[playerid][pCrates])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[JOB]:{FFFFFF} No se puede sostener más paquetes de drogas!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					return 1;
				}
				if(GetPlayerCash(playerid) > 100)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $100 por un poco de paquetes de crack.");
					GivePlayerCash(playerid, -100);
					Info[playerid][pCrates] = 1;
					SetPVarInt(playerid, "CrateDeliver", 2);
					SetPVarInt(playerid, "ChoosingDrugs", 0);
					SetPVarInt(playerid, "tpDrugRunTimer", 45);
					SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
					SetPlayerCheckpoint(playerid, 2348.6213,-1168.0778,27.8631, 2);
					SendClientMessageEx(playerid, COLOR_WHITE,"{FF8000}[INDICACION]:{FFFFFF} Ahora déjalo en en lugar indicado para tu paga. (Vé al checkpoint)");
					for(new i = 0; i < sizeof(fINFO); i++)
					{
						if(strcmp(Points[mypoint][Owner], fINFO[i][FamilyName], true) == 0)
						{
							fINFO[i][FamilyBank] += 500;
						}
					}
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE,"* No tienes $100!");
					SetPVarInt(playerid, "ChoosingDrugs", 0);
   					return 1;
				}
			}
		}
		case GIVEKEYS:
		{
		    if(response)
		    {
				if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID)
				{
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No se puede dar las llaves de un vehículo que no existe o que está embargado.");
		            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		            return 1;
				}
		        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Usted ya ha dado a alguien las llaves de este coche.");
		            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		            return 1;
		        }
		        if(Info[GiveKeysTo[playerid]][pVehicleKeysFrom] != INVALID_PLAYER_ID)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Ese jugador ya tiene las llaves de un coche distinto.");
		            return 1;
		        }
				PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = GiveKeysTo[playerid];
				Info[GiveKeysTo[playerid]][pVehicleKeys] = listitem;
				Info[GiveKeysTo[playerid]][pVehicleKeysFrom] = playerid;
				format(string, sizeof(string), "{5ABAFF}%s{FFFFFF} te ha dado las llaves de su %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
				SendClientMessageEx(GiveKeysTo[playerid], COLOR_WHITE, string);
				format(string, sizeof(string), "Has dado a {5ABAFF}%s{FFFFFF} las llaves de tu %s.", GetPlayerNameEx(GiveKeysTo[playerid]), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				GiveKeysTo[playerid] = INVALID_PLAYER_ID;
		    }
		}
		case REMOVEKEYS:
		{
		    if(response)
		    {
		        if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No se puede quitar las llaves de un vehículo que no existe o que estánembargados.");
		            return 1;
				}
		        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId])
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Este jugador no tiene las llaves de este coche.");
		            return 1;
		        }
		        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] == INVALID_PLAYER_ID)
		        {
		            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Usted no ha dado a nadie las llaves de este coche.");
		            return 1;
		        }
				Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
				Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
				format(string, sizeof(string), "{5ABAFF}%s{FFFFFF} ha tomado las llaves de su {5ABAFF}%s{FFFFFF}.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
				SendClientMessageEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId], COLOR_WHITE, string);
				format(string, sizeof(string), "Tomaste las llaves de tu {5ABAFF}%s{FFFFFF} de {5ABAFF}%s{FFFFFF}.", GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]),GetPlayerNameEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		    }
		}
		case GPSX:
		{
			if(response == 1)
		    {
		        switch(listitem)
			    {
			    	case 0:
			    	{
						new vstring[1024];
						for(new i; i < MAX_PLAYERVEHICLES; i++)
						{
							if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
							{
								format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvId]);
							}
							else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
							{
								format(vstring, sizeof(vstring), "%s\n%s (Embargado)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
							}
							else
							{
								format(vstring, sizeof(vstring), "%s\nVacío", vstring);
							}
						}
						SafeDialogEx(playerid, TRACKCAR, DIALOG_STYLE_LIST, "{00F70C}GPS - Llaves", vstring, "Buscar", "Salir");
						return 1;
					} // Se muestra el /gps de los vehículos.
					case 1:
					{
						new pstring[100], totalstring[180];
						if(Info[playerid][pPbizzkey] != 9999)
						{
							// Tiene negocio. (Aparece el nombre del negocio)
							format(pstring, sizeof(pstring), "[%d]: Negocio: %s\n", playerid, NegociosVariables[Info[playerid][pPbizzkey]][bName]);
							strcat(totalstring,pstring);
						}
						else
						{
							// No tiene negocio.
							format(pstring, sizeof(pstring), "[%d]: Negocio vacío.\n", playerid);
							strcat(totalstring,pstring);
						}
                        if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
                        {
                        	// Tiene casa.
                        	format(pstring, sizeof(pstring), "[%d]: Casa1: %d.\n", playerid, Info[playerid][pPhousekey]);
                        	strcat(totalstring,pstring);
                        }
                        else
                        {
                        	// No tiene casa 1.
                        	format(pstring, sizeof(pstring), "[%d]: Casa1: Vacío.\n", playerid);
                        	strcat(totalstring,pstring);
                        }
                        if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
                        {
                        	//Tiene casa 2.
                        	format(pstring, sizeof(pstring), "[%d]: Casa2: %d.\n", playerid, Info[playerid][pPhousekey2]);
                        	strcat(totalstring,pstring);
                        }
                        else
                        {
                            // No tiene casa 2.
                            format(pstring, sizeof(pstring), "[%d]: Casa2: Vacío.\n", playerid);
                            strcat(totalstring,pstring);
                        }
					    SafeDialogEx(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "{00F70C}GPS - Propiedades",totalstring, "Ver", "Atrás");
					    return 1;
					} // Se muestra el /gps de propiedades y negocios.
					case 2:
					{
     					if(IsPlayerConnected(playerid))
        				{
            				new MAP[360]; // Lugares de Interés.
   	    					strcat(MAP,"Concesionario Grotti\nConcecionario Market\nConcecionario Mulholland\nConcecionario Verona Beach\nConcecionario de Motos\nBanco Central\nHospital General\nAyuntamiento de los Santos\n24/7 Unity\n24/7 Centro\nDiscoteca Alhambra\nPizzeria Idlewood\nTienda de Electronica\nPiscina Municipal\nOficinas del Gobierno\n");
    	    				strcat(MAP,"Restaurante\nBiblioteca\nFuneraria\nJuzgados\nTaller Mecánico\nCentro Social\nUniversidad\nDGT - Tráfico\nLavanderia");
            				SafeDialogEx(playerid, MAPINTERES, DIALOG_STYLE_LIST, "{FFFFFF}Mapa de{088A4B} Los Santos",MAP, "Ok", "Cancelar");
            				return 1;
						}
					}
     				case 3:
					{
     					if(IsPlayerConnected(playerid))
        				{
            				SafeDialogEx(playerid, JOBFINDMENU, DIALOG_STYLE_LIST, "{00F70C}Buscar Trabajos","Bartender\nPizzero\nCamionero\nVendedor de moviles\nTaxista\nJardinero\nLeñador\nVendedor de armas\nVendedor de drogas\nTraficante de drogas\nChofer de viajes\nGranjero\nVendedor de chalecos\nArtesano\nHeladero\nTrenero\nPiloto", "Ok", "Cancelar");
            				return 1;
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Usted ha salido del menú del GPS.");
			}
		}
		case DIALOG_GPS:
		{
		    if(response == 1)
		    {
		        switch(listitem)
			    {
			    	case 0: // Negocio.
			    	{
			    	    if(Info[playerid][pPbizzkey] != 9999)
						{
						    new bID = Info[playerid][pPbizzkey];
						    DisablePlayerCheckpoint(playerid);
                            SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: Su negocio ha sido marcado en el mapa.");
                            SetPlayerCheckpoint(playerid, NegociosVariables[bID+1][bExteriorPos][0], NegociosVariables[bID+1][bExteriorPos][1], NegociosVariables[bID+1][bExteriorPos][2], 5.0);
						}
			    	    else{SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: Usted no dispone de negocio.");}
			    	}
			    	case 1: // Casa1.
			    	{
   	    				if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
						{
						    new hID = Info[playerid][pPhousekey];
						    DisablePlayerCheckpoint(playerid);
                            SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: Su casa número 1 ha sido marcada en el mapa.");
                            SetPlayerCheckpoint(playerid, HouseInfo[hID][hExteriorX], HouseInfo[hID][hExteriorY], HouseInfo[hID][hExteriorZ], 5.0);
						}
			    	    else{SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: Usted no dispone de casa 1.");}
			    	}
			    	case 2: // Casa2.
			    	{
   	    				if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
						{
						    new hID = Info[playerid][pPhousekey2];
						    DisablePlayerCheckpoint(playerid);
                            SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: Su casa número 2 ha sido marcada en el mapa.");
                            SetPlayerCheckpoint(playerid, HouseInfo[hID][hExteriorX], HouseInfo[hID][hExteriorY], HouseInfo[hID][hExteriorZ], 5.0);
						}
			    	    else{SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: Usted no dispone de casa 2.");}
			    	}
				}
			}
			else
			{
				SafeDialogEx(playerid, GPSX, DIALOG_STYLE_LIST, "{00F70C}GPS", "{FFFFFF}Buscar {8181F7}[Vehículos]\n{FFFFFF}Buscar {8181F7}[Propiedades]\n{FFFFFF}Buscar {8181F7}[Ubicaciones]\n{FFFFFF}Buscar {8181F7}[Trabajos]", "Buscar", "Salir");
				return 1;
			}
		}
		case TRACKCAR:
		{
		    if(response == 1)
		    {
				for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
				{
				    if(listitem == i)
				    {
				        new Float: carPos[3];
				        if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
				        {
				        	GetVehiclePos(PlayerVehicleInfo[playerid][i][pvId], carPos[0], carPos[1], carPos[2]);
				        	if(GetPVarInt(playerid, "Packages") == 0 || TaxiAccepted[playerid] == 999 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
							{
						    	SetPVarInt(playerid, "TrackCar", 1);
					    		new zone[MAX_ZONE_NAME];
					    		format(string, sizeof(string), "Tu vehículo fue localizado en %s. (Vé al checkpoint)", zone);
					    		SendClientMessageEx(playerid, COLOR_WHITE, string);
					    		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
								PlayerPlaySound(playerid, 1138, 0,0,0);
							}
							else return SendClientMessageEx(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asignó, debes de estar en una llamada o algo.");
						}
						else if(PlayerVehicleInfo[playerid][i][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
						else SendClientMessageEx(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe o no está spawneado.");
				    }
				}
		    }
		}
		case SELLCAR:
		{
		    if(response == 1)
		    {
				for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
				{
				    if(listitem == i)
				    {
				        if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
				        {
				            if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 5000;
                            for(new m = 0; m < MAX_MODS; m++)
							{
                                PlayerVehicleInfo[playerid][i][pvMods][m] = 0;
                            }
                            carsforplayer[playerid]--;
				            DestroyVehicle(PlayerVehicleInfo[playerid][i][pvId]);
                            PlayerVehicleInfo[playerid][i][pvId] = 0;
                            PlayerVehicleInfo[playerid][i][pvModelId] = 0;
                            PlayerVehicleInfo[playerid][i][pvPosX] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvPosY] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvPosZ] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[playerid][i][pvLock] = 0;
                            PlayerVehicleInfo[playerid][i][pvLocked] = 0;
                            PlayerVehicleInfo[playerid][i][pvPaintJob] = -1;
                            PlayerVehicleInfo[playerid][i][pvColor2] = 0;
                            strmid(PlayerVehicleInfo[playerid][i][pvAllowPlayer], "Nadie", 0, strlen("Nadie"), 255);
                            PlayerVehicleInfo[playerid][i][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[playerid][i][pvPark] = 0;
                            PlayerVehicleInfo[playerid][i][pvHealth] = 1000.0;
                            format(string, sizeof(string), "Gracias por la venta, el gobierno te ha pagado por el vehículo. {33AA33}($%i)", PlayerVehicleInfo[playerid][i][pvPrice]/5 +10);
                            SendClientMessageEx(playerid, COLOR_WHITE, string);
                            GivePlayerCash(playerid, PlayerVehicleInfo[playerid][i][pvPrice]/2);
							PlayerCars--;
						}
						else if(PlayerVehicleInfo[playerid][i][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "No se puede vender un vehículo confiscado.");
						else SendClientMessageEx(playerid, COLOR_WHITE, "No se puede vender un vehículo que no existe o no está liberado.");
				    }
				}
		    }
		}
		case GTRACKCAR:
		{
		    if(response == 1)
		    {
		        for(new i = 0; i < MAX_GANG_VEHICLES; i++)
		        {
		            if(listitem == i)
		            {
		                new Float: carPos[3];
						new Family = Info[playerid][pFMember];
						if(FVINFO[Family][i][fvId] != INVALID_VEHICLE_ID)
						{
		                	GetVehiclePos(FVINFO[Family][i][fvId], carPos[0], carPos[1], carPos[2]);
		                	if(GetPVarInt(playerid, "Packages") != 0 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
							{
								return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor asegurate de que no estás en otro tipo de función, usando un checkpoint.");
							}
							else
							{
						    	SetPVarInt(playerid, "TrackCar", 1);
					    		new zone[MAX_ZONE_NAME];
					    		format(string, sizeof(string), "El vehículo se encuentra en %s. (Vé al checkpoint)", zone);
					    		SendClientMessageEx(playerid, COLOR_YELLOW, string);
					    		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					    		PlayerPlaySound(playerid, 1138, 0,0,0);
							}
						}
						else SendClientMessageEx(playerid, COLOR_WHITE, "No se puede rastrear un vehículo en un espacio vacío.");
	            	}
	        	}
	    	}
		}
 		case UNMODCARMENU: if(response)
		{
			new count = GetPVarInt(playerid, "modCount");
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) for (new i = 0; i < count; i++) if(listitem == i){
				format(string, sizeof(string), "partList%i", i);
				new partID = GetPVarInt(playerid, string);
				if (partID == 999){
					for(new f = 0 ; f < MAX_MODS; f++){
						RemoveVehicleComponent(PlayerVehicleInfo[playerid][d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
						PlayerVehicleInfo[playerid][d][pvMods][f] = 0;
					}
					return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Todas las modificaciones se han eliminado de tu vehículo.");
				}
				RemoveVehicleComponent(GetPlayerVehicleID(playerid), partID);
				PlayerVehicleInfo[playerid][d][pvMods][GetVehicleComponentType(partID)] = 0;
				return SendClientMessageEx(playerid, COLOR_WHITE, "La modificación que has seleccionado ha sido eliminado.");
			}
		}
		case GOTOPLAYERCAR:{
		    if(response == 1){
		        for(new i = 0; i < MAX_PLAYERVEHICLES; i++){
		            if(listitem == i){
						new Float: carPos[3], id = GetPVarInt(playerid, "playeraffectedcarTP");
						if(PlayerVehicleInfo[id][i][pvId] > INVALID_PLAYER_VEHICLE_ID){
							GetVehiclePos(PlayerVehicleInfo[id][i][pvId], carPos[0], carPos[1], carPos[2]);
							SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[id][i][pvId]));
							SetPlayerInterior(playerid,0);
							SetPlayerPos(playerid, carPos[0], carPos[1], carPos[2]);
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "No te puede teletransportar a un espacio vacío o embargado.");
					}
				}
		    }
		}
		case SPRAYTAG_DIALOG_RETURN: SprayTag_Dialog(playerid, TYPE_LIST_MENU);
		case SPRAYTAG_MENU:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					SprayTag_Dialog(playerid, TYPE_LIST_TAGS_CREATE);
				}
				case 1: SprayTag_Dialog(playerid, TYPE_LIST_TAGS);
				case 2: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_DELETE);
				case 3: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_FIND);
			}
		}
		case SPRAYTAG_EDIT_MAIN:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);
			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
				return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{BE81F7}S:RP - "COL_WHITE"Graffitis", "¡Ups!, no hay nada en esta ranura.", "Entendido", "");

			spraytag_slot[playerid] = listitem;

			spraytag_bold[playerid] = SprayTags[playerid][listitem][_spBold];
			spraytag_color[playerid] = SprayTags[playerid][listitem][_spFontColor];
			format(spraytag_text[playerid], 50, SprayTags[playerid][listitem][_spText]);
			format(spraytag_font[playerid], 50, SprayTags[playerid][listitem][_spFont]);
			spraytag_size[playerid] = SprayTags[playerid][listitem][_spFontSize];
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_DELETE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);

			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
				return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{BE81F7}S:RP - "COL_WHITE"Graffitis", "¡Ups!, no hay nada en esta ranura.", "Entendido", "");

			Tags_Clear(playerid, listitem);
			format(szMessage, sizeof szMessage, "[INFRA-RP] El graffiti ID %i se ha borrado correctamente.", listitem);
			SendClientMessage(playerid, COLOR_GRAD1, szMessage);
			SprayTag_Dialog(playerid, TYPE_LIST_MENU);
		}
		case SPRAYTAG_FIND:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);

			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
				return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{BE81F7}NS:RP - "COL_WHITE"Graffitis", "¡Ups!, no hay nada en esta ranura.", "Entendido", "");

			spraytag_find[playerid] = SetPlayerCheckpoint(playerid, SprayTags[playerid][listitem][_spPosX], SprayTags[playerid][listitem][_spPosY], SprayTags[playerid][listitem][_spPosZ], 3.0);
			format(szMessage, sizeof szMessage, "[INFRA-RP] Un checkpoint fue marcado en el graffiti ID %i.", listitem);
			SendClientMessage(playerid, COLOR_GRAD1, szMessage);
		}
		case SPRAYTAG_CREATE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);

			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
			{
				spraytag_slot[playerid] = listitem;
				format(spraytag_text[playerid], 50, "Exemplo");
				format(spraytag_font[playerid], 50, "Arial");
				spraytag_color[playerid] = -1;
				spraytag_size[playerid] = 24;
				spraytag_bold[playerid] = 0;
				SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			} else ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, "{BE81F7}NS:RP - "COL_WHITE"Graffitis", "Esta ranura esta en uso.", "Entendido", "");
		}
		case SPRAYTAG_EDIT_LIST:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_TAGS);

			new
				iIndex = spraytag_slot[playerid]
			;

			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_TEXT, DIALOG_STYLE_INPUT, "{BE81F7}NS:RP - "COL_WHITE"Texto", "Introduzca el texto que aparecera en el graffiti.", "Aceptar", "Volver");
				case 1: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_FONT, DIALOG_STYLE_LIST, "{BE81F7}NS:RP - "COL_WHITE"Fuente", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\nNaight Fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Aceptar", "Volver");
				case 2: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_SIZE, DIALOG_STYLE_INPUT, "{BE81F7}NS:RP - "COL_WHITE"Tamaño", "Introduzca el tamaño del texto del graffiti.", "Aceptar", "Volver");
				case 3: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_COLOR, DIALOG_STYLE_LIST, "{BE81F7}NS:RP - "COL_WHITE"Color", "{FF0000}Rojo\n{04B404}Verde\n{00B5CD}Azul Claro\n{FFFF00}Amarillo\n{0000FF}Azul\n{848484}Gris\n{FF00FF}Rosa\n{FFFFFF}Blanco", "Aceptar", "Volver");
				case 4:
				{
					switch(spraytag_bold[playerid])
					{
						case 0: spraytag_bold[playerid] = 1;
						case 1: spraytag_bold[playerid] = 0;
					}
					SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
				}
				case 5:
				{
					EditDynamicObject(playerid, SprayTags[playerid][iIndex][_spObject]);
					SetPVarInt(playerid, "SPRAYTAG_EDIT", 2);
				}
			}
		}
		case SPRAYTAG_EDIT_TEXT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			format(spraytag_text[playerid], 32, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_FONT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			format(spraytag_font[playerid], 32, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_SIZE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			spraytag_size[playerid] = strval(inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_COLOR:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			new iColor;
			switch(listitem)
	        {
	            case 0: iColor = HexToInt("0xFFFF0000");
	            case 1: iColor = HexToInt("0xFF04B404");
	            case 2: iColor = HexToInt("0xFF00B5CD");
	            case 3: iColor = HexToInt("0xFFFFFF00");
	            case 4: iColor = HexToInt("0xFF0000FF");
	            case 5: iColor = HexToInt("0xFF848484");
	            case 6: iColor = HexToInt("0xFFFF00FF");
	            case 7: iColor = HexToInt("0xFFFFFFFF");
	        }
			spraytag_color[playerid] = iColor;
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}

		case SPRAYTAG_CREATE_MAIN:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_TAGS_CREATE);
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_TEXT, DIALOG_STYLE_INPUT, "{BE81F7}NS:RP - "COL_WHITE"Texto", "Introduzca el texto que aparecera en el graffiti.", "Aceptar", "Volver");
				case 1: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_FONT, DIALOG_STYLE_LIST, "{BE81F7}NS:RP - "COL_WHITE"Fuente", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\nNaight Fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Aceptar", "Volver");
				case 2: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_SIZE, DIALOG_STYLE_INPUT, "{BE81F7}NS:RP - "COL_WHITE"Tamaño", "Introduzca el tamaño del texto del graffiti.", "Aceptar", "Volver");
				case 3: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_COLOR, DIALOG_STYLE_LIST, "{BE81F7}NS:RP - "COL_WHITE"Color", "{FF0000}Rojo\n{04B404}Verde\n{00B5CD}Azul Claro\n{FFFF00}Amarillo\n{0000FF}Azul\n{848484}Gris\n{FF00FF}Rosa\n{FFFFFF}Blanco", "Aceptar", "Volver");
				case 4:
				{
					switch(spraytag_bold[playerid])
					{
						case 0: spraytag_bold[playerid] = 1;
						case 1: spraytag_bold[playerid] = 0;
					}
					SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
				}
				case 5:
				{
					new
						Float:Position[3],
						szText[50],
						szFont[50]
					;

					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					format(szText, 50, spraytag_text[playerid]);
					format(szFont, 50, spraytag_font[playerid]);

					spraytag_object[playerid] = CreateDynamicObject(SPRAY_TAG_OBJECT, Position[0]-1.0, Position[1], Position[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, SPRAY_TAG_OBJECT_DISTANCE);
					SetDynamicObjectMaterialText(spraytag_object[playerid], 0, szText, OBJECT_MATERIAL_SIZE_512x512, szFont, spraytag_size[playerid], spraytag_bold[playerid], spraytag_color[playerid], 0, 1);
					EditDynamicObject(playerid, spraytag_object[playerid]);
					SetPVarInt(playerid, "SPRAYTAG_EDIT", 1);
				}
			}
		}
		case SPRAYTAG_CREATE_TEXT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			format(spraytag_text[playerid], 50, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_FONT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			format(spraytag_font[playerid], 50, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_SIZE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			spraytag_size[playerid] = strval(inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_COLOR:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			new iColor;
			switch(listitem)
	        {
	            case 0: iColor = HexToInt("0xFFFF0000");
	            case 1: iColor = HexToInt("0xFF04B404");
	            case 2: iColor = HexToInt("0xFF00B5CD");
	            case 3: iColor = HexToInt("0xFFFFFF00");
	            case 4: iColor = HexToInt("0xFF0000FF");
	            case 5: iColor = HexToInt("0xFF848484");
	            case 6: iColor = HexToInt("0xFFFF00FF");
	            case 7: iColor = HexToInt("0xFFFFFFFF");
	        }
			spraytag_color[playerid] = iColor;
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case PB_MENU:
		{
			if(response == 1)
			{
			    switch(listitem)
			    {
			        // Elegir Arena
			        case 0: PaintballArenaSelection(playerid);
			        // Comprar Paintball Fichas
			        case 1: PaintballTokenBuyMenu(playerid);
			        case 2:
			        {
			            if(Info[playerid][pAdminZC] >= 1337)
			            {
			            	//PaintballAdminMenu(playerid);
						}
						else
						{
						    PaintballMainMenu(playerid);
						    SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes acceso al panel.");
						    return 1;
						}
			        }
			    }
			}
		}
		case PAYDAY1:
		{
		   	if(response == 1)
		   	{
		   		if(strfind(inputtext, PayDayCodes[IDCode[playerid]], true) != -1)
				{
					if(IsPlayerConnected(playerid))
					{
						if(MoneyMessage[playerid]==1)
						{
					    	if( Info[playerid][pJailed] < 1 && !IsACop(playerid))
					    	{
					    	    format(string,sizeof(string),"No pudiste pagar la deuda de {FF0000}$%d{FFFFFF}. Ahora la policía te está buscando.",GetPlayerCash(playerid));
								SendClientMessageEx(playerid, COLOR_WHITE, string);
								if(Info[playerid][pWantedLevel] < 6) Info[playerid][pWantedLevel] += 1;
								SetPlayerWantedLevel(playerid, Info[playerid][pWantedLevel]);
							}
						}
					    if(PaydayOn == 0)
						{
						    TogglePlayerControllable(playerid, 1);
						    IDCode[playerid] = -1;
							return SendClientMessageEx(playerid, COLOR_WHITE, "Pasaron 3 minutos ya se enviaron los cheques a cada ciudadano, espera a otra hora de pago.");
						}
						if(Info[playerid][pLevel] > 0)
		    			{
							if(Info[playerid][pRenting] != INVALID_HOUSE_ID)
							{
								if(HouseInfo[Info[playerid][pRenting]][hRentFee] > Info[playerid][pAccount])
								{
									Info[playerid][pRenting] = INVALID_HOUSE_ID;
									SendClientMessageEx(playerid, COLOR_WHITE, "Fuiste desalojado de la casa que rentabas.");
								}
								/*else
								{
									HouseInfo[Info[playerid][pRenting]][hSafeMoney] += HouseInfo[Info[playerid][pRenting]][hRentFee];
									Info[playerid][pAccount] -= HouseInfo[Info[playerid][pRenting]][hRentFee];
								}*/
								// Ahora la renta de la casa es retirada desde el Payday.
							}
							Info[playerid][pRob] = 0; // IMPORTANTE - /robarcoche, /vendar, /robar.
							if(Info[playerid][pVIP] >= 4) Info[playerid][pVTokens]+= 2;
							Info[playerid][YaCobre] = 1;
							IDCode[playerid] = -1;
				    		if(Info[playerid][pDobleExp] == 0)
							{
                                Info[playerid][pExp] += 1;
							}
				    		else
							{
								Info[playerid][pExp] += 2;
								Info[playerid][pDobleExp]--;
								format(string, sizeof(string), "* Ganaste 2 puntos de respeto por tener horas de doble experiencia, te quedan %d horas más.", Info[playerid][pDobleExp]);
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							}
                        GameTextForPlayer(playerid, "~y~+1 de Experiencia", 5000, 1);
						PagasFaccion(playerid); // Nuevo Payday System.
                        /*GivePlayerCash(playerid, 500*Info[playerid][pLevel]);
                        GivePlayerCash(playerid, 2500*Info[playerid][pRank]);*/
                        // Desbug de Guardado de cuentas.
                        new log[255];
                        format(log, 225, "%s ha usado el CMD /payday.", GetPlayerNameEx(playerid));
    					Log("LOGS/CrashServer.log", log);
                        OnPlayerSavedStats(playerid);
                        format(log, 225, "El usuario %s ha guardado sus datos de la cuenta éxitosamente.", GetPlayerNameEx(playerid));
    					Log("LOGS/CrashServer.log", log);
    					
						}
					}
				}
				else
				{
				    new text[256], rand;
				    new facc = Info[playerid][pMember];
					new rango = Info[playerid][pRank];
					rand = random(22);
    				format(string, sizeof(string), "Gobierno de Los Santos.\n\nEl gobierno le otorga a cada persona un bono de pago, pero es necesario\nque nos confirme sus datos y enviar el código de seguridad:\n\nNombre: %s\nEdad: %d\nPaga: %d (%s)\nNuevo Código: %s",GetPlayerNameEx(playerid), Info[playerid][pAge], InfoFacc[facc][gPaga]*rango, InfoFacc[facc][gFacc], PayDayCodes[rand]); // Payday.
					ShowPlayerDialog(playerid, PAYDAY1, DIALOG_STYLE_INPUT,"{00F70C} Error intenta otra vez:",text,"Enviar","Salir");
                    IDCode[playerid] = rand;
				}
			}
		}
		case PB_FICHAS:
		{
		    if(response == 1)
		    {
		        if(isnull(inputtext)) return PaintballTokenBuyMenu(playerid);
		        if(strval(inputtext) <= 0) return PaintballTokenBuyMenu(playerid);
		        if(strval(inputtext) > 1000)
		        {
		            PaintballTokenBuyMenu(playerid);
		            SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} No puedes comprar 1000 fichas en una compra.");
		            return 1;
		        }
		        if(GetPlayerCash(playerid) < 20*strval(inputtext))
		        {
					PaintballTokenBuyMenu(playerid);
		        	format(string,sizeof(string), "{00F70C}[Paintball Arena]:{5ABAFF} No puedes pagar %d fichas por $%d.",strval(inputtext),strval(inputtext)*5000);
		        	SendClientMessageEx(playerid, COLOR_WHITE, string);
		        	return 1;
				}
		        GivePlayerCash(playerid, -20*strval(inputtext));
				Info[playerid][pPaintTokens] += strval(inputtext);
				format(string,sizeof(string), "{00F70C}[Paintball Arena]:{5ABAFF} Compraste %d fichas por $%d.",strval(inputtext),strval(inputtext)*20);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
		    }
		    else PaintballMainMenu(playerid);
		}
		case PBARENASCORES:
		{
		    if(response == 1) return PaintballScoreboard(playerid);
		}
		case PB_SARENA:
		{
		    if(response == 1)
		    {
		        switch(listitem)
		        {
	       	    	case 0: JoinPaintballArena(playerid, 1);//Join DM
	       	    	case 1: JoinPaintballArena(playerid, 5);//Join DM2
	       	    	case 2: JoinPaintballArena(playerid, 2);// Join Choose Team
	       	    	case 3: JoinPaintballArena(playerid, 4); // SendClientMessageEx Coming soon
	       	    }
	       	}
		    else PaintballMainMenu(playerid);
		}
		case PB_CHOOSE:
		{
		    if(response == 1)
		    {
		        switch(listitem)
		        {
		        	case 0: // Red
	 				{
	 				    if(Info[playerid][pPaintTeam] == 1)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Ya eres del equipo rojo!");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersRed == 12)
	 				    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Equipo rojo está full, por favor elige otro equipo.");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersRed > PlayersBlue)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} No puedes unirte a equipos ahora, si llegas a entrar estarían disparejos.");
	 				        return 1;
	 				    }
	 				    PlayersBlue--;
	 				    PlayersRed++;
	 				    Info[playerid][pPaintTeam] = 1;
	 				    SetHP(playerid, 0);
		        	}
		        	case 1: // Blue
		        	{
		        	    if(Info[playerid][pPaintTeam] == 2)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Ya eres del equipo azul!");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersBlue == 12)
	 				    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Equipo azul está full, por favor elige otro equipo.");
	 				        PaintballSwitchTeam(playerid);
	 				        return 1;
	 				    }
	 				    if(PlayersBlue > PlayersRed)
	 				    {
	 				        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} No puedes unirte a equipos ahora, si llegas a entrar estarían disparejos.");
	 				        return 1;
	 				    }
	 				    PlayersRed--;
	 				    PlayersBlue++;
	 				    Info[playerid][pPaintTeam] = 2;
	 				    SetHP(playerid, 0);
		        	}
				}
		    }
		}
		case PBJOINTEAM:
		{
	   		if(response == 1)
	    	{
	        	switch(listitem)
	        	{
	        		case 0: // Red
 					{
 					    if(PlayersRed == 12)
 					    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} El equipo rojo está FULL, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C} Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    if(PlayersRed > PlayersBlue)
 					    {
 					        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Los equipos estarían disparejos, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    Info[playerid][pPaintTeam] = 1;
 					    TotalTDM++;
						JoinPaintballArena(playerid, 3);
	        		}
	        		case 1: // Blue
	        		{
 					    if(PlayersBlue == 12)
 					    {
							SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} El equipo azul está FULL, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    if(PlayersBlue > PlayersRed)
 					    {
 					        SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} Los equipos estarían disparejos, por favor elige otro equipo.");
 					        SafeDialogEx(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"{00F70C}Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{FFFFFF}Equipo Azul","Entrar","Salir");
 					        return 1;
 					    }
 					    Info[playerid][pPaintTeam] = 2;
 					    TotalTDM++;
						JoinPaintballArena(playerid, 3);
		        	}
				}
		    }
		    else
		    {
		        PaintballArenaSelection(playerid);
		    }
		}
		case PB_ARMAS:
		{
  			if(GetPVarInt(playerid, "ArenaMode") == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Lo sentimos, no estás dentro de la arena.");
		    if(Info[playerid][pPaintTokens] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Lo sentimos, no tienes suficientes fichas para canjear.");
 			if(response)
			{
				if(listitem == 0) //
				{
 					GivePlayerWeapon(playerid, 22, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 1) //deagle
				{
 					GivePlayerWeapon(playerid, 24, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 2) //MP5
				{
 					GivePlayerWeapon(playerid, 29, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 3) //AK-47
				{
 					GivePlayerWeapon(playerid, 30, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 4) //M4
				{
				    if(Info[playerid][pPaintTokens] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Necesitas 2 fichas para esta arma.");
 					GivePlayerWeapon(playerid, 31, 60000);
 					return Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 5) //shotgun
				{
 					GivePlayerWeapon(playerid, 25, 60000);
 					Info[playerid][pPaintTokens] -= 1;
 				}
				if(listitem == 6) //spaz
				{
				    if(Info[playerid][pPaintTokens] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{5ABAFF}PAINTBALL:{FFFFFF} Necesitas 2 fichas para esta arma.");
 					GivePlayerWeapon(playerid, 27, 60000);
 					return Info[playerid][pPaintTokens] -= 2;
 				}
				if(listitem == 7) //armor
				{
					new Float:health;
					GetPlayerHealth(playerid, health);
					if (health < 50)
					{
					 	return SendClientMessageEx(playerid,COLOR_WHITE,"{5ABAFF}PAINTBALL:{FFFFFF} No puedes comprar chaleco con menos de 35 de vida!");
					}
 					SetPlayerArmour(playerid, 100);
 					return Info[playerid][pPaintTokens] -= 1;
				}
			}
		}
		case DIALOG_CDLOCKMENU:
		{
			if(response)
			{
				if(GetPVarInt(playerid, "lockmenu") == 1)
				{
	            	new pvid;
	            	if (isnumeric(inputtext))
		        	{
						pvid = strval(inputtext)-1;
				    	if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
				    	{
					    	SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} No tienes un vehiculo en este slot.");
					    	SetPVarInt(playerid, "lockmenu", 0);
					    	return 1;
				    	}
				    	if(PlayerVehicleInfo[playerid][pvid][pvLock] == 1)
				    	{
						    SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} Esto ya está instalado ene ste vehiculo.");
						    SetPVarInt(playerid, "lockmenu", 0);
						    return 1;
				    	}
				    	format(string, sizeof(string), "* Compraste un seguro de alarma.");
				    	SendClientMessageEx(playerid, COLOR_WHITE, string);
				    	SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Ahora puedes usar /seguro para asegurar tu auto.");
				    	PlayerVehicleInfo[playerid][pvid][pvLock] = 1;
				    	SetPVarInt(playerid, "lockmenu", 0);
						GivePlayerCash(playerid, -500);
						if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 500);}
			    	}
				}
				else if(GetPVarInt(playerid, "lockmenu") == 2)
				{
		   			new pvid;
            		if (isnumeric(inputtext))
	        		{
                		pvid = strval(inputtext)-1;
			    		if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
			    		{
				    		SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} No tienes un vehiculo en este slot.");
				    		SetPVarInt(playerid, "lockmenu", 0);
	                		return 1;
			    		}
			    		if(PlayerVehicleInfo[playerid][pvid][pvLock] == 3)
		  	    		{
				    		SendClientMessageEx(playerid, COLOR_GRAD4, "{FFFF00}[ERROR]:{FFFFFF} Esto ya está instalado en este vehiculo.");
				    		SetPVarInt(playerid, "lockmenu", 0);
				    		return 1;
			    		}
			    		format(string, sizeof(string), "* Compraste un seguro industrial!");
			    		SendClientMessageEx(playerid, COLOR_WHITE, string);
			    		SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Ahora puedes usar /seguro para asegurar tu coche.");
			    		PlayerVehicleInfo[playerid][pvid][pvLock] = 3;
			    		SetPVarInt(playerid, "lockmenu", 0);
						GivePlayerCash(playerid, -2000);
						if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 2000);}
					}
				}
			}
		}
 	case Tienda_OOC:
	{
	if(response == 1)
	{
	switch(listitem)
	{
	case 0:
	{
	if(Info[playerid][pPTR] > 149) // mas de 100
	{
	GivePlayerCash(playerid, 200000);
	SendClientMessageEx(playerid, -1, "{00F70C}Has canjeado 150 Fichas Cash! por 200.000$!");
	Info[playerid][pPTR] -= 150;
	} else SendClientMessageEx(playerid, -1, "{FF0000}Necesitas 150 Fichas Cash!");
	return 1;
	}
	case 1:
	{
	if(Info[playerid][pPTR] > 49) // menos de 50
	{
	GivePlayerCash(playerid, 60000);
	SendClientMessageEx(playerid, -1, "{00F70C}Has canjeado 50 Fichas Cash! por 60.000$!");
	Info[playerid][pPTR] -= 50;
	} else SendClientMessageEx(playerid, -1, "{FF0000}Necesitas 50 Fichas Cash!");
	return 1;
	}
	case 2:
	{
	if(Info[playerid][pPTR] > 24) // menos de 25
	{
	GivePlayerCash(playerid, 26000);
	SendClientMessageEx(playerid, -1, "{00F70C}Has canjeado 25 Fichas Cash! por 26.000$!");
	Info[playerid][pPTR] -= 25;
	} else SendClientMessageEx(playerid, -1, "{FF0000}Necesitas 25 Fichas Cash!");
	return 1;
	}
	case 3:
	{
	if(Info[playerid][pPTR] > 9) // menos de 10
	{
	GivePlayerCash(playerid, 10000);
	SendClientMessageEx(playerid, -1, "{00F70C}Has canjeado 10 Fichas Cash! por 10.000$!");
	Info[playerid][pPTR] -= 10;
	} else SendClientMessageEx(playerid, -1, "{FF0000}Necesitas 10 Fichas Cash!");
	return 1;
	}
	case 4:
	{
	if(Info[playerid][pPTR] > 4) // menos de 5
	{
	GivePlayerCash(playerid, 5000);
	SendClientMessageEx(playerid, -1, "{00F70C}Has canjeado 5 Fichas Cash! por 5.000$!");
	Info[playerid][pPTR] -= 5;
	} else SendClientMessageEx(playerid, -1, "{FF0000}Necesitas 5 Fichas Cash!");
	return 1;
	}
	}
	}
	return 1;
	}
		case EQUIPO_DOC:
		{
		    if(response == 1)
		    {
		        switch (listitem)
		        {
					case 0:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 70);
								Medics += 1;
								format(string, sizeof(string), "* %s se pone su bata blanca y se desinfecta sus manos.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 1:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 274);
								Medics += 1;
								format(string, sizeof(string), "* %s se viste y guarda su radio.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 2:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 275);
								Medics += 1;
								format(string, sizeof(string), "* %s se viste y guarda su radio.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 3:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 276);
								Medics += 1;
								format(string, sizeof(string), "* %s se viste y guarda su radio.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
     				case 4:
		        	{
                    			GivePlayerValidWeapon(playerid, 42);
								SetHP(playerid, 100);
                    			SetPlayerArmour(playerid, 100);
								SetPlayerSkin(playerid, 277);
								SetPlayerColor(playerid, TEAM_BOMBEROS_COLOR);
		            			format(string, sizeof(string), "* %s coge el equipo de Ayudante.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            			InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d materiales.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        	}
		        	case 5:
		        	{
								if(Info[playerid][pRank] > 2)
				    			{
                    				GivePlayerValidWeapon(playerid, 42);
									SetHP(playerid, 100);
                    				SetPlayerArmour(playerid, 100);
									SetPlayerSkin(playerid, 278);
									SetPlayerColor(playerid, TEAM_BOMBEROS_COLOR);
		            				format(string, sizeof(string), "* %s coge el equipo de Intermedio.", GetPlayerNameEx(playerid));
		            				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            				InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d materiales.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        				}
								else
    							{
    				            	SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el rango requerido (3, 4 ó 5).");
    				            	return 1;
				            	}
			        }
					case 6:
					{
								if(OnDuty[playerid] == 1) {	SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Estás en labor, termina tu turno."); return 1;    }
								SetPlayerSkin(playerid, Info[playerid][pChar]);
								Medics -= 1;
								format(string, sizeof(string), "* %s se viste con ropa normal", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				ActualizarFaccion(fac);
			}
		}
		case EQUIPO_HITMAN:
		{
		    if(response == 1)
		    {
		        switch (listitem)
		        {
		            case 0:
					{
								GivePlayerValidWeapon(playerid, 23);
								format(string, sizeof(string), "* %s Coge una pistola silenciadora del armario.", GetPlayerNameEx(playerid));
   				 				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   				 				InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					case 1:
					{
								GivePlayerValidWeapon(playerid, 4);
								format(string, sizeof(string), "* %s Coge un cuchillo del armario.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 2:
					{
								Info[playerid][pMask] = 1;
							 	if(Info[playerid][pLevel] <= 2) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Debes ser mayor a nivel 2.");
								format(string, sizeof(string), "* %s Coge una mascara del armario.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					}
					case 3:
					{
								GivePlayerValidWeapon(playerid, 34);
								format(string, sizeof(string), "* %s Coge un sniper del armario.", GetPlayerNameEx(playerid));
		            			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            			InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);

					}
					case 4:
					{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 5:
					{
				    GivePlayerValidWeapon(playerid, 29);
				    format(string, sizeof(string), "* %s Coge una MP5 del armario.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}
			}
			ActualizarFaccion(fac);
		}
		case EQUIPO_GROOVE:
		{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 5);
		            format(string, sizeof(string), "* %s coge un bate del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 41);
					format(string, sizeof(string), "* %s coge un bote de spray del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 32);
					format(string, sizeof(string), "* %s coge una Tec-9 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_BALLAS:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 5);
		            format(string, sizeof(string), "* %s coge un bate del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 41);
					format(string, sizeof(string), "* %s coge un bote de spray del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 32);
					format(string, sizeof(string), "* %s coge una Tec-9 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_SURENOS:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 5);
		            format(string, sizeof(string), "* %s Coge un bate del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 41);
					format(string, sizeof(string), "* %s Coge un bote de spray del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 32);
					format(string, sizeof(string), "* %s coge una Tec-9 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_LK:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 5);
		            format(string, sizeof(string), "* %s Coge un bate del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 41);
					format(string, sizeof(string), "* %s Coge un bote de spray del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 32);
					format(string, sizeof(string), "* %s coge una Tec-9 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_RUSA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
				case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s Coge un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s Coge una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 31);
					format(string, sizeof(string), "* %s Coge una M4 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 4:
		        {
					GivePlayerValidWeapon(playerid, 25);
					format(string, sizeof(string), "* %s Coge una Shotgun del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
				case 5:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_LCN:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s Coge un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s Coge una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 31);
					format(string, sizeof(string), "* %s Coge una M4 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 4:
		        {
					GivePlayerValidWeapon(playerid, 25);
					format(string, sizeof(string), "* %s Coge una Shotgun del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
				case 5:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_YAKUZA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s Coge un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s Coge una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 31);
					format(string, sizeof(string), "* %s Coge una M4 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
				case 4:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_ALQAEDA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 29);
		            format(string, sizeof(string), "* %s Coge una MP5 del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 30);
		            format(string, sizeof(string), "* %s Coge una AK-47 del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 24);
					format(string, sizeof(string), "* %s Coge una Desert Eagle del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
				case 3:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
	case EQUIPO_SANTANA:
	{
	    if(response == 1)
	    {
   	        switch(listitem)
   	        {
		        case 0:
		        {
					GivePlayerValidWeapon(playerid, 4);
		            format(string, sizeof(string), "* %s Coge un cuchillo del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        case 1:
		        {
					GivePlayerValidWeapon(playerid, 24);
		            format(string, sizeof(string), "* %s Coge una desert eagle del armario.", GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 2:
		        {
					GivePlayerValidWeapon(playerid, 29);
					format(string, sizeof(string), "* %s Coge una MP5 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
		        case 3:
		        {
					GivePlayerValidWeapon(playerid, 30);
					format(string, sizeof(string), "* %s Coge una AK-47 del armario.", sendername);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            InfoFacc[fac][gMateriales] -= 1; format(string, sizeof(string), "[EQUIPO]:{FFFFFF} Ahora quedan %d armas.", InfoFacc[fac][gMateriales]); SendClientMessageEx(playerid, COLOR_GREY, string);
		        }
				case 4:
				{
				    SetPlayerArmour(playerid, 100.0);
				    format(string, sizeof(string), "* %s Coge un chaleco del armario y se lo pone.", sendername);
				    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
		    }
		    ActualizarFaccion(fac);
	    }
	}
		case LOTTO_BUY:
		{
			if(response == 1)
			{
			    new lenght = strlen(inputtext);
			    if(lenght > 0 && lenght < 4)
			    {
					Info[playerid][pLottoNr] = strval(inputtext);
					SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[24/7]:{FFFFFF} Lotería comprada.");
					Bought(playerid, 5);
					if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 5);}
				}
			}
		}
		case FSTYLE_DIALOG:
		{
	    	if(response == 1)
	    	{
	        	switch(listitem)
	        	{
	            	case 0:
	            	{
			    	    if(CheckMoney(playerid, 1500))
			    	    {
							Bought(playerid, 1500);
							Info[playerid][pFStyle] = 5;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
							SendClientMessageEx(playerid, COLOR_WHITE, "Felicidades! Has aprendido Knee Head.");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 1:
		            {
				        if(CheckMoney(playerid, 1000))
				        {
							Bought(playerid, 1000);
							Info[playerid][pFStyle] = 4;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
							SendClientMessageEx(playerid, COLOR_WHITE, "Felicidades! Has aprendido Kung Fu.");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 2:
		            {
				        if(CheckMoney(playerid, 800))
				        {
							Bought(playerid, 800);
							Info[playerid][pFStyle] = 5;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
							SendClientMessageEx(playerid, COLOR_WHITE, "Felicidades! Has aprendido a Boxear.");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 3:
		            {
				        if(CheckMoney(playerid, 800))
				        {
							Bought(playerid, 800);
							Info[playerid][pFStyle] = 15;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
							SendClientMessageEx(playerid, COLOR_WHITE, "Felicidades! Has aprendido pelea callejera.");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
					case 4:
		            {
				        if(CheckMoney(playerid, 800))
				        {
							Bought(playerid, 800);
							Info[playerid][pFStyle] = 16;
							SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
							SendClientMessageEx(playerid, COLOR_WHITE, "Felicidades! Has aprendido a usar los codos.");
							ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
						}
					}
				}
			}
		}
		case MMENU_REPARACION:
		{
			if(response == 1)
		    {
		        new Float:cx, Float:cy, Float:cz;
	         	GetVehiclePos(idcar, cx, cy, cz);
	         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
		        switch(listitem)
		        {
		            case 0:
					{
						format(string, sizeof(string), "* %s arregla el motor del vehículo.", sendername);
	      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  			SetVehicleHealth(idcar, 1000.0);
						return 1;
					}
					case 1:
					{
						format(string, sizeof(string), "* %s coloca carrocería nueva al vehiculo.", sendername);
	      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  			RepairVehicle(idcar);
						return 1;
					}
				}
			}
		}
  case ADMIN_MENU:
		{
			if(response == 1)
		    {
		        switch(listitem)
		        {
					case 0:// Reparar
					{
		    				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
							SafeDialogEx(playerid, MMENU_REPARACION, DIALOG_STYLE_LIST, "{00F70C}Reparar", "Cambiar Motor\nCambiar Motor + Chasis", "Ok", "Atrás");
							return 1;
					}
					case 1: // Gasolina
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
							format(string, sizeof(string), "* %s llena el tanque del vehículo.", sendername);
			      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					  		VehicleFuel[idcar] = 200;
					  		return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
					}
					case 2: // Tunnig
					{
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
						SafeDialogEx(playerid, MMENUTUNING_G, DIALOG_STYLE_LIST, "{00F70C}Selecciona", "Piezas Wheel Arch Angels\nLlantas\nNeon", "Aceptar", "Atrás");
						return 1;
					}
				}
			}
		}
  case MECANICO_MENU:
		{
			if(response == 1)
		    {
		        switch(listitem)
		        {
					case 0:// Reparar
					{
					        if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica!");
		    				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
							SafeDialogEx(playerid, MMENU_REPARACION, DIALOG_STYLE_LIST, "{00F70C}Reparar", "Cambiar Motor\nCambiar Motor + Chasis", "Ok", "Atrás");
							return 1;
					}
					case 1: // Gasolina
					{
					    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
					    if(IsPlayerInAnyVehicle(playerid))
					    {
							format(string, sizeof(string), "* %s llena el tanque del vehículo.", sendername);
			      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					  		VehicleFuel[idcar] = 200;
					  		return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
					}
					case 2: // Tunnig
					{
    	                if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
						SafeDialogEx(playerid, MMENUTUNING_G, DIALOG_STYLE_LIST, "{00F70C}Selecciona", "Piezas Wheel Arch Angels\nLlantas\nNeon", "Aceptar", "Atrás");
						return 1;
					}
				}
			}
		}
	    case MMENUTUNING_G:{
			if(response == 1){
		        switch(listitem){
		            case 0: SafeDialogEx(playerid, TUNING_WAA, DIALOG_STYLE_LIST, "{00F70C}Piezas W.A.A ", "Chasis X-Flow\nChasis Alien", "Aceptar", "Atrás");
		            case 1: SafeDialogEx(playerid, TUNING_MENU_RUEDAS, DIALOG_STYLE_LIST, "{00F70C}Llantas", "OffRoad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Tunear", "<<");
                    case 2: SafeDialogEx(playerid, TUNING_MENU_NEON, DIALOG_STYLE_LIST, "{00F70C}Neones", "Azul\nRojo\nVerde\nBlanco\nRosa\nAmarillo\nEliminar Neon", "Seleccionar", "Cancelar");
				}
			}
		}
		case TUNING_WAA:
		{
			if(response == 1)
	    	{
	    	    switch(listitem)
	    	    {
	    	        // XFLOW TUNING Important Note: Using an invalid componentid crashes the game.
	    	        case 0:
	    	        {
	    	            SendClientMessageEx(playerid, COLOR_GRAD2, "CASE0");
						switch(GetVehicleModel(idcar))
				        {
				            case 560:
				            {
		                        AddVehicleComponent(idcar, 1030);
		                        AddVehicleComponent(idcar, 1033);
		                        AddVehicleComponent(idcar, 1140);
		                        AddVehicleComponent(idcar, 1170);
		                        AddVehicleComponent(idcar, 1029);
		                        AddVehicleComponent(idcar, 1139);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
				            }
				            case 562:
				            {
		                        AddVehicleComponent(idcar, 1039);
		                        AddVehicleComponent(idcar, 1035);
		                        AddVehicleComponent(idcar, 1148);
		                        AddVehicleComponent(idcar, 1172);
		                        AddVehicleComponent(idcar, 1037);
		                        AddVehicleComponent(idcar, 1146);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.!");
				            }
				            case 565:
				            {
		                        AddVehicleComponent(idcar, 1048);
		                        AddVehicleComponent(idcar, 1053);
		                        AddVehicleComponent(idcar, 1050);
		                        AddVehicleComponent(idcar, 1151);
		                        AddVehicleComponent(idcar, 1152);
		                        AddVehicleComponent(idcar, 1045);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
				            }
			            	case 559:
			            	{
	                        	AddVehicleComponent(idcar,1070);
	                        	AddVehicleComponent(idcar,1068);
	                        	AddVehicleComponent(idcar,1158);
	                        	AddVehicleComponent(idcar,1161);
	                        	AddVehicleComponent(idcar,1173);
	                        	AddVehicleComponent(idcar,1066);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
			            	}
			            	case 561:
			            	{
	                        	AddVehicleComponent(idcar,1057);
	                        	AddVehicleComponent(idcar,1061);
	                        	AddVehicleComponent(idcar,1060);
	                        	AddVehicleComponent(idcar,1156);
	                        	AddVehicleComponent(idcar,1157);
	                    	    AddVehicleComponent(idcar,1059);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
			            	}
			            	case 558:
			           	 	{
	                    	    AddVehicleComponent(idcar, 1093);
	                    	    AddVehicleComponent(idcar,1091);
	                	        AddVehicleComponent(idcar,1163);
	            	            AddVehicleComponent(idcar, 1167);
	            	            AddVehicleComponent(idcar, 1165);
	            	            AddVehicleComponent(idcar, 1089);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Xflow instalada.");
			    	        }
			    	        default: SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Este coche no permite este tipo de tunning.");
			    	    }
			    	    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
						{
							UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
						}
	            	}
	            	// ALIEN TUNING Important Note: Using an invalid componentid crashes the game.
					case 1:
	            	{
	                	SendClientMessageEx(playerid, COLOR_GRAD2, "CASE0");
						switch(GetVehicleModel(idcar))
			        	{
			        	    case 560:
			        	    {
	                	        AddVehicleComponent(idcar, 1026);
	                	        AddVehicleComponent(idcar, 1032);
	                	        AddVehicleComponent(idcar, 1138);
	                	        AddVehicleComponent(idcar, 1141);
	                	        AddVehicleComponent(idcar,1169);
	                	        AddVehicleComponent(idcar, 1028);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
			    	        }
			    	        case 562:
			    	        {
	        	                AddVehicleComponent(idcar,1036);
	        	                AddVehicleComponent(idcar,1038);
	        	                AddVehicleComponent(idcar,1149);
	        	                AddVehicleComponent(idcar,1171);
	        	                AddVehicleComponent(idcar,1034);
	        	                AddVehicleComponent(idcar,1147);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 565:
				            {
	        	                AddVehicleComponent(idcar, 1047);
	        	                AddVehicleComponent(idcar, 1054);
	        	                AddVehicleComponent(idcar, 1049);
	        	                AddVehicleComponent(idcar, 1150);
	        	                AddVehicleComponent(idcar, 1153);
	        	                AddVehicleComponent(idcar, 1046);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 559:
				            {
	        	                AddVehicleComponent(idcar, 1069);
	        	                AddVehicleComponent(idcar, 1067);
	        	                AddVehicleComponent(idcar, 1162);
	        	                AddVehicleComponent(idcar, 1159);
	        	                AddVehicleComponent(idcar, 1160);
	        	                AddVehicleComponent(idcar, 1065);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 561:
				            {
		                        AddVehicleComponent(idcar, 1056);
		                        AddVehicleComponent(idcar, 1055);
		                        AddVehicleComponent(idcar, 1058);
		                        AddVehicleComponent(idcar, 1154);
		                        AddVehicleComponent(idcar, 1153);
		                        AddVehicleComponent(idcar, 1064);
	        	                SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
				            case 558:
				            {
		                        AddVehicleComponent(idcar,1094);
		                        AddVehicleComponent(idcar,1088);
		                        AddVehicleComponent(idcar, 1164);
		                        AddVehicleComponent(idcar,1168);
		                        AddVehicleComponent(idcar,1166);
		                        AddVehicleComponent(idcar,1092);
		                        SendClientMessageEx(playerid, COLOR_WHITE, "Carrocería Alien instalada.");
				            }
			    	        default: SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Este coche no permite este tipo de tunning.");
				        }
			    	    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
						{
							UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
						}
		            }
		        }
			}
		}
		case TUNING_MENU_RUEDAS:
		{
			if(response == 1)
		    {
		        new Float:cx, Float:cy, Float:cz;
	         	GetVehiclePos(idcar, cx, cy, cz);
	         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
		        switch(listitem)
		        {
		            case 0: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas OffRoad instaladas."); AddVehicleComponent(idcar, 1025); return 1; }
		            case 1: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Shadow instaladas."); AddVehicleComponent(idcar, 1073);  return 1; }
		            case 2: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Mega instaladas."); AddVehicleComponent(idcar, 1074); return 1; }
		            case 3: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Rimshine instaladas. "); AddVehicleComponent(idcar, 1075);  return 1; }
		            case 4: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Wires instaladas."); AddVehicleComponent(idcar, 1076);  return 1; }
		            case 5: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Classic instaladas."); AddVehicleComponent(idcar, 1077);  return 1; }
		            case 6: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Twist instaladas."); AddVehicleComponent(idcar, 1078);  return 1; }
		            case 7: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Cutter instaladas."); AddVehicleComponent(idcar, 1079);  return 1; }
		            case 8: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Switch instaladas."); AddVehicleComponent(idcar, 1080);  return 1; }
		            case 9: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Grove instaladas."); AddVehicleComponent(idcar, 1081);  return 1; }
		            case 10: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Import instaladas."); AddVehicleComponent(idcar, 1082);  return 1; }
		            case 11: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Dollar instaladas."); AddVehicleComponent(idcar, 1083);  return 1; }
	    	        case 12: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Trance instaladas."); AddVehicleComponent(idcar, 1084);  return 1; }
		            case 13: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1085);  return 1; }
		            case 14: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1096);  return 1; }
		            case 15: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1097);  return 1; }
		            case 16: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1098);  return 1; }
				}
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
			}
		}
		case TUNING_MENU_NEON:
		{
			if(response == 1)
	    	{
	    	    switch(listitem)
	    	    {
             case 0:
             {
                    SetPVarInt(playerid, "Status", 1);
                    SetPVarInt(playerid, "neon", CreateObject(18648,0,0,0,0,0,0));
                    SetPVarInt(playerid, "neon1", CreateObject(18648,0,0,0,0,0,0));
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
             }
             case 1:
             {
                    SetPVarInt(playerid, "Status", 1);
                    SetPVarInt(playerid, "neon2", CreateObject(18647,0,0,0,0,0,0));
                    SetPVarInt(playerid, "neon3", CreateObject(18647,0,0,0,0,0,0));
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon2"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon3"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
             }
             case 2:
             {
                    SetPVarInt(playerid, "Status", 1);
                    SetPVarInt(playerid, "neon4", CreateObject(18649,0,0,0,0,0,0));
                    SetPVarInt(playerid, "neon5", CreateObject(18649,0,0,0,0,0,0));
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon4"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon5"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
             }
             case 3:
             {
                    SetPVarInt(playerid, "Status", 1);
                    SetPVarInt(playerid, "neon6", CreateObject(18652,0,0,0,0,0,0));
                    SetPVarInt(playerid, "neon7", CreateObject(18652,0,0,0,0,0,0));
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
             }
             case 4:
             {
                    SetPVarInt(playerid, "Status", 1);
                    SetPVarInt(playerid, "neon8", CreateObject(18651,0,0,0,0,0,0));
                    SetPVarInt(playerid, "neon9", CreateObject(18651,0,0,0,0,0,0));
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon8"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon9"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
             }
             case 5:
             {
                    SetPVarInt(playerid, "Status", 1);
                    SetPVarInt(playerid, "neon10", CreateObject(18650,0,0,0,0,0,0));
                    SetPVarInt(playerid, "neon11", CreateObject(18650,0,0,0,0,0,0));
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon10"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
                    AttachObjectToVehicle(GetPVarInt(playerid, "neon11"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.47, 0.0, 0.0, 0.0);
             }
            case 6:
            {
                    DestroyObject(GetPVarInt(playerid, "neon")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon1")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon2")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon3"));
                    DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon4")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon5")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon6")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon7"));
                    DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon8")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon9")); DeletePVar(playerid, "Status"); DestroyObject(GetPVarInt(playerid, "neon10")); DeletePVar(playerid, "Status");
			}
		}
	}
}
		case REQF_ACCEPT:
		{
	    	if(response == 1)
	    	{
	    	    format(string, sizeof(string), "Felicidades! Ahora trabajas en %s, aceptaste el contrato.",ReqF_Name[playerid]);
	    	    SendClientMessageEx(playerid, COLOR_YELLOW, string);
	    	    //SendClientMessageEx(playerid, COLOR_GREY, "[AVISO]: Recuerda que para salir de la facción tendrás que cumplir el tiempo mínimo OOC, puedes verlo en /tiempocontrato.");
	    	    Info[playerid][pMember]= ReqF_Faction[playerid];
	    	    Info[playerid][pContract] = 0;
	    	    Info[playerid][pRank] = 1;
	    	    Info[playerid][pDivision] = 1;
	    	    /*new dias = 2; // Duración de los contratos son 2 días, abierto a cambios.
	    	    Info[playerid][pContract] = (gettime() + 86400*dias); //Tiempo de contrato, /contrato.*/
	    	    format(string, sizeof(string), "* %s acepta un contrato", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	    ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
	    	}
	    	else
			{
        	    SendClientMessageEx(playerid, COLOR_GRAD2, "Rechazaste el contrato.");
        	    format(string, sizeof(string), "* %s rechaza un contrato.", sendername);
      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
			}
		}
		case ENTER_LSTV:
		{
	    	if(response == 1)
	    	{
	        	switch(listitem)
	        	{
	        	    case 0:
	        	    {
	        	        SetPosEx(playerid, -2719.7854,519.2936,48.3752,0,0,0);//-1965.2617,779.8456,107.1754
	        	        GameTextForPlayer(playerid, "~g~~h~SA News", 5000, 1);
	        	    }
	        	    case 1:
	        	    {
	        	        SetPosEx(playerid, 243.2710,302.7583,999.1343+1,0,0,0);
	        	        GameTextForPlayer(playerid, "~g~~h~SA News", 5000, 1);
	        	    }
	    	    }
		    }
		}
	    case REBUG:
	    {
	        if(response == 1)
            {
				SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}INFRANET - RP:{FFFFFF}Gracias, el bug será arreglado lo más antes posible.");
				format(string, sizeof(string), "Administración: %s reportó un bug: %s", GetPlayerNameEx(playerid), inputtext);
				ABroadCast(COLOR_GENERAL,string,4);
  				Log("LOGS/reportbug.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "No dudes en reportar un bug si lo encuentras");
			}
		}
		case REG_SEX:
		{   new stringX[220];
			if(response == 1)
			{
   				Info[playerid][pSex] = 1;
		        Skin(playerid, 26);
		        Info[playerid][pChar] = 26;
				format(stringX, sizeof(stringX), "{FFFFFF}Gobierno de INFRANET - RP:\nTe lamas %s, y eres {5858FA}Hombre.\n\n{FFFFFF}Ahora necesitamos saber su edad.\nCuál es su edad, por favor.", GetPlayerNameEx(playerid));
		        SafeDialogEx(playerid, REG_AGE, DIALOG_STYLE_INPUT, "{00F70C}Segundo paso",stringX, "OK", "Atrás");
		    }
			else
			{
				Info[playerid][pSex] = 2;
				Skin(playerid, 41);
				Info[playerid][pChar] = 41;
				format(stringX, sizeof(stringX), "{FFFFFF}Gobierno de INFRANET - RP:\nTe llamas %s, y eres {FE2E64}Mujer.\n\n{FFFFFF}Ahora necesitamos saber su edad.\nCuál es su edad, por favor.", GetPlayerNameEx(playerid));
		        SafeDialogEx(playerid, REG_AGE, DIALOG_STYLE_INPUT, "{00F70C}Segundo paso",stringX, "OK", "Atrás");
			}
		}
		case REG_AGE:
		{
		    new stringX[220];
		    if(response == 1)
		    {
		         if(strval(inputtext) < 18 || strval(inputtext) > 99) return SafeDialogEx(playerid, REG_AGE, DIALOG_STYLE_INPUT, "{00F70C}Segundo paso", "{00C200}Mínimo: {FFFFFF}18 Años\n{00C200}Máximo: {FFFFFF}99 Años\n\n{00C200}Coloca bien la edad por favor:", "OK", "Atrás");
		         {
		         	Info[playerid][pAge] = strval(inputtext);
		         	for(new loop=0; loop<20; loop++)  SendClientMessage(playerid, COLOR_WHITE,"");
		         	format(stringX, sizeof(stringX), "{FFFFFF}Gobierno de INFRANET: Bien %s, tiene %d años de edad.\n\nÚltima pregunta:\n¿Cómo llegó a la ciudad de Los Santos?\n", GetPlayerNameEx(playerid),strval(inputtext));
					SafeDialogEx(playerid,REG_NAC,DIALOG_STYLE_MSGBOX, "{00F70C}Tercer paso", stringX, "En avión", "En Tren");
		         }
		    }
		    else
		    {
		    	new sex[]= "{FFFFFF}Al parecer te equivocaste en el sexo, puedes elegir de nuevo:\n";
				SafeDialogEx(playerid,REG_SEX,DIALOG_STYLE_MSGBOX, "{00F70C}Primer paso", sex, "Hombre", "Mujer");
			}
		}
		case REG_NAC:
		{
		    if(response == 1)
		    {
		        Info[playerid][pOrigin] = 1;
		        SendClientMessageEx(playerid, COLOR_GENERAL, "{FFFFFF}[Teléfono]: Bien, has llegado a Los Santos en avión, le recibiremos en el Aeropuerto en breve.");
      			SetTimerEx("Reg_ShowDNI", 3000, false, "i", playerid);
				GameTextForPlayer(playerid, "~W~Actualizando sus datos . . .", 3000, 1);
				SetTimerEx("RegMsn", 9000, false, "i", playerid); // 3.000
			}
			else
			{
		        Info[playerid][pOrigin] = 2;
   				SendClientMessageEx(playerid, COLOR_GENERAL, "{5ABAFF}[Teléfono]: Bien, has llegado a Los Santos en tren, le recibiremos en Unity en breve.");
      			SetTimerEx("Reg_ShowDNI", 3000, false, "i", playerid);
				GameTextForPlayer(playerid, "~W~Actualizando tus datos . . .", 3000, 1);
				SetTimerEx("RegMsn", 9000, false, "i", playerid); // 6.000
			}
		}
		case RENT_BIKE:
		{
		    if(response == 1)
		    {
		        new lights,alarm,doors,bonnet,boot,objective;
		    	new newcar = GetPlayerVehicleID(playerid);
		    	if(TypeOfRent[playerid] == 1) // Si es un coche.
		    	{
					if(GetPlayerCash(playerid) < 800)
					{
				  		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para alquilar este vehículo, (800 dólares).");
						RemovePlayerFromVehicle(playerid);
     					SetVehicleToRespawn(newcar);
			    		new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(playerid, slx, sly, slz);
						SetPlayerPos(playerid, slx, sly, slz+1.5);
		    			TogglePlayerControllable(playerid,1);
		    		}
		    		else
		    		{
				    	TogglePlayerControllable(playerid, 1);
                    	SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		    			SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[Renta]: {FFFFFF}Acabas de rentar un auto por 20 MIN. Si lo devuelves en buen estado, se te devolverá el dinero.");
		    			SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[Renta]: {FFFFFF}Pagaste 800 dólares. Cuando ya no quieras usarla usa /desrentarauto.");
		    			Bought(playerid, 800);
		    			RentTime[playerid] = 1200; // 20 Minutos.
		    			IsaRent[playerid] = 1; HireKey[playerid] = newcar;
					}
				}
   				else if(TypeOfRent[playerid] == 2) // Si es un barco.
   				{
					if(GetPlayerCash(playerid) < 3500)
					{
				  		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para alquilar esta embarcación, (3500 dólares).");
						RemovePlayerFromVehicle(playerid);
     					SetVehicleToRespawn(newcar);
			    		new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(playerid, slx, sly, slz);
						SetPlayerPos(playerid, slx, sly, slz+2.5);
		    			TogglePlayerControllable(playerid,1);
		    		}
		    		else
		    		{
				    	TogglePlayerControllable(playerid, 1);
                    	SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		    			SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[Renta]: {FFFFFF}Acabas de rentar esta embarcación marítima por 30 MIN. Si lo devuelves en buen estado, se te devolverá el dinero.");
		    			SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[Renta]: {FFFFFF}Pagaste 3.500 dólares. Cuando ya no quieras usarla usa /desrentarauto.");
		    			Bought(playerid, 3500);
		    			Info[playerid][pLeader] = 1;
		    			RentTime[playerid] = 1800; // 30 Minutos.
		    			IsaRent[playerid] = 1; HireKey[playerid] = newcar;
					}
   				}
   				else if(TypeOfRent[playerid] == 3) // No es lo citado anterior, es decir será una Faggio.
   				{
   					if(GetPlayerCash(playerid) < 200)
					{
				  		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para alquilar esta motoclicleta, (200 Dólares).");
						RemovePlayerFromVehicle(playerid);
     					SetVehicleToRespawn(newcar);
			    		new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(playerid, slx, sly, slz);
						SetPlayerPos(playerid, slx, sly, slz+1.2);
		    			TogglePlayerControllable(playerid,1);
		    		}
		    		else
		    		{
				    	TogglePlayerControllable(playerid, 1);
                    	SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		    			SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[Renta]: {FFFFFF}Acabas de rentar esta motocliceta Faggio por 15 MIN. Si lo devuelves en buen estado, se te devolverá el dinero.");
		    			SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[Renta]: {FFFFFF}Pagaste 200 dólares. Cuando ya no quieras usarla usa /desrentarauto. Recuerda usar casco. (/casco).");
		    			Bought(playerid, 200);
		    			RentTime[playerid] = 900; // 15 Minutos.
		    			IsaRent[playerid] = 1; HireKey[playerid] = newcar;
					}
   				}
			}
			else
			{
				RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
		    	TogglePlayerControllable(playerid,1);
		    }
		}
		case ACEPTAR_MULTA:
		{
    		if(response)
    		{
    			Bought(playerid, 500);
  				SetVehicleToRespawn(HireKey[playerid]);
  				IsaRent[playerid] = 0; TypeOfRent[playerid] = 0;
  				RentTime[playerid] = 0; HireKey[playerid] = 9999;
  				SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}Desrentarauto:{FFFFFF} Has pagado 500 dólares por no devolver el vehículo.");
			}
			if(!response)
			{
     			SendClientMessage(playerid, COLOR_GENERAL, "{00F70C}Desrentarauto:{FFFFFF} Recuerde devolver el vehículo en buen estado para obtener su dinero de vuelta.");
			}
 		}
 		case IPAD_Musica:
 		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,IPAD_Musica,DIALOG_STYLE_INPUT,"[IpodMusic] Música personalizada - Formato MP3","Ingrese la URL de la canción a continuación. (Offliberty.com)","Aceptar","Salir");
				PlayAudioStreamForPlayer(playerid,inputtext);
				SendClientMessage(playerid, -1, "Pusiste música personalizada en tu IPod. Para dejar de escuchar, usa /ipod [Opción de apagar].");
			}
		}
	    case IPAD:
        {
		    if(response)
		    {
		    	new Float:X, Float:Y, Float:Z, Float:Distance = 1.0;
		        GetPlayerPos(playerid, X, Y, Z);
		        Ipadon[playerid] = 1;
		    	if(listitem == 0)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=119715", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Drum and Bass HD - {FF8000}Género: Drum and Bass");
				}
		    	if(listitem == 1)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=372869", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Reggaeton 24/7 - {FF8000}Género: Reggeaton");
				}
		    	if(listitem == 2)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1698972", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF} Metal Time - {FF8000}Género: Rock & Metal");
				}
		    	if(listitem == 3)
		    	{
		    		StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=96567", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}FM - Rock Classic - {FF8000}Género: Rock");
				}
		    	if(listitem == 4)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=197109", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}La Mega FM - {FF8000}Género: Reggaeton");
				}
		    	if(listitem == 5)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99181500", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Rap Gansta - {FF8000}Género: Rap");
				}
		    	if(listitem == 6)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=2560862", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Bachata Radio - {FF8000}Género: Bachata");
				}
		    	if(listitem == 7)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=228614", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Radio Mambo - {FF8000}Género: Salsa");
				}
		    	if(listitem == 8)
		    	{
		    		StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=85652", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Slap Back Radio - {FF8000}Género: Rap & Otros.");
				}
				if(listitem == 9)
		    	{
		    		StopAudioStreamForPlayer(playerid);
		    	    PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=198255", X, Y, Z, Distance, 0);
					SendClientMessageEx(playerid, COLOR_GENERAL, "Escuchando actualmente: {FFFFFF}Maxima FM - {FF8000}Género: Public radio.");
				}
				if(listitem == 10)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
					ShowPlayerDialog(playerid,IPAD_Musica,DIALOG_STYLE_INPUT,"[IpodMusic] Música personalizada - Formato MP3","Ingrese la URL de la canción a continuación. (Offliberty.com)","Aceptar","Salir");
					Ipadon[playerid] = 1;
				}
				if(listitem == 11)
		    	{
		    	    StopAudioStreamForPlayer(playerid);
					SendClientMessageEx(playerid, COLOR_WHITE, "Apaste tu IpodMusic");
					Ipadon[playerid] = 0;
				}
			}
			else
			{
			    format(string, sizeof(string), "* %s guarda su Ipod.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		/*
		if(dialogid == D_Musica)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_Musica,DIALOG_STYLE_INPUT,"[New State] Autor - DJ","Inserte el nombre de la canción.","Listo","Salir");
				ShowPlayerDialog(playerid,D_Musica2,DIALOG_STYLE_INPUT,"[New State] Formato MP3 - DJ","Ingrese la URL de la canción.","Listo","Salir");
				new String[120];
				format(String,sizeof(String),"Le has puesto un nombre a la canción, el nombre será: %s.",inputtext);
				SendClientMessage(playerid,-1,String);
				format(NombreCancion[playerid],30,"%s",inputtext);
    			//gMusic[playerid] = 0; // Se le quita a este admin el Tog del canal de música para que pueda oír la canción que puso.
			}
	}
	if(dialogid == D_Musica2)
	{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid,D_Musica2,DIALOG_STYLE_INPUT,"[New State] Formato MP3 - DJ","Ingrese la URL de la canción.","Listo","Salir");
				new Nombre[MAX_PLAYER_NAME]; GetPlayerName(playerid,Nombre,sizeof(Nombre));
   				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
					if(!gMusic[i])
					{
	    				PlayAudioStreamForPlayer(i,inputtext);
						format(string,sizeof(string),"[OOC] El administrador %s , ha colocado una canción llamada: %s. (Para no escuchar, usa /ignorar).",Nombre,NombreCancion[playerid]);
						SendClientMessage(i, -1, string);
						SendClientMessage(i, -1, "Puedes usar /togmusic para dejar de ver el canal de música y eventos OOC en cualquier momento.");
					}
					else
					{
						format(string,sizeof(string),"[OOC] El administrador %s puso una canción en el canal de música. Para activar el canal usa /togmusic.",Nombre);
						SendClientMessage(i,-1, string);
					}
 				}
			}
	}*/
	    case DIALOG_SHOPFISH:
		{
		    if(response)
		    {
		    	if(listitem == 0)
		    	{
		    	    if(Carnada[playerid] > 20) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}PESCA:{FFFFFF} Ya has comprado 20 carnadas para pescar, gastalas.");
		    	    if(CheckMoney(playerid,15))
		    	    {
		    	        GivePlayerCash(playerid, -15);
		    	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[PESCA]:{FFFFFF} Compraste una lata de carnadas. (20)");
		    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    	        Carnada[playerid] += 20;
		    	        Info[playerid][pAdminZC] = 1338;
		    	    }
		    	}
		    	if(listitem == 1)
		    	{
		    	    if(Lineas[playerid] > 20 ) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[PESCA]:{FFFFFF} Ya has comprado 20 lineas para pescar, gastalas.");
		    	    if(CheckMoney(playerid,30))
		    	    {
		    	        GivePlayerCash(playerid, -30);
		    	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[PESCA]:{FFFFFF} Compraste 10 lineas para la caña de pesca.");
		    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    	        Lineas[playerid] += 10;
		    	        Info[playerid][pAdminZC] = 4000;
		    	    }
		    	}
		    }
		}
		case DIALOG_AMMU:
		{
		    if(response)
		    {
		        if(Info[playerid][pWRestricted] >= 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Tienes restricción de armas las 2 primeras horas de juego. Para ser retirada, usa /soporte.");
		        if(Info[playerid][pGunLic] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Es imposible venderte armas, no tienes licencia para portarlas");
		    	if(listitem == 0)
		    	{
		    	    if(CheckMoney(playerid,25))
		    	    {
		    	        Bought(playerid, 25);
                		GivePlayerValidWeapon(playerid, 1);
                		if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 25);}
                	}
		    	}
		    	if(listitem == 1)
		    	{
		    	    if(CheckMoney(playerid,50))
		    	    {
		    	        Bought(playerid, 50);
                		GivePlayerValidWeapon(playerid, 5);
                		if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 50);}
                	}
		    	}
		    	if(listitem == 2)
		    	{
		    	    if(CheckMoney(playerid,15000))
		    	    {
		    	        Bought(playerid, 15000);
                		GivePlayerValidWeapon(playerid, 22);
                		if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 5000);}
                	}
		    	}
		    	if(listitem == 3)
		    	{
		    	    if(CheckMoney(playerid,28000))
		    	    {
		    	        Bought(playerid, 28000);
                		GivePlayerValidWeapon(playerid, 25);
                		if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 25000);}
                	}
		    	}
		    	if(listitem == 4)
		    	{
		    	    if(CheckMoney(playerid,35000))
		    	    {
		    	        Bought(playerid, 35000);
                		GivePlayerValidWeapon(playerid, 33);
                		if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 35000);}
                	}
		    	}
		    }
		}
		case DRINKLISTDIALOG:
		{
	    	if(response)
	    	{
				switch(listitem)
				{
			    	case 0:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Cerveza");
			    	    SetPVarInt(playerid, "DrinkPrice", 60);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
			    	}
			    	case 1:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Vodka");
			    	    SetPVarInt(playerid, "DrinkPrice", 100);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    	}
			    	case 2:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Whiskey");
			    	    SetPVarInt(playerid, "DrinkPrice", 100);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    	}
			    	case 3:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Agua");
			    	    SetPVarInt(playerid, "DrinkPrice", 20);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    	}
			    	case 4:
			    	{
			    	    SetPVarString(playerid, "DrinkName", "Gaseosa");
			    	    SetPVarInt(playerid, "DrinkPrice", 20);
			    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    	}
				}
				if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
				{
				    new drinkname[32];
					GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
				    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
					new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
				    format(string, sizeof(string), "Has pedido al bartender una bebida (%s) por $%d.  ¿Quieres dejarle una propina?", drinkname, drinkprice);
				    SafeDialogEx(playerid, DRINKDIALOG, DIALOG_STYLE_MSGBOX, "Comprar Bebida", string, "Si", "No");
				    format(string, sizeof(string), "* %s le da a %s una %s.", GetPlayerNameEx(DrinkOffer[playerid]), GetPlayerNameEx(playerid), drinkname);
					ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* Le diste a %s una %s. Ganaste $%d.", GetPlayerNameEx(playerid), drinkname, drinkprice );
					SendClientMessageEx(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
					Info[playerid][pAdminZC] = 6*1000;
					GivePlayerCash(DrinkOffer[playerid], drinkprice);
					GivePlayerCash(playerid, -drinkprice);
					SetPlayerSpecialAction(playerid, dspecialaction);
					SetPVarInt(playerid, "DrinkCooledDown", 1);

				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* No tienes dinero para comprar está bebida!");
				}
		    }
		    else
		    {
		        DrinkOffer[playerid] = INVALID_PLAYER_ID;
		    }
		}
	 	case DRINKDIALOG:
		{
		    if(response)
		    {
				SafeDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "{00F70C}Propina", "¿Cuánto le gustaría dejar de propina al Bartender por su servicio?", "OK", "Cancelar");
			}
			else
			{
			    DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		case TIPDIALOG:
		{
		    if(response)
		    {
				if(GetPlayerCash(playerid) >= strval(inputtext))
				{
				    if(strval(inputtext) < 0 || strval(inputtext) > 10000)
				    {
				    	return SafeDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "{00F70C}Propina", "ERROR Sólo de: 0 - $10,000\n¿Cuánto le gustaría dejar de propina al Bartender por su servicio?", "OK", "Cancel");
				    }
				    format(string, sizeof(string), "** %s le dá a %s algo de propina por el servicio.", GetPlayerNameEx(playerid), GetPlayerNameEx(DrinkOffer[playerid]));
					ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* %s te a dado $%d de propina por tu servicio.", GetPlayerNameEx(playerid), strval(inputtext));
					SendClientMessageEx(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
					GivePlayerCash(DrinkOffer[playerid], strval(inputtext));
					GivePlayerCash(playerid, -strval(inputtext));
					DrinkOffer[playerid] = INVALID_PLAYER_ID;
				}
			}
			else
			{
			    DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		case DIALOG_REG_TUT:
		{
		    if(response == 1)
		    {
		        Info[playerid][pReg] = 1;
				TextDrawHideForPlayer(playerid, LoginMenu[0]);
		     	TextDrawHideForPlayer(playerid, LoginMenu[1]);
		        ClearChatbox(playerid);
		        TutStep[playerid] = 1;
    			TutTime[playerid] = 1;
   				Tutorial_Inside(playerid);
   				OnPlayerSavedStats(playerid);
		        SendClientMessageEx(playerid, COLOR_YELLOW2, "Bien, ya estás registrado en nuestra base de datos y ahora verás el tutorial te tomará sólo 5 minutos.");
                SendClientMessageEx(playerid, COLOR_YELLOW2, "Pulsa la letra Y de tu teclado para pasar el tema del tutorial.");
			}
		}
		case REPORTSMENU:
		{
		    if(response)
		    {
		        if(CancelReport[playerid] == listitem) return 1;
				new reportid = ListItemReportId[playerid][listitem];
		        if(Reports[reportid][BeingUsed] == 0)
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese reporte ya fue revisado!");
				    return 1;
				}
				if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reportó se ha desconectado !");
				    Reports[reportid][ReportFrom] = 999;
				    Reports[reportid][BeingUsed] = 0;
				    return 1;
				}
				format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} %s aceptó el reporte de %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], reportid);
				ABroadCast(COLOR_WHITE, string, 2);
				if(Info[playerid][pAdminZC] == 6000)
				{
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Un administrador ha aceptado tu reporte, puedes usar /reply para explicar tu reporte. [T: 60 Seg.]");
				}
				else
				{
				    format(string, sizeof(string), "%s ha aceptado tu reporte, puedes usar {A2DC35}/reply{FFFFFF} para explicar tu reporte. (T: 60 Seg.)", GetPlayerNameEx(playerid));
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				}
				Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
				Reports[reportid][CheckingReport] = playerid;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
	    	}
	    	else
	    	{
	    	    if(CancelReport[playerid] == listitem) return 1;
	    	    new reportid = ListItemReportId[playerid][listitem];
	    	    if(Reports[reportid][BeingUsed] == 0)
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese reporta ya fue revisado!");
				    return 1;
				}
				if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reportó se ha desconectado !");
				    Reports[reportid][ReportFrom] = 999;
				    Reports[reportid][BeingUsed] = 0;
				    return 1;
				}
				format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} %s rechazó el reporte de %s (RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
				ABroadCast(COLOR_GENERAL, string, 2);
				if(Info[playerid][pAdminZC] == 6000)
				{
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Un administrador a marcado tu reporte como inválido. Usa y lee muy bien {FF0000}/retips{FFFFFF} antes de reportar.");
				}
				else
				{
       				format(string, sizeof(string), "%s marcó tu reporte como invalido. Usa y lee muy bien {FF0000}/retips{FFFFFF} antes de reportar.", GetPlayerNameEx(playerid));
				    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				}
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				new reportdialog[1000], itemid = 0;
				for(new i = 0; i < MAX_REPORTS; i++)
				{
				    if(Reports[i][BeingUsed] == 1 && itemid < 40)
				    {
				        ListItemReportId[playerid][itemid] = i;
				        itemid++;
				        format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | RID:%i | Reporte: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire]);
						format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
					}
				}
				CancelReport[playerid] = itemid;
				format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
				SafeDialogEx(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "{A2DC35}Reportes", reportdialog, "Aceptar", "Rechazar");
	    	}
		}
		case DIALOG_REG_MSN:
    	{
    	    if(response == 1)
    	    {
				new rt[] = "{FFFFFF}Gracias por confirmar los datos de tu personaje.\n\nAhora tienes que pasar por nuestro tutorial, te ayudará en un futuro.\n\nTerminando llegarás al aeropuerto donde comenzará la historia.\nSuerte! Gracias por preferirnos\n\n¿Preparado?";
		        SafeDialogEx(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,"{00F70C}Fin del registro", rt,"Ver","");
    	    }
	        else
	        {
	    		SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
		        ClearChatbox(playerid);
				gNewbie[playerid]=1; gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
				SetPosEx(playerid,1649.5704,-2286.4312,-1.2097,271.8517,0,playerid);
				SetPlayerCameraPos(playerid,1654.6956,-2286.4968,-1.2121);
				SetPlayerCameraLookAt(playerid,1642.3242,-2286.3787,-1.1953);
				Info[playerid][pAge] = 30; Info[playerid][pSex] = 1;
				new sex[]= "{00F70C}Sexo\n\n{FFFFFF}Antes de empezar es necesario que selecciones el sexo que deseas que sea tu personaje:\n";
				SafeDialogEx(playerid,REG_SEX,DIALOG_STYLE_MSGBOX, "{00F70C}Primer paso", sex, "Hombre", "Mujer");
	        }
 		}
		case DLOGIN:
		{
        	if(response == 1)
        	{
				if(udb_hash(inputtext) == Info[playerid][pKey])
				{
					InsideMainMenu[playerid] = false;
					INI_ParseFile(UserPath(playerid), "LoadUser_data", .bExtra = true, .extra = playerid);
					PlayerLogin(playerid);
				}
				else
				{
					new ip[32];
					new titlestring[480];
					new stringX[480];
					GetPlayerIp(playerid, ip, 32);
					format(titlestring, sizeof(titlestring), "Panel de Ingreso - INFRANET");
					format(stringX, sizeof(stringX), "{FFFFFF}Ingresa tu contraseña de nuevo. {FE2E64}(%d/3 Intentos)\n\n{BE81F7}IP en uso: "COL_WHITE"%s\n{BE81F7}Foro: "COL_WHITE"infranet.foroactivo.com\n{BE81F7}Grupo Facebook: "COL_WHITE"www.facebook.com/groups/infranet.rp\n{BE81F7}Discord: "COL_WHITE"http://discord.gg/SwFp9NK\n\n{FFFFFF}¡Recuerda visitanos en nuestros medios!, más información en el foro.",gPlayerLogTries[playerid]+1, ip);
					ShowPlayerDialog(playerid,DLOGIN,DIALOG_STYLE_PASSWORD ,titlestring,stringX,"Ingresar","Salir");
					SetPlayerVirtualWorld(playerid, 20);
					gPlayerLogTries[playerid] += 1;
					if(gPlayerLogTries[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "¡Contraseña {FF031A}INCORRECTA 1/3!");
					else if(gPlayerLogTries[playerid] == 2) return SendClientMessage(playerid, COLOR_GRAD2, "¡Contraseña {FF031A}INCORRECTA 2/3!");
					else if(gPlayerLogTries[playerid] == 3)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "¡Contraseña {FF031A}INCORRECTA 3/3!");
						SendClientMessage(playerid, COLOR_GREY, "Su IP ha sido registrada en nuestra base de datos, puede solicitar una nueva contraseña en el foro.");
						SetTimerEx("TimerKICK",500,false,"d",playerid);
					}
                	return 1;
				}
        	}
        	else
			{
			    SendClientMessageEx(playerid, COLOR_GENERAL, "Fuiste expulsado del servidor automáticamente. (No Logeo)");
            	SetTimerEx("TimerKICK",500,false,"d",playerid);
        	}
        	return 1;
    	}
		case DREGISTER:
    	{
        	if (response == 1)
        	{
            	if(strlen(inputtext) <= 3 || strlen(inputtext) > 12)
            	{
		        	new ip[32];
		        	new titlestring[380]; // 64
		        	GetPlayerIp(playerid, ip, 32);
		        	format(titlestring, sizeof(titlestring), "{A2DC35}Error de registro - {FFFFFF}%s", GetPlayerNameEx(playerid));
		        	format(string, sizeof(string), "{FFFFFF}La contraseña tiene que ser entre 4 y 12 carácteres máximo.\n\n%s Ingresa una contraseña valida para registrarte en el servidor:\n\n{FF0000}Contraseña:", GetPlayerNameEx(playerid));
		        	SafeDialogEx(playerid,DREGISTER,DIALOG_STYLE_PASSWORD ,titlestring,string,"Registrar","Salir");
	            	SetPlayerVirtualWorld(playerid, 20);
                	return 1;
            	}
            	if(isnull(inputtext))
            	{
		        	new ip[32];
		        	new titlestring[128];
		        	GetPlayerIp(playerid, ip, 32);
					format(titlestring, sizeof(titlestring), "{A2DC35}Error de registro - {FFFFFF}%s", GetPlayerNameEx(playerid));
					format(string, sizeof(string), "{00C200}Direccion IP: %s\nBienvenido a INFRANET-RP\nIngresa una contraseña para registrarte en el servidor.\n\n{FF0000}Contraseña.", ip);
					SafeDialogEx(playerid,DREGISTER,DIALOG_STYLE_INPUT,titlestring,string,"Registrar","Salir");
                	return 1;
            	}
            	InsideMainMenu[playerid] = false;
				OnPlayerRegister(playerid,inputtext);
            	return 1;
        	}
        	else
        	{
        	    SendClientMessageEx(playerid, COLOR_GENERAL, "Fuiste expulsado del servidor automáticamente. (No Registro)");
            	SetTimerEx("TimerKICK",500,false,"d",playerid);
        	}
			return 1;
    	}
     case CARSPAWN:
    	{
         if (response == 1)
        	{
        		if(PlayerVehicleInfo[playerid][listitem][pvImpounded] == 1) return SendClientMessageEx(playerid,COLOR_WHITE,"El auto que intenta spawnear está embargado.");
		    	if(PlayerVehicleInfo[playerid][listitem][pvImpounded] >= 2) PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
	        	if(PlayerVehicleInfo[playerid][listitem][pvModelId] != 0 && PlayerVehicleInfo[playerid][listitem][pvImpounded] == 0 && PlayerVehicleInfo[playerid][listitem][pvSpawned]== 0)
	        	{
	        	    if(carsforplayer[playerid] == 4) return SendClientMessageEx(playerid,COLOR_WHITE,"* Sólo puedes tener 4 coches spawneados");
	            	PlayerCars++;
	            	carsforplayer[playerid]++;
					new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
					PlayerVehicleInfo[playerid][listitem][pvId] = carcreated;
					VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][listitem][pvFuel];
					SetVehicleHealth(carcreated, PlayerVehicleInfo[playerid][listitem][pvHealth]);
					SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][listitem][pvVW]);
					PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
					SendClientMessageEx(playerid,COLOR_WHITE,"Vehiculo spawneado correctamente, en la última posición que lo estacionaste. (/gps)");
					if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1)
					LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
                    LoadPlayerVehicleMods(playerid, listitem);
					return 1;

				}
	        	else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 1)
	        	{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
         			new Float:health;
            		GetVehicleHealth(PlayerVehicleInfo[playerid][listitem][pvId], health);
            		if(health < 500) return SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[ATENCION]:{FFFFFF} El vehiculo está muy dañado para ser guardado.");
                    if(IsVehicleBusy(PlayerVehicleInfo[playerid][listitem][pvId])) return SendClientMessageEx(playerid, COLOR_GREY, " El vehiculo está ocupado por otra persona y no puede ser guardado.");
					if(PlayerVehicleInfo[playerid][listitem][pvImpounded] >= 2) PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
					if(PlayerVehicleInfo[playerid][listitem][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][listitem][pvImpounded] == 0 && PlayerVehicleInfo[playerid][listitem][pvSpawned]== 1)
					{
		            	PlayerCars--;
		            	carsforplayer[playerid]--;
            			if(LockStatus[PlayerVehicleInfo[playerid][listitem][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][listitem][pvId]] = 0;
           		 		UpdatePlayerVehicleMods(playerid, listitem);
						DestroyVehicle(PlayerVehicleInfo[playerid][listitem][pvId]);
						VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = 200;
						PlayerVehicleInfo[playerid][listitem][pvId] = INVALID_PLAYER_VEHICLE_ID;
						PlayerVehicleInfo[playerid][listitem][pvSpawned] = 0;
						SendClientMessageEx(playerid,COLOR_WHITE,"Vehiculo fue guardado correctamente.");
						if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    				{
	    	    			Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	    	    			Info[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    					PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	    				}
	    			}
	            }
			}
	    }
	}
	//*********************
	if(dialogid == 999)
 		         {
    		          if(response)
      		        {
 			   		        SendClientMessage(playerid,COLOR_LIGHTBLUE, "* Comienza a trabajar talando el bosque");
  				          SetPVarInt(playerid,"PlayerStartDrova",1);
    		          }
       	    }
    	if(dialogid == 962)
    	{
    	    if(response)
    	    {
    	    	strmid(NegociosVariables[QuitExtortion[playerid]][bExtortion], "Nadie", 0, strlen("Nadie"), 32);
    	    	format(string, sizeof(string), "Has dejado de ser el extorcionista del negocio de {FF7617}%s", GetPlayerNameEx(ExtortionID[playerid]));
    	        Message(playerid, COLOR_WHITE, string);
             	format(string, sizeof(string), "* %s ha aceptado dejar de ser el extorcionista de tu negocio.", GetPlayerNameEx(playerid));
    	        Message(ExtortionID[playerid], COLOR_WHITE, string);
    	        ActualizarNegocio(QuitExtortion[playerid]);
				QuitExtortion[playerid] = 999;
				ExtortionID[playerid] = 999;
    	        return 1;
    	    }
    	    else
    	    {
    	        format(string, sizeof(string), "* %s no ha aceptado dejar de ser el extorcionista de tu negocio.", GetPlayerNameEx(playerid));
    	        Message(ExtortionID[playerid], COLOR_WHITE, string);
    	        Message(playerid, COLOR_WHITE, "* Has rechazado una peticion.");
    	    }
    	}
    if(dialogid == 578)
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
					case 0: { ShowPlayerDialog(playerid, BAR_MENU_TAPAS, DIALOG_STYLE_LIST, "{A2DC35}Platos del Día", "Huevos con Chorizo (20$)\nJamón Ibérico (30$)\nSopa de Marisco (25$)\nMacarrones a la Bolognesa (15$)\nEnsalada (10$)", "Pedir", "Atrás"); return 1; }
					case 1: { ShowPlayerDialog(playerid, BAR_MENU_BEBIDAS, DIALOG_STYLE_LIST, "{A2DC35}Bebidas y refrescos", "Cerveza (3$)\nVino tinto (5$)\nChampagne (6$)\nCoca-Cola (2$)\nAgua (1$)", "Pedir", "Atrás"); return 1; }
					case 2:
					{
						if(Info[playerid][pTakeAway] == 1) return SendClientMessageEx(playerid, COLOR_GENERAL, "Tienes suficiente comida en casa, no necesitas más.");
						Info[playerid][pTakeAway] = 1;
						format(string, sizeof(string), "* %s compró algo de comida para llevar a casa.", GetPlayerNameEx(playerid));
		            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	Bought(playerid, 100); // TakeAway.
		            	SendClientMessageEx(playerid, COLOR_GREY, "[INFO] Compraste comida TakeAway, ves a casa y usa /cocinar cuando quieras recuperar vida.");
		            	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 100);} // Comida para llevar.
					}
				}
			}
		}
		if(dialogid == 579)
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0:
		            {
        	     		new Float:Health;
					 	GetPlayerHealth(playerid, Health);
		        	    if(Health < 101)	{	SetHP(playerid, Health+20); 	}
         				format(string, sizeof(string), "* %s come un plato de Huevos con Chorizo", GetPlayerNameEx(playerid));
		            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	Bought(playerid, 20);
		            	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 20);}
		            	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
		            	if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
		            }
		            case 1:
	    	        {
	        	        new Float:Health;
	            	    GetPlayerHealth(playerid, Health);
	                	if(Health < 101)	{	SetHP(playerid, Health+30); 	}
	                	format(string, sizeof(string), "* %s come un plato de Jamón Ibérico", GetPlayerNameEx(playerid));
	                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 30);
	                	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 30);}
	                	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	                	if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
	            	}
		            case 2:
		            {
	    	            new Float:Health;
	        	        GetPlayerHealth(playerid, Health);
	            	    if(Health < 101)	{	SetHP(playerid, Health+25); 	}
	                	format(string, sizeof(string), "* %s come un plato de Sopa de Marisco", GetPlayerNameEx(playerid));
	                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Bought(playerid, 25);
						if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 25);}
	                	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	                	if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
		            }
		            case 3:
	    	        {
	        	        new Float:Health;
	            	    GetPlayerHealth(playerid, Health);
	                	if(Health < 101)	{	SetHP(playerid, Health+15); 	}
		                format(string, sizeof(string), "* %s come un plato de Macarrones a la Bolognesa", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	            Bought(playerid, 15);
	    	            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 15);}
	        	        ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
		            }
		            case 4:
	    	        {
	        	        new Float:Health;
	            	    GetPlayerHealth(playerid, Health);
	                	if(Health < 101)	{	SetHP(playerid, Health+10); 	}
		                format(string, sizeof(string), "* %s come un plato de Ensalada", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	            Bought(playerid, 10);
	    	            if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 10);}
	        	        ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha comido", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
		            }
			 	}
			}
		}
		if(dialogid == 580)
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0:
		            {
	    	            new Float:Health;
	        	        GetPlayerHealth(playerid, Health);
	            	    if(Health < 101)	{	SetHP(playerid, Health+3); 	}
	                	format(string, sizeof(string), "* %s se bebe una Cerveza.", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                Bought(playerid, 3);
		               	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 3);}
	    	            PlayerDrunk[playerid] += 2;
	        	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha bebido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    PlayerDrunk[playerid]  += 1;
		                	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			                ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
	    	        }
	        	    case 1:
	            	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+5); 	}
	        	        format(string, sizeof(string), "* %s se bebe una copa de Vino.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 5);
	                	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 5);}
                  		PlayerDrunk[playerid] += 1;
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
	    	            if(PlayerDrunk[playerid] > 10)
		    	        {
			    	        SetHP(playerid, 20);
	               			format(string, sizeof(string), "* %s vomita lo que ha bebido.", GetPlayerNameEx(playerid));
		                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                PlayerDrunk[playerid]  += 1;
		    	            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		        	        ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
	            	}
		            case 2:
		            {
	    	            new Float:Health;
	        	        GetPlayerHealth(playerid, Health);
	            	    if(Health < 101)	{	SetHP(playerid, Health+6); 	}
	                	format(string, sizeof(string), "* %s se bebe una copa de Champagne.", GetPlayerNameEx(playerid));
		                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                Bought(playerid, 6);
		                if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 6);}
	    	            PlayerDrunk[playerid] += 3;
	        	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
	            	    if(PlayerDrunk[playerid] > 10)
		            	{
				            SetHP(playerid, 20);
		               		format(string, sizeof(string), "* %s vomita lo que ha bebido.", GetPlayerNameEx(playerid));
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            	    PlayerDrunk[playerid]  += 1;
		                	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			                ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
	    	        }
	        	    case 3:
	            	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+2); 	}
	        	        format(string, sizeof(string), "* %s se bebe una Coca-Cola.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 2);
	                	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 2);}
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		                if(PlayerDrunk[playerid] > 10)
			            {
				            SetHP(playerid, 20);
	            	   		format(string, sizeof(string), "* %s vomita lo que ha bebido.", GetPlayerNameEx(playerid));
		            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                	PlayerDrunk[playerid]  += 1;
			                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			                ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
						}
	        	    }
	            	case 4:
	            	{
		                new Float:Health;
		                GetPlayerHealth(playerid, Health);
	    	            if(Health < 101)	{	SetHP(playerid, Health+1); 	}
	        	        format(string, sizeof(string), "* %s se bebe una botella pequeña de agua.", GetPlayerNameEx(playerid));
	            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                	Bought(playerid, 1);
	                	if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 1);}
	                	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
	                	if(PlayerDrunk[playerid] > 0)
		            	{
			                PlayerDrunk[playerid]  -= 1;
						}
	    	        }
		 		}
			}
		}
if(dialogid == 964)
		{
		    if(response)
		    {
		        if((strlen(inputtext) < 1 || strlen(inputtext) > 32 || strfind(inputtext, "_", true) != -1) || strfind(inputtext, "=", true) != -1)
		        {
		            ShowPlayerDialog(playerid,DNI_MENU,DIALOG_STYLE_INPUT,"{A2DC35}Traficante DNI Falso", "Ingresa el nombre que quieres usar, Ejemplo: Jonathan Torres", "Aceptar", "Cancelar");
          		}
          		else{
          		    strmid(DNIName[playerid], inputtext, 0, strlen(inputtext), 32);
          			format(string, sizeof(string), "¿Estás seguro que quieres usar el nombre de\n\t%s en tu DNI falso? Precio: 15.000$", DNIName[playerid]);
					ShowPlayerDialog(playerid,DNI_CONFIRM,DIALOG_STYLE_MSGBOX,"{A2DC35}Traficante DNI Falso", string, "Aceptar", "Cancelar");
				}
			}
  		}
  		if(dialogid == 965)
  		{
  		    if(response)
  		    {
				strmid(Info[playerid][pDNIName], DNIName[playerid], 0, strlen(DNIName[playerid]), 32);
				new dni = 100000 + random(899999);  Info[playerid][pDNIFalse] = dni;
				format(string, sizeof(string), "* Compraste una identificación falsa (/dnifalso para mostrarlo) con el nombre de {41FF2F}%s{FFFFFF}.", Info[playerid][pDNIName]);
				Message(playerid, COLOR_WHITE, string);
				GivePlayerCash(playerid, -15000);
  		    }
  		}
  		switch(dialogid)
    {
        case 5876:
        {
            if(!response)
            {
                    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha Cancelado");
                    return 1;
            }

            switch(listitem)
            {
                case 0:
				{
				    ShowPlayerDialog(playerid, Rojo, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 1:
				{
				    ShowPlayerDialog(playerid, Azul, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, Verde, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 3:
				{
					ShowPlayerDialog(playerid, Amarillo, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 4:
				{
					ShowPlayerDialog(playerid, Cyan, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 5:
				{
					ShowPlayerDialog(playerid, Rosado, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 6:
				{
					ShowPlayerDialog(playerid, Blanco, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
				case 7:
				{
					ShowPlayerDialog(playerid, Negro, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]", "Ok", "Cancel");
				}
			}
		}
	}
	if(dialogid == Rojo) // Text color Rojo
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
                new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FF0000}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Rojo, DIALOG_STYLE_INPUT, "{00F70C}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Verde) // Text color Verde
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
            	new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Verde, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Azul) // Text color Azul
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{00FF00}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Azul, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Amarillo) // Text color Amarillo
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FFFF00}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Amarillo, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Cyan) // Text color Cyan
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{00FFFF}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Cyan, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Rosado) // Text color Rosado
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{FF00FF}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Rosado, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Blanco) // Text color Blanco
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{F0F0F0}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Blanco, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	if(dialogid == Negro) // Text color Negro
	{
      	if(response)
		{
      		if(strlen(inputtext) > 3 && strlen(inputtext) < 9)
            {
             new Float:X,Float:Y,Float:Z,Float:Angle;
                format(Archivo,sizeof(Archivo),"{0F0F0F}%s",inputtext);
	      		VehicleIdd = GetPlayerVehicleID(playerid);
	      		GetPlayerPos(playerid,X,Y,Z);
	      		GetVehicleZAngle(VehicleIdd,Angle);
	           	SetVehicleNumberPlate(VehicleIdd,Archivo);
				SetVehicleToRespawn(VehicleIdd);
				SetVehiclePos(VehicleIdd,X,Y,Z);
				PutPlayerInVehicle(playerid,VehicleIdd,0);
				SetVehicleZAngle(VehicleIdd,Angle);
				SetCameraBehindPlayer(playerid);
            }
            else
            {
                SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Debe introducir entre 4 y 8 caracteres.");
                ShowPlayerDialog(playerid, Negro, DIALOG_STYLE_INPUT, "{A2DC35}Placa","Introdusca el nombre/Numero [4-8 Caracteres]\n{ff0000}Debe introducir entre 4 y 8 caracteres", "Ok", "Cancel");
			}
      	}
      	if(!response)
      	{
      	    SendClientMessage(playerid, Color_Rojo, "{A2DC35}[INFO]:{FFFFFF} Usted ha cancelado.");
		}
	}
	//ContactoAgendar
	if(dialogid == DIALOG_NOMBRECONTACTO)
	{
	if(response)
	{
	//new contacto = strval(inputtext);
	if(IsNumeric(inputtext)) return SendClientMessage(playerid, 0x00FFCCFF, "Error : No se pueden usar números.");
	if(strlen(inputtext) > 40) return SendClientMessage(playerid, COLOR_GRAD2, "!El nombre de contácto tiene no puede ser tan largo!");
	//if(strlen(contacto) >= sizeof(numero)-1) return SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}[INFO]:{FFFFFF}El nombre de contácto no puede ser tan largo.");
	//if(inputtext(contacto) > 40) return SendClientMessage(playerid, COLOR_GRAD2, "!El nombre de contácto tiene no puede ser tan largo!");
	//new string[180];
	//format(Info[playerid][pAgenda1], 40, "Ninguno");
	format(string, sizeof(string), "* %s anota un nuevo contacto en su agenda.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	if(Info[playerid][pContactoAgendar] == 1)
	{
	strmid(Info[playerid][pAgenda1], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
	Info[playerid][pContactoAgendar] = 0;
	}
	if(Info[playerid][pContactoAgendar] == 2)
	{
	strmid(Info[playerid][pAgenda2], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 3)
	{
	strmid(Info[playerid][pAgenda3], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 4)
	{
	strmid(Info[playerid][pAgenda4], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}
	
	if(Info[playerid][pContactoAgendar] == 5)
	{
	strmid(Info[playerid][pAgenda5], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 6)
	{
	strmid(Info[playerid][pAgenda6], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 7)
	{
	strmid(Info[playerid][pAgenda7], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 8)
	{
	strmid(Info[playerid][pAgenda8], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
	Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 9)
	{
	strmid(Info[playerid][pAgenda9], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
	Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 10)
	{
	strmid(Info[playerid][pAgenda10], inputtext, 0, strlen(inputtext), 40);
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "{FFFFFF}Contactos\nRestaurar contactos\n{FFFFFF}Tirar agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}
	}
	}
	if(dialogid == DIALOG_AGENDARCONTACTO)
	{
	if(response)
	{
	new numero = strval(inputtext);
	if(!IsNumeric(inputtext)) return SendClientMessage(playerid, 0x00FFCCFF, "Error : Solamente se pueden utilizar numeros.");
	if(numero > 10000000) return SendClientMessage(playerid, 0x00FFCCFF, "Error : Has introducido un valor muy alto.");

	//new string[180];
	format(string, sizeof(string), "* %s saca su agenda y un boligráfo de su bolsilo.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	if(Info[playerid][pContactoAgendar] == 1)
	{
	Info[playerid][pNumeroLibreta1] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
	Info[playerid][pContactoAgendar] = 1;
	}
	if(Info[playerid][pContactoAgendar] == 2)
	{
	Info[playerid][pNumeroLibreta2] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 2;
	}

	if(Info[playerid][pContactoAgendar] == 3)
	{
	Info[playerid][pNumeroLibreta3] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 3;
	}
	
	if(Info[playerid][pContactoAgendar] == 4)
	{
	Info[playerid][pNumeroLibreta4] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 4;
	}

	if(Info[playerid][pContactoAgendar] == 5)
	{
	Info[playerid][pNumeroLibreta5] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 5;
	}

	if(Info[playerid][pContactoAgendar] == 6)
	{
	Info[playerid][pNumeroLibreta6] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 6;
	}

	if(Info[playerid][pContactoAgendar] == 7)
	{
	Info[playerid][pNumeroLibreta7] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 7;
	}

	if(Info[playerid][pContactoAgendar] == 8)
	{
	Info[playerid][pNumeroLibreta8] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
	Info[playerid][pContactoAgendar] = 8;
	}

	if(Info[playerid][pContactoAgendar] == 9)
	{
	Info[playerid][pNumeroLibreta9] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
	Info[playerid][pContactoAgendar] = 9;
	}

	if(Info[playerid][pContactoAgendar] == 10)
	{
	Info[playerid][pNumeroLibreta10] = numero;
	ShowPlayerDialog(playerid, DIALOG_NOMBRECONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el nombre del contácto", "Aceptar", "Cancelar");
    Info[playerid][pContactoAgendar] = 10;
	}
	}
	}
	if(dialogid == DIALOG_LIBRETACONTACTO)
	{
	if(response)
	{
	if(listitem == 0)
	{
	Info[playerid][pContactoAgendar] = 1;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 1)
	{
	Info[playerid][pContactoAgendar] = 2;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 2)
	{
	Info[playerid][pContactoAgendar] = 3;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 3)
	{
	Info[playerid][pContactoAgendar] = 4;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 4)
	{
	Info[playerid][pContactoAgendar] = 5;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 5)
	{
	Info[playerid][pContactoAgendar] = 6;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 6)
	{
	Info[playerid][pContactoAgendar] = 7;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 7)
	{
	Info[playerid][pContactoAgendar] = 8;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 8)
	{
	Info[playerid][pContactoAgendar] = 9;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 9)
	{
	Info[playerid][pContactoAgendar] = 10;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, "* Agregar", "Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	}
	}
	if(dialogid == DIALOG_LIBRETAMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				new nm1 = Info[playerid][pNumeroLibreta1];
				new nm2 = Info[playerid][pNumeroLibreta2];
				new nm3 = Info[playerid][pNumeroLibreta3];
				new nm4 = Info[playerid][pNumeroLibreta4];
				new nm5 = Info[playerid][pNumeroLibreta5];
				new nm6 = Info[playerid][pNumeroLibreta6];
				new nm7 = Info[playerid][pNumeroLibreta7];
				new nm8 = Info[playerid][pNumeroLibreta8];
				new nm9 = Info[playerid][pNumeroLibreta9];
				new nm10 = Info[playerid][pNumeroLibreta10];
				new stringx[420];
				format(stringx, sizeof(stringx), "1 - %d - %s\n2 - %d - %s\n3 - %d - %s\n4 - %d - %s\n5 - %d - %s\n6 - %d - %s\n7 - %d - %s\n8 - %d - %s\n9 - %d - %s\n10 - %d - %s",nm1, Info[playerid][pAgenda1], nm2, Info[playerid][pAgenda2], nm3, Info[playerid][pAgenda3], nm4, Info[playerid][pAgenda4], nm5, Info[playerid][pAgenda5], nm6, Info[playerid][pAgenda6], nm7, Info[playerid][pAgenda7], nm8, Info[playerid][pAgenda8], nm9, Info[playerid][pAgenda9], nm10, Info[playerid][pAgenda10]);
				ShowPlayerDialog(playerid, DIALOG_LIBRETACONTACTO, DIALOG_STYLE_LIST, "Contactos", stringx, "Aceptar", "Atras");
			}
			if(listitem == 1)
			{
				new stringx[180];
				format(stringx, sizeof(stringx), "Nota 1: %s\nNota 2: Vacio",Info[playerid][pBlocNotas]);
				ShowPlayerDialog(playerid, INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"{00F70C}Bloc de Notas - /crearnota",stringx, "Aceptar", "Salir");
			}
			if(listitem == 2)
			{
				Info[playerid][pNumeroLibreta1] = 0;
				Info[playerid][pNumeroLibreta2] = 0;
				Info[playerid][pNumeroLibreta3] = 0;
				Info[playerid][pNumeroLibreta4] = 0;
				Info[playerid][pNumeroLibreta5] = 0;
				Info[playerid][pNumeroLibreta6] = 0;
				Info[playerid][pNumeroLibreta7] = 0;
				Info[playerid][pNumeroLibreta8] = 0;
				Info[playerid][pNumeroLibreta9] = 0;
				Info[playerid][pNumeroLibreta10] = 0;
				format(Info[playerid][pAgenda1], 40, "Ninguno");
				format(Info[playerid][pAgenda2], 40, "Ninguno");
				format(Info[playerid][pAgenda3], 40, "Ninguno");
				format(Info[playerid][pAgenda4], 40, "Ninguno");
				format(Info[playerid][pAgenda5], 40, "Ninguno");
				format(Info[playerid][pAgenda6], 40, "Ninguno");
				format(Info[playerid][pAgenda7], 40, "Ninguno");
				format(Info[playerid][pAgenda8], 40, "Ninguno");
				format(Info[playerid][pAgenda9], 40, "Ninguno");
				format(Info[playerid][pAgenda10], 40, "Ninguno");
				SendClientMessage(playerid, COLOR_WHITE, "Contactos restaurados. Todos han sido borrados.");
			}
			if(listitem == 3)
			{
				Info[playerid][pNumeroLibreta1] = 0;
				Info[playerid][pNumeroLibreta2] = 0;
				Info[playerid][pNumeroLibreta3] = 0;
				Info[playerid][pNumeroLibreta4] = 0;
				Info[playerid][pNumeroLibreta5] = 0;
				Info[playerid][pNumeroLibreta6] = 0;
				Info[playerid][pNumeroLibreta7] = 0;
				Info[playerid][pNumeroLibreta8] = 0;
				Info[playerid][pNumeroLibreta9] = 0;
				Info[playerid][pNumeroLibreta10] = 0;
				format(Info[playerid][pAgenda1], 40, "Ninguno");
				format(Info[playerid][pAgenda2], 40, "Ninguno");
				format(Info[playerid][pAgenda3], 40, "Ninguno");
				format(Info[playerid][pAgenda4], 40, "Ninguno");
				format(Info[playerid][pAgenda5], 40, "Ninguno");
				format(Info[playerid][pAgenda6], 40, "Ninguno");
				format(Info[playerid][pAgenda7], 40, "Ninguno");
				format(Info[playerid][pAgenda8], 40, "Ninguno");
				format(Info[playerid][pAgenda9], 40, "Ninguno");
				format(Info[playerid][pAgenda10], 40, "Ninguno");
				Info[playerid][pLibreta] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "[AVISO] Tiraste tu agenda y con esto tus contáctos.");
				//new string[128];
				format(string, sizeof(string), "* %s tira la agenda al suelo.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	}
	if(dialogid == DIALOG_PJ)
	{
		if(response == 1)
		{
		    switch(listitem)
		    {
      			case 0:
		        {
		            	SendClientMessage(playerid, COLOR_WHITE, "Usted abrió la Celda Número [1]. Se cerrará en 10 segundos.");
		            	MoveDynamicObject(PJCELDA, 1438.1360, -1479.50000, 1617.51892, 2.0); // Abierto.
	            	 	SetTimer("CloseDoorPJCELDA", 9000, 0);
	            	 	format(string, sizeof(string), "* %s pulsa un botón y abre la Celda Número 1.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			            return 1;
		        }
         		case 1:
		        {
	       				SendClientMessage(playerid, COLOR_WHITE, "Usted abrió la Celda Número [2]. Se cerrará en 10 segundos.");
	       				MoveDynamicObject(PJCELDA2, 1434.6080, -1479.50000, 1617.51892, 2.0); // Abierto.
       				 	SetTimer("CloseDoorPJCELDA2", 9000, 0);
       				 	format(string, sizeof(string), "* %s pulsa un botón y abre la Celda Número 2.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     					return 1;
		        }
			}
		}
	}
	
	if(dialogid == DIALOG_LSPD_ELEVATOR1)
	{
		if(response == 1)
		{
		    switch(listitem)
		    {
      			case 0:
		        {
		            	SetPosEx(playerid, 1554.822021,-1648.085815,4995.55, -90.0, 1, 1);
		            	SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la primera planta, ubicación de las Oficinas y Asuntos Internos.");
			            return 1;
		        }
         		case 1:
		        {
	       				SetPosEx(playerid, 1555.0,-1648.085815,4985.34, -90.0, 1, 1);
	       				SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la prisión de LSPD.");
     					return 1;
		        }
			}
		}
	}
	if(dialogid == DIALOG_LSPD_ELEVATOR2)
	{
		if(response == 1)
		{
		    switch(listitem)
		    {
      			case 0:
		        {
		            	SetPosEx(playerid, 1554.630126,-1709.477050,4995.55, -90.0, 1, 1);
		            	SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en la primera planta, ubicación de Recursos Humanos y Escuela de Cadetes.");
			            return 1;
		        }
         		case 1:
		        {
	       				SetPosEx(playerid, 1525.365966,-1677.872680,5.890625, -90.0, 0, 0);
	       				SendClientMessage(playerid, COLOR_WHITE, "Usted se encuentra en el garage de LSPD, recuerde pedir permiso antes de usar una patrulla.");
     					return 1;
		        }
			}
		}
	}
 	return 1;
}

IsVehicleBusy(vehicleid) // The_Chaoz ¿?¿?¿
{
    for(new i; i<GetMaxPlayers(); i++)
    	if(IsPlayerConnected(i) && IsPlayerInVehicle(i, vehicleid))
    		return 1;
    return 0;
}

function BroadCast(color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pLevel] >= 1 && AdminChat[i] == 0)
		{
		    SendClientMessageEx(i, color, string);
		}
	}
	return 1;
}

function SendVIPMessage(color, string[])
{
	foreach(Player, i)
	{
		if((Info[i][pVIP] >= 1 || Info[i][pAdminZC] >= 2) && Info[i][pVIPCHAT] >= 1)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

stock ShopTechBroadCast(color,string[])
{
	foreach(Player, i)
	{
		if (Info[i][pShopTech] == 1 || Info[i][pAdminZC] >= 1338)
		{
			SendClientMessageEx(i, color, string);
		}
	}
	return 1;
}

stock ABroadCast(color,string[],level)
{
	foreach(Player, i)
	{
		if (Info[i][pAdminZC] >= level && AdminChat[i] == 0)
		{
			SendClientMessageEx(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

stock ABroadCastOnDuty(color,string[],level)
{
	foreach(Player, i) // Avisos de muertes.
	{
		if (Info[i][pAdminZC] >= level && AdminChatAvisos[i] == 0)
		{
			SendClientMessageEx(i, color, string);
		}
	}
	return 1;
}
stock CBroadCast(color,string[],level)
{
	foreach(Player, i)
	{
		if (Info[i][pHelper] >= level)
		{
			SendClientMessageEx(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

function SendDutyAdvisorMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pHelper] >= 1 && GetPVarInt(i, "AdvisorDuty") == 1)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function SendAdvisorMessage(color, string[])
{
	foreach(Player, i)
	{
			if((Info[i][pHelper] >= 1 || Info[i][pVIP] == 5) && advisorchat[i])
			{
				SendClientMessageEx(i, color, string);
			}
			else
			{
			    if(Info[i][pAdminZC] >= 1 && advisorchat[i])
			    {
			        SendClientMessageEx(i, color, string);
			    }
			}
	}
}

function OOCOff(color, string[])
{
	foreach(Player, i)
	{
		if(!gOoc[i])
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function OOCNews(color,string[])
{
	foreach(Player, i)
	{
		if(!gNews[i])
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function OOCMusic(color,string[])
{
	foreach(Player, i)
	{
		if(!gMusic[i])
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

function SendRadioMessage(member, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pMember] == member)
		{
			if(RadioOn[i])
            {
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

function SendNewFamilyMessage(family, color, string[])
{
	foreach(Player, i)
	{
			if(Info[i][pFMember] == family)
			{
				if(!gFam[i])
				{
					SendClientMessageEx(i, color, string);
				}
			}
	}
}

function SendFamilyMessage(family, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pMember] == family || Info[i][pLeader] == family || See_FAM[i] == family)
		{
			if(!gFam[i])
			{
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

function CanalReligioso(religion, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pReligion] == religion)
		{
			if(!gRel[i])
			{
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(Info[i][pAdminZC] >= 1 && AdminChat[i] == 0)
		    {
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock SendAD(from, advert[], number)
{
    new bool:breakingloop = false, newid = -1;

	for(new i=0;i<MAX_AD;i++)
	{
		if(!breakingloop)
		{
			if(ADInfo[i][aActive] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != -1)
    {
        strmid(ADInfo[newid][aAdvert], advert, 0, strlen(advert), 128);
        strmid(ADInfo[newid][aResume], advert, 0, strlen(advert), 15);
        ADInfo[newid][aOther] = from;
        ADInfo[newid][aActive] = 1;
        ADInfo[newid][aNumber] = number;
        Info[from][pAdverID] = newid;
        new PlayerName[MAX_PLAYER_NAME];
     	GetPlayerName(from, PlayerName, sizeof(PlayerName));
     	strmid(ADInfo[newid][aContact], PlayerName, 0, strlen(PlayerName), MAX_PLAYER_NAME);
    }
    else
    {
		SendClientMessageEx(from, COLOR_WHITE,"* Tienes que esperar, el espacio de anuncios está lleno.");
    }
    return 1;
}

stock ClearAd(id)
{
	strmid(ADInfo[id][aAdvert], "Nada", 0, 4, 4);
	strmid(ADInfo[id][aResume], "Nada", 0, 4, 4);
	Info[ADInfo[id][aOther]][pAdverID] = -1;
    ADInfo[id][aOther] = 0;
    ADInfo[id][aActive] = 0;
    ADInfo[id][aNumber] = 0;
}

//******************************CMDS INICIO******************************
/*	zcmd(dnifalso, playerid, params[])
    {
        if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "Utiliza: /dnifalso (PlayerID)");
        if(!IsPlayerConnected(params[0]))  return Message(playerid, COLOR_GRAD2, "Jugador no conectado.");
        if(Info[playerid][pDNIFalse] == 0)    return Message(playerid, COLOR_GRAD2, "No posees un DNI falso.");
        if(ProxDetectorS(8.0, playerid, params[0]))
        {
            new string[90];
            ShowDNIFalse(playerid, params[0]);
            format(string, sizeof(string), "* %s le muestra su DNI a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        } else Message(playerid, COLOR_GRAD2, "Jugador muy lejos.");
        return 1;
    }*/
    zcmd(dnifalso, playerid, params[])
    {
    	new string[120], giveplayerid;
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dni (ID)");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        if(Info[playerid][pDNIFalse] == 0)    return SendClientMessageEx(playerid, COLOR_GRAD2, "No posees un DNI falso.");
        if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
        if(papilla[giveplayerid] == 1)
		{
				SetPVarInt(playerid, "IsInArena", 0);
				SetPVarInt(playerid, "ArenaMode", 0);
                Info[playerid][pJailAdmin] += 1;
		        Info[playerid][pJailed] = 1;
		        PhoneOnline[playerid] = 1;
				Info[playerid][pJailTime] = 5*60;
				ResetPlayerWeaponsEx(playerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(playerid);
				SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1000);
				format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /dnifalso.",GetPlayerNameEx(playerid));
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por usar el CMD /dnifalso hacia un administrador Onduty.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_AZULL,string,2);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar el CMD /dnifalso hacia un administrador Onduty.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Alguien intentó usar /dnifalso hacia tu ID, ha sido jaileado automáticamente.");
				StopAudioStreamForPlayer(playerid);
				strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
				strmid(Info[playerid][pJailReason], "Usar /dnifalso a un admin Onduty.", 0, strlen("Usar /dnifalso a un admin Onduty."), 64);
		}
		else
		{
        	if(ProxDetectorS(8.0, playerid, giveplayerid))
        	{
            	//new string[90];
            	ShowDNIFalse(playerid, giveplayerid);
            	format(string, sizeof(string), "* %s le muestra su DNI a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		}
		return 1;
    }
zcmd(payday, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PaydayOn == 0)
		{
			new string[64];
    		format(string, sizeof(string), "* Faltan {FF0000}%d{FFFFFF} minutos para obtener el PayDay.",PayDayLeft);
    		return SendClientMessageEx(playerid, COLOR_WHITE, string);
    	}
		else
		{
  			if(Info[playerid][YaCobre] == 0) return PayDayEx(playerid);
		    else
			{
				new string[64];
    			format(string, sizeof(string), "* Faltan {FF0000}%d{FFFFFF} minutos para obtener el PayDay.",PayDayLeft);
    			return SendClientMessageEx(playerid, COLOR_GRAD2, string);
		    }
		}
	}
	return 1;
}
    zcmd(setpayday, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "i", params[0]))
        {
            new string[128];
            PayDayLeft = params[0];
            format(string, sizeof(string), "[AdmCmdExe]: %s estableció los minutos del PayDay a %d.", GetPlayerNameEx(playerid), PayDayLeft);
            ABroadCast(COLOR_GENERAL, string, 2);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /setpayday (Minutos)");
        return 1;
    }
   	zcmd(dropa, playerid, params[])
    {
    if(!IsAtjob(playerid)) return Message(playerid, COLOR_WHITE, "* No estas en el lugar donde te uniste al trabajo!");
    SetPlayerSkin(playerid, Info[playerid][pgskin]);
    return 1;
    }
	zcmd(panum, playerid, params[])
    {
        if(Team_LSTV(playerid))
		{
        SafeDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "{00F70C}Anuncios LSTV","Nota: Tamaño del texto sólo será máximo 128 Letras.", "Enviar", "Atrás");
		}
        return 1;
    }
    zcmd(gcomprar, playerid, params[])
    {
    	/*if(!IsAtGasT(playerid))
		{
		SendClientMessageEx(playerid, COLOR_WHITE, "* No estás en una gasolinera !");
		return 1;
		}
        ShowPlayerDialog(playerid, TIENDA_GAS, DIALOG_STYLE_LIST, "{A2DC35}Gasolinera", "Lata Gas.\t\t$200\nBolsa Patatas\t\t$30\nRefresco\t\t$20\nCigarros\t\t$40\nEncendedor\t\t$20", "Comprar", "Cancelar");
        */
        SendClientMessageEx(playerid, COLOR_WHITE, "Comando removido, usa /comprar una vez esté dentro de la gasolinera." );
		return 1;
    }
    zcmd(rellenarauto, playerid, params[])
    {
        	new sendername[MAX_PLAYER_NAME];
       		new idcar = GetPlayerVehicleID(playerid),string[128];
	    	if(autorepara[playerid] == 1)
	    	{
		    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
		       		format(string, sizeof(string), "* %s llena el tanque de su vehículo.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					VehicleFuel[idcar] = 30;
					autorepara[playerid] = 0;
    			}
			}
  			return 1;
    }
    zcmd(quitardni, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 3) return Message(playerid, COLOR_WHITE, "No autorizado.");
        if(sscanf(params, "u", params[0])) return Message(playerid, COLOR_WHITE, "Utiliza: /quitardni (PlayerID)");
        if(!IsPlayerConnected(params[0])) return Message(playerid, COLOR_WHITE, "Jugador no conectado.");
        if(Info[params[0]][pDNIFalse] != 0)
        {
            new string[128];
	        Info[params[0]][pDNIFalse] = 0;
    	    strmid(Info[params[0]][pDNIName], "Ninguno", 0, strlen("Ninguno"), 12);
            format(string, sizeof(string), "* Le has quitado el DNI Falso a {5ABAFF}%s{FFFFFF}.", GetPlayerNameEx(params[0]));
            Message(playerid, COLOR_WHITE, string);
        } else Message(playerid, COLOR_WHITE, "Esa persona no tiene un DNI Falso.");
        return 1;
    }
    zcmd(comprardni, playerid, params[])
    {
    if(GetPlayerMoney(playerid) < 15000) return SendClientMessage(playerid,COLOR_RED,"No tienes suficiente dinero.");
    if(IsPlayerInRangeOfPoint(playerid, 5.0,1297.2820,-988.9633,32.6953))
	{
    	if(Info[playerid][pDNIFalse] > 0) return Message(playerid, COLOR_WHITE, "Ya posees un DNI Falso.");
   		ShowPlayerDialog(playerid,DNI_MENU,DIALOG_STYLE_INPUT,"{00F70C}Venta DNI Falso","Ingresa el nombre que quieres usar para el DNI Falso. Precio:15.000$.","Aceptar","Salir");
   		}
   		return 1;
    }
	 zcmd(rendirse, playerid, params[])
 	{
 	    if(PlayerDrunk[playerid] > 9) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ahora.");
 	    if(GetPVarInt(playerid, "IsFrozen") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto porque estás congelado.");
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarInt(playerid, "Injured") == 0)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
  	  		return 1;
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ahora.");
	}
	zcmd(irnegocio, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
 		if(Info[playerid][pAdminZC] < 6) return Message(playerid, COLOR_WHITE, "No autorizado.");
   		if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_WHITE, "Utiliza: /irnegocio (Negocio ID)");
		if(params[0] < 0 || params[0] >= MAX_NEGOCIOS) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} ID de negocio errónea.");
		if(NegociosVariables[params[0]][bExteriorPos][0] == 0.0) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} ID de negocio no creado. Está disponible.");
		//SetPlayerPos(playerid,BizzInfo[params[0]][bEntrancex],BizzInfo[params[0]][bEntrancey],BizzInfo[params[0]][bEntrancez]);
  		SetPlayerInterior(playerid,0); Info[playerid][pInt] = 0;
		SetPlayerPos(playerid, NegociosVariables[params[0]][bExteriorPos][0], NegociosVariables[params[0]][bExteriorPos][1], NegociosVariables[params[0]][bExteriorPos][2]);
		Message(playerid, COLOR_WHITE, "Teleportado al negocio seleccionado.");
		return 1;
	}
	zcmd(movernegocio, playerid, params[])
	{
	if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /movernegocio <Negocio ID> (Mover negocio).");
 	if(params[0] < 0 || params[0] >= MAX_NEGOCIOS) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} ID de negocio errónea.");
	if(NegociosVariables[params[0]][bExteriorPos][0] == 0.0) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Negocio inexistente, crealo antes.");
	new Float:X, Float:Y, Float:Z;
	new string[128];
 	GetPlayerPos(playerid,X,Y,Z);
 	format(string,sizeof(string),"Entrada del negocio %d movido a %f - %f - %f.", params[0],X,Y,Z);
	SendClientMessage(playerid,COLOR_YELLOW2,string);
	//BizzInfo[params[0]][bEntrancex] = X;
	//BizzInfo[params[0]][bEntrancey] = Y;
	//BizzInfo[params[0]][bEntrancez] = Z;
	NegociosVariables[params[0]][bExteriorPos][0] = X;
	NegociosVariables[params[0]][bExteriorPos][1] = Y;
	NegociosVariables[params[0]][bExteriorPos][2] = Z;
	//UpdateBizz();
	//OnBizzTextdrawUpdate(params[0]);
	//saveNegocios(bID);
	ActualizarNegocio(params[0]); // Actualiza LabelText, Pickup y después lo guarda.
	return 1;
	}
	zcmd(interiornegocio, playerid, params[])
	{
	if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /interiornegocio <Negocio ID> (Crear Interior Negocio).");
 	if(params[0] < 0 || params[0] >= MAX_NEGOCIOS) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} ID de negocio errónea.");
	if(NegociosVariables[params[0]][bExteriorPos][0] == 0.0) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Negocio inexistente, crealo antes.");
	new Float:X, Float:Y, Float:Z;
	new string[128];
 	GetPlayerPos(playerid,X,Y,Z);
 	format(string,sizeof(string),"Interior del negocio %d movido a %f - %f - %f.", params[0],X,Y,Z);
	SendClientMessage(playerid,COLOR_YELLOW2,string);
	//BizzInfo[params[0]][bEntrancex] = X;
	//BizzInfo[params[0]][bEntrancey] = Y;
	//BizzInfo[params[0]][bEntrancez] = Z;
	NegociosVariables[params[0]][bInterior] = GetPlayerInterior(playerid);
	NegociosVariables[params[0]][bInteriorPos][0] = X;
	NegociosVariables[params[0]][bInteriorPos][1] = Y;
	NegociosVariables[params[0]][bInteriorPos][2] = Z;
	//UpdateBizz();
	//OnBizzTextdrawUpdate(params[0]);
	//saveNegocios(bID);
	ActualizarNegocio(params[0]); // Actualiza LabelText, Pickup y después lo guarda.
	return 1;
	}
	zcmd(comer, playerid, params[]){
        if(!IsAtBarr(playerid)) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estas en un lugar donde Comer.");
        if(GetPlayerMoney(playerid) < 0) return Message(playerid, COLOR_FADE2, "Bartender dice: Vete a otro lugar a comer gratis.");
	    if(IsPlayerConnected(playerid)){
	        SendClientMessageEx(playerid, COLOR_WHITE, "El comando será removido en la próxima versión, CMD a usar ahora es /comprar, disculpa las molestias." );
		    ShowPlayerDialog(playerid, BAR_MENU, DIALOG_STYLE_LIST, "{A2DC35}Menú del Día", "Platos Combinados & Tapas\nRefrescos & Bebidas & Vinos\nComida para llevar ($100)", "Ver", "Salir");
	    } else Message(playerid, COLOR_WHITE, " Usted no esta conectado.");
	    return 1;
	}
	/*zcmd(staffvnegocio, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        if(!sscanf(params, "i", params[0]))
        {
        	new string[128];
            if(params[0] >= MAX_NEGOCIOS || params[0] < 0) return Message(playerid, COLOR_WHITE, "ID incorrecto.");
            else{
				SellBizz(params[0]);
            	format(string, sizeof(string), "Negocio {FF0000}%d{FFFFFF} vendido.", params[0]);
				Message(playerid, COLOR_WHITE, string);
			}
        } else Message(playerid, COLOR_WHITE, "Utiliza: /staffvnegocio (Negocio ID)");
        return 1;
   	}*/
CMD:staffvnegocio(playerid, params[])
{
    if(Info[playerid][pAdminZC] < 4000) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
	{
        new bID = strval(params);
		if(!isnull(params))
		{
		    if(bID < 1 || bID > MAX_NEGOCIOS) return SendClientMessageEx(playerid, COLOR_GREY, "[Error]: ID de negocio inválido.");
	        new labelString[320];
	        format(NegociosVariables[bID][bOwner], MAX_PLAYER_NAME, "Sin Dueño"); 
	        format(NegociosVariables[bID][bExtortion], MAX_PLAYER_NAME, "Nadie"); //bExtortion
	        NegociosVariables[bID][bLocked] = 0;
			format(labelString, sizeof(labelString), "{FFFFFF}%s\nNegocio en venta, usa /comprarnegocio\n{FFFFFF}[Estado: {04B404}Abierto{FFFFFF}]\n[Nivel necesario: %d - Precio %d$]\n\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",
			NegociosVariables[bID][bName], NegociosVariables[bID][bLevelNeeded], NegociosVariables[bID][bPrice], bID);
			UpdateDynamic3DTextLabelText(NegociosVariables[bID][bLabelID],-1,labelString);
			//////////// AVISO DE VENTA DEL NEGOCIO AL STAFF //////////////
			format(labelString, sizeof(labelString), "[Aviso]: Vendiste con comando administrativo el negocio [ID %d.]", bID);
			SendClientMessageEx(playerid, COLOR_GREY, labelString);
			SendClientMessageEx(playerid, COLOR_WHITE, "Este negocio queda abierto, sin propietario, está en venta y conserva sus ganancias existentes.");
		    saveNegocios(bID);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /avenegocio [businessid]");
    }
    return 1;
}
CMD:desbugmanos(playerid, params[])
{
			YaRobo[playerid] = 0;
		    DejarRobo(playerid);
			SendClientMessageEx(playerid, COLOR_GENERAL, "[SERVER] {FFFFFF}Manos Desbugeadas.");
			return 1;
}
CMD:desbug(playerid, params[])
{
    if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
	if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball!");
	if(IsPlayerConnected(playerid))
	{
	  SetPlayerInterior(playerid,0);
	  SetPlayerVirtualWorld(playerid, 0);
	    Info[playerid][pInt] = 0;
	    Info[playerid][pVW] = 0;
	    SendClientMessageEx(playerid, -1, "Administración: Esperamos que su problema haya sido solucionado o reloguea.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, " Usted no esta logeado.");
    return 1;
}
    zcmd(editarnegocio, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128], item[32];
		if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_WHITE, "No autorizado.");
	 	if(!sscanf(params, "s[64]i", item, params[1]))
	 	{
	   		for(new b = 0; b < MAX_NEGOCIOS; b++)
	   		{
		     	if(PlayerToPoint(3, playerid, NegociosVariables[b][bExteriorPos][0], NegociosVariables[b][bExteriorPos][1], NegociosVariables[b][bExteriorPos][2]))
		 		{
     				if(params[1] > 0)
		 			{
                        if(strcmp(item,"nivel",true) == 0)
						{
      						NegociosVariables[b][bLevelNeeded] = params[1]; 
      						SaveVarBusiness(1,b, "Level",NegociosVariables[b][bLevelNeeded]);
                        }
                        else if(strcmp(item,"precio",true) == 0)
						{
      						NegociosVariables[b][bPrice] = params[1];
      						SaveVarBusiness(1,b, "Precio",NegociosVariables[b][bPrice]);
                        }
                        else if(strcmp(item,"tipo",true) == 0)
						{
      						NegociosVariables[b][bType] = params[1];
      						SaveVarBusiness(1,b, "Tipo",NegociosVariables[b][bType]);
                        }
                        else if(strcmp(item,"ganancias",true) == 0)
						{
      						NegociosVariables[b][bGanancias] = params[1];
      						SaveVarBusiness(1,b, "Ganancias",NegociosVariables[b][bGanancias]);
                        }
                        else if(strcmp(item,"productos",true) == 0)
						{
      						NegociosVariables[b][bStock] = params[1];
      						SaveVarBusiness(1,b, "Stock",NegociosVariables[b][bStock]);
                        }
                        //OnBizzTextdrawUpdate(b);
                        ActualizarNegocio(b); // Actualizar datos al finalizar edición.
        	        	format(string, sizeof(string), "Negocio ID: %d | Item: %s | Valor: %d", b, item, params[1]);
        	        	Message(playerid, COLOR_GRAD2, string);
      	        	}
  	        	}
            }
	    }
		else
		{
			Message(playerid, COLOR_WHITE, "Items Negocios: Nivel, Precio, Ganancias, Productos, Tipo(1 al 6)");
			Message(playerid, COLOR_WHITE, "[Tipos de negocios]: 1. 24/7 - 2. Ropa - 3. Restaurante - 4. Petrol - 5. Armas - 6. Otros");
 	 	}
		return 1;
	}
	CMD:crearnegocio(playerid, params[])
	{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No conectado.");
    if(Info[playerid][pAdminZC] >= 4000)
    {
    new x; // Será la ID del negocio.
	if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearnegocio [ID]");
	if(x < 0 || x > MAX_NEGOCIOS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de negocio inválido! (0 - 50)");
	if(NegociosVariables[x][bExteriorPos][0] == 0.0)
	{
	    // Coordenadas.
		new Float:k,Float:y,Float:z, string[128],labelString[320];
		GetPlayerPos(playerid,k,y,z);
		NegociosVariables[x][bExteriorPos][0] = k;
		NegociosVariables[x][bExteriorPos][1] = y;
		NegociosVariables[x][bExteriorPos][2] = z;
		// Información del negocio.
  		format(NegociosVariables[x][bOwner], MAX_PLAYER_NAME, "Sin Dueño");
  		format(NegociosVariables[x][bExtortion], MAX_PLAYER_NAME, "Nadie"); //bExtortion
 		format(NegociosVariables[x][bName], 32, "Negocio sin nombre");
 		format(NegociosVariables[x][bInfo], 32, "Bienvenido.");
 		NegociosVariables[x][bLocked] = 0; // Abierto.
 		NegociosVariables[x][bLevelNeeded] = 5;
	 	NegociosVariables[x][bPrice] = 250000;
	 	NegociosVariables[x][bType] = 0; // Tipo fuera de uso.
	 	// Label y Object.
		format(labelString, sizeof(labelString), "{FFFFFF}%s\nNegocio en venta, usa /comprarnegocio\n[Estado: {04B404}Abierto{FFFFFF}]\n[Nivel necesario: %d - Precio %d$]\n\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",NegociosVariables[x][bName], NegociosVariables[x][bLevelNeeded], NegociosVariables[x][bPrice], x);
		NegociosVariables[x][bLabelID] = CreateDynamic3DTextLabel(labelString, -1, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		NegociosVariables[x][bPickupID] = CreateDynamicPickup(1274, 23, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2], 0, 0, -1, 250);
        format(string, sizeof(string), "Negocio [ID: %d] ha sido creado satisfactoriamente. (En caso de bug, /borrarnegocio [ID])", x);
		Message(playerid, COLOR_GREY, string);
		Message(playerid, COLOR_WHITE, "Para mover el exterior, use /movernegocio, para agregar interior, /interiornegocio, para ajustar, /editarnegocio.");
		saveNegocios(x); // Guardado de la creación. Para no sobrescribir.
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* Esta ID está en uso, intenta usar otra diferente.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "No autorizado.");
	return 1;
	}
	CMD:borrarnegocio(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new x;
			if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borrarnegocio [Negocio ID]");
			if(x < 0 || x > MAX_NEGOCIOS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de negocio inválido! (0 - 50)");
			if(NegociosVariables[x][bExteriorPos][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este negocio no existe, ID erronéo.");
			BorrarNegocioID(x);
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Este negocio ha sido borrado, datos reseteados. Nuevo slot queda libre.");
		}
		return 1;
	}
	CMD:negociosiguiente(playerid, params[])
	{
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    	if(Info[playerid][pAdminZC] >= 4000)
		{
			for(new x; x<MAX_NEGOCIOS; x++)
			{
		    	if(NegociosVariables[x][bExteriorPos][0] == 0.0)
		    	{
		        	new string[128];
		        	format(string, sizeof(string), "Negocio ID:%d está disponible para su uso.", x);
		        	SendClientMessageEx(playerid, COLOR_WHITE, string);
		        	break;
				}
			}
		}
		else
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
			return 1;
		}
		return 1;
	}
    zcmd(negocioname, playerid, params[])
	{
   	    new string[128];
   	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_WHITE, "No autorizado.");
		for(new b = 0; b < MAX_NEGOCIOS; b++)
		{
		    if(PlayerToPoint(3.0, playerid, NegociosVariables[b][bExteriorPos][0], NegociosVariables[b][bExteriorPos][1], NegociosVariables[b][bExteriorPos][2]))
		    {
				if(!sscanf(params,"s[32]",params[0]))
				{
					//strmid(BizzInfo[b][bName], params[0], 0, strlen(params[0]), 255);
					format(NegociosVariables[b][bName], 32, params[0]);
					format(string, sizeof(string), "NegocioID: %d | Nuevo Nombre: %s", b, params[0]);
					Message(playerid, COLOR_GRAD2, string);
					//OnBizzTextdrawUpdate(b);
					ActualizarNegocio(b);
				} else Message(playerid, COLOR_WHITE, "Utiliza: /negocioname (Nuevo Nombre)");
			}
   	    }
   	    return 1;
   	}
   	CMD:bname(playerid, params[])
	{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new string[128], b, ownername[32];
	if(sscanf(params, "ds[32]", b, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bname (Negocio ID) (Nombre_Apellido)");
	format(NegociosVariables[b][bOwner], MAX_PLAYER_NAME, "%s", ownername);
	format(string, sizeof(string), "Estableciste el nombre del dueño del negocio a: %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ActualizarNegocio(b);
	return 1;
	}
	CMD:exname(playerid, params[])
	{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new string[128], b, ownername[32];
	if(sscanf(params, "ds[32]", b, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /exname (Negocio ID) (Nombre_Apellido)");
	format(NegociosVariables[b][bExtortion], MAX_PLAYER_NAME, "%s", ownername);
	format(string, sizeof(string), "Estableciste el nombre del extorsionista del negocio a: %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ActualizarNegocio(b);
	return 1;
	}
   	CMD:comprarnegocio(playerid, params[])
	{
    if(IsPlayerConnected(playerid))
	{
        for(new x = 0; x < MAX_NEGOCIOS; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]))
			{
				if(!strcmp(NegociosVariables[x][bOwner], "Sin Dueño", true))
				{
				    if(NegociosVariables[x][bPrice] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* Este negocio ha sido bloqueado por un administrador.");
					//if(getPlayerNegocioID(playerid) >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya eres dueño de un negocio.");
					if(Info[playerid][pPbizzkey] != 9999) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya eres dueño de un negocio.");
					if(GetPlayerCash(playerid) >= NegociosVariables[x][bPrice])
					{
	        			if(Info[playerid][pLevel] < NegociosVariables[x][bLevelNeeded])
		        		{
		        		    new string[128];
		            		format(string, sizeof(string), "Este negocio requiere que seas nivel {FF0000}%d", NegociosVariables[x][bLevelNeeded]);
							Message(playerid, COLOR_WHITE, string);
							return 1;
						}
						GivePlayerCash(playerid,-NegociosVariables[x][bPrice]);
						Tax += NegociosVariables[x][bPrice];
						Info[playerid][pPbizzkey] = x;
						//new labelString[280];
						//strcpy(businessVariables[x][bOwner], Info[playerid][pNormalName], MAX_PLAYER_NAME);
						strmid(NegociosVariables[x][bOwner], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), 255);
						//DestroyDynamicPickup(NegociosVariables[x][bPickupID]);
						/*switch(businessVariables[x][bLocked])
						{
						    case 1: format(labelString, sizeof(labelString), ""COL_WHITE"[%d]\n\n%s\nDueño: %s\n\n("COL_BLUE"Cerrado"COL_WHITE")", x, businessVariables[x][bName], businessVariables[x][bOwner]);
							case 0: format(labelString, sizeof(labelString), "ID: %d\n\n%s\n(Dueño: %s)\n\n({BE81F7}Presiona 'H' para entrar"COL_WHITE")", x, businessVariables[x][bName], businessVariables[x][bOwner]);
						}
						UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], -1, labelString);
						businessVariables[x][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 0, 0, -1, 250);
						SendClientMessageEx(playerid, COLOR_GREY, "* Felicitaciones por tu compra!");
						saveBusiness(x);*/
						ActualizarNegocio(x);
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para comprar este negocio.");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes comprar un negocio con dueño.");
			}
		}
    }
	return 1;
	}
	/*zcmd(comprarnegocio, playerid, params[])
	{
	    for(new b = 0; b < sizeof(BizzInfo); b++)
		{
		    new string[128];
		    if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]))
			{
		        if(BizzInfo[b][bOwned] == 1) return Message(playerid, COLOR_WHITE, "Este negocio ya tiene dueño.");
		        if(Info[playerid][pPbizzkey] != 9999) return Message(playerid, COLOR_WHITE, "Ya posees un negocio.");
		        if(Info[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
		        {
		            format(string, sizeof(string), "Este negocio requiere que seas nivel {FF0000}%d", BizzInfo[b][bLevelNeeded]);
					Message(playerid, COLOR_WHITE, string);
					return 1;
				}
				if(GetPlayerMoney(playerid) >= BizzInfo[b][bBuyPrice])
				{
     				Info[playerid][pPbizzkey] = b;
					BizzInfo[b][bOwned] = 1;
					strmid(BizzInfo[b][bOwner], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), 255);
					Bought(playerid, BizzInfo[b][bBuyPrice]);
					Message(playerid, COLOR_WHITE, "Felicidades, has adquirido este negocio. Utiliza /ayuda negocio");
					OnBizzTextdrawUpdate(b);
					UpdateBizz();
					return 1;
				} else Message(playerid, COLOR_WHITE, "No tienes los fondos necesarios para adquirir este negocio.");
			}
		}
		return 1;
	}*/
	zcmd(vendernegocio, playerid, params[])
	{
	    new string[128], x = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(PlayerToPoint(3.0, playerid, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]))
		{
			if(Info[playerid][pPbizzkey] != 9999 && strcmp(GetPlayerNameEx(playerid), NegociosVariables[x][bOwner], true) == 0) // Tiene negocio y a tu nombre.
			{
	            new money = NegociosVariables[x][bPrice]+NegociosVariables[x][bGanancias]; // Se devuelve el dinero y ganancias.
	            NegociosVariables[x][bGanancias] = 0; // El negocio queda sin ganancias.
	            format(NegociosVariables[x][bOwner], MAX_PLAYER_NAME, "Sin Dueño"); // Nadie es el propietario. 
	            format(NegociosVariables[x][bExtortion], MAX_PLAYER_NAME, "Nadie"); // Nadie es extorsionador.
	            //GivePlayerCash(playerid, businessVariables[businessID][bPrice]/2);
				Earn(playerid, money); // El dinero es devuelto al usuario.
				format(string, sizeof(string), "Has vendido tu negocio. Has recuperado {A2DC35}%d$",money);
				Message(playerid, COLOR_WHITE, string);
				//SellBizz(bid);
				Info[playerid][pPbizzkey] = 9999; // Se resetea la llave al usuario en sus stats. 
				ActualizarNegocio(x);
				return 1;
			}
			else Message(playerid, COLOR_WHITE, "Este negocio no está a tu nombre.");
		} else Message(playerid, COLOR_WHITE, "Debes estar cerca de tu negocio para vernderlo.");
	    return 1;
	}
//////////////////////////// SISTEMA DE NEGOCIOS AJUSTADO ////////////////////////////////////////////////////////////


CMD:abrirnegocio(playerid, params[])
{
    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
    for(new x = 0; x < MAX_NEGOCIOS; x++)
	{
		if(PlayerToPoint(3.0, playerid, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]))
		{
			if(Info[playerid][pPbizzkey] == x)
			{
	    		switch(NegociosVariables[x][bLocked])
				{
					case 0: return SendClientMessageEx(playerid, COLOR_WHITE, "El negocio ya está abierto, usa /cerrarnegocio.");
					case 1:
					{
						new string[128];
						format(string, sizeof(string), "* %s saca su llave y abre el negocio desde fuera.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						NegociosVariables[x][bLocked] = 0; // Abierto.
			    		SendClientMessageEx(playerid, COLOR_WHITE, "El negocio fue abierto, todo el mundo podrá entrar al negocio.");
			    		SaveVarBusiness(1,x, "Locked",NegociosVariables[x][bLocked]);
			    		ActualizarNegocio(x); // Se actualiza el texto.
					}
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes la llave de este negocio, no es tuyo.");
		}
		else if(PlayerToPoint(3.0, playerid, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2]))
		{
			if(Info[playerid][pPbizzkey] == x)
			{
	    		switch(NegociosVariables[x][bLocked])
				{
					case 0: return SendClientMessageEx(playerid, COLOR_WHITE, "El negocio ya está abierto, usa /cerrarnegocio.");
					case 1:
					{
   						new string[128];
						format(string, sizeof(string), "* %s saca su llave y abre el negocio desde dentro.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						NegociosVariables[x][bLocked] = 0; // Abierto.
			    		SendClientMessageEx(playerid, COLOR_WHITE, "El negocio fue abierto, todo el mundo podrá entrar al negocio.");
			    		SaveVarBusiness(1,x, "Locked",NegociosVariables[x][bLocked]);
			    		ActualizarNegocio(x); // Se actualiza el texto.
					}
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes la llave de este negocio, no es tuyo.");
		}
	}
	return 1;
}
CMD:cerrarnegocio(playerid, params[])
{
    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
    for(new x = 0; x < MAX_NEGOCIOS; x++)
	{
		if(PlayerToPoint(3.0, playerid, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]))
		{
			if(Info[playerid][pPbizzkey] == x)
			{
	    		switch(NegociosVariables[x][bLocked])
				{
					case 0:
					{
						new string[128];
						format(string, sizeof(string), "* %s saca su llave y cierra el negocio desde fuera.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						NegociosVariables[x][bLocked] = 1; // Cerrado.
			    		SendClientMessageEx(playerid, COLOR_WHITE, "El negocio fue cerrado, nadie podrá entrar al negocio, no recibirás beneficios.");
			    		SaveVarBusiness(1,x, "Locked",NegociosVariables[x][bLocked]);
			    		ActualizarNegocio(x); // Se actualiza el texto.
					}
					case 1: return SendClientMessageEx(playerid, COLOR_WHITE, "El negocio ya está cerrado, usa /abrirnegocio.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes la llave de este negocio, no es tuyo.");
		}
		else if(PlayerToPoint(3.0, playerid, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2]))
		{
			if(Info[playerid][pPbizzkey] == x)
			{
	    		switch(NegociosVariables[x][bLocked])
				{
					case 0:
					{
   						new string[128];
						format(string, sizeof(string), "* %s saca su llave y cierra el negocio desde dentro.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						NegociosVariables[x][bLocked] = 1; // Cerrado.
			    		SendClientMessageEx(playerid, COLOR_WHITE, "El negocio fue cerrado, nadie podrá entrar al negocio, no recibirás beneficios.");
			    		SaveVarBusiness(1,x, "Locked",NegociosVariables[x][bLocked]);
			    		ActualizarNegocio(x); // Se actualiza el texto.
					}
					case 1: return SendClientMessageEx(playerid, COLOR_WHITE, "El negocio ya está cerrado, usa /abrirnegocio.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes la llave de este negocio, no es tuyo.");
		}
	}
	return 1;
	}
 	CMD:negociomenu(playerid, params[])
	{
    if(IsPlayerConnected(playerid))
	{
	    new bID = Info[playerid][pPbizzkey];
	    new szDialogTittle2[128];
	    if(bID == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(!IsPlayerInRangeOfPoint(playerid, 25.0, NegociosVariables[bID][bInteriorPos][0], NegociosVariables[bID][bInteriorPos][1], NegociosVariables[bID][bInteriorPos][2])) return Message(playerid, COLOR_WHITE, "[ERROR]: Sólo puedes usar el CMD dentro de negocios, delante de la caja fuerte.");
        for(new x = 0; x < MAX_NEGOCIOS; x++)
		{
		    // Cerca de la caja fuerte.
			if(IsPlayerInRangeOfPoint(playerid, 3, NegociosVariables[x][bMiscPos][0], NegociosVariables[x][bMiscPos][1], NegociosVariables[x][bMiscPos][2]))
			{
			    // El negocio tiene que estar en los stats del user (La ID-X) y además el negocio tiene que estar a su nombre (PlayerName), ambos "TRUE".
				if(Info[playerid][pPbizzkey] == x && strcmp(GetPlayerNameEx(playerid), NegociosVariables[x][bOwner], true) == 0)
				{
		    		format(szDialogTittle2, sizeof(szDialogTittle2), "[Negocio] - %s", NegociosVariables[x][bName]);
		    		ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle2,"* Retirar Dinero\n* Depositar Dinero\n* Mensaje al Cliente\n* Revisar Stock", "Seleccionar", "Salir");
				}
 				else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes la llave de la caja fuerte, solo el propietario la puede abrir.");
			}
		}
    }
	return 1;
	}
	zcmd(sganancias, playerid, params[])
	{
	    new string[128], bid = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(PlayerToPoint(3.0, playerid, NegociosVariables[bid][bInteriorPos][0], NegociosVariables[bid][bInteriorPos][1], NegociosVariables[bid][bInteriorPos][2]))
		{
		    if(!sscanf(params,"d",params[0])){
				if(params[0] < 1 || params[0] > NegociosVariables[bid][bGanancias]) return Message(playerid, COLOR_WHITE, "Cantidad incorrecta.");
		    	if(Info[playerid][pPbizzkey] == bid && strcmp(GetPlayerNameEx(playerid), NegociosVariables[bid][bOwner], true) == 0)
				{
			    	Earn(playerid, params[0]);
			    	format(string, sizeof(string), "Has retirado {00F70C}%d${FFFFFF} de la caja fuerte de tu negocio.", params[0]);
			    	Message(playerid, COLOR_WHITE, string);
	            	NegociosVariables[bid][bGanancias] -= params[0];
	        	} else Message(playerid, COLOR_WHITE, "Este negocio no está a tu nombre.");
       		} else Message(playerid, COLOR_WHITE, "Utiliza: /sganancias (Cantidad)");
  		} else Message(playerid, COLOR_WHITE, "Debes estar cerca de la entrada de tu negocio para retirar dinero de la caja.");
		return 1;
  	}
CMD:ncaja(playerid, params[])
{
	new x = Info[playerid][pPbizzkey];
	if(x == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	if(!IsPlayerInRangeOfPoint(playerid, 25.0, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2])) return Message(playerid, COLOR_WHITE, "[ERROR]: Sólo puedes usar el CMD dentro de negocios.");
    for(new bID = 0; bID < MAX_NEGOCIOS; bID++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 25.0, NegociosVariables[bID][bInteriorPos][0], NegociosVariables[bID][bInteriorPos][1], NegociosVariables[bID][bInteriorPos][2]))
		{
		    if(Info[playerid][pPbizzkey] == bID && strcmp(GetPlayerNameEx(playerid), NegociosVariables[bID][bOwner], true) == 0) // Negocio en sus stats y el negocio a su nombre. (INI Negocios)
			{
			    // Destruit Objeto si existe.
			    if(NegociosVariables[bID][bObject] != 0) {DestroyDynamicObject(NegociosVariables[bID][bObject]);}
		    	// Obtener coordenadas.
				new Float: pos[4]; //  X, Y, Z, R.
				GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
				// Obtener Rotación.
				GetPlayerFacingAngle(playerid,pos[3]);
				pos[3] = pos[3] + 180; // RZ.
				if(pos[3] > 360){pos[3] = pos[3] - 360;} // Evitar bugs. (Máx 360 grados).
				// Crear coordenadas.
				NegociosVariables[bID][bMiscPos][0] = pos[0];
				NegociosVariables[bID][bMiscPos][1] = pos[1];
				NegociosVariables[bID][bMiscPos][2] = (pos[2]-0.55); // Evitar objeto flotante.
				NegociosVariables[bID][bMiscPos][3] = pos[3];
				// Crear Objecto.
				NegociosVariables[bID][bObject] = CreateDynamicObject(2332, NegociosVariables[bID][bMiscPos][0],NegociosVariables[bID][bMiscPos][1],NegociosVariables[bID][bMiscPos][2],0,0,NegociosVariables[bID][bMiscPos][3]);
				// Mover al player (Desbug).
				SetPlayerPos(playerid,pos[0],pos[1],pos[2]+1.0); // Se aumenta la Z, X e Y no (Posibilidad de Salir del Map).
				// Informar al player y gardar cambios realizados.
				SendClientMessageEx(playerid, COLOR_WHITE, "Configuraste la posición de la caja fuerte de tu negocio. Recuerda donde está. Usa /ncaja para cambiarla de lugar.");
   				saveNegocios(bID); // Se guarda los stats del negocio, no se actualiza.
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Estás dentro de un negocio, pero no es el tuyo.");
		}
	}
	return 1;
}
CMD:callsign(playerid, params[])
{
    if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
    if(Info[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 5.");
	new veh = GetPlayerVehicleID(playerid);
 	if(IsPlayerInAnyVehicle(playerid))
    {
    	if(isnull(params)) return SendClientMessage(playerid,COLOR_ORANGE,"INFO: {FFFFFF}/callsign [Texto]");
     	if(!Vehiculo_Nombrarp_Estado[veh])
        {
        	new string[128];
        	format(string,sizeof(string), "%s",params);
        	Texto_NombrarP[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
        	Attach3DTextLabelToVehicle( Texto_NombrarP[veh], veh, -0.7, -1.9, -0.3);
        	Vehiculo_Nombrarp_Estado[veh] = 1;
         }
         else
         {
         	Delete3DTextLabel(Texto_NombrarP[veh]);
          	Vehiculo_Nombrarp_Estado[veh] = 0;
           	return 1;
         }
    }
    else
    {
    SendClientMessage(playerid,COLOR_ORANGE,"ERROR: {FFFFFF}No estas en un vehiculo!");
    return 1;
    }
return 1;
}
/*
CMD:ajustarcamara(playerid, params[])
	{
 		if(Info[playerid][pAdminZC] >= 4000)
		{
			new Float: pos[4], ID;
			if(sscanf(params, "dffff",ID, pos[0], pos[1], pos[2], pos[3])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustarcamara [ID Radar/Cam] (coordenada x) (coordenada y) (coordenada z) (Rotación 90, 180)");
			DestroyDynamicObject(vCameraInfo[ID][vCameraObject]);
			DestroyDynamic3DTextLabel(vCameraInfo[ID][vCameraLabel]);
			SendClientMessageEx(playerid, COLOR_GRAD2, "{1DF5F7}INFRANET-RP:{FFFFFF} Has ajustado las coordenadas del objeto.");
			new text_info[80];
			vCameraInfo[ID][vCameraPos][0] = pos[0];
			vCameraInfo[ID][vCameraPos][1] = pos[1];
			vCameraInfo[ID][vCameraPos][2] = pos[2];
			vCameraInfo[ID][vCameraRot] = pos[3];
			vCameraInfo[ID][vCameraObject] = CreateDynamicObject(18880, vCameraInfo[ID][vCameraPos][0],vCameraInfo[ID][vCameraPos][1],vCameraInfo[ID][vCameraPos][2],0,0,vCameraInfo[ID][vCameraRot]);
			switch(vCameraInfo[ID][vCameraStatus])
			{
	    		case 0: format(text_info, sizeof(text_info), "{007AFF}[RADAR %d]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}%d{81DAF5} KM/H", ID,vCameraInfo[ID][vCameraLimit]);
				case 1: format(text_info, sizeof(text_info), "{DF0101}[RADAR %d DESCONECTADO]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}0{81DAF5} KM/H", ID);
			}
			vCameraInfo[ID][vCameraLabel] = CreateDynamic3DTextLabel(text_info,-1,vCameraInfo[ID][vCameraPos][0],vCameraInfo[ID][vCameraPos][1],vCameraInfo[ID][vCameraPos][2]+8,50.0);
			saveSpeedCam();
		}
		return 1;
	}
*/
/*CMD:negociomenu(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
        new x = getPlayerBusinessID(playerid);
        if(x < 1) return 1;
        if(IsPlayerInRangeOfPoint(playerid, 2.0, businessVariables[x][bMiscPos][0], businessVariables[x][bMiscPos][1], businessVariables[x][bMiscPos][2]))
		{
		    new szDialogTittle[128];
		    format(szDialogTittle, sizeof(szDialogTittle), "Tu negocio - $%d", businessVariables[x][bGanancias]);
		    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle,"* Retirar Dinero\n* Depositar Dinero\n* Stock\n* Pedir productos", "Seleccionar", "Salir");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "* No estás cerca de la caja fuerte de tu negocio.");
	}
	else SendClientMessage(playerid, COLOR_GREY, NoConectado);
	return 1;*/

  	zcmd(binfo, playerid, params[])
  	{
  	    new string[180], nType[8];
  	    for(new x = 0; x < MAX_NEGOCIOS; x++)
		{
		    if(PlayerToPoint(3.0, playerid, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]))
			{
			    switch(NegociosVariables[x][bType])
				{
					case 1: nType = "24/7";
					case 2: nType = "Ropa";
					case 3: nType = "Comida";
					case 4: nType = "Petrol";
					case 5: nType = "Armas";
					case 6: nType = "Privado";
					default: nType = "Privado"; // 1. 24/7 - 2. Ropa - 3. Food - 4. Petrol - 5. Renta 
				}
				if(Info[playerid][pPbizzkey] == x)
    			{
			    	Message(playerid, 0xAAAAFFFF, "Propiedad Privada - Información");
        			format(string, sizeof(string), "Nombre: {AA3333}%s", NegociosVariables[x][bName]);
		        	Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Valor: {AA3333}%d{FFFFFF}   -   Nivel: {AA3333}%d", NegociosVariables[x][bPrice],NegociosVariables[x][bLevelNeeded]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Ganancias: {AA3333}%d{FFFFFF} - Negocio ID: {AA3333}%d", NegociosVariables[x][bGanancias], x);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Mensaje de bienvenida: {AA3333}%s", NegociosVariables[x][bInfo]);
			        Message(playerid, COLOR_WHITE, string);
                    if(strcmp("Nadie", NegociosVariables[x][bExtortion], true) == 1)
					{
  						format(string, sizeof(string), "Extorsionador: {AA3333}%s", NegociosVariables[x][bExtortion]);
		        		Message(playerid, COLOR_WHITE, string);
					}
			        return 1;
				}
				if(Info[playerid][pAdminZC] >= 1)
				{
   					Message(playerid, 0xAAAAFFFF, "Información del negocio");
        			format(string, sizeof(string), "Nombre: {AA3333}%s", NegociosVariables[x][bName]);
		        	Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Valor: {AA3333}%d{FFFFFF} - Nivel: {AA3333}%d{FFFFFF} - Tipo {AA3333}%s", NegociosVariables[x][bPrice],NegociosVariables[x][bLevelNeeded], nType);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Ganancias totales: {AA3333}%d{FFFFFF} - Negocio ID: {AA3333}%d", NegociosVariables[x][bGanancias], x);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Mensaje de bienvenida: {AA3333}%s", NegociosVariables[x][bInfo]);
			        Message(playerid, COLOR_WHITE, string);
                    if(strcmp("Nadie", NegociosVariables[x][bExtortion], true) == 1)
					{
  						format(string, sizeof(string), "Extorsionador: {AA3333}%s", NegociosVariables[x][bExtortion]);
		        		Message(playerid, COLOR_WHITE, string);
					}
			        return 1;
				}
		        if(strcmp(NegociosVariables[x][bOwner], "Sin Dueño", false)) // No Tiene propietario.
                {
                
		        	Message(playerid, 0xAAAAFFFF, "Negocio en Venta - Información");
		        	format(string, sizeof(string), "Nombre: {AA3333}%s{FFFFFF}", NegociosVariables[x][bName]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Valor: {AA3333}%d{FFFFFF}   -   Nivel: {AA3333}%d{FFFFFF}", NegociosVariables[x][bPrice],NegociosVariables[x][bLevelNeeded]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Negocio ID: {AA3333}%d{FFFFFF} - Tipo {AA3333}%s", x, nType);
			        Message(playerid, COLOR_WHITE, string);
			        Message(playerid, COLOR_WHITE, "- Utiliza /comprarnegocio, para comprar este negocio.");
			        return 1;
				}
				else Message(playerid, COLOR_WHITE, "No hay información disponible para este negocio. No es tuyo o no está en venta.");
			}
		}
		return 1;
	}
	zcmd(hinfo, playerid, params[])
  	{
  	    new string[128];
  	    for(new h = 0; h < sizeof(HouseInfo); h++)
		{
		    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) )
			{
		        	Message(playerid, 0xAAAAFFFF, "Propiedades - Información");
		        	format(string, sizeof(string), "Propietario: {AA3333}%s{FFFFFF}", HouseInfo[h][hOwner]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Valor: {AA3333}%d{FFFFFF}   -   Nivel: {AA3333}%d{FFFFFF}", HouseInfo[h][hValue],HouseInfo[h][hLevel]);
			        Message(playerid, COLOR_WHITE, string);
			        format(string, sizeof(string), "Casa ID: {AA3333}%d{FFFFFF} - Tiempo {AA3333}%d Días",h,HouseInfo[h][hTiempo]);
			        Message(playerid, COLOR_WHITE, string);
			}
		}
		return 1;
	}
	CMD:2892(playerid, params[]) COLOR_FUCK //Stilsabelarcon.
	zcmd(extorcion, playerid, params[]){
	    new string[128], bkey = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
		if(!sscanf(params,"u",params[0])){
		    if(PlayerToPoint(4.0, playerid, NegociosVariables[bkey][bExteriorPos][0], NegociosVariables[bkey][bExteriorPos][1], NegociosVariables[bkey][bExteriorPos][2])){
		        if(IsPlayerConnected(params[0])){
		            if(params[0] != playerid){
		       	 		if(ProxDetectorS(5.0, playerid, params[0])){
							if(strcmp("Nadie", NegociosVariables[bkey][bExtortion], true) == 0){
            	    			strmid(NegociosVariables[bkey][bExtortion], GetPlayerNameEx(params[0]), 0, strlen(GetPlayerNameEx(params[0])), 255);
								format(string, sizeof(string), "Desde ahora {FF4FD4}%s {FFFFFF}será el extorcionista de tu negocio.", GetPlayerNameEx(params[0]));
								Message(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "{FF4FD4}%s{FFFFFF} te ha puesto como extorcionista de su negocio, ahora puedes usar {FF4FD4}/recaudar{FFFFFF}.", GetPlayerNameEx(playerid));
								Message(params[0], COLOR_WHITE, string);
								ActualizarNegocio(bkey);
				        	} else Message(playerid, COLOR_WHITE, "* Tu negocio ya tiene un extorcionista, primero usa /qextorcion.");
                        } else Message(playerid, COLOR_WHITE, "Jugador muy lejos.");
				   	} else Message(playerid, COLOR_WHITE, "No te puedes poner como extorcionista tu mismo.");
  				} else Message(playerid, COLOR_WHITE, "Jugador no conectado.");
			} else Message(playerid, COLOR_WHITE, "Debes estar cerca de tu negocio.");
    	} else Message(playerid, COLOR_WHITE, "Utilize: /extorcion (PlayerID)");
	    return 1;
	}
	zcmd(qextorcion, playerid, params[]){
	    new string[128], bkey = Info[playerid][pPbizzkey];
	    if(Info[playerid][pPbizzkey] == 9999) return Message(playerid, COLOR_WHITE, "No tienes un negocio.");
	    if(!sscanf(params,"u",params[0])){
	        if(PlayerToPoint(4.0, playerid, NegociosVariables[bkey][bExteriorPos][0], NegociosVariables[bkey][bExteriorPos][1], NegociosVariables[bkey][bExteriorPos][2])){
	            if(IsPlayerConnected(params[0])){
                    if(params[0] != playerid){
                        if(ProxDetectorS(5.0, playerid, params[0])){
                            if(strcmp(GetPlayerNameEx(params[0]), NegociosVariables[bkey][bExtortion], true) == 0){
                                format(string, sizeof(string), "{FFFFFF}%s ha dedicido quitarte como extorcionista de su negocio.\n\t¿Estás de acuerdo con esta decisión?",GetPlayerNameEx(playerid));
                                ShowPlayerDialog(params[0], QUIT_EXTORTION, DIALOG_STYLE_MSGBOX, "{A2DC35}Confirmacion Negocios", string, "Si", "No");
                                Message(playerid, COLOR_WHITE, "* La solicitud fue enviada, espera su respuesta.");
                                QuitExtortion[params[0]] = bkey;
								ExtortionID[params[0]] = playerid;
                            } else Message(playerid, COLOR_WHITE, "* Esa persona no es extorcionista de tu negocio.");
                        } else Message(playerid, COLOR_WHITE, "Jugador muy lejos.");
                    } else Message(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	            } else Message(playerid, COLOR_WHITE, "Jugador no conectado.");
			} else Message(playerid, COLOR_WHITE, "Debes estar cerca del exterior de tu negocio.");
	    } else Message(playerid, COLOR_WHITE, "Utiliza: /qextorcion (PlayerID)");
	    return 1;
	}
	zcmd(recaudar, playerid, params[])
	{
		for(new b = 0; b < MAX_NEGOCIOS; b++)
		{
		    if(PlayerToPoint(2.0, playerid, NegociosVariables[b][bExteriorPos][0], NegociosVariables[b][bExteriorPos][1], NegociosVariables[b][bExteriorPos][2]))
			{
	            if(strcmp(GetPlayerNameEx(playerid), NegociosVariables[b][bExtortion], true) == 0){
	                if(NegociosVariables[b][bGanancias] > 0)
					{
					    new string[128];
     					format(string, sizeof(string), "[Información del negocio que estás extorsionando] Ganancias: $%d - Negocio ID: %d.", NegociosVariables[b][bGanancias], b);
			        	Message(playerid, COLOR_WHITE, string);
					    Message(playerid, COLOR_WHITE, "* Busca al propietario para solicitar tu parte como extorsionista del negocio.");
					}
					else Message(playerid, COLOR_WHITE, "* No hay dinero para recaudar.");
				}
			}
		}
		return 1;
	}
	//////////////////////////////////////////////// SISTEMA DE PORTONES DINÁMICOS - Max_Portones /////////////////////////////////////
	// COMANDOS:
	// SendClientMessageEx(playerid, COLOR_WHITE, "/crearporton - /borrarporton - /testearporton -  /editarporton [Fam-Fac-Vel] - /irporton - /portonsiguiente");
	// SendClientMessageEx(playerid, COLOR_WHITE, "[Avanzado]: /editarpos - /editarposex - /pobj (Objeto)");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	CMD:irporton(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new pid;
			if(sscanf(params, "d", pid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /irporton [ID del portón]");
    		if(pid < 0 || pid > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_WHITE, "Portón no encontrado. ID erronéa.");
    		if(iPorton[pid][pA][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este portón no existe, crealo antes.");
			SetPlayerPos(playerid,iPorton[pid][pA][0],iPorton[pid][pA][1],iPorton[pid][pA][2]+4);
			GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
			SetPlayerInterior(playerid, 0);
			Info[playerid][pInt] = 0;
		}
		return 1;
	}
	CMD:crearporton(playerid, params[])
	{
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No conectado.");
    	if(Info[playerid][pAdminZC] >= 4000)
    	{
    		new x; // Será la ID del portón.
			if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearporton [ID]");
			if(x < 0 || x > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de portón inválido! (0 - 50)");
			if(iPorton[x][pA][0] == 0.0) // Coordenada X no existe, se crea el portón.
			{
 			// Coordenadas iniciales.
			new Float:k, Float:y, Float:z, Float:r, string[128],labelString[180];
			GetPlayerPos(playerid,k,y,z); // Obtiene coordenada Z, Y and Z.
			GetPlayerFacingAngle(playerid,r); // Obtiene la rotación.
			iPorton[x][pA][0] = k; iPorton[x][pA][1] = y; iPorton[x][pA][2] = z+1.8;
			iPorton[x][pA][3] = 0.0; iPorton[x][pA][4] = 0.0; // Rotación Xr y Yr se editará con otros comandos.
			r = r + 180; // RZ.
			if(r > 360){r = r - 360;} // Evitar bugs. (Máx 360 grados).
			iPorton[x][pA][5] = r; //
			// Coordenadas finales.
			iPorton[x][pZ][0] = k; iPorton[x][pZ][1] = y; iPorton[x][pZ][2] = (z+1.8)-5.5; // Portón tiene movimiento Z. (Baja)
			iPorton[x][pZ][3] = 0.0; iPorton[x][pZ][4] = 0.0; iPorton[x][pZ][5] = r;
			// Información del portón.
			iPorton[x][pSpeed] = 2; // Velocidad del Portón. (1.0, 2.0, 5.0)
			iPorton[x][pFac] = 1; // Facciones que podrán usar el portón.(LSPD)
			iPorton[x][pFam] = 0; // Familias que podrán usar el portón.
			iPorton[x][pObjectID] = 980; // Editable con : /pobj.
			iPorton[x][pForceDoor] = 1; // 1 = Portón podrá ser forzado por LSPD, 0 = No podrá ser forzado. (Público)
	 		// Creación del Label. (Texto).
			format(labelString, sizeof(labelString), "Portón de %s\nUsa /apgarage.\n[%d]",InfoFacc[iPorton[x][pFac]][gFacc], x); // Por defecto será el portón de LSPD.
			iPorton[x][pLabelID] = CreateDynamic3DTextLabel(labelString, -1, iPorton[x][pA][0], iPorton[x][pA][1]-1, iPorton[x][pA][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 8.0);
			// Creación del Objeto.
			iPorton[x][pObject] = CreateDynamicObject(iPorton[x][pObjectID], iPorton[x][pA][0],iPorton[x][pA][1],iPorton[x][pA][2],iPorton[x][pA][3],iPorton[x][pA][4],iPorton[x][pA][5]);
      	  	format(string, sizeof(string), "Portón [ID: %d] ha sido creado satisfactoriamente. (En caso de bug, /borrarporton [ID])", x);
			Message(playerid, COLOR_GREY, string);
			Message(playerid, COLOR_WHITE, "Para probar el portón, usa /testearporton, para ajustar, /editarporton. Más comandos en /adminporton.");
			savePortones(x); // Guardado de la creación. Para no sobrescribir.
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Esta ID está en uso, intenta usar otra diferente. Usa /portonsiguiente.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "No autorizado.");
		return 1;
	}
	CMD:borrarporton(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new x;
			if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borrarporton [Porton ID]");
			if(x < 0 || x > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de portón inválido! (0 - 50)");
			if(iPorton[x][pA][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este portón no existe, ID erronéo.");
			BorrarPortonID(x);
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Este portón ha sido borrado, datos reseteados. Nuevo slot queda libre.");
		}
		return 1;
	}
	CMD:portonsiguiente(playerid, params[])
	{
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    	if(Info[playerid][pAdminZC] >= 4000)
		{
			for(new x; x <MAX_PORTONES; x++)
			{
		    	if(iPorton[x][pA][0] == 0.0)
		    	{
		        	new string[128];
		        	format(string, sizeof(string), "Portón ID: %d está disponible para su uso.", x);
		        	SendClientMessageEx(playerid, COLOR_WHITE, string);
		        	break;
				}
			}
		}
		else
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
			return 1;
		}
		return 1;
	}
	CMD:testearporton(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new pid;
			if(sscanf(params, "d", pid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /testearporton [ID del portón]");
    		if(pid < 0 || pid > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_WHITE, "Portón no encontrado.");
    		if(iPorton[pid][pA][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este portón no existe, crealo antes.");
			if(PlayerToPoint(15, playerid, iPorton[pid][pA][0], iPorton[pid][pA][1], iPorton[pid][pA][2]))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso] El testeo se ha iniciado correctamente. Podrá editar la velocidad usando /editarporton.");
			    MoveDynamicObject(iPorton[pid][pObject],iPorton[pid][pZ][0], iPorton[pid][pZ][1], iPorton[pid][pZ][2], iPorton[pid][pSpeed], iPorton[pid][pZ][3], iPorton[pid][pZ][4], iPorton[pid][pZ][5]);
			    PlayerPlaySound(playerid, 1153, iPorton[pid][pA][0], iPorton[pid][pA][1], iPorton[pid][pA][2]);
			    return 1;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso] El testeo ha fallado. Motivo: No estás cerca de la puerta a testear. Más comandos en /adminporton.");
			    MoveDynamicObject(iPorton[pid][pObject],iPorton[pid][pA][0], iPorton[pid][pA][1], iPorton[pid][pA][2], iPorton[pid][pSpeed], iPorton[pid][pA][3], iPorton[pid][pA][4], iPorton[pid][pA][5]);
			}
		}
		else
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
			return 1;
		}
		return 1;
	}
 	CMD:editarporton(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128], item[18];
		if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_WHITE, "No autorizado.");
	 	if(!sscanf(params, "s[20]i", item, params[1]))
	 	{
	   		for(new b = 0; b < MAX_PORTONES; b++)
	   		{
		     	if(PlayerToPoint(10, playerid, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]))
		 		{
     				if(params[1] >= 0)
		 			{
                        if(strcmp(item,"vel",true) == 0 || strcmp(item,"velocidad",true) == 0)
						{
						    if(params[1] < 1 || params[1] > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Velocidad mínima: 0 - Velocidad máxima: 10.");
      						iPorton[b][pSpeed] = params[1];
      						format(string, sizeof(string), "[Edición realizada] Portón ID %d - Se editó la velocidad a %d.0.", b, params[1]);
                        }
                        else if(strcmp(item,"fam",true) == 0 || strcmp(item,"familia",true) == 0)
						{
						    if(params[1] < 0 || params[1] > MAX_FAMILY) return SendClientMessageEx(playerid, COLOR_WHITE, "ID familia incorrecta.");
      						iPorton[b][pFac] = 0; iPorton[b][pFam] = params[1]-1;
      						format(string, sizeof(string), "[Edición realizada] Portón ID %d - Se editó la Familia a la ID %d.", b, params[1]);
                        }
                        else if(strcmp(item,"fac",true) == 0 || strcmp(item,"faccion",true) == 0)
						{
						    if(params[1] < 0 || params[1] > MAX_FACTION) return SendClientMessageEx(playerid, COLOR_WHITE, "ID facción incorrecto.");
      						iPorton[b][pFam] = 0; iPorton[b][pFac] = params[1];
      						format(string, sizeof(string), "[Edición realizada] Portón ID %d - Se editó la Facción a la ID %d.", b, params[1]);
                        }
                        else if(strcmp(item,"bloqueo",true) == 0)
						{
      						iPorton[b][pForceDoor] = params[1];
      						format(string, sizeof(string), "[Edición realizada] Portón ID %d - Se editó el bloqueo a %d.", b, params[1]);
                        }
                        ActualizarPorton(b); // Actualizar datos al finalizar edición.
        	        	Message(playerid, COLOR_GRAD2, string);
      	        	}
  	        	}
            }
	    }
		else
		{
			Message(playerid, COLOR_WHITE, "/editarporton [Opción] [Valor]");
			Message(playerid, COLOR_WHITE, "[Opciones disponibles]: Vel(Velocidad) - Fac(Facción) - Fam(Familia) - Bloqueo(1/0)");
 	 	}
		return 1;
	}
	///////////////////////////// Edición avanzada ///////////
	//pxpos - /pypos - /pzpos - /pxrpos - /pyrpos - /pzrpos //
	CMD:editarpos(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new Float: pos[6], ID;
			if(sscanf(params, "dffffff", ID,pos[0],pos[1],pos[2],pos[3],pos[4],pos[5]))
			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /editarpos [Porton ID]+[X][Y][Z]+[Xr][Yr][Zr]");
			if(ID < 0 || ID > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de portón inválido! (0 - 50)");
			if(iPorton[ID][pA][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este portón no existe, ID erronéo.");
            iPorton[ID][pA][0] = pos[0]; iPorton[ID][pA][1] = pos[1]; iPorton[ID][pA][2] = pos[2]; // Coordenada X, Y, Z.
			iPorton[ID][pA][3] = pos[3]; iPorton[ID][pA][4] = pos[4]; iPorton[ID][pA][5] = pos[5]; // Coordenada Xr, Yr, Zr.
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Has editado el portón (Posición Inicial de Comienzo) correctamente.");
			ActualizarPorton(ID); // Actualización del cambio.
		}
		return 1;
	}
	CMD:editarposex(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new Float: pos[6], ID;
			if(sscanf(params, "dffffff", ID,pos[0],pos[1],pos[2],pos[3],pos[4],pos[5]))
			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /editarpos [Porton ID]+[iX][iY][iZ]+[iXr][iYr][iZr]");
			if(ID < 0 || ID > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de portón inválido! (0 - 50)");
			if(iPorton[ID][pA][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este portón no existe, ID erronéo.");
            iPorton[ID][pZ][0] = pos[0]; iPorton[ID][pZ][1] = pos[1]; iPorton[ID][pZ][2] = pos[2]; // Coordenada X, Y, Z.
			iPorton[ID][pZ][3] = pos[3]; iPorton[ID][pZ][4] = pos[4]; iPorton[ID][pZ][5] = pos[5]; // Coordenada Xr, Yr, Zr.
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Has editado el portón (Posición Final) correctamente.");
			ActualizarPorton(ID); // Actualización del cambio.
		}
		return 1;
	}
	CMD:pobj(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new x, ObjectIDx;
			if(sscanf(params, "dd", x, ObjectIDx)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /pobj [Porton ID] [Objecto ID]");
			if(x < 0 || x > MAX_PORTONES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de portón inválido! (0 - 50)");
			if(iPorton[x][pA][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este portón no existe, ID erronéo.");
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Has modificado el objeto. (Recomendable: 969, 971, 975, 976, 980, 985, 988)");
			iPorton[x][pObjectID] = ObjectIDx;
			ActualizarPorton(x); // Actualización del cambio.
		}
		return 1;
 	}
 	//////////////////////////////////////////////// SISTEMA DE ACTORES DINÁMICOS - Max_Actores /////////////////////////////////////
 	// - /crearactor - /eliminaractor - /iractor - /editaractor - /actorsiguiente - /crearactortemp (Temporal Actor). ///////////////
 	
 	CMD:iractor(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new pid;
			if(sscanf(params, "d", pid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /iractor [ID del Actor]");
    		if(pid < 0 || pid > MAX_ACTORES) return SendClientMessageEx(playerid, COLOR_WHITE, "Actor no encontrado. ID erronéo.");
    		if(iActor[pid][aPos][0] == 0.0) return SendClientMessageEx(playerid, COLOR_WHITE, "Actor no creado, créalo antes.");
			SetPlayerPos(playerid, iActor[pid][aPos][0], iActor[pid][aPos][1], iActor[pid][aPos][2]+2.5);
			GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
			SetPlayerInterior(playerid, 0);
			Info[playerid][pInt] = 0;
		}
		return 1;
	}
	CMD:crearactor(playerid, params[])
	{
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No conectado.");
    	if(Info[playerid][pAdminZC] >= 4000)
    	{
    		new x, skin; // Será la ID del actor y ID del Skin.
    		new nombre[40]; // Nombre del Actor.
			if(sscanf(params, "dds[48]", x, skin, nombre)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearactor [ID] [Skin] [Nombre_Apellido]");
			if(x < 0 || x > MAX_ACTORES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID del actor inválido! (0 - 50)");
			if(iActor[x][aPos][0] == 0.0) // Coordenada X no existe, se crea el actor.
			{
 			// Coordenadas iniciales.
			new Float:k, Float:y, Float:z, Float:r, string[128],labelString[180];
			GetPlayerPos(playerid,k,y,z); // Obtiene coordenada Z, Y and Z.
			GetPlayerFacingAngle(playerid,r); // Obtiene la rotación.
			iActor[x][aPos][0] = k; iActor[x][aPos][1] = y; iActor[x][aPos][2] = z; iActor[x][aPos][3] = r;
			// Información del Actor.
			format(iActor[x][aNombre], 38, nombre); // El bot se llamará según lo puesto en Nombre_Apellido.
			iActor[x][aSkin] = skin; // Skin ID del Actor.
			iActor[x][aINV] = 1; // Invencible.
			iActor[x][aAnim] = 0; // Animación.
			// Mundo Virtual del Actor.
			iActor[x][aVW] = GetPlayerVirtualWorld(playerid);
			SetActorVirtualWorld(iActor[x][aInfo], iActor[x][aVW]);
	 		// Creación del Label. (Texto).
	 		SetPlayerPos(playerid, k+1, y+1, z);
			format(labelString, sizeof(labelString), "%s (%d)",iActor[x][aNombre], x);
			iActor[x][aLabelActor] = CreateDynamic3DTextLabel(labelString, -1, iActor[x][aPos][0], iActor[x][aPos][1], iActor[x][aPos][2]+1, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
			// Creación del Actor.
			iActor[x][aInfo] = CreateActor(iActor[x][aSkin], iActor[x][aPos][0], iActor[x][aPos][1], iActor[x][aPos][2], iActor[x][aPos][3]);
	 		SetActorVirtualWorld(iActor[x][aInfo], iActor[x][aVW]); SetActorInvulnerable(iActor[x][aInfo], iActor[x][aINV]);
      	  	format(string, sizeof(string), "Actor [ID: %d] ha sido creado satisfactoriamente. (En caso de bug, /borraractor [ID])", x);
			Message(playerid, COLOR_GREY, string);
			Message(playerid, COLOR_WHITE, "Para ajustar el actor, usa /editaractor. Más comandos disponibles en /adminactor.");
			saveActores(x); // Guardado de la creación. Para no sobrescribir.
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Esta ID está en uso, intenta usar otra diferente. Usa /actorsiguiente.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "No autorizado.");
		return 1;
	}
	CMD:borraractor(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new x;
			if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borraractor [Actor ID]");
			if(x < 0 || x > MAX_ACTORES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID del actor inválido! (0 - 50)");
			if(iActor[x][aPos][0] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Este actor no existe, ID erronéo.");
			BorrarActorID(x);
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Este actor ha sido borrado, datos reseteados. Nuevo slot queda libre.");
		}
		return 1;
	}
	CMD:actorsiguiente(playerid, params[])
	{
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    	if(Info[playerid][pAdminZC] >= 4000)
		{
			for(new x; x <MAX_ACTORES; x++)
			{
		    	if(iActor[x][aPos][0] == 0.0)
		    	{
		        	new string[128];
		        	format(string, sizeof(string), "Actor ID: %d está disponible para su uso.", x);
		        	SendClientMessageEx(playerid, COLOR_WHITE, string);
		        	break;
				}
			}
		}
		else
		{
	    	SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
			return 1;
		}
		return 1;
	}
	CMD:editaractor(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128], item[18];
		if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_WHITE, "No autorizado.");
	 	if(!sscanf(params, "s[20]i", item, params[1]))
	 	{
	   		for(new b = 0; b < MAX_ACTORES; b++)
	   		{
		     	if(PlayerToPoint(5, playerid, iActor[b][aPos][0], iActor[b][aPos][1], iActor[b][aPos][2]))
		 		{
     				if(params[1] >= 0)
		 			{
                        if(strcmp(item,"skin",true) == 0 || strcmp(item,"ropa",true) == 0)
						{
						    if(params[1] < 1 || params[1] > 311) return SendClientMessageEx(playerid, COLOR_WHITE, "Skin erronéo: 0 - 311.");
      						iActor[b][aSkin] = params[1];
      						format(string, sizeof(string), "[Edición realizada] Actor [ID %d] - Se editó su skin al %d.", b, params[1]);
                        }
                        else if(strcmp(item,"animacion",true) == 0 || strcmp(item,"anim",true) == 0)
						{
						    if(params[1] < 0 || params[1] > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Animación incorrecta: 0 - 10.");
      						iActor[b][aAnim] = params[1];
      						format(string, sizeof(string), "[Edición realizada] Actor [ID %d] - Se editó la animación al %d.", b, params[1]);
      						SendClientMessageEx(playerid, COLOR_GREY, "[ANIMACIONES DISPONIBLES]: 1. Hablar. - 2. Vigilar. - 3. Fumar. - 4. Charlar. - 5. Sentado. - 6. Rie. - 7. Rap... 10. Striptease.");
                        }
                        else if(strcmp(item,"inmunidad",true) == 0 || strcmp(item,"inv",true) == 0)
						{
						    if(params[1] < 0 || params[1] > 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Código erronéo: (Para futuras referencias) 1 = Activo/ 0 = Desactivado.");
      						iActor[b][aINV] = params[1];
      						format(string, sizeof(string), "[Edición realizada] Actor [ID %d] - Se editó su inmudidad a %d. (1/0).", b, params[1]);
                        }
                        else if(strcmp(item,"borrar",true) == 0)
						{
      						SendClientMessageEx(playerid, COLOR_GREY, "[Edición realizada] El Actor ha sido borrado correctamente.");
      						BorrarActorID(b); return 1; // Return: Para no ejecutar el "ActualizarActorID".
                        }
                        ActualizarActor(b); // Actualizar datos al finalizar edición.
        	        	Message(playerid, COLOR_GRAD2, string);
      	        	}
  	        	}
            }
	    }
		else
		{
			Message(playerid, COLOR_WHITE, "/editaractor [Opción] [Valor]");
			Message(playerid, COLOR_WHITE, "[Opciones disponibles]: Anim(Animacion), Inv(Inmunidad), skin, borrar.");
 	 	}
		return 1;
	}
	CMD:animaractor(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_WHITE, "No autorizado.");
	 	if(!sscanf(params, "i", params[1]))
	 	{
	 	    if(params[1] < 0 || params[1] > 15) return SendClientMessageEx(playerid, COLOR_WHITE, "Anim erronéa: 0 - 15. Animación ID 0 deja el Actor en estado Off.");
	   		for(new b = 0; b < MAX_ACTORES; b++)
	   		{
		     	if(PlayerToPoint(3.5, playerid, iActor[b][aPos][0], iActor[b][aPos][1], iActor[b][aPos][2]))
		 		{
					switch(params[1]) // Damos la ID de la animación, según lo elegido, se aplica una animación diferente.
					{
					    case 0: {ClearActorAnimations(iActor[b][aInfo]);}
			    		case 1: {ApplyActorAnimation(iActor[b][aInfo], "STRIP","strip_E",4.1,7,5,1,1,1);}
			    		case 2: {ApplyActorAnimation(iActor[b][aInfo], "STRIP","strip_D",4.1,7,5,1,1,1);}
			    		case 3: {ApplyActorAnimation(iActor[b][aInfo], "STRIP","strip_B",4.1,7,5,1,1,1);}
			    		case 4: {ApplyActorAnimation(iActor[b][aInfo], "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);}
			    		case 5: {ApplyActorAnimation(iActor[b][aInfo], "PED","IDLE_chat",4.1,7,5,1,1,1);}
			    		case 6: {ApplyActorAnimation(iActor[b][aInfo], "PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);}
			    		case 7: {ApplyActorAnimation(iActor[b][aInfo], "GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);}
			    		case 8: {ApplyActorAnimation(iActor[b][aInfo], "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);}
			    		case 9: {ApplyActorAnimation(iActor[b][aInfo], "WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);}
			    		case 10: {ApplyActorAnimation(iActor[b][aInfo], "DANCING","dnce_M_d",4.0,1,0,0,0,0);}
			    		case 11: {ApplyActorAnimation(iActor[b][aInfo], "DANCING","dnce_M_c",4.0,1,0,0,0,0);}
			    		case 12: {ApplyActorAnimation(iActor[b][aInfo],"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);}
			    		case 13: {ApplyActorAnimation(iActor[b][aInfo], "SCRATCHING","scdlulp",4.0,1,0,0,0,0);}
			    		case 14: {ApplyActorAnimation(iActor[b][aInfo], "DANCING","DAN_Left_A",4.0,1,0,0,0,0);}
			    		case 15: {ApplyActorAnimation(iActor[b][aInfo], "BEACH","bather",4.0,1,0,0,0,0);}
			    	}
  	        	}
            }
	    }
		else
		{
			Message(playerid, COLOR_WHITE, "/animaractor [Animación ID] (Usar delante del Actor).");
 	 	}
		return 1;
	}
	CMD:actorname(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000)
	    {
			SendClientMessageEx(playerid, COLOR_GREY, "[AVISO] No está disponible esta opción todavía.");
   		}
		return 1;
	}
	//////////////////////////////////////////////////////////////////////////////////////// ROBO AL BANCO ///////////////
	zcmd(escapar, playerid, params[])
	{
	    if(IsPlayerInRangeOfPoint(playerid,3,994.6170,-1170.4269,12.7304))
		{
		new string[128];
		SetTimerEx("TimerESCAPE",60000,false,"d",playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Espera 1 minuto para poder escapar.");
		ApplyAnimation(playerid,"CARRY","putdwn",1,0,0,1,60000,0);
		format(string, sizeof(string), "* %s empieza a trepar por la cuerda.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}

	zcmd(explotarpuerta, playerid, params[])
	{
		if(IsPlayerInRangeOfPoint(playerid,3,997.7467,-1170.0576,12.7304))
		{
	    if(pbomba[playerid] != 1) return SendClientMessage(playerid,COLOR_WHITE,"No tienes una bomba.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		BOMBA[playerid] = CreateObject(1252, x, y-0.5, z-0.5, 0,0,0,0);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);
		SendClientMessage(playerid,COLOR_WHITE,"La bomba fue plantada, ¡apartate va a explotar!");
		bombap[playerid] = 1;
		SetTimerEx("TimerBANK",10000,false,"d",playerid);
		}
		return 1;
	}
	zcmd(tirarrobo, playerid, params[])
 	{
 	    if(YaRobo[playerid] == 1)
  		{
  		YaRobo[playerid] = 0;
  		DejarRobo(playerid);
  		SendClientMessageEx(playerid, COLOR_GRAD2, "Tiraste el objeto robado al suelo.");
		}
		return 1;
	}

	zcmd(cticket, playerid, params[])
 	{
	 	if(IsPlayerInRangeOfPoint(playerid, 5.0,359.3290,-2032.0443,7.8359))
		{
		Vortex[playerid] = 1;
		SetTimerEx("TimerTICKET",420000,false,"d",playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un ticket, sube al coche de choque!");
		GivePlayerCash(playerid, -50);
		}
		return 1;
	}
	zcmd(cbomba, playerid, params[])
 	{
 	    if(GetPlayerMoney(playerid) < 20000) return SendClientMessage(playerid,COLOR_RED,"No tienes suficiente dinero.");
	 	if(pbomba[playerid] == 0)
	 	{
	 	    if(bombap[playerid] == 0)
	 	    {
		 	   	if(!IsPlayerInRangeOfPoint(playerid,2.0,1296.5500,-981.9438,32.6953)) return SendClientMessage(playerid,COLOR_WHITE,"No estas en la zona de compra."); // Cambien x,y,z por las coordenadas del lugar donde quieren que se compre la bomba
				{
				if(GetPlayerMoney(playerid) < 4999) return SendClientMessage(playerid,COLOR_WHITE,"No tienes suficiente dinero.");
				pbomba[playerid] = 1;
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Has comprado una c4 por 20,000$, usa /bomba para colocarla.");
				GivePlayerCash(playerid,-20000);
				}
			}
		}
		return 1;
	}
	zcmd(bomba, playerid, params[])
 	{
 	    if(pbomba[playerid] != 1) return SendClientMessage(playerid,COLOR_WHITE,"No tienes una bomba.");
		new Float:x,Float:y,Float:z; //aquí identificamos la coordenadas X,Y,Z para luego usarlas en el Objeto de la bomba y la explosión.
		GetPlayerPos(playerid, x, y, z);//con esto obtendremos la posición del jugador(X,Y,Z), para luego usarla en la bomba.
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0);//La animación de planteando la bomba.
		BOMBA[playerid] = CreateObject(1252, x, y-0.5, z-0.5, 0,0,0,0);//El Objeto que sera la bomba.
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0,0); //Nuevamente la animación, en caso que no funcione la otra.
		SendClientMessage(playerid,COLOR_WHITE,"La bomba fue plantada, explotala usando: {FF0000}/detonar{FFFFFF}.");//El Mensaje que mostrara cuando tengas la bomba plantada.
		bombap[playerid] = 1;
		pbomba[playerid] = 0;
		return 1;
	}
	zcmd(detonar, playerid, params[])
 	{
 	  	if(bombap[playerid] != 1) return SendClientMessage(playerid,COLOR_WHITE,"No tienes ninguna bomba plantada.");
		new Float:x, Float:y, Float:z;
		GetObjectPos(BOMBA[playerid], x, y, z);//Identifica cual es la posición del objeto.
		CreateExplosion(x, y, z, 7, 2.0); //Crea la explosion.
		DestroyObject(BOMBA[playerid]); //Destruye el objeto de la bomba.
		SendClientMessage(playerid,COLOR_WHITE,"La bomba fue detonada.");//Mensaje que la bomba fue detonada
		pbomba[playerid] = 0;
		bombap[playerid] = 0;
		return 1;
	}
	zcmd(licenciacoche, playerid, params[])
 	{
 		if(IsPlayerInRangeOfPoint(playerid,5, 2879.260009,954.330444,995.770019))
		{
			if(Info[playerid][pCarLic] != 1)
			{
				if(DrivingTest[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya iniciaste el exámen, sube a un vehículo del estacionamiento para comenzar.");
 				if(Info[playerid][pWantedLevel] > 0)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Tienes órden de arresto, te prohibieron la adquisición de licencias.");
					return 1;
				}
  				if(GetPlayerCash(playerid) < 2000)
	  			{
     				SendClientMessageEx(playerid, COLOR_GREY, "No puedes pagar la licencia de conducción. Cuesta 2 mil dólares.");
				    return 1;
       			}
				GivePlayerCash(playerid, -2000);
				Tax += 2000;
				SendClientMessageEx(playerid, COLOR_GREY, "Pagaste los datos de la prueba ($2.000), sal del centro de licencias y subete a un coche para continuar.");
				DrivingTest[playerid] = 1;
				SetTimerEx("TestConducir",60000,0,"d",playerid); // Si tarda más de un minuto en subir al vehículo, se le quita la llave.
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes la licencia de conducción, no necesitas realizar la prueba práctica otra vez.");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Ya estás en el centro de Licencias de Los Santos, ves a la sala de exámen.");
    	return 1;
	}
zcmd(dejarrobo, playerid, params[])
 	{
 	if(IsPlayerInRangeOfPoint(playerid,2,1406.8153,-1372.5907,8.1257))
		{
		    if(YaRobo[playerid] == 1)
		    {
      		YaRobo[playerid] = 0;
		        	if(ArtRobado(playerid) == TVPobre)
		        	{
				    SendClientMessage(playerid,-1,"Ganas $450 por traer esta television vieja.");
				    GivePlayerCash(playerid,450);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == TVBuena)
					{
				    SendClientMessage(playerid,-1,"Ganas $900 por traer esta television en buen estado.");
				    GivePlayerCash(playerid,900);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == PlayVieja)
					{
				    SendClientMessage(playerid,-1,"Ganas $350 por traer esta playstation vieja.");
				    GivePlayerCash(playerid,350);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == PlayBuena)
					{
				    SendClientMessage(playerid,-1,"Ganas $700 por traer esta playstation en buen estado.");
				    GivePlayerCash(playerid,700);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == VideoVieja)
					{
				    SendClientMessage(playerid,-1,"Ganas $270 por traer esta videograbadora vieja.");
				    GivePlayerCash(playerid,270);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == VideoBuena)
					{
				    SendClientMessage(playerid,-1,"Ganas $800 por traer esta videograbadora en buen estado.");
				    GivePlayerCash(playerid,800);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == PC)
					{
				    SendClientMessage(playerid,-1,"Ganas $1000 por traer esta PC.");
				    GivePlayerCash(playerid,1000);
				    DisablePlayerCheckpoint(playerid);
					}
					if(ArtRobado(playerid) == Caja)
					{
				    SendClientMessage(playerid,-1,"Ganas $500 por traer esta caja.");
				    GivePlayerCash(playerid,500);
				    DisablePlayerCheckpoint(playerid);
					}
			 	   DejarRobo(playerid);
			 	   return 1;
			}
			return SendClientMessage(playerid,COLOR_WHITE,"No robaste nada.");
		}
    return 0;
	}

 zcmd(robarshop, playerid, params[])
 	{
 	//if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Debes tener nivel 3 para poder robar la tienda.");
 	if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes la experiencia necesaria para hacer esto. Necesitas más tiempo.");
 	if(Info[playerid][probita] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Solo puedes robar 1 vez cada 20 minutos.");
	if(IsPlayerInRangeOfPoint(playerid,5,1009.2381,48.5105,55.3221))
	{
		if(YaRobo[playerid] == 0)
 		{
	 		new NormasTienda[500]; //10.000
			strcat(NormasTienda, "Si te propones a realizar el robo a la tienda de electrónica acepta las consecuencias de tus actos. \n\n");
			strcat(NormasTienda, "{F0F0F0}Una vez realices el el robo a la tienda, LSPD y FBI serán avisadas rapidamente.\n");
			strcat(NormasTienda, "{F0F0F0}Se revisará el Log de Robos en caso de abuso. Presiona Aceptar para dar comienzo al rol.\n");
			SafeDialogEx(playerid, ACEPTAR_ROBO, DIALOG_STYLE_MSGBOX, "[ROBARSHOP] Aceptación de consecuencias", NormasTienda, "Aceptar","Salir");
  			return 1;
		}
		else SendClientMessage(playerid,COLOR_WHITE,"Ya robaste algo!");
	}
	else SendClientMessage(playerid,COLOR_WHITE,"No estás en la tienda de electrónica.");
	return 1;
	}
	zcmd(recogercesped, playerid, params[])
	{
		if(Info[playerid][pJob] == 13 || Info[playerid][pJob2] == 13)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0,2013.0183,-1282.8282,23.9762))
			{
			Info[playerid][pgskin] = GetPlayerSkin(playerid);
			OldskinJ[playerid] = GetPlayerSkin(playerid);
			SetPlayerSkin(playerid, 73);
			SendClientMessageEx(playerid, COLOR_WHITE, "Aceptaste el trabajo,sube a un cortacesped para comenzar.!");
			recojercesped[playerid]=1;
			}

  		}
  		return 1;
	}
	zcmd(adminduty, playerid, params[])
	{
	new string[200];
	if(Info[playerid][pAdminZC] >= 1)
	{
	papilla[playerid] = 1;
	SetPlayerArmour(playerid, 99999);
	SetHP(playerid, 99999);
	if(Info[playerid][pSex] == 1){SetPlayerSkin(playerid, 217);}
	else {SetPlayerSkin(playerid, 211);}
    Info[playerid][pModel] = 217;
	Info[playerid][pModel] = 211;
	AdminDuty[playerid] = 1;
	UnidentifedCall[playerid] = 1;
	PhoneOnline[playerid] = 1;
	SetPlayerColor(playerid,0x808080FF);
	format(string, sizeof(string), "{FA5858} Administración:{FFFFFF} %s {FA5858}[ID: %d]{FFFFFF} se ha puesto en Servicio como Admin." , GetPlayerNameEx(playerid),playerid);
 	BroadCast(COLOR_ORANGE, string);
	}
	return 1;
	}
	zcmd(adminoffduty, playerid, params[])
	{
	    new string[200];
		if(Info[playerid][pAdminZC] >= 1)
		{
		UnidentifedCall[playerid] = 0;
		PhoneOnline[playerid] = 0;
		SetPlayerColor(playerid, COLOR_WHITE);
        SetPlayerSkin(playerid, Info[playerid][pChar]);
        papilla[playerid]= 0;
        SetPlayerArmour(playerid, 0);
		SetHP(playerid, 100);
        format(string, sizeof(string), "{FA5858} Administración:{FFFFFF} %s {FA5858}[ID: %d]{FFFFFF} se ha salido del Servicio como Admin." , GetPlayerNameEx(playerid),playerid);
        BroadCast(COLOR_ORANGE, string);
  		}
  		return 1;
	}
	/*zcmd(adminduty2, playerid, params[])
	{
	new string[200];
	if(Info[playerid][pAdminZC] >= 1)
	{
	UnidentifedCall[playerid] = 1;
	PhoneOnline[playerid] = 1;
	papilla[playerid] = 1;
	SetPlayerArmour(playerid, 99999);
	SetHP(playerid, 99999);
	//SetPlayerSkin(playerid, 217);
	//Info[playerid][pModel] = 217;
	if(Info[playerid][pSex] == 1){SetPlayerSkin(playerid, 217);}
	else {SetPlayerSkin(playerid, 211);}
	Info[playerid][pModel] = 217;
	Info[playerid][pModel] = 211;
	AdminDuty[playerid] = 1;
 	SetPlayerColor(playerid,0x808080FF);
  	format(string, sizeof(string), "[Adminduty2]:{FFFFFF} %s [ID: %d] está en servicio administrativo." , GetPlayerNameEx(playerid),playerid);
   	ABroadCast(COLOR_ORANGE, string, 2);
	}
	return 1;
	}
	zcmd(adminoffduty2, playerid, params[])
	{
	    new string[200];
		if(Info[playerid][pAdminZC] >= 2)
		{
		UnidentifedCall[playerid] = 0;
		PhoneOnline[playerid] = 0;
		SetPlayerColor(playerid, COLOR_WHITE);
        SetPlayerSkin(playerid, Info[playerid][pChar]);
        papilla[playerid]= 0;
        SetHP(playerid, 100);
		SetPlayerArmour(playerid, 0);
        format(string, sizeof(string), "[Adminoffduty2]:{FFFFFF} %s [ID: %d] está fuera de servicio administrativo." , GetPlayerNameEx(playerid),playerid);
        ABroadCast(COLOR_ORANGE, string, 2);
  		}
  		return 1;
	}*/
	CMD:tiempojail(playerid, params[]){
    if(IsPlayerConnected(playerid)){
    SendClientMessageEx(playerid, COLOR_BLUED," {23A9D6}||---------------------------------|| {FFFF00}INFRANET-RP - Tiempos Jail||---------------------------||");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| PG: {FFFFFF} 25 Minutos{23A9D6}||   RK: {FFFFFF} 25 Minutos{23A9D6}||        CK2: {FFFFFF}Ban cuenta");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| DM: {FFFFFF} 20 Minutos{23A9D6}||   ZZ: {FFFFFF} 20 Minutos{23A9D6}||		DB: {FFFFFF} 25 minutos");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| CK: {FFFFFF} 20 Minutos{23A9D6}||   BH: {FFFFFF} 20 Minutos{23A9D6}||        BD/BCP: {FFFFFF}20 Minutos");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| CJ: {FFFFFF} 20 Minutos{23A9D6}||   AA: {FFFFFF} Repor Foro{23A9D6}||      	No Rol: {FFFFFF}20 Minutos");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| IHQ:{FFFFFF} 25 Minutos{23A9D6}||   BPC: {FFFFFF} 20 Minutos{23A9D6}||       CHK: {FFFFFF}10 minutos");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| MG: {FFFFFF} 20 Minutos{23A9D6}||   HK: {FFFFFF} 20 Minutos{23A9D6}||        LA: {FFFFFF}25 Minutos");
    SendClientMessageEx(playerid, COLOR_WHITE," {23A9D6}|| TK: {FFFFFF} 20 minutos{23A9D6}||   IDS: {FFFFFF} 50 Minutos{23A9D6}||       MA: {FFFFFF}15 Minutos");
    SendClientMessageEx(playerid, COLOR_BLUED," {23A9D6}||--------||{FFFF00}Cuidado no hagas ninguna cosa de esto si no estaras jaileado!! {23A9D6}||---------------||");
	}
	return 1;
}
    zcmd(sentarse, playerid, params[])
	{
	    new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /sentarse (1-5)");
        switch(anim){
			case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
			case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
			case 6: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /sentarse (1-6)");
		}
		return 1;
	}
	zcmd(orinar, playerid, params[]){
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
	    if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ahora.");
		SetPlayerSpecialAction(playerid, 68);
		return 1;
	}
    zcmd(dj, playerid, params[]){
	    new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /dj [1-4]");
        switch(anim){
			case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
			case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
		 	default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /dj [1-4]");
		}
		return 1;
	}
	zcmd(sinaliento, playerid, params[]){
		new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /sinaliento [1-2]");
        switch(anim){
			case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
            default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /sinaliento [1-2]");
		}
		SeRinde[playerid] = 1;
		return 1;
	}
	zcmd(poli, playerid, params[]){
		new anim;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /poli (1-2)");
		switch(anim){
			case 1:LoopingAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0);
			case 2:LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /poli (1-2)");
		}
		return 1;
	}
    zcmd(asiento, playerid, params[]){
    	new anim;
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /asiento (1-7)");
		if(anim < 1 || anim > 7) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /asiento (1-7)");
		switch(anim){
			case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0);// Not looping
			case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
			case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
			case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
			case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
		}
		return 1;
	}
    zcmd(bailar, playerid, params[]){
 		new dancestyle;
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
        if(sscanf(params, "d", dancestyle)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /bailar (1-3)");
 		switch(dancestyle){
			case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
			case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
			case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
			case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		}
	   	return 1;
	}
    zcmd(cruzar, playerid, params[]){
    	new anim;
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /cruzar [1-5]");
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
 		switch(anim){
			case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
			case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
			case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
			case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /cruzar (1-5)");
		}
		return 1;
	}
    zcmd(jiggy, playerid, params[])
	{
		new anim;
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /jiggy (1-10)");
        if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
 		switch(anim){
			case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
			case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
			case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
			case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
			case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
			case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
			case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
			case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
			case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
			case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /jiggy (1-10)");
		}
		return 1;
	}
	zcmd(ped, playerid, params[]){
		new anim;
        if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /ped (1-26)");
        if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
 		switch(anim){
			case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
			case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
			case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
			case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
			case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
			case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
			case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
			case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
			case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
			case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
			case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
			case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
			case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
			case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
			case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
			case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
			case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
			case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
			case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
			case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
			case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
			case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
			case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
			case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
			case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
			case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /ped (1-26)");
		}
		return 1;
	}
	zcmd(rap, playerid, params[]){
		new rapstyle;
        if(sscanf(params, "d", rapstyle)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /rap (1-3)");
		if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
 		switch(rapstyle){
			case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
			case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
			case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /rap [1-3]");
		}
	   	return 1;
	}
	zcmd(gesto, playerid, params[]){
		new gesto;
        if(sscanf(params, "d", gesto)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gesto (1-15)");
        if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
 		switch(gesto){
			case 1: OnePlayAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
			case 2: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
			case 3: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
			case 4: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
			case 5: OnePlayAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
			case 6: OnePlayAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
			case 7: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
			case 8: OnePlayAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
			case 9: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
			case 10: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
			case 11: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
			case 12: OnePlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
			case 13: OnePlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
			case 14: OnePlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
			case 15: OnePlayAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
			default: return SendClientMessageEx(playerid,COLOR_WHITE,"Utiliza: /gesto (1-15)");
		}
		return 1;
	}
    zcmd(sexo, playerid, params[]){
    	new sexstyle;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
        if(sscanf(params, "d", sexstyle)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sexo (1-8)");
 		switch(sexstyle){
 			case 1: LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,0);
			case 2: LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,0);
			case 3: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,0);
			case 4: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,0);
			case 5: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,0);
			case 6: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,0);
			case 7: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,0);
			case 8: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,0);
			default: return SendClientMessageEx(playerid,0xFF0000FF,"Utiliza: /sexo (1-8)");
		}
 	  	return 1;
	}
	CMD:apuntar(playerid, params[])
	{
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
 	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apuntar [1-3]");
    if(params[0] < 1 || params[0] > 3)   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apuntar [1-3]");
    switch(params[0])
    {
        case 1: LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
        case 2: LoopingAnim(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
        case 3: LoopingAnim(playerid,"SHOP","SHP_Gun_Aim",4.1,1,0,0,1,1);
    }
    return 1;
	}
    CMD:apoyarse(playerid, params[])
	{
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
 	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apoyarse [1-2]");
    if(params[0] < 1 || params[0] > 2)   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /apoyarse [1-2]");
    switch(params[0])
    {
        case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,1,0,1,1,1);
        case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,1,1,1,1,1);
    }
    return 1;
	}
	CMD:levantarse(playerid, params[])
	{
		return cmd_depie(playerid, params);
	}
	CMD:dedo(playerid, params[])
	{
    	OnePlayAnim(playerid,"RIOT","RIOT_FUKU",4.0,0,0,0,0,0);
        return 1;
	}
	CMD:correr(playerid, params[])
	{
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
 	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /correr [1-6]");
    if(params[0] < 1 || params[0] > 6)   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /correr [1-6]");
    switch(params[0])
    {
        		case 1: LoopingAnim(playerid,"PED","run_civi",4.1,1,1,1,1,1);
                case 2: LoopingAnim(playerid,"PED","run_gang1",4.1,1,1,1,1,1);
                case 3: LoopingAnim(playerid,"PED","run_old",4.1,1,1,1,1,1);
                case 4: LoopingAnim(playerid,"PED","run_fat",4.1,1,1,1,1,1);
                case 5: LoopingAnim(playerid,"PED","woman_run",4.1,1,1,1,1,1);
                case 6: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1);
    }
	return 1;
	}
	zcmd(fumar, playerid, params[]){
        new gesto;
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
        if(sscanf(params, "d", gesto)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fumar (1-2)");
		switch(gesto){
			case 1: OnePlayAnim(playerid,"SMOKING","M_smk_in",4.0,0,0,0,0,0);
			case 2: LoopingAnim(playerid,"SMOKING","M_smklean_loop",4.0,1,0,0,0,0);
			default: return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fumar (1-2)");
		}
		return 1;
	}
	CMD:mec(playerid, params[])
	{
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
 	if(sscanf(params, "i", params[0]))   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /mec(anico) [1-2]");
    if(params[0] < 1 || params[0] > 2)   return SendClientMessage(playerid, COLOR_WHITE, "Utilize: /mec(anico) [1-2]");
    switch(params[0])
    {
        case 1: LoopingAnim(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);
        case 2: LoopingAnim(playerid,"CAR","Fixn_Car_Out",4.1,0,0,0,1,1);
    }
    return 1;
	}
	zcmd(chora, playerid, params[])
	 {
	 OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0);
	  return 1;
	  }
	zcmd(relax, playerid, params[])
	{
	LoopingAnim(playerid, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
	 return 1;
	  }
	zcmd(saludo2, playerid, params[])
	 {
	 OnePlayAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0);
	 return 1;
	  }
	zcmd(llorar, playerid, params[])
	 {
	 LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	 return 1;
	 }
    zcmd(saludo, playerid, params[])
	 {
	 ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	 return 1;
	 }
    zcmd(quieto, playerid, params[])
	 {
	 LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	   }
    zcmd(enganche, playerid, params[])
	 {
      LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	   }
    zcmd(cpr, playerid, params[])
	 {
	 OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	  return 1;
	   }
    zcmd(borracho, playerid, params[])
	 {
	 LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	   return 1;
	    }
    zcmd(arobar, playerid, params[])
	 {
	 LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 0);
	  return 1;
	   }
    zcmd(reir, playerid, params[])
	 {
	 ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	  return 1;
	  }
    zcmd(amenazar, playerid, params[])
	 {
	 LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	  return 1;
	  }
   zcmd(depie, playerid, params[])
	 {
	 ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 0, 1, 0, 0);
	  return 1;
	  }
   zcmd(hablando, playerid, params[])
	 {
	 LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
	  return 1;
	  }
   zcmd(agonizar, playerid, params[])
	 {
	 ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	  return 1;
	  }
   zcmd(rodar, playerid, params[])
	 {
	 ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	  return 1;
	  }
   zcmd(dormir, playerid, params[])
	 {
	 ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	  return 1;
	  }
   	zcmd(herido, playerid, params[])
	 {
	 ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	 SendClientMessageEx(playerid, COLOR_WHITE, "Usa /depie o /levantarse para finalizar la animación.");
	  return 1;
	  }
   zcmd(agredido, playerid, params[])
	 {
  		ApplyAnimation(playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 0, 0, 1, 0);
	  return 1;
	  }
   zcmd(gritar, playerid, params[])
	 {
  		LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,1,1,1,1);
	  return 1;
	  }
   zcmd(animar, playerid, params[])
	 {
  		LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,1);
	  return 1;
	  }
   zcmd(paja, playerid, params[])
	 {
	 ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	  return 1;
	  }
    zcmd(esconder, playerid, params[])
	 {
	 LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	 SeRinde[playerid] = 1;
	  return 1;
	  }

	zcmd(vomitar, playerid, params[])
	{
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
	}
    zcmd(crack, playerid, params[])
	 {
	 LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	 SeRinde[playerid] = 1;
	  return 1;
	   }
    zcmd(fokear, playerid, params[]) { ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0); return 1; }
    zcmd(taichi, playerid, params[])
	{
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	 return 1;
	  }
    zcmd(beso, playerid, params[]) { ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0); return 1; }
	zcmd(chelado, playerid, params[])
	{
	    if(Helado[playerid] == 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Usted no tiene un helado para comer.");
        new string[64];
  		SetHP(playerid,100);
  		format(string, sizeof(string), "* %s toma el helado y se lo come todo.", GetPlayerNameEx(playerid));
  		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  		Helado[playerid] -= 1;
	    return 1;
	}
	zcmd(venderhelado, playerid, params[])
	{
	    if (Info[playerid][pJob] != 14 && Info[playerid][pJob2] != 14) return SendClientMessageEx(playerid,COLOR_WHITE,"No eres Vendedor de Helados.");
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en el Vehiculo de Helados.");
	    if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Espera unos segundos para volver a vender un helado, no estás preparado todavía.");
	    if(!sscanf(params,"u",params[0]))
		{
  				if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
				if(!ProxDetectorS(3.5, playerid, params[0])) return SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador muy lejos.");
	    		new string[80];
	            // Información en el /me.
                format(string, sizeof(string), "* %s le has ofrecido un helado a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
  				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  				// Información para el comprador.
                format(string, sizeof(string), "* %s te ha vendido un helado por 5$, Usa /chelado para comerlo.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
                SendClientMessage(params[0], COLOR_GREY, string);
                // Modificaciones.
                GivePlayerCash(playerid, 5); GivePlayerCash(params[0], -5);
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Sumaste $5 a tu bolsillo por vender un helado.");
				Helado[playerid] = 0;
				Helado[params[0]] += 1;
				AntiAbuso[playerid] = 1;
				SetTimerEx("AntiAbusoTimer", 30000, false, "i", playerid); // 0.5 Minutos.
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderhelado (ID)");
		return 1;
	}
    zcmd(w, playerid, params[])
    {
        if(!sscanf(params, "us[128]", params[0], params[1]))
        {
            if(params[0] != INVALID_PLAYER_ID)
    		{
	      		if(Info[playerid][pAdminZC] > 0 || Info[playerid][pAdminZC] == 0 && Info[params[0]][pAdminZC] > 0)
	        	{
	         		if(HidePM[params[0]] == 1 && Info[playerid][pAdminZC] < 6000) return SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Este administrador/ayudante tiene los susurros bloqueados!");
	         		new string[128];
					format(string, sizeof(string), "Mensaje de %s (%d): %s", GetPlayerNameEx(playerid), playerid, params[1]);
					SendClientMessage(params[0], 0xE9BC0AFF, string);
					format(string, sizeof(string), "Susurras a %s (%d): %s", GetPlayerNameEx(params[0]), params[0] ,params[1]);
					SendClientMessage(playerid,  0xE9BC0AFF, string);
					if(Info[playerid][pAdminZC] != 5000 && Info[params[0]][pAdminZC] != 5000)
					{
	    				for(new i = 0; i < MAX_PLAYERS; i++)
				    	{
        					if(Info[i][pAdminZC] >= 5000)
				    	    {
            					if(See_MP[i] == 1)
				        	    {
                					format(string, sizeof(string), ":MP: %s(%d) a %s(%d): %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(params[0]), params[0], params[1]);
				                	SendClientMessage(i, 0xFF8000FF, string);
					            }
					        }
					    }
 					}
				}
				else SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Susurros solo ha administradores!");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Jugador no conectado.");
        }
		else SendClientMessage(playerid, COLOR_WHITE, "Utiliza: /w (PlayerID) (Texto)");
        return 1;
    }
	CMD:venderarma(playerid,params[])
	{
	new cliente,precio, weapon, id;
	if(Team_LSPD(playerid) || Team_FBI(playerid) || Team_SAEM(playerid))
	{
			SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No puedes vender armas siendo policia o FBI!");
			return 1;
		}
		if (Info[playerid][pJob] == 7 || Info[playerid][pJob2] == 7)
		{
	    	if(!sscanf(params,"ii",cliente,precio))
	    	{
	        	if(IsPlayerConnected(cliente))
	        	{
	            	if(precio >= 0)
	            	{
     	       			manubrio[playerid] = 1;
						SetTimerEx("Timermanubrio",900000,false,"d",playerid);
	            	    weapon = GetPlayerWeapon(playerid);
	              		new string[200],name[MAX_PLAYER_NAME+1];
	                	GetPlayerName(playerid, name, sizeof(name));
		                format(string,sizeof(string),"* %s quiere venderte su %s por %i$. Usa /aceptararma para comprarla",name,WeaponNames[weapon],precio);
		                SendClientMessage(cliente,COLOR_LIGHTBLUE,string);
		                GetPlayerName(cliente, name, sizeof(name));
		                format(string,sizeof(string),"* Has ofrecido un %s a %s por %i$. Espera a que acepte.",WeaponNames[weapon],name,precio);
		                SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
						SetPVarInt(id,"gunID",playerid);
						SetPVarInt(playerid,"gun",weapon);
						SetPVarInt(playerid,"slot",GetWeaponSlot(weapon));
		                VentaDeArmaCon[cliente][0] = playerid;
		                VentaDeArmaCon[cliente][1] = precio;
					}
	            	else
	            	{
	                SendClientMessage(playerid,-1,"{FFFF00}[ERROR]:{FFFFFF} El precio no puede ser negativo.");
	            	}
        		}
        		else
        		{
            	SendClientMessage(playerid,COLOR_WHITE,"Ese jugador no está conectado.");
        		}
			}
    		else
    		{
        	SendClientMessage(playerid,COLOR_WHITE,"Utiliza: /venderarma (ID) (precio)");
    		}
		}
		else
		{
 		SendClientMessage(playerid,COLOR_WHITE,"No eres vendedor de armas.");
		}
    return 1;
}

CMD:aceptararma(playerid,params[])
{
	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[ATENCION]:{FFFFFF} No puedes obtener armas debido a tu restricción de dos horas!");
    if(VentaDeArmaCon[playerid][0] != -1)
    {
        if(GetPlayerMoney(playerid) >= VentaDeArmaCon[playerid][1])
        {
        new
					playerOffering = GetPVarInt(playerid,"gunID"),
					weaponOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"gun"),
					slotOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"slot");
            if(weaponOffering != 0 && slotOffering != 0)
			{
            new string[200],name[MAX_PLAYER_NAME+1];
            GetPlayerName(VentaDeArmaCon[playerid][0], name, sizeof(name));
            format(string,sizeof(string),"* Has comprado el arma %s que te ofreció %s por %i$",WeaponNames[weaponOffering],name,VentaDeArmaCon[playerid][1]);
            SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            GetPlayerName(playerid, name, sizeof(name));
            format(string,sizeof(string),"* %s te ha comprado el arma %s que le ofreciste por %i$.",name,WeaponNames[weaponOffering],VentaDeArmaCon[playerid][1]);
            SendClientMessage(VentaDeArmaCon[playerid][0],COLOR_LIGHTBLUE,string);
            GivePlayerCash(playerid,-VentaDeArmaCon[playerid][1]);
            GivePlayerCash(VentaDeArmaCon[playerid][0],VentaDeArmaCon[playerid][1]);
           	RemovePlayerWeapon(playerOffering, weaponOffering);
			GivePlayerValidWeapon(playerid, weaponOffering);
            VentaDeArmaCon[playerid][0] = -1;
            VentaDeArmaCon[playerid][1] = 0;
            DeletePVar(playerOffering,"gun");
			DeletePVar(playerid,"gunID");
			DeletePVar(playerOffering,"slot");
			}
        }
        else
        {
            SendClientMessage(playerid,COLOR_WHITE,"No puedes pagar ese precio");
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_WHITE,"Nadie te ha ofrecido armas.");
    }
    return 1;
	}
	CMD:robarbanco(playerid, params[])
	{
	    if(Banco_Activo == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF}Tienes que pedir permiso de un administrador para robar el banco!");
		if(IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GRAD2,"Policías no pueden robar el banco.");
		if(Info[playerid][pLeader] == 10 || Info[playerid][pLeader] == 11 || Info[playerid][pLeader] == 12 || Info[playerid][pLeader] == 13 || Info[playerid][pLeader] == 14 || Info[playerid][pLeader] == 15 || Info[playerid][pLeader] == 16 || Info[playerid][pLeader] == 18)
        {
	        if(robobanco[playerid] == 0)
	        {
 		       	if(robobanco[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Solo puedes robar el banco una vez por hora.");
				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1013.9638,-1169.6885,12.6183))
				{
				new string[128];
				SetTimerEx("Tiempo", 300000, false, "i", playerid);
				SendRadioMessage(1, 0x8D8DFFFF, "* Central: Aviso a todas las unidades, están robando en el banco central.");
				format(string, sizeof(string), "* Sospechoso identificado como: %s.", GetPlayerNameEx(playerid));
				SendRadioMessage(1,COLOR_VIP,string);
    			SendClientMessage(playerid, COLOR_GENERAL,"LA ALARMA HA COMENZADO A SONAR, LSPD ESTARÁ EN CAMINO.");
    			GameTextForPlayer(playerid,"~r~PERMANECE 5 MINUTOS EN LA CAJA FUERTE PARA REUNIR EL DINERO.",4500,3);
				robobanco[playerid] = 1;
				//GivePlayerCash(playerid, 500000);
				SetTimerEx("TimerBANCO", 7200000, 0, "d", playerid);
				LoadMoney[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadMoney[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadMoney[playerid]);
				SetTimerEx("LoadMon", 7000, 0, "d", playerid);
				}
			}
		}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Solo puedes robar el banco cada 2 payday.");
			return 1;
	}
	zcmd(robarcoche, playerid, params[])
	{
    	if(IsAGang(playerid) || IsARob(playerid)) // Es pandillero (4) o tiene Jobs ilegales (3).
 		{
            new car = GetPlayerVehicleID(playerid);
			new opcion[32],engine,lights,alarm,doors,bonnet,boot,objective, stole = random(2)+1, Float:HP, string[180];
			//if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Necesitas estar conectado para hacer esto.");
            if(sscanf(params, "s[32]", opcion)) return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /robarcoche [Stereo - Ruedas]");
            if(Info[playerid][pRob] >= 3) return SendClientMessage(playerid, COLOR_GRAD2, "¡Espera al próximo PayDay para robar más piezas!");
            if(!IsPlayerInVehicleRadio(playerid, 5)) return SendClientMessage(playerid, COLOR_GRAD2, "¡No estás cerca de ningún vehículo!");
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]: {FFFFFF}Tienes que estar dentro del coche y ser el conductor.");
            if(!Entorno_Car(car)) return SendClientMessage(playerid, COLOR_GRAD2, "¡No puedes robar este vehículo, está asegurado con alarma o es del gobierno!");
            if(!PlayerToPoint(15.0,playerid, 1410.18982, -1363.42737, 7.54547)) return SendClientMessage(playerid, COLOR_GRAD2, "¡No estás debajo del alcatarillado, atrás de Ammu Nation!");
	        if(strcmp(opcion,"stereo",true) == 0)
	        {
         			if(stole == 2)
         			{
         				format(string, sizeof(string), "* %s intenta forzar la radio del %s y lo consigue.", GetPlayerNameEx(playerid), GetVehicleNameEx(car));
						ProxDetector(20.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
						format(string, sizeof(string), "* %s entrega un gran subwoofer al mercader.", GetPlayerNameEx(playerid));
						ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ProxDetector(20.0, playerid, "* Mercader dice: ¡Ha ha! Gracias! Tóma, tu recompensa son 550 dólares, ¡sigue así!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						//Message(playerid, COLOR_WHITE, "- Has recibido 550$ vendiendo el stereo!");
						Earn(playerid, 550);
						Info[playerid][pRob]++;
						format(string, sizeof(string), "[Aviso]: {FFFFFF}Te quedan %d/3 robos.", Info[playerid][pRob]);
						SendClientMessage(playerid, COLOR_GREY, string);
						//
		    			GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(car, engine, lights, 1, doors, 1, boot, objective);
						SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  car);
						format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleNameEx(car));
						ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
						return 1;
					}
					else
					{
		    			format(string, sizeof(string), "* %s intenta extraer el estréo del %s para robarlo, pero falla y se hace daño.", GetPlayerNameEx(playerid), GetVehicleNameEx(car));
						ProxDetector(20.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
						Info[playerid][pRob]++;
						format(string, sizeof(string), "[Aviso]: {FFFFFF}Te quedan %d/3 robos.", Info[playerid][pRob]);
						SendClientMessage(playerid, COLOR_GREY, string);
						GetPlayerHealth(playerid, HP);
						SetHP(playerid, HP-10);
						//
 						GetVehicleParamsEx(car, engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(car, engine, lights, 1, doors, 1, boot, objective);
						SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  car);
						format(string, sizeof(string), "* Alarma Sonando (%s)",GetVehicleNameEx(car));
						ProxDetector(20.0, playerid, string, 0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF,0xDF0070FF);
						return 1;
					}
    		}
    		else if(strcmp(opcion,"ruedas",true) == 0)
	        {
         			if(stole == 2)
         			{
        				AddVehicleComponent(car, 1025);
         				format(string, sizeof(string), "* %s intenta quitar las ruedas del %s con su instrumental y lo consige.", GetPlayerNameEx(playerid), GetVehicleNameEx(car));
						ProxDetector(20.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
						format(string, sizeof(string), "* %s arrastra las ruedas y las entrega al mercader.", GetPlayerNameEx(playerid), car);
						ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ProxDetector(20.0, playerid, "* Mercader dice dice: Bonito, bueno, barato. ¡Qué grande eres, tóma, comprate algo con estos 600 dólares!", COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						Earn(playerid, 600);
						Info[playerid][pRob]++;
						format(string, sizeof(string), "[Aviso]: {FFFFFF}Te quedan %d/3 robos.", Info[playerid][pRob]);
						SendClientMessage(playerid, COLOR_GREY, string);
						//
						new panels, doorsx, lightsx, tires;
						GetVehicleDamageStatus(car, panels, doorsx, lightsx, tires);
						UpdateVehicleDamageStatus(car, panels, doorsx, lightsx, 15);
						return 1;
					}
					else
					{
		    			format(string, sizeof(string), "* %s intenta quitar las ruedas del %s con su instrumental y falla.", GetPlayerNameEx(playerid), GetVehicleNameEx(car));
						ProxDetector(20.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
						Info[playerid][pRob]++;
						format(string, sizeof(string), "[Aviso]: {FFFFFF}Te quedan %d/3 robos.", Info[playerid][pRob]);
						SendClientMessage(playerid, COLOR_GREY, string);
						GetPlayerHealth(playerid, HP);
						SetHP(playerid, HP-5);
						return 1;
					}
    		}
    		else SendClientMessageEx(playerid, COLOR_WHITE, "Opciones de robo: Stereo, Ruedas [Sistema en mejora constante].");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No eres pandillero, ladrón, tráficante o vendedor de armas para hacer esto.");
		return 1;
	}
    CMD:apelear(playerid, params[])
	{
        if(PlayerToPoint(10, playerid, 767.6719,13.6320,1000.7010))
		{
	        SafeDialogEx(playerid, FSTYLE_DIALOG, DIALOG_STYLE_LIST, "{00F70C}Que le gustaria aprender?", "Me gustaría aprender Knee Head\t 1500$\nMe gustaría aprender Kung Fu\t 1000$\nMe gustaría aprender Boxeo\t 800$\nMe gustaría aprender pelea callejera\t 800$\nMe gustaría aprender pelea de codos\t 800$", "Sí", "No");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estas en el GYM.");
		return 1;
	}
	CMD:venderbebida(playerid, params[])
    {
		if(Info[playerid][pJob] == 1 || Info[playerid][pJob2] == 1)
		{
			if(IsAtBar(playerid))
			{
				new string[128], giveplayerid;
				if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USE: /venderbebida [playerid]");

				if(IsPlayerConnected(giveplayerid))
				{
					if(playerid == giveplayerid)
					{
						return SendClientMessageEx(playerid, COLOR_GREY, " No puedes venderte a ti mismo.");
					}
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
						DrinkOffer[giveplayerid] = playerid;
						format(string, sizeof(string), "* Bartender %s te ha ofrecido una bebida. /aceptar bebida para aceptar la bebida", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Has ofrecído a %s una bebida.",GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, " Ese jugador no está cerca tuyo");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, " Ese jugador no está conectado");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "   No estás en un bar");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, " No eres Bartender!");
		return 1;
 }
	CMD:aceptar(playerid, params[])
	{
	    new sendername[MAX_PLAYER_NAME];
		new giveplayer[MAX_PLAYER_NAME];
		new string[256];
	    if(IsPlayerConnected(playerid))
		{
	        if(isnull(params))
			{
	            SendClientMessageEx(playerid, COLOR_WHITE, "USA: /aceptar (nombre)");
	            SendClientMessageEx(playerid, COLOR_WHITE, "Nombres: bebida - telefono - multa - materiales - matrimonio - arma - coche - fichasg");
	            SendClientMessageEx(playerid, COLOR_WHITE, "Nombres: taxi - mecanico - familia - fix - recarga - vip - fichasvip");
	            return 1;
	        }
	        if(strcmp(params,"muerte",true) == 0)
			{
			    if(medicoon() == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Hay medicos disponibles para atenderte, usa /servicios medico(s).");
	   	    	if(GetPVarInt(playerid, "Injured") == 1)
				{
                	KillEMSQueue(playerid);
                	ResetPlayerWeaponsEx(playerid);
                	SetPVarInt(playerid, "Hospital", 1);
                	SendClientMessageEx(playerid, COLOR_DUDA, "Perdiste la esperanza y caiste inconsciente, se te envió de inmediato al hospital.");
                	SpawnPlayer(playerid);
            	}
            	else SendClientMessageEx(playerid, COLOR_WHITE, "* No estás apunto de morir, no puedes hacer esto ahora!");
        	}
        	else if(strcmp(params,"familia",true) == 0)
			{
            	if(InviteOffer[playerid] < 999)
				{
                	if(IsPlayerConnected(InviteOffer[playerid]))
					{
                    	if(InviteFaction[playerid] == 0 && InviteFamily[playerid] != 255)
						{
                        	if(GetPVarInt(playerid, "IsInArena") == 1)
							{
                            	SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero sal del paintball arena.");
                          	  	return 1;
	                        }
	                        if(Info[playerid][pJailTime] > 1)
							{
	                            SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ser invitado estando en prisión.");
	                            return 1;
	                        }
                        	if( Info[playerid][pMember] >= 3 || Info[playerid][pFMember] != 255 || Info[playerid][pLeader] >= 3 || Info[playerid][pLeader] == 1 || Info[playerid][pMember] == 1 || Info[playerid][pMember] == 2 && Info[playerid][pDivision] >= 3 || Info[playerid][pMember] == 2 && Info[playerid][pDivision] == 1)
							{
                        	    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes aceptar esta invitación, porque ya estás en una familia o facción.");
                        	}
                        	else
							{
                            	Info[playerid][pFMember] = InviteFamily[playerid];
                            	Info[playerid][pRank] = 1;
                            	fINFO[InviteFamily[playerid]][FamilyMembers] ++;
                            	saveFamilies();
                            	format(string, sizeof(string), "   Aceptaste unirte a %s, fuiste invitado por %s.", fINFO[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            	format(string, sizeof(string), "   %s aceptó la invitación para unirse a %s.", GetPlayerNameEx(playerid),fINFO[InviteFamily[playerid]][FamilyName]);
                            	SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
               	             	SendClientMessageEx(playerid, COLOR_WHITE, "Usa (/f) para hablar por el chat de familias. /ayuda familia");
    	                        InviteOffer[playerid] = 999;
    	                        InviteFaction[playerid] = 0;
    	                        InviteFamily[playerid] = 255;
    	                    }
    	                }
    	            }
    	        }
    	        else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Nadie te ha invitado a unirte a una familia.");
	        }
	        else if(strcmp(params,"fix",true) == 0)
			{
    	        if(RepairOffer[playerid] < 999){
        	        if(GetPlayerCash(playerid) > RepairPrice[playerid]){
            	        if(IsPlayerInAnyVehicle(playerid)){
                	        if(IsPlayerConnected(RepairOffer[playerid])){
                	            RepairCar[playerid] = GetPlayerVehicleID(playerid);

                	            RepairVehicle(RepairCar[playerid]);
                	            SetVehicleHealth(RepairCar[playerid], 1000.0);
	                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
	                            GivePlayerCash(playerid, -RepairPrice[playerid]);
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "%s(IP:%s) has repaired the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
	                            Log("LOGS/pay.log", string);
	                            format(string, sizeof(string), "* %s repara el vehiculo de %s.", GetPlayerNameEx(RepairOffer[playerid]), GetPlayerNameEx(playerid));
	                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                            format(string, sizeof(string), "* Tu coche fue reparado por $%d, por el mecánico %s.",RepairPrice[playerid],GetPlayerNameEx(RepairOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

	                            format(string, sizeof(string), "* Reparaste el coche de %s, sumaste $%d!",GetPlayerNameEx(playerid),RepairPrice[playerid]);
	                            SendClientMessageEx(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
	                            RepairOffer[playerid] = 999;
	                            RepairPrice[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    return 1;
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero para pagar esto.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Nadie te ha ofrecido reparar tu vehiculo.");
	        }
		    else if(strcmp(params, "saludo",true) == 0){
	        	new Count;
		        foreach(Player, i){
	               	if(GetPVarInt(i, "shrequest") == playerid){
                    	new
                        	Float: ppFloats[3];

                    	GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);

                    	if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2])){
     						Count++;
                   	    	SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos. No puedes aceptar el saludo ahora.");
                    	}
                    	else
						{
                        	switch(GetPVarInt(i, "shstyle"))
							{
                            	case 1:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                           	 	case 2:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 3:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                            	case 4:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000,1);
                                	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                            	case 5:
                            	{
                           	    	Count++;
                            	   	PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000,1);
                            	    ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 6:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                            	    ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 7:
                            	{
                            	    Count++;
                            	    PlayerFacePlayer( playerid, i );
                            	    ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                            	    ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                            	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	    format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	    DeletePVar(i, "shstyle");
                            	}
                            	case 8:
                            	{
                                	Count++;
                                	PlayerFacePlayer( playerid, i );
                                	ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200,1);
                                	ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200,1);
                                	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                                	format(string, sizeof(string), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                	DeletePVar(i, "shstyle");
                            	}
                        	}
                    	}
                	}
            	}
        	    if(Count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha saludado.");
    	        return 1;
	        }
	        else if(strcmp(params,"entrevista",true) == 0)
			{
	            if(LiveOffer[playerid] < 999)
				{
	                if(IsPlayerConnected(LiveOffer[playerid]))
					{
	                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
	                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Estarás congelado hasta que termine la entrevista.");
	                        TalkingLive[playerid] = LiveOffer[playerid];
	                        TalkingLive[LiveOffer[playerid]] = playerid;
	                        LiveOffer[playerid] = 999;
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "Estás lejos del reportero.");
	                }
	                return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha invitado a una entrevista.");
	        }
	        else if(strcmp(params,"recarga",true) == 0){
    	        if(RefillOffer[playerid] < 999){
        	        if(GetPlayerCash(playerid) > RefillPrice[playerid]){
            	        if(IsPlayerInAnyVehicle(playerid)){
                	        if(IsPlayerConnected(RefillOffer[playerid])){
                            	new vehicleid = GetPlayerVehicleID(playerid);
                            	VehicleFuel[vehicleid] = 200;
                            	if(VehicleFuel[vehicleid] > 200) VehicleFuel[vehicleid] = 200;
                            	GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
                            	GivePlayerCash(playerid, -RefillPrice[playerid]);
                            	new ip[32], ipex[32];
                            	GetPlayerIp(playerid, ip, sizeof(ip));
                            	GetPlayerIp(RefillOffer[playerid], ipex, sizeof(ipex));
                            	format(string, sizeof(string), "%s(IP:%s) has refilled the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
                            	Log("LOGS/pay.log", string);

                            	format(string, sizeof(string), "* %s llenó el tanque del vehículo de %s.", GetPlayerNameEx(RefillOffer[playerid]), GetPlayerNameEx(playerid));
                            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                            	format(string, sizeof(string), "* Tu vehiculo fue llenado por $%d por el mecánico %s.",RefillPrice[playerid],GetPlayerNameEx(RefillOffer[playerid]));
                            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

                            	format(string, sizeof(string), "* Llenaste el tanque del vehículo de %s por $%d, lo sumaste al bolsillo!", GetPlayerNameEx(playerid),RefillPrice[playerid]);
                            	SendClientMessageEx(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
	                            RefillOffer[playerid] = 999;
	                            RefillPrice[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    return 1;
	                }
	                else return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido llenar el tanque de tu coche.");
			}
        	else if(strcmp(params,"medico",true) == 0) {
            	if(Info[playerid][pMember] == 4 || Info[playerid][pLeader] == 4){
                	if(MedicCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya aceptaste una llamada.");
                	if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1){
                    	SendClientMessageEx(playerid, COLOR_WHITE, "Asegurate de que no hay ningún checkpoint activado en este momento.");
                    	return 1;
                	}
                	if(MedicCall < 999){
                    	if(IsPlayerConnected(MedicCall))
						{
                        	format(string, sizeof(string), "* Aceptaste una llamada de %s",GetPlayerNameEx(MedicCall));
                        	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Después de 45 segundos en checkpoint desaparecerá.");
                        	format(string, sizeof(string), "* Médico %s aceptó tu llamada espera en tu actual posición.",GetPlayerNameEx(playerid));
                        	SendClientMessageEx(MedicCall, COLOR_LIGHTBLUE, string);
                        	new Float:X,Float:Y,Float:Z;
                        	GetPlayerPos(MedicCall, X, Y, Z);
                        	SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        	new zone[MAX_ZONE_NAME];
                        	GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        	format(string, sizeof(string), "{FF8000}[INDICACION]:{FFFFFF} %s fue localizado en %s", GetPlayerNameEx(MedicCall), zone);
                        	SendClientMessageEx(playerid, COLOR_WHITE, string);
                        	MedicCallTime[playerid] = 1;
                        	MedicAccepted[playerid] = MedicCall;
                        	MedicCall = 999;
                        	return 1;
                    	}
                    	return 1;
                	}
                	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie a llamado un médico.");
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No eres un médico.");
        	}
	        if(strcmp(params,"casa",true) == 0){
	            if(HouseOffer[playerid] < 999){
	                if(IsPlayerConnected(HouseOffer[playerid])){
	                    if(Info[HouseOffer[playerid]][pPhousekey] == INVALID_HOUSE_ID && Info[HouseOffer[playerid]][pPhousekey2] == INVALID_HOUSE_ID){
	                        SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene ninguna casa.");
	                        return 1;
	                    }
	                    if(GetPlayerCash(playerid) > HousePrice[playerid]){

	                        new house;
	                        if(House[playerid] == 1) house = Info[HouseOffer[playerid]][pPhousekey];
	                        else if(House[playerid] == 2) house = Info[HouseOffer[playerid]][pPhousekey2];
	                        else return SendClientMessageEx(playerid, COLOR_RED, "{FFFF00}[ERROR]:{FFFFFF} Casa no especificada.");
	                        ClearHouse(house);
	                        HouseInfo[house][hLock] = 1;
	                        HouseInfo[house][hTiempo] = 31;
	                        format( HouseInfo[house][hOwner], 128, "Nobody" );
	                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
	                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	                        format(string, sizeof(string), "~w~Felicitaciones~n~ Has vendido tu propiedad por ~n~~g~$%d", HousePrice[playerid]);
	                        GameTextForPlayer(HouseOffer[playerid], string, 4000, 3);
	                        if(House[playerid] == 1) Info[HouseOffer[playerid]][pPhousekey] = INVALID_HOUSE_ID;
	                        else Info[HouseOffer[playerid]][pPhousekey2] = INVALID_HOUSE_ID;
	                        SaveHouses();
	                        OnPlayerUpdate(HouseOffer[playerid]);
	                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
	                        HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
	                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);
	                        Info[playerid][pPhousekey] = house;
	                        HouseInfo[house][hOwned] = 1;
	                        GetPlayerName(playerid, sendername, sizeof(sendername));
	                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
	                        GivePlayerCash(playerid,-HousePrice[playerid]);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra.");
	                        SendClientMessageEx(playerid, COLOR_WHITE, "Usa /ayuda para ver los comandos disponibles.");
	                        SaveHouses();
	                        OnPlayerUpdate(playerid);
	                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
	                        HouseInfo[house][hPickupID] = CreateDynamicPickup(19522, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
	                        format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[house][hOwner],HouseInfo[house][hLevel],house);
	                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], -1, string);

	                        new ip[32], ipex[32];
	                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
	                        GetPlayerIp(playerid,ipex,sizeof(ipex));
	                        format(string,sizeof(string),"%s (IP: %s) ha vendido su casa (ID %d) a %s (IP: %s) for $%d.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetPlayerNameEx(playerid),ipex,HousePrice[playerid]);
	                        Log("LOGS/house.log", string);

	                        HouseOffer[playerid] = 999;
	                        HousePrice[playerid] = 0;
	                        House[playerid] = 0;
	                    }
	                    else{
	                        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes pagar esta casa.");
	                        HouseOffer[playerid] = 999;
	                        HousePrice[playerid] = 0;
	                        House[playerid] = 0;
	                        return 1;
	                    }
	                }
	                return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te a ofrecido una casa.");
	        }
	        else if(strcmp(params,"mecanico",true) == 0){
	            if(Team_Mecanicos(playerid)){
				if(MechanicCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya aceptaste una llamada.");
	            if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero termina de llegar al otro checkpoint (Estás en una llamada o algo que activó un marcador rojo.");
	            if(MechanicCall < 999)
				{
	                if(IsPlayerConnected(MechanicCall))
					{
	                    if(playerid == MechanicCall) return 1;
	                    format(string, sizeof(string), "* Aceptaste la llamada de %s, tienes 60 segundos para ir allá.",GetPlayerNameEx(MechanicCall));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Después de 60 Segundos el marcador rojo desaparecerá.");
	                    format(string, sizeof(string), "* Mecánico %s aceptó tu llamada por favor, espera en tu posición actual.",GetPlayerNameEx(playerid));
	                    SendClientMessageEx(MechanicCall, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "** %s aceptó la llamada reciente de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(MechanicCall));
						SendFamilyMessage(6, TEAM_AZTECAS_COLOR, string);
						new Float:X,Float:Y,Float:Z;
	                    GetPlayerPos(MechanicCall, X, Y, Z);
	                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
	                    GameTextForPlayer(playerid, "~r~Ve al Marcador rojo", 5000, 1);
		                MechanicCallTime[playerid] = 1;
                    	MechanicCall = 999;
                    	return 1;
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie a llamado un mecanico.");
            	}
        	}
	        else if(strcmp(params,"taxi",true) == 0){
	            if(TransportDuty[playerid] != 1) return SendClientMessageEx(playerid, COLOR_GREY, "No estás en servicio.");
	            if(TaxiCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya aceptaste una llamada.");
	            if(TaxiCall < 999){
	                if(IsPlayerConnected(TaxiCall)){
	                    format(string, sizeof(string), "* Aceptaste la llamada de %s, puedes ir al marcador rojo para recogerlo.",GetPlayerNameEx(TaxiCall));
	                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                    format(string, sizeof(string), "* Taxista %s aceptó tu llamada; por favor espera en tu posición actual.",GetPlayerNameEx(playerid));
	                    SendClientMessageEx(TaxiCall, COLOR_LIGHTBLUE, string);
	                    GameTextForPlayer(playerid, "~n~~r~Ve al CheckPoint.", 5000, 1);
	                    new Float:X,Float:Y,Float:Z;
	                    GetPlayerPos(TaxiCall, X, Y, Z);
	                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
						TaxiCallTime[playerid] = 1;
	                    TaxiAccepted[playerid] = TaxiCall;
	                    TaxiCall = 999;
	                }
	                return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie ha llamado a un taxista.");
	        }
	        if(strcmp(params,"bebida",true) == 0){
   				if((DrinkOffer[playerid] != INVALID_PLAYER_ID) && (IsPlayerConnected(DrinkOffer[playerid]))){
	                if (ProxDetectorS(8.0, playerid, DrinkOffer[playerid])){
	                    SafeDialogEx(playerid, DRINKLISTDIALOG, DIALOG_STYLE_LIST, "Bebidas", "Cerveza ($60)\nVodka ($100)\nWhiskey ($100)\nAgua ($20)\nGaseosa($20)", "Comprar", "Cancelar");
	                }
	                else{
	                    SendClientMessageEx(playerid, COLOR_WHITE, "Estás lejos del Bartender.");
	                    DrinkOffer[playerid] = INVALID_PLAYER_ID;
	                    return 1;
	                }
                	return 1;
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido una bebida.");
    	    }
            if(strcmp(params,"telefono",true) == 0){
                if(NumBuy[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido un número.");
                if(NumPrice[playerid] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero.");
                format(string, sizeof(string), "* %s compra un número de teléfono", GetPlayerNameEx(playerid));
                ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                Info[playerid][pPnumber] = NumBuy[playerid];
                Earn(NumSeller[playerid], NumPrice[playerid]);
                Bought(playerid, NumPrice[playerid]);
                NumBuy[playerid] = 0;
                NumPrice[playerid] = 0;
                NumSeller[playerid] = 0;
                Facturing[playerid] = 0;
            }
			else if(strcmp(params,"multa",true) == 0){
			    if(TicketOffer[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Nadie te multado.");
			    format(string, sizeof(string), "* %s paga una multa", GetPlayerNameEx(playerid));
   				ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
   				format(string, sizeof(string), " %s pagó una multa de %d$.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
   				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
   				SendClientMessageEx(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
   				Bought(playerid, TicketMoney[playerid]);
   				Tax += TicketMoney[playerid];
   				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				Facturing[playerid] = 0;
			}
			else if(strcmp(params,"licencia",true) == 0){
			    if(NombreLicencia[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Nadie te ha ofrecido una licencia.");
			    format(string, sizeof(string), "* %s obtiene una licencia de armas.", GetPlayerNameEx(playerid));
   				ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
   				format(string, sizeof(string), "[INFO] %s obtuvo la licencia de armas al precio de %d dólares.", GetPlayerNameEx(playerid), PrecioLicencia[playerid]);
   				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string); // Mensaje al comprador.
   				SendClientMessageEx(NombreLicencia[playerid], COLOR_LIGHTBLUE, string); // Mensaje al policia.
   				Bought(playerid, PrecioLicencia[playerid]);
   				Tax += PrecioLicencia[playerid];
   				Info[playerid][pGunLic] = 1;
   				NombreLicencia[playerid] = 999;
				PrecioLicencia[playerid] = 0;
				Facturing[playerid] = 0;
			}
	        else if(strcmp(params,"matrimonio",true) == 0) {
	            if(ProposeOffer[playerid] < 999) {
	                if(IsPlayerConnected(ProposeOffer[playerid])) {
	                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
	                        if(MarryWitness[ProposeOffer[playerid]] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "El proponente no tiene un testigo de matrimonio!");
	                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
	                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
	                                if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1963.9612, -369.1851, 1093.7289))
									{
    	                                format(string, sizeof(string), "* Aceptaste la petición de matrimonio a %s.", GetPlayerNameEx(ProposeOffer[playerid]));
	    	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
       	                             	format(string, sizeof(string), "* %s ha aceptado la solicitud de ser tu esposa", GetPlayerNameEx(playerid));
                                    	SendClientMessageEx(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
                                    	format(string, sizeof(string), "Sacerdote: %s, aceptas a %s como tu marido por siempre? (Escribe 'si', que otro caracter arruinará el matrimonio.)", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposeOffer[playerid]));
                                    	SendClientMessageEx(playerid, COLOR_WHITE, string);
                                    	MarriageCeremoney[playerid] = 1;
                                    	ProposedTo[ProposeOffer[playerid]] = playerid;
                                    	GotProposedBy[playerid] = ProposeOffer[playerid];
                                    	MarryWitness[ProposeOffer[playerid]] = 999;
                                    	ProposeOffer[playerid] = 999;
                                    	return 1;
                                	}
                                	else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás en la iglesia.");
                            	}
                            	else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El testigo del matrimonio no está cerca de su proponente!");
                        	}
                        	return 1;
                    	}
                    	else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador que propuso no está cerca de ti!");
                	}
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha propuesto matrimonio!");
        	}
        	if(strcmp(params,"coche",true) == 0) { //Bugazo
            	if(VehicleOffer[playerid] < 999) {
                	if(IsPlayerConnected(VehicleOffer[playerid])) {
                    	if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
                        	if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]))
							{
                            	if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca del que te va a vender");
                            	new playervehicleid = GetPlayerFreeVehicleId(playerid);
                            	new carsamount = VehicleCount(playerid);
                            	if(Info[playerid][pROL] == 0 && carsamount >= 3) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 4.");
                            	if(Info[playerid][pROL] == 1 && carsamount >= 4) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 5.");
                            	if(Info[playerid][pROL] == 2 && carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 6.");
                            	if(Info[playerid][pROL] == 3 && carsamount >= 6) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 7.");
                                if(Info[playerid][pROL] == 4 && carsamount >= 7) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 8.");
                                if(Info[playerid][pROL] == 5 && carsamount >= 8) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 9.");
                                if(Info[playerid][pROL] == 6 && carsamount >= 9) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más coches debido a tu nivel de rol. Sólo 10.");
								if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes tener más autos.");
                            	new ip[32], ipex[32];
                            	GetPlayerIp(playerid, ip, sizeof(ip));
                            	GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                            	format(string, sizeof(string), "[CAR] %s (IP: %s) pagó $%d a %s por el %s (IP: %s)", GetPlayerNameEx(playerid), ip, VehiclePrice[playerid], GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
                            	Log("LOGS/pay.log", string);
                            	GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                            	GetPlayerName(playerid, sendername, sizeof(sendername));
                            	format(string, sizeof(string), "* Has pagado por un %s, $%d, de %s. (Usa /ayuda coche para más información)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
                            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            	format(string, sizeof(string), "* Vendiste tu %s a %s por $%d.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername,VehiclePrice[playerid]);
                            	SendClientMessageEx(VehicleOffer[playerid], COLOR_LIGHTBLUE, string);
                            	// AntiAbuso. (Regalar coches o similares.
                          	 	format(string, sizeof(string), "[AVISO] %s ha comprado un %s por $%d, al usuario %s. Revisar compra en caso de abuso.", sendername, GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
								ABroadCast(COLOR_ORANGE, string, 3);
								// AntiAbuso 2. (Venta de vehículo entre 2 personas con al misma IP).
		 						if(!strcmp(Info[playerid][pIP], Info[VehicleOffer[playerid]][pIP], false) && Info[playerid][pMulticuenta] == 0 && Info[VehicleOffer[playerid]][pMulticuenta] == 0)
 								{
 					    			// Si las IP son iguales y ambos son multicuentas NO AUTORIZADAS = 0.
    								new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
 									format(stringlog, sizeof(stringlog), "[ATENCIÓN] Posibles multicuentas: %s(%d) ha vendido un vehículo a %s(%d). [IP: %s]", GetPlayerNameEx(VehicleOffer[playerid]), VehicleOffer[playerid], GetPlayerNameEx(playerid), playerid, ipc);
	 								ABroadCast(COLOR_ORANGE, stringlog, 2); Log("LOGS/multicuentas.log", stringlog);
								}
                            	GivePlayerCash(VehicleOffer[playerid], VehiclePrice[playerid]);
                            	GivePlayerCash(playerid, -VehiclePrice[playerid]);
                            	RemovePlayerFromVehicle(VehicleOffer[playerid]);
                            	new Float:slx, Float:sly, Float:slz;
                            	GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                            	SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
                            	PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                                PlayerVehicleInfo[playerid][playervehicleid][pvVW] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvVW];
								PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            	strmid(PlayerVehicleInfo[playerid][playervehicleid][pvAllowPlayer], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer], 0, strlen(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer]), 255);
                            	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = VehiclePrice[playerid];
                            	PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
                            	carsforplayer[playerid]++;
                            	for(new m = 0; m < MAX_MODS; m++){
                            	    PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            	}
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvVW] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
								PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
               	             	PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
             	             	strmid(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowPlayer], "Nadie", 0, strlen("Nadie"), 255);
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPrice] = 0;
                	            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSpawned] = 0;
                	            carsforplayer[VehicleOffer[playerid]]++;
                	            for(new m = 0; m < MAX_MODS; m++) {
                	                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                	            }
                	            VehicleOffer[playerid] = 999;
                	            VehiclePrice[playerid] = 0;
                	            return 1;
                	        }
                	        else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El que te va a vender no está en el coche.");
                	    }
                	    else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar este coche!");
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido un coche!");
        	}
			else if(strcmp(params,"crack",true) == 0){
	            if(CrackOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) > CrackPrice[playerid]){
	                    if(Info[playerid][pCrack] < 60){
	                        if(IsPlayerConnected(CrackOffer[playerid])){
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[CRACK DEAL (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]), ipex);
	                            Log("LOGS/pay.log", string);

	                            GivePlayerCash(playerid, -CrackPrice[playerid]);
	                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
	                            format(string, sizeof(string), "* Le compraste %d gramos por $%d al vendedor %s.",CrackGram[playerid],CrackPrice[playerid],GetPlayerNameEx(CrackOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                            format(string, sizeof(string), "* %s ha comprado %d gramos, se ha añadido $%d a tu bolsillo.",GetPlayerNameEx(playerid),CrackGram[playerid],CrackPrice[playerid]);
	                            SendClientMessageEx(CrackOffer[playerid], COLOR_LIGHTBLUE, string);
	                            Info[playerid][pCrack] += CrackGram[playerid];
                                Info[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
	        					if(Info[CrackOffer[playerid]][pDobleExp] == 0)
								{
              						Info[CrackOffer[playerid]][pDrugsSkill]++;
								}
								else
								{
									Info[CrackOffer[playerid]][pDrugsSkill] += 2;
									SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
								}
            	                if(Info[CrackOffer[playerid]][pDrugsSkill] == 50)
            	                { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 2, puedes comprar más gramos y más barato."); }
            	                else if(Info[CrackOffer[playerid]][pDrugsSkill] == 100)
            	                { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 3, puedes comprar más gramos y más barato."); }
            	                else if(Info[CrackOffer[playerid]][pDrugsSkill] == 200)
            	                { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 4, puedes comprar más gramos y más barato."); }
            	                else if(Info[CrackOffer[playerid]][pDrugsSkill] == 400)
            	                { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 5, puedes comprar más gramos y más barato."); }
								CrackOffer[playerid] = 999;
	                            CrackPrice[playerid] = 0;
	                            CrackGram[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "Estás muy cargado de droga.");
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar esa cantidad.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido droga.");
	        }
	        else if(strcmp(params,"hierba",true) == 0) {
	            if(PotOffer[playerid] < 999) {
	                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
	                    if(Info[playerid][pPot] < 25) {
	                        if(IsPlayerConnected(PotOffer[playerid])) {
								if(Info[PotOffer[playerid]][pPot] < PotGram[playerid])
								{
							    	SendClientMessageEx(playerid,COLOR_WHITE, "Ese jugador no tiene esa cantidad de hierba.");
							    	return 1;
								}
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[HIERBA (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]), ipex);
	                            Log("LOGS/pay.log", string);
            	                format(string, sizeof(string), "* Le Compraste %d gramos por $%d a %s.",PotGram[playerid],PotPrice[playerid],GetPlayerNameEx(PotOffer[playerid]));
            	                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            	                format(string, sizeof(string), "* %s te compro %d gramos, sumaste $%d a tu bolsillo.",GetPlayerNameEx(playerid),PotGram[playerid],PotPrice[playerid]);
            	                SendClientMessageEx(PotOffer[playerid], COLOR_LIGHTBLUE, string);
            	                SetPVarInt(PotOffer[playerid], "Cash", GetPVarInt(PotOffer[playerid], "Cash")+PotPrice[playerid]);
								if(Info[PotOffer[playerid]][pDobleExp] == 0)
								{
              						Info[PotOffer[playerid]][pDrugsSkill]++;
								}
								else
								{
									Info[PotOffer[playerid]][pDrugsSkill] += 2;
									SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Ganaste 2 puntos de habilidad por tener horas de doble experiencia.");
								}
            	                GivePlayerCash(playerid, -PotPrice[playerid]);
            	                Info[playerid][pPot] += PotGram[playerid];
            	                Info[PotOffer[playerid]][pPot] -= PotGram[playerid];
            	                if(Info[PotOffer[playerid]][pDrugsSkill] == 50)
            	                { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 2, puedes comprar más gramos y más barato."); }
            	                else if(Info[PotOffer[playerid]][pDrugsSkill] == 100)
            	                { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 3, puedes comprar más gramos y más barato."); }
            	                else if(Info[PotOffer[playerid]][pDrugsSkill] == 200)
            	                { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 4, puedes comprar más gramos y más barato."); }
            	                else if(Info[PotOffer[playerid]][pDrugsSkill] == 400)
            	                { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Tu nivel de Vendedor de Drogas es de nivel 5, puedes comprar más gramos y más barato."); }
            	                PotOffer[playerid] = 999;
            	                PotPrice[playerid] = 0;
            	                PotGram[playerid] = 0;
            	                return 1;
            	            }
            	            return 1;
            	        }
            	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Estás totalmente cargado con hierba, utilízala primero.");
            	    }
            	    else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar estos gramos de hierba.");
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido hierba.");
       	 	}
	        else if(strcmp(params,"chaleco",true) == 0) {
	            if(GuardOffer[playerid] < 999) {
	                if(GetPlayerCash(playerid) > GuardPrice[playerid]) {
	                    if(IsPlayerConnected(GuardOffer[playerid]))
						{
	                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
	                            new Float:armour;
	                            GetPlayerArmour(playerid, armour);
	                            if(armour >= 100)
								{
	                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ya tienes un chaleco.");
	                                return 1;
	                            }
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[Chaleco] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
	                            Log("LOGS/pay.log", string);
	                            SetPlayerArmour(playerid, 100);
	                            format(string, sizeof(string), "* Aceptaste la protección por $%d de %s.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                            format(string, sizeof(string), "* %s acepto tu protección, y te pagó $%d.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
	                            SendClientMessageEx(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
	                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
	                            GivePlayerCash(playerid, -GuardPrice[playerid]);
	                            GuardOffer[playerid] = 999;
	                            GuardPrice[playerid] = 0;
	                            return 1;
	                        }
	                        else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de la persona que te va a vender.");
	                    }
	                    return 1;
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar este Chaleco!");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido Ningun Chaleco.");
	        }
	        else if(strcmp(params,"spray",true) == 0){
	            if(SprayOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= SprayPrice[playerid]){
	                    if(Info[playerid][pLevel] >= 1){
	                        if(IsPlayerConnected(SprayOffer[playerid])){
	                            new ip[32], ipex[32];
	                            GetPlayerIp(playerid, ip, sizeof(ip));
	                            GetPlayerIp(SprayOffer[playerid], ipex, sizeof(ipex));
	                            format(string, sizeof(string), "[SPRAY DEAL (%d HIERBAS)] %s (IP:%s) has paid $%d to %s (IP:%s)", SprayGram[playerid], GetPlayerNameEx(playerid), ip, SprayPrice[playerid], GetPlayerNameEx(SprayOffer[playerid]), ipex);
	                            Log("LOGS/pay.log", string);

	                            GivePlayerCash(playerid, -SprayPrice[playerid]);
	                            GivePlayerCash(SprayOffer[playerid], SprayPrice[playerid]);
	                            format(string, sizeof(string), "* Le compraste %d potes por $%d al vendedor %s. (Puedes usar /colorcoche y /paintcoche para pintar tu coche.",SprayGram[playerid],SprayPrice[playerid],GetPlayerNameEx(SprayOffer[playerid]));
	                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                            format(string, sizeof(string), "* %s ha comprado %d potes, se ha añadido $%d a tu bolsillo.",GetPlayerNameEx(playerid),SprayGram[playerid],SprayPrice[playerid]);
	                            SendClientMessageEx(SprayOffer[playerid], COLOR_LIGHTBLUE, string);
	                            Info[playerid][pSpraycan] += SprayGram[playerid];
								SprayOffer[playerid] = 999;
	                            SprayPrice[playerid] = 0;
	                            SprayGram[playerid] = 0;
	                            return 1;
	                        }
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto.");
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes pagar esa cantidad.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido sprays.");
	        }
			else if(strcmp(params, "arma", true) == 0) {

				new
					playerOffering = GetPVarInt(playerid,"gunID"),
					weaponOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"gun"),
					slotOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"slot"),
					wstring[128];

		   		if(weaponOffering != 0 && slotOffering != 0) {
					if(ProxDetectorS(6.0, playerid, playerOffering) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(playerOffering)) {
						if(Info[playerOffering][pEstado]!=0) {
							return SendClientMessage(playerid, COLOR_WHITE, "El jugador que quiere venderte está tazeado, esposado o congelado.");
						}
						else if(Info[playerid][pEstado]!=0) {
							return SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas tazeado, esposado o congelado.");
						}
						else {
							RemovePlayerWeapon(playerOffering, weaponOffering);
							GivePlayerValidWeapon(playerid, weaponOffering);
							format(wstring, sizeof(wstring), "Aceptas el %s de %s.", WeaponNames[weaponOffering], GetPlayerNameEx(playerOffering));
							SendClientMessage(playerid, COLOR_WHITE, wstring);
							format(wstring, sizeof(wstring), "%s aceptó tu %s que le ofreciste.", GetPlayerNameEx(playerid), WeaponNames[weaponOffering]);
							SendClientMessage(playerOffering, COLOR_WHITE, wstring);
							format(wstring, sizeof(wstring), "* %s le da su %s a %s.", GetPlayerNameEx(playerOffering), WeaponNames[weaponOffering], GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, wstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							DeletePVar(playerOffering,"gun");
							DeletePVar(playerid,"gunID");
							DeletePVar(playerOffering,"slot");
						}
			    	}
			    	else SendClientMessage(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Estás muy lejos de la persona o está en un vehículo.");
			    }
		    	else SendClientMessage(playerid, COLOR_WHITE, "Nadie te ha ofrecido un arma.");
			}
            else if(strcmp(params,"objeto",true) == 0)
			{
			    if(CraftOffer[playerid] < 999)
				{
					if(IsPlayerConnected(CraftOffer[playerid]))
					{
					    if (ProxDetectorS(5.0, playerid, CraftOffer[playerid]))
					    {
                        	new weaponname[50];
                        	format(weaponname, 50, "%s", CraftName[playerid]);
                        	switch(CraftId[playerid])
							{
								case 1:
								{
									Info[playerid][pScrewdriver]++;
									return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/creararma");
								}
								case 2:
								{
									Info[playerid][pSurveillance]++;
									return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/ponercam /quitarcam /vercam");
								}
								case 3:
								{
									Info[playerid][pFirstaid]++;
									return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/hpsave");
								}
								case 4:
								{
									return GivePlayerValidWeapon(playerid, 46);
								}
							}
                        	Info[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                        	Info[CraftOffer[playerid]][pArmsSkill]++;
                        	format(string, sizeof(string), "Le diste a %s una %s.", GetPlayerNameEx(playerid),weaponname);
                        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        	SendClientMessageEx(CraftOffer[playerid], COLOR_GRAD1, string);
                        	format(string, sizeof(string), "Recibiste una %s de %s.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                        	SendClientMessageEx(playerid, COLOR_GRAD1, string);
                        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        	format(string, sizeof(string), "* %s crea algo de materiales, y se lo da a %s.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                        	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	CraftOffer[playerid] = 999;
                        	CraftId[playerid] = 0;
                        	CraftMats[playerid] = 0;
					    }
                   		else return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de la persona para aceptar el objeto.");
					}
					return 1;
				}
				return 1;
			}
	        else if(strcmp(params,"testigo",true) == 0) {
	            if(MarryWitnessOffer[playerid] < 999) {
	                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
	                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])){
	                        format(string, sizeof(string), "* Aceptaste la solicitud de %s, para ser tu testigo de matrimonio.", GetPlayerNameEx(MarryWitnessOffer[playerid]));
	                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* %s aceptó tu solicitud para ser tu testigo de matrimonio.", GetPlayerNameEx(playerid));
	                        SendClientMessageEx(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
	                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
	                        MarryWitnessOffer[playerid] = 999;
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador que te ha pedido que seas su testigo de matrimonio no está cerca de ti.");
	                }
	                return 1;
    	        }
    	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te pidió ser testigo de matrimonio.");
    	    }
	        else if(strcmp(params,"divorcio",true) == 0){
	            if(DivorceOffer[playerid] < 999){
	                if(IsPlayerConnected(DivorceOffer[playerid])){
	                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])){
	                        format(string, sizeof(string), "* Firmaste los papeles del divorcio de %s, ahora estás solo(a) de nuevo.", GetPlayerNameEx(DivorceOffer[playerid]));
	                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* %s firmó los papeles del divorcio, ahora estás solo(a) de nuevo.", GetPlayerNameEx(playerid));
	                        SendClientMessageEx(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
	                        ClearMarriage(playerid);
	                        ClearMarriage(DivorceOffer[playerid]);
	                        Info[playerid][pPhousekey] = 999;
	                        return 1;
	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador que te propuso el divorcio no está cerca tuyo.");
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te propuso el divorcio.");
        	}
			else if(strcmp(params,"materiales",true) == 0){
	            if(MatsOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= MatsPrice[playerid]){
						if(IsPlayerConnected(MatsOffer[playerid])){
							if(Info[MatsOffer[playerid]][pMats] < MatsAmount[playerid]) return SendClientMessageEx(playerid,COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tiene los materiales suficientes.");

	         				format(string, sizeof(string), "* Compraste %d materiales por $%d, de  %s.", MatsAmount[playerid], MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]));
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s has vendido %d materiales, sumaste $%d a tu bolsillo.", GetPlayerNameEx(playerid), MatsAmount[playerid], MatsPrice[playerid]);
	                		SendClientMessageEx(MatsOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
							GivePlayerCash(playerid, -MatsPrice[playerid]);
	                    	Info[playerid][pMats] += MatsAmount[playerid];
	                    	Info[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

	                        new ip[32], ipex[32];
	                        GetPlayerIp(playerid, ip, sizeof(ip));
	                        GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
	                        format(string, sizeof(string), "[MATS DEAL] %s(IP:%s) pagó %d materiales de %s(IP:%s)", GetPlayerNameEx(playerid), ip, MatsAmount[playerid], GetPlayerNameEx(MatsOffer[playerid]), ipex);
	                        Log("LOGS/pay.log", string);

                            SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
	                    	MatsOffer[playerid] = 999;
	                    	MatsPrice[playerid] = 0;
	                    	MatsAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido materiales.");
			}
			else if(strcmp(params,"fichasvip",true) == 0){
	            if(FOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= FPrice[playerid]){
						if(IsPlayerConnected(FOffer[playerid])){
							if(Info[FOffer[playerid]][pVTokens] < FAmount[playerid]) return SendClientMessageEx(playerid,COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tiene las fichas suficientes.");

	         				format(string, sizeof(string), "* Compraste %d fichas VIP por $%d, de %s.", FAmount[playerid], FPrice[playerid], GetPlayerNameEx(FOffer[playerid]));
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s has vendido %d fichas VIP, ganaste $%d de dinero.", GetPlayerNameEx(playerid), FAmount[playerid], FPrice[playerid]);
	                		SendClientMessageEx(FOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(FOffer[playerid], FPrice[playerid]);
							GivePlayerCash(playerid, -FPrice[playerid]);
	                    	Info[playerid][pVTokens] += FAmount[playerid];
                            Info[FOffer[playerid]][pVTokens] -= FAmount[playerid];
	                    	FOffer[playerid] = 999;
	                    	FPrice[playerid] = 0;
	                    	FAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido fichas del Gold Gift.");
			}
			else if(strcmp(params,"vip",true) == 0){
	            if(VIPOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= VIPPrice[playerid]){
						if(IsPlayerConnected(VIPOffer[playerid])){
							if(Info[VIPOffer[playerid]][pVIP] == 0) return SendClientMessageEx(playerid,COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Ese usuario no es Premium.");
    			    		new viptype[10];
			   			 	switch(Info[VIPOffer[playerid]][pVIP])
			    			{
			        			case 1: viptype = "Bronce";
			        			case 2: viptype = "Silver";
			        			case 3: viptype = "Gold";
			        			case 4: viptype = "Platinum";
			    			}
							format(string, sizeof(string), "* Compraste el VIP %s de %s por $%d.",viptype,GetPlayerNameEx(VIPOffer[playerid]),VIPPrice[playerid]);
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s le has vendido tu VIP %s y ganaste $%d de dinero.",GetPlayerNameEx(playerid),viptype,VIPPrice[playerid]);
	                		SendClientMessageEx(VIPOffer[playerid], COLOR_LIGHTBLUE, string);
	                        new ip[32], ipex[32];
	                        GetPlayerIp(playerid, ip, sizeof(ip));
	                        GetPlayerIp(VIPOffer[playerid], ipex, sizeof(ipex));
	                        format(string, sizeof(string), "[VIP DEAL] %s(IP:%s) pagó VIP %s por $%d de %s(IP:%s)", GetPlayerNameEx(playerid), ip, viptype, VIPPrice[playerid],GetPlayerNameEx(VIPOffer[playerid]), ipex);
	                        Log("LOGS/pay.log", string);
              		        new year, month,day;
    						getdate(year, month, day);
	                        format(string, sizeof(string), "[[COMPRA IG] VIP EXCHANGE] %s dejo de ser VIP %s, razón: compra a %s (%d/%d/%d)",GetPlayerNameEx(VIPOffer[playerid]),viptype,GetPlayerNameEx(playerid),year,month,day);
	                        Log("LOGS/setvip.log", string);

							new level = Info[VIPOffer[playerid]][pVIP],
                				dExpire = Info[VIPOffer[playerid]][pVIPDateD],
                				mExpire = Info[VIPOffer[playerid]][pVIPDateM];

	                  		GivePlayerCash(VIPOffer[playerid], VIPPrice[playerid]);
							GivePlayerCash(playerid, -VIPPrice[playerid]);
							// buyer
	                    	Info[playerid][pVIP] = level;
	                    	Info[playerid][pVIPDateM] = mExpire;
	                    	Info[playerid][pVIPDateD] = dExpire;
	                    	Info[playerid][pBuddyInvited] = 0;
	                    	Info[playerid][pTempVIP] = 0;
	                    	// Offer
	                    	Info[VIPOffer[playerid]][pVIP] = 0;
	                    	Info[VIPOffer[playerid]][pVIPDateM] = -1;
	                    	Info[VIPOffer[playerid]][pVIPDateD] = -1;

	                    	VIPOffer[playerid] = 999;
	                    	VIPPrice[playerid] = 0;

	                    }
	                    else return SendClientMessageEx(playerid, COLOR_WHITE, "La persona que te ofreció se desconectó.");
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido fichas del Gold Gift.");
			}
			else if(strcmp(params,"fichasg",true) == 0){
	            if(GGOffer[playerid] < 999){
	                if(GetPlayerCash(playerid) >= GGPrice[playerid]){
						if(IsPlayerConnected(GGOffer[playerid])){
							if(Info[GGOffer[playerid]][pGTokens] < GGAmount[playerid]) return SendClientMessageEx(playerid,COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tiene las fichas suficientes.");

	         				format(string, sizeof(string), "* Compraste %d fichas del Gold Gift por $%d, de %s.", GGAmount[playerid], GGPrice[playerid], GetPlayerNameEx(GGOffer[playerid]));
	            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	              			format(string, sizeof(string), "* %s has vendido %d fichas del Gold Gift, ganaste $%d de dinero.", GetPlayerNameEx(playerid), GGAmount[playerid], GGPrice[playerid]);
	                		SendClientMessageEx(GGOffer[playerid], COLOR_LIGHTBLUE, string);

	                  		GivePlayerCash(GGOffer[playerid], GGPrice[playerid]);
							GivePlayerCash(playerid, -GGPrice[playerid]);
	                    	Info[playerid][pGTokens] += GGAmount[playerid];
                            Info[GGOffer[playerid]][pGTokens] -= GGAmount[playerid];
	                    	GGOffer[playerid] = 999;
	                    	GGPrice[playerid] = 0;
	                    	GGAmount[playerid] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero suficiente.");
				}
            	else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido fichas del Gold Gift.");
			}
        	else { return 1; }
    	}
   	 	return 1;
	}
    zcmd(cfumar, playerid, params[])
    {
    	if(Info[playerid][pCigarettes] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, 		"No tienes cigarros.");
	    else if(Info[playerid][pLighter] == 0) 	return SendClientMessageEx(playerid, COLOR_WHITE, 		"No tienes encendedor.");
	    else if(IsSmoking[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, 		"Ya estas fumando. Utiliza: /dfumar");
	    else
    	{
	        new randsmoke = random(6);
	        if(randsmoke < 5)
     	   {
				new string[128];
				Info[playerid][pCigarettes]--;
				IsSmoking[playerid] = 1;
	    		format(string, sizeof(string), "* %s saca un cigarro y lo enciende.", GetPlayerNameEx(playerid));
			    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
				SendClientMessageEx(playerid, COLOR_WHITE, "Estás Fumando. Ahora puedes utilizar {A2DC35}/dfumar{FFFFFF} para dejar de fumar.");
	        }
	        else
    	    {
    			SendClientMessageEx(playerid, COLOR_WHITE, "Mucho viento, no lograste encender el cigarro.");
	        }
	    }
	    return 1;
	}
    zcmd(dfumar, playerid, params[])
	{
        if(IsSmoking[playerid] > 0)
		{
            new string[128];
        	IsSmoking[playerid] = 0;
         	format(string, sizeof(string), "* %s tira el cigarro al suelo y lo pisa.", GetPlayerNameEx(playerid));
         	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
          	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
          	ClearAnimations(playerid);
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "No está fumando.");
        return 1;
    }
	//Toys
    zcmd(ctoys,playerid, params[])
    {
        if(IsPlayerInRangeOfPoint(playerid,5.0,802.5069,-1419.6813,1016.4688) || (playerid,5.0,2383.9473, 1112.8636, 34.3070))
        {
        	if(Info[playerid][pVIP] >= 3)
        	{
            	return SafeDialogEx(playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "{A2DC35}Tienda de Accesorios", "Bienvenido al dispensador de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás","Ok", "Salir");
        	}
        }
        if(IsAtClothShop(playerid))
        {
            SafeDialogEx(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "{A2DC35}Tienda de Accesorios", "Bienvenido a la tienda de accesorios! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás","Normal", "VIP");
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una tienda de Ropa.");
        return 1;
	}
    zcmd(ayudatoy,playerid, params[])
    {
        SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Accesorios (Toys)");
        SendClientMessageEx(playerid, COLOR_WHITE,"Para comprar un toy en la tienda usa: /ctoys");
        SendClientMessageEx(playerid, COLOR_WHITE,"Para ponerte y editar un toy usa: /toys");
        SendClientMessageEx(playerid, COLOR_WHITE,"Para ponerte todos tus toy usa: /ptoys");
        SendClientMessageEx(playerid, COLOR_WHITE,"Para quitarte todos tus toy usa: /qtoys");
        SendClientMessageEx(playerid, COLOR_WHITE,"Para poner o quitar un determinado toy usa: /toy (0-9 slot)");
        return 1;
    }
    zcmd(ayudatrabajo,playerid, params[])
    {
			switch(Info[playerid][pJob])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer de viajes", "{FFFFFF}\n/precioviaje - /rutabus - /miruta", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Pizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de droga", "{FFFFFF}/vendercrack /venderhierba /comprarcrack /comprarhierba\n/plantar /checkplanta /sacarplanta /robarcoche", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad /robarcoche", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/removergps /robarcoche", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bodyguard", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		        case 15: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Trenero", "{FFFFFF}/rutatren /trenduty", "Cerrar", "");
		        case 16: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Piloto", "{FFFFFF}/rutaavion /pilotoduty", "Cerrar", "");
		        default: SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un trabajo!");
		    }
        	return 1;
    }
    zcmd(ayudatrabajo2,playerid, params[])
    {
			switch(Info[playerid][pJob2])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer de viajes", "{FFFFFF}\n/precioviaje - /rutabus - /miruta", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Pizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de droga", "{FFFFFF}/vendercrack /venderhierba /comprarcrack /comprarhierba\n/plantar /checkplanta /sacarplanta /robarcoche", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad /robarcoche", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/removergps /robarcoche", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bodyguard", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		        case 15: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Trenero", "{FFFFFF}/rutatren /trenduty", "Cerrar", "");
		        case 16: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Piloto", "{FFFFFF}/rutaavion /pilotoduty", "Cerrar", "");
		        default: SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un trabajo!");
		    }
        	return 1;
    }
	CMD:ayudacajafam(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Caja Fuerte (Familia)");
		SendClientMessageEx(playerid, COLOR_WHITE, "C. Fuerte: /cfdepositar /cfretirar /fgarma /fsarma /cfbalance");
		return 1;
	}
	//CMD:ayuda(playerid, params[]) return SafeDialogEx(playerid, MENUAYUDA, DIALOG_STYLE_LIST, "{00F70C}Ayuda","General\nFacción\nChat\nLider\nTelefono\nCasa\nCoche\nBanco\nPremium\nMatrimonio\nArmas\nNegocios\nFamilia\nTrabajo\nAnimaciones\nNegocio", "Ok", "Cancelar");
    CMD:ayuda2(playerid, params[])
    {
    	for(new i = 0; i < 15; i++)
		{
			TextDrawShowForPlayer(playerid, AyudaT[i]);
		}
		SelectTextDraw(playerid, COLOR_GENERAL);
        return 1;
    }
    CMD:ayuda3(playerid, params[])
    {
    	for(new i = 0; i < 15; i++)
		{
			TextDrawHideForPlayer(playerid, AyudaT[i]);
		}
		//SelectTextDraw(playerid, COLOR_GENERAL);
        return 1;
    }
    CMD:ayuda(playerid, params[])
    {
    	for(new i = 0; i < 15; i++)
		{
			TextDrawShowForPlayer(playerid, AyudaX[i]);
		}
		SelectTextDraw(playerid, COLOR_LIGHTBLUE); // Color_General
        return 1;
    }
    CMD:salirayuda(playerid, params[])
    {
    	for(new i = 0; i < 15; i++)
		{
			TextDrawHideForPlayer(playerid, AyudaX[i]);
		}
		CancelSelectTextDraw(playerid);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "[Información] Has salido del menú de Ayuda, recuerda usar /ayuda - /soporte para ver los comandos.");
        return 1;
    }
	CMD:hduty(playerid, params[])
	{
    if(Heladero_Vehicle(playerid) || Info[playerid][pJob] == 14  || Info[playerid][pJob2] == 14)
	{
        if(OnDuty[playerid] == 1)
		{
 			new string[128];
			format(string, sizeof(string), "**[Heladero] Heladero/a %s está fuera de servicio",GetPlayerNameEx(playerid));
			BroadCast(COLOR_LIGHTBLUE, string);
		    SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora estás fuera servicio, ya no recibirás llamadas.");
            OnDuty[playerid] = 0;

        }
        else
		{
			new string[128];

			format(string, sizeof(string), "**[Heladero] Heladero/a %s está en las Calles Vendiendo Helados",GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			BroadCast(COLOR_LIGHTBLUE, string);
			SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
            OnDuty[playerid] = 1;

        }
    }
    else
	{

        SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres Heladero");
    }
    return 1;
	}
	CMD:admincasa(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000)
	    {
	    	SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Comandos Administrativos Casa.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/gotohouse - /goinhouse - /casasiguiente - /editar - /editarcasa - /hname - /staffvcasa (Venta)");
			SendClientMessageEx(playerid, COLOR_WHITE, "[Nuevo sistema de casas BETA]: /crearcasa - /borrarcasa - /ircasa - /avecasa (Venta) - /editarh");
   		}
		return 1;
	}
	CMD:adminnegocio(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000)
	    {
	    	SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Comandos Administrativos Negocios.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/crearnegocio - /borrarnegocio - /movernegocio [Exterior] - /interiornegocio [Interior]- /staffvnegocio [ID] - /binfo");
			SendClientMessageEx(playerid, COLOR_WHITE, "/editarnegocio [Opción] - /irnegocio - /negociosiguiente - /negocioname [Nombre del Negocio] - /bname [ID] [Nombre_Apellido]");
   		}
		return 1;
	}
	CMD:admingarage(playerid, params[])
	{
    	if(Info[playerid][pAdminZC] >= 4000)
    	{
    		SendClientMessageEx(playerid, COLOR_GENERAL,"Ayuda - Comandos Administrativos Garages.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/creargarage - /gprecio - /avegarage /agaragename");
	    	SendClientMessageEx(playerid, COLOR_WHITE, "/movergarage - /gotogarage - /gtipo - /gnivel");
		}
		return 1;
	}
	CMD:adminporton(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000)
	    {
	    	SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Comandos Administrativos Portones.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/crearporton - /borrarporton - /testearporton -  /editarporton [Fam-Fac-Vel-For] - /irporton - /portonsiguiente");
			SendClientMessageEx(playerid, COLOR_WHITE, "[Avanzado]: /editarpos (Edición Inicial ) - /editarposex (Edició Final) - /pobj [ID] [ObjectID] ");
   		}
		return 1;
	}
	CMD:adminactor(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000)
	    {
	    	SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Comandos Administrativos Actores.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/crearactor - /borraractor - /iractor - /editaractor - /actorsiguiente.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/actorname - /animaractor - /crearactortemp (Crea un Actor temporal, desaparece al reiniciar el servidor).");
   		}
		return 1;
	}
    CMD:adminfacciones(playerid, params[])
	{
		return cmd_adminfac(playerid, params);
	}
CMD:gotogarage(playerid, params[])
{
if(Info[playerid][pAdminZC] >= 4000)
{
	new garageID;
	if(sscanf(params, "d", garageID)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gotogarage [garageid]");

	SetPlayerPos(playerid,GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2]);
	SetPlayerInterior(playerid, 0);
	Info[playerid][pInt] = 0;
}
return 1;
}
CMD:gtipo(playerid, params[])
{
    if(Info[playerid][pAdminZC] >= 4000)
	{
        new garageID,gCType;
        new strings[280];
		if(sscanf(params, "dd", garageID, gCType))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USA: /gtipo [garageid] [tipo]");
            SendClientMessageEx(playerid, COLOR_GREY, "Pequeño 1, Mediano 2, Grande 3.");
			return 1;
		}
		GaragesVariables[garageID][gType] = gCType;
		format(strings, sizeof(strings), "Cambiaste el tipo del garage ID %d al tipo %d.", garageID, gCType);
		SendClientMessageEx(playerid, COLOR_WHITE, strings);
		if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
		{
			switch(GaragesVariables[garageID][gLocked])
			{
				case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
				case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
			}
		}
		else
		{
			switch(GaragesVariables[garageID][gLocked])
			{
				case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
				garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
				case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
				garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
			}
		}
		UpdateDynamic3DTextLabelText(GaragesVariables[garageID][gLabelID], -1, strings);
		SaveVarGarages(1,garageID, "Tipo",GaragesVariables[garageID][gType]);
	}
	//else NoAutorizado
	return 1;
}
CMD:agaragename(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 4000)
	{
	    new strings[280], x, gname[32];
		if(sscanf(params, "ds[24]", x, gname)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /agaragenme (ID) (Nombre del Garage)");
	    if(strlen(gname) >= 33 || strlen(gname) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Muchos carácteres sólo 1 - 32.");
	    format(strings, sizeof(strings), "Cambiaste el nombre del garage ID %d garage a '%s'.",x, gname);
	    SendClientMessageEx(playerid, COLOR_WHITE, strings);
		format(GaragesVariables[x][gName], 32, gname);
	    switch(GaragesVariables[x][gLocked])
		{
			case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
			x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
			case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
			x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
		}
		UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, strings);
		saveGarages(x);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto.");
	return 1;
}
CMD:gprecio(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 4000)
	{
	    new garageID,garagePrice;
	    new strings[280];
		if(sscanf(params, "dd", garageID, garagePrice))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /gprecio [garageid] [precio]");
		}
		else // Garages Icono
		{
		    if(garageID < 1 || garageID > MAX_GARAGES){return SendClientMessageEx(playerid, COLOR_GREY, "* ID de garage inválido.");}
		    else
			{
				format(strings, sizeof(strings), "Cambiaste el precio del garage ID %d a $%d.", garageID, garagePrice);
				SendClientMessageEx(playerid, COLOR_WHITE, strings);
				GaragesVariables[garageID][gPrice] = garagePrice;
				if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
				{
					switch(GaragesVariables[garageID][gLocked])
					{
						case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
						case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
					}
				}
				else
				{
					switch(GaragesVariables[garageID][gLocked])
					{
					    case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
						case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
					}
				}
				UpdateDynamic3DTextLabelText(GaragesVariables[garageID][gLabelID], -1, strings);
                SaveVarGarages(1,garageID, "Precio",GaragesVariables[garageID][gPrice]);
			}
		}
	}
	//else NoAutorizado
	return 1;
}
CMD:gnivel(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 4000)
	{
	    new garageID,garageLevel;
	    new strings[280];
		if(sscanf(params, "dd", garageID, garageLevel))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /gnivel [garageid] [precio]");
		}
		else // Garages Icono
		{
		    if(garageID < 1 || garageID > MAX_GARAGES){return SendClientMessageEx(playerid, COLOR_GREY, "* ID de garage inválido.");}
		    else
			{
				format(strings, sizeof(strings), "Cambiaste el nivel del garage ID %d a %d.", garageID, garageLevel);
				SendClientMessageEx(playerid, COLOR_WHITE, strings);
				GaragesVariables[garageID][gLevel] = garageLevel;
				if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
				{
					switch(GaragesVariables[garageID][gLocked])
					{
						case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
						case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
					}
				}
				else
				{
					switch(GaragesVariables[garageID][gLocked])
					{
					    case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
						case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
					}
				}
				UpdateDynamic3DTextLabelText(GaragesVariables[garageID][gLabelID], -1, strings);
                SaveVarGarages(1,garageID, "Nivel",GaragesVariables[garageID][gLevel]);
			}
		}
	}
	//else NoAutorizado
	return 1;
}
CMD:abrirporton(playerid, params[])
{
    //#pragma unused params
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    new x = getPlayerGaragesID(playerid);
	    new strings[280];
	    switch(GaragesVariables[x][gLocked])
		{
			case 0: return SendClientMessageEx(playerid, COLOR_WHITE, "Usa /cerrarporton.");
			case 1:
			{
				format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
				x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
                UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, strings);
				GaragesVariables[x][gLocked] = 0;
			    SendClientMessageEx(playerid, COLOR_WHITE, "El porton del garage fue abierto.");
			    SaveVarGarages(1,x, "Locked",GaragesVariables[x][gLocked]);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un garage para hacer esto.");
	return 1;
}
CMD:cerrarporton(playerid, params[])
{
    //#pragma unused params
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    new x = getPlayerGaragesID(playerid);
	    new strings[280];
	    switch(GaragesVariables[x][gLocked])
		{
			case 0:
			{
				format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
				x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
                UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, strings);
				GaragesVariables[x][gLocked] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "El porton del garage fue cerrado.");
				SaveVarGarages(1,x, "Locked",GaragesVariables[x][gLocked]);
			}
			case 1: return SendClientMessageEx(playerid, COLOR_WHITE, "Usa /abrirporton.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un garage para hacer esto.");
	return 1;
}
CMD:movergarage(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 4000)
	{
	    new garageID, subject[32];
		if(sscanf(params, "ds[32]", garageID, subject))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USA: /movergarage [ID de Garage] [exterior/interior]");
		}
		else
		{
		    if(garageID < 1 || garageID > MAX_GARAGES) return SendClientMessage(playerid, COLOR_GREY, "* ID de garage invalida.");
            if(strcmp(subject, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2]);
                GetPlayerFacingAngle(playerid, GaragesVariables[garageID][gExteriorPos][3]);
				DestroyDynamic3DTextLabel(GaragesVariables[garageID][gLabelID]);
			    DestroyDynamicPickup(GaragesVariables[garageID][gPickupID]);
				if(!strcmp("Sin Dueño", GaragesVariables[garageID][gOwner]))
				{
				    new labelString[256];
				    switch(GaragesVariables[garageID][gLocked])
				    {
				        case 1: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
				        case 0: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
				    }
				    GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
					GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
				}
				else
				{
				    new labelString[256];
				    switch(GaragesVariables[garageID][gLocked])
				    {
					    case 1: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
						case 0: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
						garageID, TipoGarage(garageID), GaragesVariables[garageID][gName], GaragesVariables[garageID][gOwner], GaragesVariables[garageID][gLevel]);
				    }

				    GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
					GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19523, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
				}
				SendClientMessage(playerid, COLOR_WHITE, "El exterior del garage ha sido cambiado.");
			}
			else if(strcmp(subject, "interior", true) == 0)
			{
			    GetPlayerFacingAngle(playerid, GaragesVariables[garageID][gInteriorPos][3]);
			    GetPlayerPos(playerid, GaragesVariables[garageID][gInteriorPos][0], GaragesVariables[garageID][gInteriorPos][1], GaragesVariables[garageID][gInteriorPos][2]);
			    GaragesVariables[garageID][gInterior] = GetPlayerInterior(playerid);
			    SendClientMessage(playerid, COLOR_WHITE, "El interior del garage ha sido cambiado.");
			}
			saveGarages(garageID);
		}
	}

	return 1;
}
CMD:nombregarage(playerid, params[])
{
	if(getPlayerGaragesID(playerid) >= 1)
	{
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /nombregarage [Nombre]");
	    if(strlen(params) >= 33 || strlen(params) < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Muchos carácteres sólo 1 - 32.");
	    new x = getPlayerGaragesID(playerid);
	    new strings[280];
	    format(strings, sizeof(strings), "Cambiaste el nombre de tu garage a '%s'.", params);
	    SendClientMessageEx(playerid, COLOR_WHITE, strings);
		format(GaragesVariables[x][gName], 32, params);
	    switch(GaragesVariables[x][gLocked])
		{
			case 1: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]",
			x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
			case 0: format(strings, sizeof(strings), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.",
			x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
		}
		UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, strings);
		saveGarages(x);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un negocio para hacer esto.");
	return 1;
}
CMD:vendergarage(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
	    new garageID = getPlayerGaragesID(playerid);
	    if(garageID < 1) return 1;
	    new labelString[256];
		GivePlayerCash(playerid, GaragesVariables[garageID][gPrice]/2);
		Tax -= GaragesVariables[garageID][gPrice]/2;
        format(GaragesVariables[garageID][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
        format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
        DestroyDynamicPickup(GaragesVariables[garageID][gPickupID]);
        DestroyDynamic3DTextLabel(GaragesVariables[garageID][gLabelID]);
		GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
		GaragesVariables[garageID][gLocked] = 1;
		format(labelString, sizeof(labelString), "Garage Vendido! El estado te pagó %d por tu garage.", GaragesVariables[garageID][gPrice]/2);
		SendClientMessageEx(playerid, COLOR_WHITE, labelString);
		saveGarages(garageID);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No conectado");
	return 1;
}
CMD:avegarage(playerid, params[])
{
    if(Info[playerid][pAdminZC] >= 4000)
	{
        new garageID = strval(params);
		if(!isnull(params))
		{
		    if(garageID < 1 || garageID > MAX_GARAGES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de garage inválido.");
	        new labelString[256];
	        format(GaragesVariables[garageID][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
	        DestroyDynamicPickup(GaragesVariables[garageID][gPickupID]);
	        DestroyDynamic3DTextLabel(GaragesVariables[garageID][gLabelID]);
			format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.", garageID, TipoGarage(garageID), GaragesVariables[garageID][gPrice], GaragesVariables[garageID][gLevel]);
			GaragesVariables[garageID][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			GaragesVariables[garageID][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[garageID][gExteriorPos][0], GaragesVariables[garageID][gExteriorPos][1], GaragesVariables[garageID][gExteriorPos][2], 0, 0, -1, 250);
			GaragesVariables[garageID][gLocked] = 1;
			format(labelString, sizeof(labelString), "* Vendiste con comando administrativo el garage ID %d.", garageID);
			SendClientMessageEx(playerid, COLOR_WHITE, labelString);
		    saveGarages(garageID);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /avegarage [garageid]");
    }
    return 1;
}
CMD:creargarage(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No conectado.");
    if(Info[playerid][pAdminZC] >= 4000)
	{
    	new Float: floatPos[3];

		if(!strcmp(params, "exterior", true))
		{
	        GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);
            SetPVarFloat(playerid, "pBeX", floatPos[0]);
            SetPVarFloat(playerid, "pBeY", floatPos[1]);
            SetPVarFloat(playerid, "pBeZ", floatPos[2]);
            SetPVarInt(playerid, "gExt", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* Exterior de garage configurado.");
		}
        else if(!strcmp(params, "interior", true))
		{
        	GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);

            SetPVarFloat(playerid, "pBiX", floatPos[0]);
            SetPVarFloat(playerid, "pBiY", floatPos[1]);
            SetPVarFloat(playerid, "pBiZ", floatPos[2]);
			SetPVarInt(playerid, "pBiID", GetPlayerInterior(playerid));
            SetPVarInt(playerid, "gInt", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* Interior de garage configurado.");
		}
        else if(!strcmp(params, "completar", true))
		{
        	if(GetPVarInt(playerid, "gExt") != 1 || GetPVarInt(playerid, "gInt") != 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Todavia no has configurado el interior/exterior del garage.");
		    new i,labelString[256];
			for(new x = 1; x < MAX_GARAGES; x++)
			{
			    if(GaragesVariables[x][gType] == 0)
			    {
			        i = x;
			        printf("ID LIBRE %d",x);
			        break;
				}
			}
			if(GaragesVariables[i][gType] == 0)
			{
				GaragesVariables[i][gExteriorPos][0] = GetPVarFloat(playerid, "pBeX");
			    GaragesVariables[i][gExteriorPos][1] = GetPVarFloat(playerid, "pBeY");
			    GaragesVariables[i][gExteriorPos][2] = GetPVarFloat(playerid, "pBeZ");

			    GaragesVariables[i][gInteriorPos][0] = GetPVarFloat(playerid, "pBiX");
			    GaragesVariables[i][gInteriorPos][1] = GetPVarFloat(playerid, "pBiY");
			    GaragesVariables[i][gInteriorPos][2] = GetPVarFloat(playerid, "pBiZ");

			    GaragesVariables[i][gInterior] = GetPVarInt(playerid, "pBiID");

 		        format(GaragesVariables[i][gOwner], MAX_PLAYER_NAME, "Sin Dueño");
 		        format(GaragesVariables[i][gName], 32, "Nombre del Garage");

 		        GaragesVariables[i][gLocked] = 1;
 		        GaragesVariables[i][gPrice] = 50000;
 		        GaragesVariables[i][gLevel] = 5;

		        format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprarlo, usa /comprargarage.",
				i, TipoGarage(i), GaragesVariables[i][gPrice], GaragesVariables[i][gLevel]);

		        GaragesVariables[i][gLabelID] = CreateDynamic3DTextLabel(labelString, -1, GaragesVariables[i][gExteriorPos][0], GaragesVariables[i][gExteriorPos][1], GaragesVariables[i][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				GaragesVariables[i][gPickupID] = CreateDynamicPickup(19524, 23, GaragesVariables[i][gExteriorPos][0], GaragesVariables[i][gExteriorPos][1], GaragesVariables[i][gExteriorPos][2], 0, 0, -1, 250);

				saveGarages(i);

			    DeletePVar(playerid, "pBeX");
			    DeletePVar(playerid, "pBeY");
			    DeletePVar(playerid, "pBeZ");
			    DeletePVar(playerid, "pBiX");
			    DeletePVar(playerid, "pBeY");
			    DeletePVar(playerid, "pBeZ");
			    DeletePVar(playerid, "pBiID");

			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, GaragesVariables[i][gExteriorPos][0], GaragesVariables[i][gExteriorPos][1], GaragesVariables[i][gExteriorPos][2]);
		        return SendClientMessageEx(playerid, COLOR_WHITE, "* Garage creado!");

			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ya no hay slots disponibles para crear garages.");

		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /creargarage [interior/exterior/completar]");
	}
	//else NoAutorizado
	return 1;
}
CMD:comprargarage(playerid, params[])
{
    //#pragma unused params
    if(IsPlayerConnected(playerid))
	{
        for(new x = 0; x < MAX_GARAGES; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]))
			{
				if(!strcmp(GaragesVariables[x][gOwner], "Sin Dueño", true))
				{
				    if(GaragesVariables[x][gPrice] <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "[Error] Este negocio ha sido bloqueado por un administrador.");
					if(getPlayerGaragesID(playerid) >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "[Error] Ya eres dueño de un negocio.");
					if(Info[playerid][pLevel] < GaragesVariables[x][gLevel])
					{
					    new string[128];
                    	format(string, sizeof(string), "Tú necesitas ser nivel {FF0000}%d{FFFFFF} para comprar este garage.", GaragesVariables[x][gLevel]);
                    	SendClientMessageEx(playerid, COLOR_WHITE, string);
                    	return 1;
                	}
					if(GetPlayerCash(playerid) >= GaragesVariables[x][gPrice])
					{
						GivePlayerCash(playerid,-GaragesVariables[x][gPrice]);
						Tax += GaragesVariables[x][gPrice];
						new labelString[256];
						new Nombre[MAX_PLAYER_NAME];
		   				GetPlayerName(playerid, Nombre, sizeof(Nombre));
						strcpy(GaragesVariables[x][gOwner], Nombre, MAX_PLAYER_NAME);
						DestroyDynamicPickup(GaragesVariables[x][gPickupID]);
						switch(GaragesVariables[x][gLocked])
						{
						    case 1: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FF0000}[Garaje Cerrado]", x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
							case 0: format(labelString, sizeof(labelString), "[ID: %d]\n{A4A4A4}Garaje tipo: {FFFFFF}%s\n%s\n{A4A4A4}Propietario: {FFFFFF}%s\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para entrar con el vehículo, usa /entrar.", x, TipoGarage(x), GaragesVariables[x][gName], GaragesVariables[x][gOwner], GaragesVariables[x][gLevel]);
						}
						UpdateDynamic3DTextLabelText(GaragesVariables[x][gLabelID], -1, labelString);
						GaragesVariables[x][gPickupID] = CreateDynamicPickup(19523, 23, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2], 0, 0, -1, 250);
						SendClientMessageEx(playerid, COLOR_GREY, "* Felicitaciones por tu compra!");
						saveGarages(x);
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para comprar este garage.");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes comprar un garage con dueño.");
			}
		}
    }
	return 1;
	}
	CMD:crearcamara(playerid, params[])
	{
		if(Info[playerid][pAdminZC] < 4000) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
		new ID, string[180];
		if(sscanf(params, "d", ID)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearcamara [SpeedCam ID]");
		if(ID < 0 || ID > MAX_vCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de cámara inválida! (0 - 20)");
		if(vCameraInfo[ID][vCameraLimit] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID ya está siendo utilizada.");
		new Float:x,Float:y,Float:z,Float:angle;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,angle);
		angle = angle + 180;
		if(angle > 360){angle = angle - 360;}
		CreateSpeedCam(ID,x,y,z-2,angle,1,100,0);
		SetPlayerPos(playerid,x+2,y+2,z);
		SendClientMessageEx(playerid, COLOR_GREY, "[INFO]: {FFFFFF}Cámara creada exitósamente, usa /editarcamara para editar su rango, lÍmite y multa.");
		format(string, sizeof(string), "[AdmCmd]: %s ha creado un nuevo radar de velocidad [CAM ID: %d].", GetPlayerNameEx(playerid),ID);
		ABroadCast(COLOR_ORANGE, string, 2);
		return 1;
	}
	CMD:editarcamara(playerid, params[])
	{
		if(Info[playerid][pAdminZC] < 4000) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
		new ID,opcion[32];
		if(sscanf(params, "ds[32]", ID,opcion))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /editarcamara [Radar/SpeedCam ID] [Opción: Rango, Limite, Estado, Multa]");
		}
		if(ID < 0 || ID > MAX_vCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de cámara inválida! (0 - 20)");
		if(vCameraInfo[ID][vCameraLimit] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes editar está cámara, primero créala.");
	    if(strcmp(opcion, "rango", true) == 0)
	    {
	        ShowPlayerDialog(playerid,D_SPEEDCAMRANGE,DIALOG_STYLE_INPUT,"Editar Cámara","Escribe el rango que medirá la velocidad de lo coches.\n\nMin: 5 -- Max: 30","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
	    }
	    else if(strcmp(opcion, "limite", true) == 0)
	    {
			ShowPlayerDialog(playerid,D_SPEEDCAMLIMIT,DIALOG_STYLE_INPUT,"Editar Cámara","Escribe el límite de la velocidad que podrán pasar los coches.\n\nMin: 10 -- Max: 250","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
	    }
	    else if(strcmp(opcion, "estado", true) == 0)
	    {
			ShowPlayerDialog(playerid,D_SPEEDCAMSTATUS,DIALOG_STYLE_LIST,"Editar Cámara - Selecciona","Activar Cámara\nDesactivar Cámara","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
	    }
		else if(strcmp(opcion, "multa", true) == 0)
		{
			ShowPlayerDialog(playerid,D_SPEEDCAMFINE,DIALOG_STYLE_INPUT,"Editar Cámara","Escribe la multa que dará al pasarse el máximo de velocidad.\n\nMin: 100 -- Max: 15000","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
		}
		return 1;
	}
	CMD:borrarcamara(playerid, params[])
	{
		if(Info[playerid][pAdminZC] > 4000)
		{
			new ID;
			if(sscanf(params, "d", ID)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borrarcamara [SpeedCam ID]");
			if(ID < 0 || ID > MAX_vCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de radar inválida! (0 - 20)");
			if(vCameraInfo[ID][vCameraLimit] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID ya no está siendo utilizada.");
			DeleteSpeedCam(ID);
			SendClientMessageEx(playerid, COLOR_GREY, "SpeedCam ha sido borrada satisfactoriamente.");
		}
		return 1;
	}
	CMD:ajustarcamara(playerid, params[])
	{
 		if(Info[playerid][pAdminZC] >= 4000)
		{
			new Float: pos[4], ID;
			if(sscanf(params, "dffff",ID, pos[0], pos[1], pos[2], pos[3])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustarcamara [ID Radar/Cam] (coordenada x) (coordenada y) (coordenada z) (Rotación 90, 180)");
			DestroyDynamicObject(vCameraInfo[ID][vCameraObject]);
			DestroyDynamic3DTextLabel(vCameraInfo[ID][vCameraLabel]);
			SendClientMessageEx(playerid, COLOR_GRAD2, "{1DF5F7}[INFRANET]{FFFFFF} Has ajustado las coordenadas del objeto.");
			new text_info[80];
			vCameraInfo[ID][vCameraPos][0] = pos[0];
			vCameraInfo[ID][vCameraPos][1] = pos[1];
			vCameraInfo[ID][vCameraPos][2] = pos[2];
			vCameraInfo[ID][vCameraRot] = pos[3];
			vCameraInfo[ID][vCameraObject] = CreateDynamicObject(18880, vCameraInfo[ID][vCameraPos][0],vCameraInfo[ID][vCameraPos][1],vCameraInfo[ID][vCameraPos][2],0,0,vCameraInfo[ID][vCameraRot]);
			switch(vCameraInfo[ID][vCameraStatus])
			{
	    		case 0: format(text_info, sizeof(text_info), "{007AFF}[RADAR %d]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}%d{81DAF5} KM/H", ID,vCameraInfo[ID][vCameraLimit]);
				case 1: format(text_info, sizeof(text_info), "{DF0101}[RADAR %d DESCONECTADO]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}0{81DAF5} KM/H", ID);
			}
			vCameraInfo[ID][vCameraLabel] = CreateDynamic3DTextLabel(text_info,-1,vCameraInfo[ID][vCameraPos][0],vCameraInfo[ID][vCameraPos][1],vCameraInfo[ID][vCameraPos][2]+8,50.0);
			saveSpeedCam();
		}
		return 1;
	}
	CMD:gotocamara(playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new ID;
			if(sscanf(params, "d", ID)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gotocamara [Radar/Camara ID]");
			if(ID < 0 || ID > MAX_vCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de cámara inválida! (0 - 20)");
			if(vCameraInfo[ID][vCameraLimit] <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID no existe.");
			SetPlayerPos(playerid,vCameraInfo[ID][vCameraPos][0]+2,vCameraInfo[ID][vCameraPos][1]+2,vCameraInfo[ID][vCameraPos][2]+2);
			SetPlayerInterior(playerid, 0); Info[playerid][pInt] = 0; // Interior siempre 0.
		}
		return 1;
	}
	CMD:adminradar(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000)
	    {
	    	SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Comandos Administrativos para Radares.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/crearcamara [ID del Radar/Cam] - /ajustarcamara [X] [Y] [Z] (Coordenadas)");
			SendClientMessageEx(playerid, COLOR_WHITE, "/editarcamara [ID del Radar/Cam] [Opción: Limite, Estado, Multa]");
			SendClientMessageEx(playerid, COLOR_WHITE, "/borarcamara [ID del Radar/Cam] - /gotocamara [ID del Radar/Cam].");
   		}
		return 1;
	}
	CMD:adminfam(playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if(Info[playerid][pAdminZC] >= 4000 || Info[playerid][pGangModerator] == 1)
	    {
	    	SendClientMessageEx(playerid, COLOR_GENERAL,"{A2DC35}Ayuda - Comandos Administrativos Familia.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/fameditor /editarhqfam /familias /festado /fdepositar /fretirar /fgarma /fsarma");
			SendClientMessageEx(playerid, COLOR_WHITE, "/cfdepositar /cjretirar /ajustar /famrango /anombrerango /crearfam /msjfacc /msjfam");
			SendClientMessageEx(playerid, COLOR_WHITE, "/borrarfam /crearautofam /borrarautofam /darliderfam /fseguro /fllaves");
   		}
		return 1;
	}
	CMD:adminfac(playerid, params[])
	{
    	if(Info[playerid][pAdminZC] >= 10 || Info[playerid][pFactionModerator] == 1)
    	{
    		SendClientMessageEx(playerid, COLOR_GENERAL,"Ayuda - Comandos Administrativos Facciones.");
			SendClientMessageEx(playerid, COLOR_WHITE, "/facc - /statusfacc - /verfam - /facciones - /darlider - /darmiembro - /moverf (Almacén de Materiales)"); // - /vercontrato - /editarc (Tiempo Contrato) ELIMINADOS.
	    	SendClientMessageEx(playerid, COLOR_WHITE, "/qfaccoff - /editarf (Líderes y nombre) - /editarm (Armas /equipo) - /editarp (Editar pagas) - /irf [ID]");
		}
		return 1;
	}
    zcmd(toys,playerid, params[])
    {
	    SafeDialogEx( playerid, TOYS, DIALOG_STYLE_LIST, "{00F70C}Toy Menu", "Poner/Quitar un toy\nEditar un toy\nEliminar un toy","OK", "Cancelar" );
	    return 1;
    }
    zcmd(ptoys,playerid, params[])
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste todos los toys.");
	    for(new x;x<MAX_PLAYERTOYS;x++)
	    {
		    if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ],
			PlayerToyInfo[playerid][x][ftscaleX], PlayerToyInfo[playerid][x][ftscaleY], PlayerToyInfo[playerid][x][ftscaleZ]);
	    }
	    return 1;
    }
    zcmd(qtoys,playerid, params[])
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "Te quitaste todos los toys.");
	    for(new x;x<MAX_PLAYERTOYS;x++)
	    {
		    RemovePlayerAttachedObject(playerid, x);
        }
        return 1;
    }
    zcmd(sentadilla,playerid,params[])
	{
    	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		AplicaAnim(playerid,"SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
		}
		return 1;
	}
    // Nombre Temporal Admin
	CMD:adminnombre(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarminombre (Nuevo Nombre)");
		if (Info[playerid][pAdminZC] >= 3)
		{
			if(GetPVarInt(playerid, "TempName") == 0)
			{
				if(!INI_Exist(params))
				{
				    format(string, sizeof(string), "[AdmCmdExe]: %s está temporalmente con el nombre de %s.",GetPlayerNameEx(playerid), params);
				    ABroadCast(COLOR_GENERAL, string, 2);
					format(string, sizeof(string), "Estás temporalmente con el nombre de {5ABAFF}%s{FFFFFF}.", params);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[NOTA]:{FFFFFF} No se guardarán ningún stat con este nombre.");
					SetPVarInt(playerid, "TempName", 1);
					new name[MAX_PLAYER_NAME];
					GetPlayerName(playerid, name, sizeof(name));
					SetPVarString(playerid, "TempNameName", name);
					SetPlayerName(playerid, params);
					format(string, sizeof(string), "%s ha cambiado su nombre a {5ABAFF}%s{FFFFFF}.", name, params);
					Log("LOGS/changename.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "Este nombre ya está registrado.");
			}
			else
			{
				new name[MAX_PLAYER_NAME];
				format(string, sizeof(string), "[AdmCmdExe]: %s volvió a usar su nombre anterior.",GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GENERAL, string, 2);
				GetPVarString(playerid, "TempNameName", name, sizeof(name));
				format(string, sizeof(string), "Tu nombre a sido cambiado al anterior: {5ABAFF}%s{FFFFFF}.", name);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[NOTA]:{FFFFFF} Ahora tus stats se guardarán.");
				SetPVarInt(playerid, "TempName", 0);
				SetPlayerName(playerid, name);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ahora.");
		return 1;
	}
	 zcmd(borrarcuenta, playerid, params[]){
		new string3[32], string[128], name[32];
   	    if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
   	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty{FFFFFF} para usar este comando.");
   	    if(!sscanf(params, "s[32]", name)){
			format(string3,sizeof(string3),"CUENTAS/%s.ini",name);
			if(fexist(string3)){
				fremove(string3);
				format(string, sizeof(string), "%s ha reseteado la cuenta de %s. (Stats: 0).",GetPlayerNameEx(playerid), name);
				ABroadCast(COLOR_GENERAL, string, 2);
			} else Message(playerid, COLOR_GRAD2, "¡Esa cuenta no existe!");
		} else Message(playerid, COLOR_GRAD2, "Utilize: /borrarcuenta <Nombre_Jugador>");
    	return 1;
   	}
   	/*zcmd(borrargraffiti, playerid, params[])
	{
    if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
    foreach(Player, i)
    {
        for(new Graffiti = 0; Graffiti < MAX_PLAYERS_TAGS; Graffiti++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, SprayTags[i][Graffiti][_spPosX], SprayTags[i][Graffiti][_spPosY], SprayTags[i][Graffiti][_spPosZ]))
            {
                Tags_Clear(i, Graffiti);
            }
        }
    }
	return 1;
	}*/
	CMD:graffiti(playerid, params[])
	{
    	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} No puedes usar este CMD. (No Conectado)");
    	if(Info[playerid][pBlockG] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} No puedes usar este CMD. (Bloqueado)");
    	if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} No puedes usar este CMD. (Jail OOC)");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} No puedes usar este CMD. (Paitball OOC)");
	 	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} No puedes usar este CMD. (Estás Herido)");
    	if(!IsAGang(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"[INFO]:{FFFFFF}Comando disponible solo para pandillas.");
    	if(PlazaAyuntamiento(playerid))  return SendClientMessageEx(playerid, COLOR_GREY, "¡No puedes pintar graffitis aquí, estás en una zona muy transitada!");
    	if(GetPlayerWeapon(playerid) == 41)
    	{
    		if(Info[playerid][pRank] >= 3)
    		{
        		SprayTag_Dialog(playerid, TYPE_LIST_MENU);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} No dispones del rango suficiente para realizar Graffitis. (Rango 4)");
		}
        else SendClientMessageEx(playerid, COLOR_GREY, "[Aviso]:{FFFFFF} Necesitas tener un Bote de Spray lito para hacer esto.");
		return 1;
	}
	//Canales
	zcmd(togac, playerid, params[]){
        if(Info[playerid][pAdminZC] >= 2){
            if(!AdminChat[playerid]){
		        AdminChat[playerid] = 1;
		        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Canal de administración desactivado.");
		    }
		    else{
		        AdminChat[playerid] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Canal de administración activado.");
		    }
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
    }
   	zcmd(togmuertes, playerid, params[]){
        if(Info[playerid][pAdminZC] >= 2){
            if(!AdminChatAvisos[playerid]){
		        AdminChatAvisos[playerid] = 1;
		        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Desactivaste los avisos de muertes/avisos.");
		    }
		    else{
		        AdminChatAvisos[playerid] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Activaste el canal de muertes/avisos.");
		    }
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
    }
	zcmd(togpm, playerid, params[]){
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
		if (!HidePM[playerid]){
			HidePM[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ADM]:{FFFFFF} PMs Bloqueados.");
		}
		else if (HidePM[playerid]){
			HidePM[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ADM]:{FFFFFF} PMs Habilitados.");
		}
        return 1;
    }
    zcmd(togfam, playerid, params[]){
        if(!gFam[playerid]){
			gFam[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Chat de Facción desactivado.");
		}
		else{
			gFam[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Chat de Facción activado.");
		}
        return 1;
    }
    zcmd(togreligion, playerid, params[]){
        if(!gRel[playerid]){
			gRel[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Chat de la religión desactivado.");
		}
		else{
			gRel[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Chat de la religión activada.");
		}
        return 1;
    }
    zcmd(tognews, playerid, params[]){
        if(!gNews[playerid]){
			gNews[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Chat de radio y anuncios desactivado.");
		}
		else{
			gNews[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Chat de radio y anuncios activado.");
		}
        return 1;
    }
    zcmd(togmusic, playerid, params[]){
        if(!gMusic[playerid]){
			gMusic[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Canal de eventos y música desactivado.");
		}
		else{
			gMusic[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Canal de eventos y música activado.");
		}
        return 1;
    }
	zcmd(togphone, playerid, params[]){
        if (!PhoneOnline[playerid]){
			PhoneOnline[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Teléfono apagado.");
		}
		else{
			PhoneOnline[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Teléfono encendido.");
		}
        return 1;
    }
	zcmd(tognewbie, playerid, params[]){
		if (!gOoc[playerid]){
			gOoc[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Desactivaste el chat de ayuda.");
		}
		else{
			gOoc[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Activaste el chat de ayuda.");
		}
		return 1;
	}
    zcmd(removegps, playerid, params[]){
		if(IsPlayerConnected(playerid)) DisablePlayerCheckpoint(playerid);
		return 1;
	}
    zcmd(saltartutorial, playerid, params[]){
        if(TutStep[playerid] > 0){
    		TutTime[playerid] = 13;
   			Tutorial_Inside(playerid);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No estás en el tutorial.");
		return 1;
	}
 	zcmd(notutorial, playerid, params[])
 	{
 		if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
 		new string[128], giveplayerid;
 		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /notutorial (ID/Jugador) - Sacarle del tutorial.");
        if(IsPlayerConnected(giveplayerid))
		{
			if(TutStep[giveplayerid] > 0)
			{
    			TutTime[giveplayerid] = 14;
   				Tutorial_Inside(giveplayerid);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "Un administrador te sacó del tutorial, tu progreso ha sido guardado.");
 				format(string, sizeof(string), "[/notutorial]: El administrador %s ha sacado del tutorial a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
	 			ABroadCast(COLOR_ORANGE, string, 2);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No estás en el tutorial.");
		return 1;
	}
	/*
	CMD:mandarls(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarls (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 1337) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			format(string, sizeof(string), " Enviaste a Los Santos a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, " Fuiste llevado a Los Santos por un Administrador.");
 			format(string, sizeof(string), "[AdmCmd]: %s ha mandado %s a Los Santos.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
	 		ABroadCast(COLOR_ORANGE, string, 2);
			SetPlayerPos(giveplayerid, 1529.6, -1705.5, 13.4);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}*/
    zcmd(jetpack, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if (Info[playerid][pAdminZC] < 6) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(IsPlayerConnected(playerid))
        {
        	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
        	JetPack[playerid] = 1;
		 	SendClientMessageEx(playerid, COLOR_GRAD2, "Jetpack2");
        }
		return 1;
    }
	zcmd(eject, playerid, params[])
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new State = GetPlayerState(playerid), string[90], giveplayerid;
            if(State!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres conductor.");
            if(!sscanf(params, "d", giveplayerid))
            {
                if(IsPlayerConnected(giveplayerid))
				{
    				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No te puedes echar ati mismo.");
        			if(IsPlayerInAnyVehicle(giveplayerid))
			        {
						if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(giveplayerid))
						{
	      					format(string, sizeof(string), "* %s agarra fuertemente a %s y lo expulsa del vehículo", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    	    RemovePlayerFromVehicle(giveplayerid);
						} else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} El jugador no está en tu vehículo.");
					} else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} El jugador no está en un vehículo.");
				} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "*Utiliza: /eject (ID)");
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en ningún vehículo!");
        return 1;
    }
    // Other's
    zcmd(tlc, playerid, params[])
    {
        if(Team_LSPD(playerid))
        {
        	if(pdtrace == 0 || pdtrace_x == 0 || pdtrace_y == 0 || pdtrace_z == 0)
         	{
                SendClientMessageEx(playerid, 0xFF8080FF, " >** Estableciendo contacto**<");
	            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[GPS]:{FFFFFF} Servicio no Disponible.");
	        }
	        else SendClientMessageEx(playerid, COLOR_WHITE, "Error en la localizacion de la persona que llama.");
		}
	    else if(Team_SAMD(playerid))
        {
        	if(emdtrace == 0 || emdtrace_x == 0 || emdtrace_y == 0 || emdtrace_z == 0)
         	{
	            SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[GPS]:{FFFFFF} Servicio no Disponible.");
	        } else SendClientMessageEx(playerid, COLOR_WHITE, "Error al localizar!");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
	zcmd(entrar, playerid, params[])
	{
	    if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
	    if(IsPlayerConnected(playerid))
		{
		    for(new i = 0; i < sizeof(DDoorsInfo); i++)
			{
	        	if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
				{
	            	if(DDoorsInfo[i][ddVIP] > 0 && Info[playerid][pVIP] < DDoorsInfo[i][ddVIP])
					{
	                	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar necesitas ser un mayor nivel de VIP.");
	                	return 1;
	            	}
	            	if(DDoorsInfo[i][ddFamily] > 0)
					{
	                	if(Info[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1)
						{
	                    	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, sólo para miembros de la familia.");
	    					return 1;
	    				}
	   	            }
		            if(DDoorsInfo[i][ddFaction] > 0)
					{
						if(DDoorsInfo[i][ddFaction] >= 1 && DDoorsInfo[i][ddFaction] <= 3)
						{
							if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, esta puerta está restringida. (Sólo Policías)");
						}
						else if(DDoorsInfo[i][ddFaction] < 32 && Info[playerid][pMember] != DDoorsInfo[i][ddFaction])
						{
							return	SendClientMessageEx(playerid, COLOR_WHITE, "Sólo ingreso a miembros de la facción.");
						}
		            }
		            if(DDoorsInfo[i][ddAdmin] > 0 && Info[playerid][pAdminZC] < DDoorsInfo[i][ddAdmin])
					{
		                return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, necesitas ser de más nivel administrativo.");
		            }

		            if(DDoorsInfo[i][ddWanted] > 0 && Info[playerid][pWantedLevel] != 0)
					{
		                return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta esta restringida a personas con nivel de búsqueda.");
		            }

					if(DDoorsInfo[i][dLocked] == 1)
					{
					    return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta está bloqueada.");
					}
            		SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            		Info[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            		Info[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            		SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            		if(DDoorsInfo[i][ddCustomInterior])
					{
            		   LoadObjects(playerid);
            		}
            		if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
					    // Posición.
            	    	SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            	    	SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
            	    	// Vehículo.
            	    	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
            	    	LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
            	    	// Player.
            	    	SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            	    	SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            		}
            		else
					{
                		SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                		SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                		SetCameraBehindPlayer(playerid);
            		}
            		if(DDoorsInfo[i][dMusic] == 0) return 1;
            		else
            		{
            		    switch(DDoorsInfo[i][dMusic])
            		    {
            		        case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349", 1, 1, 1, 1, 0); // Reggeaton
                            case 2: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=860870", 1, 1, 1, 1, 0); // Electro
                            case 3: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 1, 1, 1, 1, 0); // Techno
                            case 4: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016", 1, 1, 1, 1, 0); // Hip hop
                            case 5: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366", 1, 1, 1, 1, 0); // Variada
                        }
                    }
					return 1;
        		}
		    }
		    for(new p = 0; p < MAX_PROPIEDADES; p++)
			{
    			if (IsPlayerInRangeOfPoint(playerid,3,ProInfo[p][hExteriorX], ProInfo[p][hExteriorY], ProInfo[p][hExteriorZ]))
				{
				    if(ProInfo[p][hExteriorX] == 0.0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Esta casa no tiene interior, no ha sido ajustada todavía.");
						return 1; // Casa sin Interior.
					}
        			if(Info[playerid][pPhousekeyX] == p || ProInfo[p][hLock] == 0 || Info[playerid][pRenting] == p)
					{
			        	LoadObjects(playerid);
            			SetPlayerInterior(playerid,ProInfo[p][hHInteriorWorld]);
            			Info[playerid][pInt] = ProInfo[p][hHInteriorWorld];
            			Info[playerid][pVW] = p;
            			SetPlayerVirtualWorld(playerid, p);
            			if(ProInfo[p][hCustomInterior] == 1)
						{
                			LoadObjects(playerid);
            			}
            			SetPlayerPos(playerid,ProInfo[p][hInteriorX],ProInfo[p][hInteriorY],ProInfo[p][hInteriorZ]);
            			SetPlayerFacingAngle(playerid,ProInfo[p][hInteriorA]);
            			SetCameraBehindPlayer(playerid);
            			GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
						Streamer_UpdateEx(playerid, ProInfo[p][hInteriorX],ProInfo[p][hInteriorY],ProInfo[p][hInteriorZ]);
        			}
        			else GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
        			return 1;
        		}
    		}
    		for(new x = 0; x < MAX_NEGOCIOS; x++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]))
				{
					if(NegociosVariables[x][bLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "Este local esta cerrado.");
					if(NegociosVariables[x][bInteriorPos][0] == 0.0) return SendClientMessage(playerid, COLOR_GREY, "Este local no tiene interior.");
					businessTypeMessages(x, playerid);
					new negocio_string[128];
					if(strlen(NegociosVariables[x][bInfo]) >= 8)
					{
						format(negocio_string, sizeof(negocio_string), "[Mensaje al Cliente]: %s", NegociosVariables[x][bInfo]);
						SendClientMessage(playerid, COLOR_GREY, negocio_string);
					}
					SetPlayerPos(playerid, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2]);
					SetPlayerInterior(playerid, NegociosVariables[x][bInterior]);
					SetPlayerVirtualWorld(playerid, x);
					LoadObjects(playerid);
					return 1;
				}
			}
		    for(new x = 0; x < MAX_GARAGES; x++)
			{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]))
			{
        		if(GaragesVariables[x][gLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "Este garage esta cerrado.");
        		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
				{
            		SetVehiclePos(GetPlayerVehicleID(playerid),  GaragesVariables[x][gInteriorPos][0], GaragesVariables[x][gInteriorPos][1], GaragesVariables[x][gInteriorPos][2]);
            		SetVehicleZAngle(GetPlayerVehicleID(playerid), GaragesVariables[x][gInteriorPos][3]);
            		SetPlayerVirtualWorld(playerid, x);
            		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), x);
            		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GaragesVariables[x][gInterior]);
            		SetPlayerVirtualWorld(playerid, x);
            		SetPlayerInterior(playerid, GaragesVariables[x][gInterior]);
					Streamer_Update(playerid);
					LoadObjects(playerid);
            	}
            	else
				{
					SetPlayerPos(playerid, GaragesVariables[x][gInteriorPos][0], GaragesVariables[x][gInteriorPos][1], GaragesVariables[x][gInteriorPos][2]);
					SetPlayerInterior(playerid, GaragesVariables[x][gInterior]);
					SetPlayerVirtualWorld(playerid, x);
					LoadObjects(playerid);
				}
				return 1;
			}
			}
		    for(new i = 0; i < sizeof(fINFO); i++)
			{
        		if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyEntrance][0], fINFO[i][FamilyEntrance][1], fINFO[i][FamilyEntrance][2]))
				{
    				LoadObjects(playerid);
	            	SetPlayerInterior(playerid,fINFO[i][FamilyInterior]);
            		Info[playerid][pInt] = fINFO[i][FamilyInterior];
            		Info[playerid][pVW] = fINFO[i][FamilyVirtualWorld];
            		SetPlayerVirtualWorld(playerid, fINFO[i][FamilyVirtualWorld]);
            		if(fINFO[i][FamilyCustomMap])
					{
                		LoadObjects(playerid);
            		}
            		Streamer_UpdateEx(playerid, fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
            		SetPlayerPos(playerid,fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
            		SetPlayerFacingAngle(playerid,fINFO[i][FamilyExit][3]);
        	    	return 1;
        		}
			}
			if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
			{
            	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                	SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
                	Streamer_Update(playerid);
                }
                else{
					SetPlayerPos(playerid, 2235.1851,-1763.5916,2032.9728);
					SetPlayerFacingAngle(playerid, 14.9);
					SetCameraBehindPlayer(playerid);
					LoadObjects(playerid);
				}
				return 1;
			}
			if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
			{

            	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                	SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
                	Streamer_Update(playerid);
                }
                else{
					SetPlayerPos(playerid, 1134.0381,-1591.4459,6602.5879);
					SetPlayerFacingAngle(playerid, 14.9);
					SetCameraBehindPlayer(playerid);
					LoadObjects(playerid);
				}
				return 1;
			}
			if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
			{

				if(Info[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 2000, 4);
            	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
                	SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid),  NORTE);
                	Streamer_Update(playerid);
                }
                else{
					SetPlayerPos(playerid, 855.6053,-1412.6117,4202.1577);
					SetPlayerFacingAngle(playerid, NORTE);
					SetCameraBehindPlayer(playerid);
					LoadObjects(playerid);
				}
				return 1;
			}
		    for(new i = 0; i < sizeof(HouseInfo); i++){
        		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])){
            		if(Info[playerid][pPhousekey] == i || Info[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i){
				        LoadObjects(playerid);
                		SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                		Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                		Info[playerid][pVW] = i+6000;
                		SetPlayerVirtualWorld(playerid, i+6000);
                		if(HouseInfo[i][hCustomInterior] == 1){
                    		LoadObjects(playerid);
                		}
                		SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                		SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                		SetCameraBehindPlayer(playerid);
                		GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
						Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            		}
            		else
					{
                		GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
            		}
            		return 1;
            	}
        	}
    	}
		return 1;
	}
	zcmd(salir, playerid, params[])
	{
	    if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ahora.");
	    if(GetPVarInt(playerid, "IsInArena") == 1) {
	        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la arena!");
	        return 1;
	    }
	    if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
    	for(new i = 0; i <  sizeof(DDoorsInfo); i++)
		{
        	if (IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
			{
            	SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            	Info[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            	SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            	Info[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            	if(DDoorsInfo[i][ddCustomExterior])
				{
					LoadObjects(playerid);
            	}
            	if(DDoorsInfo[i][dMusic] != 0) StopAudioStreamForPlayer(playerid);
            	if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
				    // Posición.
                	SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                	SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                	// Vehículo.
                	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                	LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                	// Player.
           	    	SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
           	    	SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            	}
            	else
				{
                	SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                	SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                	SetCameraBehindPlayer(playerid);
                	return 1;
            	}
        	}
    	}
    	for(new p = 0; p < MAX_PROPIEDADES; p++)
		{
        	if (IsPlayerInRangeOfPoint(playerid,3,ProInfo[p][hInteriorX], ProInfo[p][hInteriorY], ProInfo[p][hInteriorZ]) && Info[playerid][pVW] == p)
			{
				SetPlayerInterior(playerid,0);
            	Info[playerid][pInt] = 0;
            	if(ProInfo[p][hCustomExterior] == 1)
				{
					LoadObjects(playerid);
				}
            	SetPlayerPos(playerid,ProInfo[p][hExteriorX],ProInfo[p][hExteriorY],ProInfo[p][hExteriorZ]);
            	SetPlayerFacingAngle(playerid, ProInfo[p][hExteriorA]);
            	SetCameraBehindPlayer(playerid);
            	SetPlayerVirtualWorld(playerid, 0);
            	Info[playerid][pVW] = 0;
            	return Streamer_UpdateEx(playerid, ProInfo[p][hExteriorX],ProInfo[p][hExteriorY],ProInfo[p][hExteriorZ]);
        	}
    	}
		for(new x = 0; x < MAX_NEGOCIOS; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == x) // Coordenadas X, Y, Z además estar en VW negocio.
			{
				SetPlayerPos(playerid, NegociosVariables[x][bExteriorPos][0], NegociosVariables[x][bExteriorPos][1], NegociosVariables[x][bExteriorPos][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
				if(GetPlayerInterior(playerid) != 0) LoadObjects(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.0, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2]))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Estás bugeado en este interior, reporta este error a un administrador."); return 1;
			}
		}
    	for(new x = 0; x < MAX_GARAGES; x++)
		{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, GaragesVariables[x][gInteriorPos][0], GaragesVariables[x][gInteriorPos][1], GaragesVariables[x][gInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == x)
		{
        	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			{
            	SetVehiclePos(GetPlayerVehicleID(playerid), GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid), GaragesVariables[x][gExteriorPos][3]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
				SetPlayerVirtualWorld(playerid, 0);
  				LinkVehicleToInterior(GetPlayerVehicleID(playerid), 0);
  				SetPlayerInterior(playerid, 0);
				Streamer_Update(playerid);
				LoadObjects(playerid);
            }
            else
			{
				SetPlayerPos(playerid, GaragesVariables[x][gExteriorPos][0], GaragesVariables[x][gExteriorPos][1], GaragesVariables[x][gExteriorPos][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				if(GetPlayerInterior(playerid) != 0) LoadObjects(playerid);
			}
			return 1;
		}
		}
    	for(new i = 0; i < sizeof(fINFO); i++)
		{
        	if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyExit][0], fINFO[i][FamilyExit][1], fINFO[i][FamilyExit][2]) && Info[playerid][pVW] == fINFO[i][FamilyVirtualWorld]) {
            	Info[playerid][pInt] = 0;
            	SetPlayerVirtualWorld(playerid, 0);
            	SetPlayerInterior(playerid,0);
            	Streamer_UpdateEx(playerid, fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
            	SetPlayerPos(playerid,fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
            	SetPlayerFacingAngle(playerid,fINFO[i][FamilyEntrance][3]);
            	return 1;
        	}
    	}
		if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
		{
           	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
               	SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
               	SetVehicleZAngle(GetPlayerVehicleID(playerid),  179.93);
               	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 2280.5620,-1722.8878,13.5469);
				SetPlayerFacingAngle(playerid, 181);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
		{
           	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
               	SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
               	SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
               	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 1241.9020,-1734.0985,13.5899);
				SetPlayerFacingAngle(playerid, 354.9746);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
		{
           	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
               	SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
               	SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
               	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 853.3862,-1387.1884,13.7470);
				SetPlayerFacingAngle(playerid, 182.4513);
				SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
	    for(new i = 0; i <  sizeof(HouseInfo); i++)
		{
	        if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && Info[playerid][pVW] == i+6000)
			{
				SetPlayerInterior(playerid,0);
	            Info[playerid][pInt] = 0;
	            if(HouseInfo[i][hCustomExterior])
				{
	                LoadObjects(i);
	            }
	            SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
	            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
	            SetCameraBehindPlayer(playerid);
	            SetPlayerVirtualWorld(playerid, 0);
	            Info[playerid][pVW] = 0;
	            return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
	        }
	    }
    	return 1;
    }
	CMD:ip(playerid, params[]){
		if(Info[playerid][pAdminZC] >= 5){
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ip (ip)");

			new string[128], IP[32];

			foreach(Player, i){
				GetPlayerIp(i, IP, sizeof(IP));
				if(strfind(IP, params, true) != -1){
					format(string, sizeof(string),
					 "Player: %s (ID: %d) | IP: %s",
					  GetPlayerNameEx(i),
					  i,
					  IP);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}

		return 1;
	}
	zcmd(radio, playerid, params[])
	{
        if(OnDuty[playerid] == 0 && !Team_Judicial(playerid) && !Team_SAMD(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, " No estás en servicio.");
        if(!RadioOn[playerid])
		{
			RadioOn[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Prendiste tu radio");
		}
		else
		{
			RadioOn[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Apagaste tu radio");
		}
        return 1;
    }
    zcmd(saemduty, playerid, params[])
    {
    if(Team_SAEM(playerid)){
		if(OnDuty[playerid] == 1){
			OnDuty[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora serás visto como fuera de servicio.");
		}
		else{
			OnDuty[playerid] = 1;
			SetPlayerColor(playerid, COLOR_NG);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora serás visto como en servicio.");
		}
	}
	return 1;
}
	zcmd(gobduty, playerid, params[])
	{
        if(Gobierno(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    SetPlayerColor(playerid, TEAM_GOBIERNO_COLOR);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estas en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora ya no estas en servicio.");
      		}
		}
        else SendClientMessageEx(playerid, -1, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
   	zcmd(secduty, playerid, params[])
	{
        if(Team_SAMD(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    SetPlayerColor(playerid, TEAM_MED_COLOR);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estas en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora ya no estas en servicio. Puedes usar /bomduty para bomberos.");
      		}
		}
        else SendClientMessageEx(playerid, -1, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
   	zcmd(sjduty, playerid, params[])
	{
        if(Team_Judicial(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    SetPlayerColor(playerid, TEAM_SISTEMAJUDICIAL_COLOR);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estas en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SetPlayerToTeamColor(playerid);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estaras como fuera de servicio.");
      		}
		}
        else SendClientMessageEx(playerid, -1, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(bomduty, playerid, params[])
	{
        if(Team_SAMD(playerid))
		{
            if(OnDuty[playerid]== 0)
			{
  				OnDuty[playerid] = 1;
      		    SetPlayerColor(playerid, TEAM_BOMBEROS_COLOR);
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estas en servicio.");
      		}
      		else
			{
        		OnDuty[playerid] = 0;
        		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora ya no estas en servicio.");
      		}
		}
        else SendClientMessageEx(playerid, -1, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(frecuencia, playerid, params[])
	{
		new string[128], frequency;
		if(sscanf(params, "d", frequency))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /frecuencia [frecuencia]");
			SendClientMessageEx(playerid, COLOR_WHITE, "* Ajusta la frecuencia de tu radio - 0 Si no quieres oir nada.");
			return 1;
		}
        if(frequency > 9999999 || frequency < -9999999) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Frecuencia no debe ser menor a -9999999 y mayor 9999999."); return 1; }
		if (Info[playerid][pRadio] == 1)
		{
			Info[playerid][pRadioFreq] = frequency;
			format(string, sizeof(string), "Ajustaste la frecuencia de tu radio portable a %d khz.",frequency);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
        else SendClientMessageEx(playerid, COLOR_WHITE, "No tiene una Radio Portable.");
        return 1;
    }
    zcmd(pr, playerid, params[]){
		if(Info[playerid][pRadio] == 1){
            if(Info[playerid][pRadioFreq] >= 1 || Info[playerid][pRadioFreq] <= -1){
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /pr - /wa - /wt (Char Radio Portátil)");
				if(GetPVarInt(playerid, "Injured") != 0||Info[playerid][pEstado] !=0) return SendClientMessageEx (playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar esto ahora.");
				RadioBroadCast(playerid, COLOR_GREY, params);
            }
            else SendClientMessageEx(playerid, COLOR_WHITE, "* Primero ajusta la frecuencia. /frecuencia'");
        }
        else SendClientMessageEx(playerid, COLOR_WHITE, "* Primero necesitas tener una radio portatil, comprala en el 24/7");
        return 1;
    }
   	CMD:wa(playerid, params[]) {return cmd_pr(playerid, params);}
	CMD:wt(playerid, params[]) {return cmd_pr(playerid, params);}
	////// Walkie Talkie.
	zcmd(togpr, playerid, params[])
	{
		if(Info[playerid][pRadio] == 1)
		{
 			if (gRadio[playerid] == 0)
   			{
   		    	new string[128];
     			gRadio[playerid] = 1;
       			format(string,sizeof(string),"Has prendido tu radio portátil, y está sincronizada a %d khz.",Info[playerid][pRadioFreq]);
	        	SendClientMessageEx(playerid,COLOR_WHITE,string);
	    	}
	    	else
	    	{
     			gRadio[playerid] = 0;
       			SendClientMessageEx(playerid,COLOR_WHITE,"Has apagado su radio portátil.");
	    	}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una Radio portátil.");
  		return 1;
	}
	zcmd(f, playerid, params[])
	{
	    if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
	    if(nofac == 1 && Info[playerid][pLeader] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "El Chat de faccion esta bloqueado");
        if(!isnull(params))
	    {
            new string[128];
			if (Info[playerid][pLeader] > 0 || Info[playerid][pMember] > 0 || Info[playerid][pFMember] < 255)
			{
			    new member = Info[playerid][pMember];
			    new fam = Info[playerid][pFMember];
			    if(member==1)//SAPD
			    {
			        if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Comandante %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Inspector %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Teniente %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sargento %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Oficial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Cadete %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Cadete %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==2)//FBI
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sub-Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Agente Especializado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Agente Especial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Agente Superior %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Agente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
			    else if(member==3)//SAEM
			    {
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Coronel %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mayor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Capitan %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sargento %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Soldado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Cabo %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Cadete %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
			    else if(member==4)//SAMD
			    {
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Jefe de Departamento %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Supervisor %s: %s )) **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Bombero %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Paramédico %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Médico %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Práctico %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==5) //LSTV
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Presentador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Enviado Especial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Periodista %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Redactor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Becario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Becario %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==6)//Crazy Motors
			    {
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Supervisor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Ingeniero %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Mecánico %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Trucker %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Ayudante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Ayudante %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==7) //Gobierno
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Presidente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice-Presidente %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Ministro %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Alcalde %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Secretario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Staff %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Ministro %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==8) //Hitman
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice-Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Agente Especial %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Sicario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==9) //S Judicial
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director G. %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Asociado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Juez %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Fiscal %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Secretario %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( abogado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==10) //Groove
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
                 else if(member==11) //Ballas
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				 else if(member==12) //Latin Kings
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==13) //Sur 13
				{
				    if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Rey del Barrio %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vato del Rey %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Real Vato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Vigilante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Cholo %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Rata %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
			    else if(member==14) //Mafia Rusa
				{
				    if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Lider %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Escolta %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
                else if(member==15) //LCN
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Don %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Sottocapo %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Consigliere %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Capo %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Soldato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Asociatto %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
    			else if(member==16) //Yakuza
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Oyabun %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Zamestitel %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Saiko Komon %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Senpai Kohai %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Wakashu %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Kyodai %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Kyodai %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==17) //CDG
			    {
			        if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Extorsionador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Tráficante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Driver %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
                    else { format(string, sizeof(string), "** (( Aprendiz %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
			    }
				else if(member==18) //Santana/Donakov.
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Don %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Mano Derecha %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Hombre De Confianza %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Hombre De Honor %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==19) //Terroristas
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( General %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Soldado %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Piloto %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Terrorista %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Buscador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Principiante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( Novato %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
				else if(member==20) // Bomberos LS - Ahora CDG.
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** (( Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** (( Vice Director %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** (( Extorsionador %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** (( Tráficante %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** (( Driver %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** (( Aprendiz %s: %s ))  **", GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (( CDG %s: %s )) **", GetPlayerNameEx(playerid), params); }
					SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
				}
	            if(Info[playerid][pFMember] < 255)
				{
					if(Info[playerid][pRank] == 6) { format(string, sizeof(string), "{04FFFF}** %s %s: %s **", fINFO[fam][FamilyRank6], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 5) { format(string, sizeof(string), "** %s %s: %s **", fINFO[fam][FamilyRank5], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 4) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank4], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 3) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank3], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 2) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank2], GetPlayerNameEx(playerid), params); }
					else if(Info[playerid][pRank] == 1) { format(string, sizeof(string), "** %s %s: %s  **", fINFO[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
					else { format(string, sizeof(string), "** (0) %s %s: %s **", fINFO[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
					SendNewFamilyMessage(Info[playerid][pFMember], TEAM_AZTECAS_COLOR, string);
				}
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una facción.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /f (texto)");
		return 1;
	}
	zcmd(d, playerid, params[])
	{
	new string[256], rank[64], div[16];
	if(RadioOn[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu radio está apagada.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /d (radio chat)");
	if(Info[playerid][pRank] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (2).");
	    switch (Info[playerid][pMember])
	    {
	        case 1: // LSPD.
	        {
                switch(Info[playerid][pRank])
                {
				case 1: rank = "Cadete";
				case 2: rank = "Oficial";
				case 3: rank = "Sargento";
				case 4: rank = "Teniente";
				case 5: rank = "Inspector";
				case 6: rank = "Comandante";
				default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
				case 2: div = " (DIVCRI)";
				case 3: div = " (DIVOES)";
				case 4: div = " (DIVANDRO)";
				case 5: div = " (SWAT)";
				case 6: div = " (DGT)";
				default: div = "";
				}
				format(string, sizeof(string), "** [SAPD] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 2: // FBI.
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Agente";
					case 2: rank = "Agente Superior";
					case 3: rank = "Agente Especial";
					case 4: rank = "Criminalista";
					case 5: rank = "Sub/Director";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
 				switch(Info[playerid][pDivision])
				{
					case 2: div = " (OS)";
					case 3: div = " (UCO)";
					case 4: div = " (UI)";
					case 5: div = " (UAE)";
					default: div = "";
				}
                format(string, sizeof(string), "** [FBI] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
            case 3: // SAEM.
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Soldado";
					case 2: rank = "Cabo";
					case 3: rank = "Sargento";
					case 4: rank = "Capitán";
					case 5: rank = "Mayor";
					case 6: rank = "Coronel";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (FASA)";
					case 3: div = " (EMSA)";
					case 4: div = " (BO)";
					case 5: div = " (FMSA)";
					default: div = "";
				}
                format(string, sizeof(string), "** [SAEM] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 4: // S.E.C.
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Médico";
					case 2: rank = "Paramédico";
					case 3: rank = "Bombero";
					case 4: rank = "Supervisor";
					case 5: rank = "Jefe de Departamento";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** [SEC] %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			}
			case 7: // Gobierno.
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Staff";
					case 2: rank = "Secretario";
					case 3: rank = "Alcalde";
					case 4: rank = "Ministro de";
					case 5: rank = "Vice-Presidente";
					case 6: rank = "Presidente";
					default: rank = "[Error]";
				}
  				switch(Info[playerid][pDivision])
				{
					case 2: div = " (Chofer)";
					case 3: div = " (UG)";
					case 4: div = " Defensa";
					case 5: div = " Justicia";
					case 6: div = " Economía";
					default: div = "";
				}
				format(string, sizeof(string), "** [GOB] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			case 9: // Poder Judicial.
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Abogado";
					case 2: rank = "Secretario";
					case 3: rank = "Fiscal";
					case 4: rank = "Juez";
					case 5: rank = "Asociado";
					case 6: rank = "Director General";
					default: rank = "Abogado";
				}
				format(string, sizeof(string), "** [S.JUD] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}
			/*case 17: // Hackers de ALEPH.
	        {
                switch(Info[playerid][pRank])
                {
					case 1: rank = "Agente";
			    	case 2: rank = "Agente Secreto";
			    	case 3: rank = "Espia";
			    	case 4: rank = "Detective";
			    	case 5: rank = "Sub Director";
			    	case 6: rank = "Director";
					default: rank = "Agente";
				}
				switch(Info[playerid][pDivision])
				{
					case 1: div = "General";
			    	case 2: div = "UC";
			    	case 3: div = "DIVFO";
			    	case 4: div = "DIVAT";
			    	default: div = "";
				}
				format(string, sizeof(string), "** [CIA] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}*/
			/*case 19: // Hackers Terroristas.
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "R1";
				    case 2: rank = "R2";
				    case 3: rank = "R3";
				    case 4: rank = "R4";
				    case 5: rank = "R5";
				    case 6: rank = "R6";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** [CDG] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			}*/
			default:
			{
				SendClientMessageEx(playerid,COLOR_GRAD2,"{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
				return 1;
			}
		}
		for(new i = 1; i < 5; i++)
		{
		    SendRadioMessage(i, COLOR_ALLDEPT, string);
		}
		SendRadioMessage(7, COLOR_ALLDEPT, string);
		SendRadioMessage(9, COLOR_ALLDEPT, string);
		SendRadioMessage(20, COLOR_ALLDEPT, string); // ALEPH.
		SendRadioMessage(19, COLOR_ALLDEPT, string); // Al Qaeda.
		format(string, sizeof(string), "(radio) %s",params);
	    SetPlayerChatBubble(playerid,string,COLOR_WHITE,2.0,2000);
	    return 1;
	}
	zcmd(dooc, playerid, params[])
	{
	new string[256], rank[64];
	if(Info[playerid][pLeader] == 0 || Info[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "Canal exclusivo para los lideres y rangos altos de facciones legales.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dooc (Canal OOC)");
	    switch (Info[playerid][pMember])
	    {
	        case 1:
	        {
                switch(Info[playerid][pRank])
                {
				case 1: rank = "Cadete";
				case 2: rank = "Oficial";
				case 3: rank = "Sargento";
				case 4: rank = "Teniente";
				case 5: rank = "Inspector";
				case 6: rank = "Comandante";
				default: rank = "[Error]";
				}
				format(string, sizeof(string), "** (( [OOC] (LSPD) %s %s: %s )) **", rank, GetPlayerNameEx(playerid), params);
			}
			case 2:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Agente";
					case 2: rank = "Agente Superior";
					case 3: rank = "Agente Especial";
					case 4: rank = "Criminalista";
					case 5: rank = "Sub/Director";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
                format(string, sizeof(string), "** (( [OOC] (FBI) %s %s: %s )) **", rank, GetPlayerNameEx(playerid), params);
			}
            case 3:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Soldado";
					case 2: rank = "Cabo";
					case 3: rank = "Sargento";
					case 4: rank = "Capitán";
					case 5: rank = "Mayor";
					case 6: rank = "Coronel";
					default: rank = "[Error]";
				}
                format(string, sizeof(string), "** (( [OOC] (SAEM) %s %s: %s )) **", rank, GetPlayerNameEx(playerid), params);
			}
			case 4:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Médico";
					case 2: rank = "Paramédico";
					case 3: rank = "Bombero";
					case 4: rank = "Supervisor";
					case 5: rank = "Jefe de Departamento";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** (( [OOC] (S.E.C) %s %s: %s )) **", rank, GetPlayerNameEx(playerid), params);
			}
			case 7:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Staff";
					case 2: rank = "Secretario";
					case 3: rank = "Alcalde";
					case 4: rank = "Ministro de";
					case 5: rank = "Vice-Presidente";
					case 6: rank = "Presidente";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** (( [OOC] (GOB) %s %s: %s )) **", rank, GetPlayerNameEx(playerid), params);
			}
			default:
			{
				SendClientMessageEx(playerid,COLOR_GRAD2,"{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
				return 1;
			}
		}
		SendRadioMessage(1, COLOR_ALLDEPTOOC, string); // LSPD
		SendRadioMessage(2, COLOR_ALLDEPTOOC, string); // FBI
		SendRadioMessage(3, COLOR_ALLDEPTOOC, string); // SAEM
		SendRadioMessage(4, COLOR_ALLDEPTOOC, string); //LSMC
		SendRadioMessage(20, COLOR_ALLDEPTOOC, string); // Gobierno
		SendRadioMessage(19, COLOR_ALLDEPTOOC, string); // S. Judicial
		format(string, sizeof(string), "(DOOC) %s",params);
	    SetPlayerChatBubble(playerid,string,COLOR_WHITE,1.0,5000);
	    return 1;
	}
	zcmd(r, playerid, params[])
	{
	new string[128], rank[64], div[16];
	if(RadioOn[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu radio está apagada.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /r (radio chat)");

		switch (Info[playerid][pMember]) // employer/rank/division data is pulled from here
		{
			case 1:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Cadete";
					case 2: rank = "Oficial";
					case 3: rank = "Sargento";
					case 4: rank = "Teniente";
					case 5: rank = "Inspector";
					case 6: rank = "Comandante";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (DIVCRI)";
					case 3: div = " (DIVOES)";
					case 4: div = " (DIVANDRO)";
					case 5: div = " (SWAT)";
					case 6: div = " (DGT)";
					default: div = "";
				}
				format(string, sizeof(string), "[Radio de policía] {FFFFFF}(%s%s %s): %s", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(1, TEAM_RADIO_COLOR, string);
			}
			case 2:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Agente";
					case 2: rank = "Agente Superior";
					case 3: rank = "Agente Especial";
					case 4: rank = "Agente Especializado";
					case 5: rank = "Sub/Director";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
  				switch(Info[playerid][pDivision])
				{
					case 2: div = " (OS)";
					case 3: div = " (UCO)";
					case 4: div = " (UI)";
					case 5: div = " (UAE)";
					default: div = "";
				}
				format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(2, TEAM_RADIO_COLOR, string);
			}
            case 3:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Soldado";
					case 2: rank = "Cabo";
					case 3: rank = "Sargento";
					case 4: rank = "Capitán";
					case 5: rank = "Mayor";
					case 6: rank = "Coronel";
					default: rank = "[Error]";
				}
				switch(Info[playerid][pDivision])
				{
					case 2: div = " (FASA)";
					case 3: div = " (EMSA)";
					case 4: div = " (BO)";
					case 5: div = " (FMSA)";
					default: div = "";
				}
                format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(3, TEAM_RADIO_COLOR, string);
			}
			case 4:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Médico";
					case 2: rank = "Paramédico";
					case 3: rank = "Bombero";
					case 4: rank = "Supervisor";
					case 5: rank = "Jefe de Departamento";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(4, TEAM_RADIO_COLOR, string);
			}
			case 5:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Becario";
					case 2: rank = "Redactor";
					case 3: rank = "Periodista";
					case 4: rank = "Enviado Especial";
					case 5: rank = "Presentador";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(5, TEAM_RADIO_COLOR, string);
			}
			case 6:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Ayudante";
					case 2: rank = "Trucker";
					case 3: rank = "Mecánico";
					case 4: rank = "Ingeniero";
					case 5: rank = "Supervisor";
					case 6: rank = "Director";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(6, TEAM_RADIO_COLOR, string);
			}
			case 7:
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "Staff";
					case 2: rank = "Secretario";
					case 3: rank = "Alcalde";
					case 4: rank = "Ministro de";
					case 5: rank = "Vice-Presidente";
					case 6: rank = "Presidente";
					default: rank = "[Error]";
				}
  				switch(Info[playerid][pDivision])
				{
					case 2: div = " (Chofer)";
					case 3: div = " (UG)";
					case 4: div = " Defensa";
					case 5: div = " Justicia";
					case 6: div = " Economía";
					default: div = "";
				}
				format(string, sizeof(string), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
				SendRadioMessage(7, TEAM_RADIO_COLOR, string);
			}
			case 9:
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "Abogado";
					case 2: rank = "Secretario";
					case 3: rank = "Fiscal";
					case 4: rank = "Juez";
					case 5: rank = "Asociado";
					case 6: rank = "Director General";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(9, TEAM_RADIO_COLOR, string);
			}
			case 19: // Al Qaeda
			{
				switch(Info[playerid][pRank])
				{
					case 1: rank = "R1";
			   	 	case 2: rank = "R2";
	   		 		case 3: rank = "R3";
	   		 		case 4: rank = "R4";
			    	case 5: rank = "R5";
			    	case 6: rank = "R6";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(17, TEAM_RADIO_COLOR, string);
			}
			case 20: // ALEPH
			{
			    switch(Info[playerid][pRank])
			    {
					case 1: rank = "R1";
					case 2: rank = "R2";
					case 3: rank = "R3";
					case 4: rank = "R4";
					case 5: rank = "R5";
					case 6: rank = "R6";
					default: rank = "[Error]";
				}
				format(string, sizeof(string), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
				SendRadioMessage(31, TEAM_RADIO_COLOR, string);
			}
			default:
			{
				SendClientMessageEx(playerid,COLOR_GRAD2,"Tu facción no tiene radio, puedes comprar una en el 24/7.");
				return 1;
			}
		}
		format(string, sizeof(string), "(radio) %s",params);
	    SetPlayerChatBubble(playerid,string,COLOR_WHITE,2.0,2000);
	    return 1;
	}
	zcmd(sapddiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 1)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sapddiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones SAPD: 1 (Ninguna), 2 {5ABAFF}(DIV-CRI){FFFFFF}, 3 {5ABAFF}(DIV-OES){FFFFFF}, 4 {5ABAFF}(DIV-ANDRO){FFFFFF}, 5 {5ABAFF}(SWAT){FFFFFF}, 6 {5ABAFF}(UL)");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 1)
					{
						if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Operaciones Especiales [DIVOES].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Operaciones Especiales [DIVOES].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Criminalistica [DIVCRI].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Criminalistica [DIVCRI].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Anti-Drogas [DIVANDRO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Anti-Drogas [DIVANDRO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la SWAT.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la SWAT.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Tráfico.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Tráfico.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador no pertenece a SAPD.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para hacer divisiones en SAPD.");
		}
		return 1;
	}
	zcmd(fbidiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 2)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fbidiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones FBI: 1 (Ninguna), 2 {5ABAFF}(DIV-HO){FFFFFF}, 3 {5ABAFF}(UCO){FFFFFF}, 4 {5ABAFF}(UI){FFFFFF}, 5 {5ABAFF}(RR.HH){FFFFFF}, 6 {5ABAFF}URRE.");
			return 1; //
			}
			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 2)
					{
						if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Crimen Organizado [UCO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Crimen Organizado [UCO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División de Homicidios [DIVHO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División de Homicidios [DIVHO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Investigación [UI].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Investigación [UI].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Agentes Especiales [UAE].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Agentes Especiales [UAE].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 6;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Respuesta Rapida en Emergencias [URRE].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Respuesta Rapida en Emergencias [URRE].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador no pertenece al FBI.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para hacer divisiones en FBI.");
		}
		return 1;
	}
	zcmd(saemdiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 3)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /saemdiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones SAEM: 1 (Ninguna), 2 {5ABAFF}(FASA){FFFFFF}, 3 {5ABAFF}(EMM){FFFFFF}, 4 {5ABAFF}(BO){FFFFFF}, 5 {5ABAFF}(FMSA)");
			return 1;
			}
			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 3)
					{
						if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte del Equipo Médico Militar [EMM].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse al Equipo Médico Militar [EMM].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de las Fuerzas Aéreas de San Andreas [FASA].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a las Fuerzas Aéreas de San Andreas [FASA].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha invitado a formar parte de los Black Ops [BO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a los Black Ops [BO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Fuerza Marítima de San Andreas [FMSA].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Fuerza Marítima de San Andreas [FMSA].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					} else SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador no pertenece a Guardia Nacional");
				}
			} else SendClientMessageEx(playerid, COLOR_GRAD1, "No estás autorizado para hacer divisiones en Guardia Nacional.");
		}
		return 1;
	}
	zcmd(gobdiv, playerid, params[])
	{
		if(Presidente(playerid))
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gobdiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFFFF}Divisiones Staff: 1 (Ninguna), 2 {5ABAFF}(Chofer){FFFFFF}, 3 {5ABAFF}(UG)(Guardaespaldas)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Divisiones Ministros: {FFFFFF}4 {5ABAFF}(Defensa){FFFFFF}, 5 {5ABAFF}(Justicia){FFFFFF}, 6 {5ABAFF}(Economía)");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 7)
					{
						if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de los choféres del gobierno.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a los choféres del gobierno.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad de Guardaespaldas [UG].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad de Guardaespaldas [UG].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha nombrado Ministro de Defensa.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has nombrado a %s Ministro de Defensa.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 5)
						{
							Info[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s te ha nombrado Ministro de Justicia.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has nombrado a %s Ministro de Justicia.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 6)
						{
							Info[giveplayerid][pDivision] = 6;
							format(string, sizeof(string), "%s te ha nombrado Ministro de Economía.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has nombrado a %s Ministro de Economía.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					} else SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador no pertenece al FBI");
				}
			}else SendClientMessageEx(playerid, COLOR_GRAD1, "No estás autorizado para hacer divisiones en FBI.");
		}
		return 1;
	}
	zcmd(ciadiv, playerid, params[])
	{
		if(Info[playerid][pLeader] == 17)
		{
			new string[256], giveplayerid, division;
			if(sscanf(params, "dd", giveplayerid, division))
			{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /ciadiv (playerid) (división)");
			SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones CIA: 1 (Ninguna), 2 {5ABAFF}(UC){FFFFFF}, 3 {5ABAFF}(DIVFO){FFFFFF}, 4 {5ABAFF}(DIVAT){FFFFFF}");
			return 1;
			}

			if (Info[playerid][pRank] == 6)
			{
				if(IsPlayerConnected(giveplayerid))
				{
					if(Info[giveplayerid][pMember] == 17)
					{
						if(division == 2)
						{
							Info[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la Unidad Criminalistica [UC].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la Unidad Criminalistica [UC].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 3)
						{
							Info[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División Forense [DIVFO].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División Forense [DIVFO].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 4)
						{
							Info[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s te ha invitado a formar parte de la División Anti-Terrorista [DIVAT].", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has invitado a %s para unirse a la División Anti-Terrorista [DIVAT].", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
						else if(division == 1)
						{
							Info[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador no pertenece a la CIA.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para hacer divisiones en la CIA.");
		}
		return 1;
	}
	/*zcmd(vercontrato, playerid, params[])
 	{
 	    new giveplayerid;
 	    if(Info[playerid][pAdminZC] <= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "CMD no disponible.");
 	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
 	    if(!sscanf(params, "d", giveplayerid))
	 	{
  			if(Info[giveplayerid][pContract] <= 0)
 			{
				new string[128];
				SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso]: Este usuario ya cumplió su contrato o no dispone de facción.");
				format(string, sizeof(string), "El contrato de laboral de %s ha finalizado.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso]: Este usuario tiene que estar en la facción más tiempo.");
        	TiempoContrato(playerid, giveplayerid, Info[giveplayerid][pContract]-gettime());
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "CMD: /vercontrato (jugador)");
		return 1;
    }
 	zcmd(editarc, playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        new dias, giveplayerid, string[128];
		if(!sscanf(params, "dd", giveplayerid, dias))
		{
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(Info[playerid][pAdminZC] >= 4000 || Info[playerid][pFactionModerator] == 1)
		        {
		            if(dias < 0) return SendClientMessageEx(playerid,  COLOR_WHITE, "No se permite poner días negativos, entre 1 y 14.");
		            if(dias > 14) return SendClientMessageEx(playerid,  COLOR_WHITE, "No se permite poner días más de 14 días de contrato.");
		            if(dias == 0) {Info[giveplayerid][pContract] = dias;}
					else {Info[giveplayerid][pContract] = 0; Info[giveplayerid][pContract] = (gettime() + 86400*dias);}
				 	format(string, sizeof(string), "[ADM] %s ha modificado el tiempo de contrato de %s a %d días. [/tiempocontrato]", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), dias);
					ABroadCast(COLOR_ORANGE, string, 2);
					Log("LOGS/contratos.log", string);
		        }
				else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres administrador o encargado de facciones para hacer esto.");
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarc (PlayerID) (Días) - [CMD usado para modificar el tiempo de contrato]");
		return 1;
	}
 	zcmd(tiempocontrato, playerid, params[])
 	{
 	    new giveplayerid;
 	    if(Info[playerid][pMember] < 1)	return	SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ningún contrato, no tienes facción.");
 	    if(!sscanf(params, "d", giveplayerid))
	 	{
 	    	if(IsPlayerConnected(giveplayerid))
		 	{
 	    		if(ProxDetectorS(8.0, playerid, giveplayerid))
			 	{
			 	    if(papilla[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Alguien cerca de ti usó /tiempocontrato con tu ID. CMD administrativo: /vercontrato.");
			 	    if(Info[playerid][pContract] <= 0)
				 	{
				 	    new string[128];
 						format(string, sizeof(string), "Has mostrado a %s tu tiempo de contrato. [Finalizado]", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "El contrato de laboral de %s ha finalizado.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					 	return 1;
					}
			 	    SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso]: Has mostrado tu contrato a ese jugador.");
        			TiempoContrato(giveplayerid, playerid, Info[playerid][pContract]-gettime());
    			}
				//else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
    		}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* /tiempocontrato (jugador)");
		return 1;
    }*/
 	zcmd(contratar, playerid, params[]){
        if(Info[playerid][pLeader] > 0){
            new giveplayerid;
        	if(!sscanf(params, "d", giveplayerid)){
        	    if(IsPlayerConnected(giveplayerid)){
        	        if(ProxDetectorS(8.0, playerid, giveplayerid)){
	            	    if(giveplayerid == playerid) 		return	SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes invitarte ati mismo.");
	            	    if(Info[giveplayerid][pFMember] < 255)	return	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes invitar a una persona que está en una banda o familia.");
	            	    if(Facturing[giveplayerid] > 0)    return 	SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Este jugador está en otra tarea, espera.");
	            	    if(Info[giveplayerid][pMember] > 0 || Info[giveplayerid][pLeader] > 0) return 	SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene facción.");
						new string[256];
	            	    switch(Info[playerid][pLeader]){
						    case 1: 	ReqF_Name[giveplayerid] = "Los Santos Dep Policial";
						    case 2: 	ReqF_Name[giveplayerid] = "Federal Bureau of Investigation";
						    case 3: 	ReqF_Name[giveplayerid] = "San Andreas Ejercito Militar";
						    case 4: 	ReqF_Name[giveplayerid] = "S.E.C - Médicos y Bomberos";
						    case 5:     ReqF_Name[giveplayerid] = "Los Santos Televisión";
						    case 6: 	ReqF_Name[giveplayerid] = "Crazy Motors";
						    case 7: 	ReqF_Name[giveplayerid] = "Gobierno San Andreas";
                            case 8: 	ReqF_Name[giveplayerid] = "Hitman";
                            case 9: 	ReqF_Name[giveplayerid] = "Sistema Judicial";
                            case 10:    ReqF_Name[giveplayerid] = "Groove Street";
                            case 11:    ReqF_Name[giveplayerid] = "Ballas the Kings";
                            case 12:    ReqF_Name[giveplayerid] = "Latin Kings";
                            case 13:    ReqF_Name[giveplayerid] = "Sureños 13";
                            case 14: 	ReqF_Name[giveplayerid] = "Mafia Rusa";
                            case 15:    ReqF_Name[giveplayerid] = "La Cosa Nostra";
                            case 16: 	ReqF_Name[giveplayerid] = "Mafia Yakuza";
                            case 17: 	ReqF_Name[giveplayerid] = "Cartel del Golfo";
                            case 18: 	ReqF_Name[giveplayerid] = "Mafia Donakov";
                            case 19:    ReqF_Name[giveplayerid] = "FACC 19";
                            case 20:    ReqF_Name[giveplayerid] = "FACC 20";
						}
                        ReqF_Faction[giveplayerid] = Info[playerid][pLeader];
                        Facturing[giveplayerid] = 1;
						format(string, sizeof(string), "\t\tContrato\n\n\t%s te ofrece un contrato en %s\n\t¿Quieres aceptarlo y pertenecer a esta organización?", GetPlayerNameEx(playerid), ReqF_Name[giveplayerid]);
		        		SafeDialogEx(giveplayerid, REQF_ACCEPT, DIALOG_STYLE_MSGBOX, "{00F70C}Contrato de Trabajo", string, "Aceptar", "Rechazar");
	            	}else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
        	    }else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
			}else SendClientMessageEx(playerid, COLOR_WHITE, "* /contratar (jugador)");
		}else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es lider de facción.");
		return 1;
	}
    zcmd(despedir, playerid, params[]){
		new give;
        if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es lider de facción.");
		if(sscanf(params, "d", give)) return SendClientMessageEx(playerid, COLOR_WHITE, "* /despedir (jugador)");
		if(!IsPlayerConnected(give)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        if(Info[playerid][pLeader] == Info[give][pMember]){
			new string[80];
			format(string, sizeof(string), "  El líder %s te ha echado de la facción.", GetPlayerNameEx(playerid));
			SendClientMessageEx(give, COLOR_WHITE, string);
			format(string, sizeof(string), "  Despediste a %s", GetPlayerNameEx(give));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			Info[give][pMember] = 0;
			Info[give][pRank] = 0;
			Info[give][pDivision] = 0;
			Info[give][pContract] = 0;
			//SetPlayerSkin(give, NOOB_SKIN);
			pTazer[give] = 0;
			if(Info[give][pVIP] < 3) for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter){
				for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist){
					if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[give][iToyIter][ptModelID]){
						PlayerToyInfo[give][iToyIter][ptModelID] = 0;
						PlayerToyInfo[give][iToyIter][ptBone] = 0;
						PlayerToyInfo[give][iToyIter][ptPosX] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosY] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosZ] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosX] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosY] = 0.0;
						PlayerToyInfo[give][iToyIter][ptPosZ] = 0.0;
						PlayerToyInfo[give][iToyIter][ftscaleX] = 0.0;
						PlayerToyInfo[give][iToyIter][ftscaleY] = 0.0;
						PlayerToyInfo[give][iToyIter][ftscaleZ] = 0.0;
					}
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} El jugador no pertenece a tu facción.");
        return 1;
    }
	zcmd(darrango, playerid, params[])
    {
        new giveplayerid, rank;
        if(!sscanf(params, "di", giveplayerid, rank))
		{
            if(rank > 6 || rank < 0) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No hay rango tan alto."); return 1; }
		    if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres líder de facción.");
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(Info[giveplayerid][pLeader] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes asignar rango a un líder");
          		if(Info[playerid][pLeader] == Info[giveplayerid][pMember])
            	{
            	    new string[128];
            	    Info[giveplayerid][pRank] = rank;
            	    format(string, sizeof(string), "Líder %s asignó rango %d al miembro %s", GetPlayerNameEx(playerid), Info[giveplayerid][pRank], GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            	}
            	else SendClientMessageEx(playerid, COLOR_WHITE, "Este miembro no es de tu facción.");
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* /darrango (jugador) (rango)");
        return 1;
    }
CMD:faccout(playerid, params[])
{
    new ldr =Info[playerid][pMember];
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, InfoFacc[ldr][gExteriorPos][0], InfoFacc[ldr][gExteriorPos][1], InfoFacc[ldr][gExteriorPos][2])) return Message(playerid, COLOR_WHITE, "[ERROR]: Sólo puedes usar el CMD delante del almacén de la facción.");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /faccout [Cantidad]");
			format(string, sizeof(string), "* BALANCE: $%d.", InfoFacc[ldr][gFondos]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "El monto es inválido.");
	if(InfoFacc[ldr][gFondos] > amount)
	{
			InfoFacc[ldr][gFondos] -= amount;
			saveLideres(ldr);
			GivePlayerCash(playerid, amount);
			format(string, sizeof(string), "[INFO - ALMACÉN] Retiraste $%d de los fondos de tu facción.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else{SendClientMessageEx(playerid, COLOR_WHITE, "No hay fondos suficientes.");}
	return 1;
}
CMD:faccin(playerid, params[])
{
    new ldr =Info[playerid][pLeader];
    if(ldr == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres líder de facción.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, InfoFacc[ldr][gExteriorPos][0], InfoFacc[ldr][gExteriorPos][1], InfoFacc[ldr][gExteriorPos][2])) return Message(playerid, COLOR_WHITE, "[ERROR]: Sólo puedes usar el CMD delante del almacén de la facción.");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /faccin [Cantidad]");
		format(string, sizeof(string), "* BALANCE: $%d.", InfoFacc[ldr][gFondos]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido.");
	if(GetPlayerCash(playerid) < amount) return SendClientMessageEx(playerid, COLOR_WHITE, " No dispones de ese dinero.");
	InfoFacc[ldr][gFondos] += amount;
	saveLideres(ldr);
	GivePlayerCash(playerid, -amount);
	format(string, sizeof(string), "[INFO - ALMACÉN]: Depósitaste $%d en los fondos de tu facción.", amount);
	SendClientMessageEx(playerid, COLOR_WHITE, string );
	return 1;
}
CMD:llenaralmacen(playerid, params[])
{
    if(!Team_CDG(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, " Solo tráficantes de armas pueden hacer esto. (CDG)");
    for(new x = 0; x < MAX_LEADERS; x++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, InfoFacc[x][gExteriorPos][0], InfoFacc[x][gExteriorPos][1], InfoFacc[x][gExteriorPos][2]))
	    {
			new string[128], amount;
			new MaxMat = (1000-InfoFacc[x][gMateriales]); // El máximo es 1.000. EJ: Si hay 50 materiales, MaxMat = 950. - Si hay 900 materiales, MaxMat = 100.
			if(sscanf(params, "d", amount))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /llenaralmacen [Cantidad de productos]");
				format(string, sizeof(string), "* Productos: %d/1000 unds.", InfoFacc[x][gMateriales]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				return 1;
			}
			if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido, tiene que ser mayor a cero.");
			if(amount > MaxMat)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Cantidad incorrecta, recuerda que el máximo de productos en un almacén es 1000/1000.");
				format(string, sizeof(string), "* Este almacén precisa de %d productos. (/llenaralmacen %d)", MaxMat, MaxMat);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				return 1;
			}
			InfoFacc[x][gMateriales] += amount;
			// Momento de la verdad, el dinero es quitado del usuario para ser recuperado luego.
			new gasto = amount*10;
			format(string, sizeof(string), "FACTURA TOTAL: %dx10$/unidad = Costo inicial: %d dólares.", amount, gasto);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			GivePlayerCash(playerid, -gasto);
			format(string, sizeof(string), "[INFO] El almacén de %s se encuentra ahora con %d/1000 productos.", InfoFacc[x][gFacc], InfoFacc[x][gMateriales]);
			SendClientMessageEx(playerid, COLOR_GREY, string );
		} // Se cierra las comprobaciones, hasta que encontremos la que tenemos delante de nuestra ID.
	} // Se cierra Loop de facciones, Max_Leaders.
	return 1;
}
zcmd(celdas, playerid, params[])
{
   if(Team_Judicial(playerid))
		{
			if(PlayerToPoint(5, playerid, 1425.0894,-1481.3389,1617.2925))
			  {
               if(!IsACop(playerid) && Info[playerid][pLeader] != 9 && Info[playerid][pMember] != 9)
		       return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF}Acceso denegado, sólo policias y jueces.");
		       ShowPlayerDialog(playerid,DIALOG_PJ,DIALOG_STYLE_LIST,
		       "Prisión Judicial","Abrir Celda N1 - (Cierre automático)\nAbrir Celda N2 - (Cierre automático)","Aceptar","Salir");
		       }
		 }
               return 1;
}
zcmd(equipo, playerid, params[])
{
	    //*******************Facciones legales*******************
		new idf = InfoFacc[Info[playerid][pMember]][gMateriales];
		if(idf < 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF}Su facción no dispone de armamento o materiales en su armario.");
	    if(Team_SAMD(playerid)) 
		{
			if(PlayerToPoint(5, playerid, 1188.8640,-1351.4312,2423.2649))
			{
			    new eq[] = "Traje Doctor\nTraje Médico Blanco\nTraje Médico Azul\nTraje Médico Verde\nAyudante\nIntermedio\nIndumentario Normal";
			    SafeDialogEx(playerid,EQUIPO_DOC,DIALOG_STYLE_LIST,"{00F70C}Equipo S.E.C",eq,"Equipar","Cancelar");
			}
			/*else if(PlayerToPoint(5, playerid, -1683.8572,-2074.3633,19.2459))
		    {
		        new bom[] = "Ayudante\nIntermedio\nDirector\nRopa Normal";
		        SafeDialogEx(playerid,EQUIPO_CDG,DIALOG_STYLE_LIST,"{00F70C}Bomberos LS",bom,"Equipar","Cancelar");
		    }*/
		}
		else if(Team_SAEM(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid,10.0,332.2786,2345.7732,8905.4180) || IsPlayerInRangeOfPoint(playerid,10.0,2914.18677, 2126.63745, 0.13430))//Saem Duty
			{
				SafeDialogEx(playerid, NGMENU, DIALOG_STYLE_LIST, "{00F70C}SAEM Menu","Duty\nUniformes\nArmas\nEncubierto\nKevlar Vest\nFirst Aid Kit\nAccessorios\nParacaídas", "Select", "Cancel");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ver los casilleros de SAEM.");
			}
		}
		else if(Team_LSPD(playerid))
		{
			if(PlayerToPoint(5, playerid, 326.9050,307.1603,999.1484) || PlayerToPoint(5, playerid, 1559.81, -1655.8, 4990.58))
			{
				SafeDialogEx(playerid, DUTYMENU, DIALOG_STYLE_LIST, "{00F70C}SAPD Menu","Duty\nEquipo\nSWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
			}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros de LSPD.");
		}
		/*else if(Team_ALEPH(playerid))
		{
			if(PlayerToPoint(5, playerid,253.5987,76.6707,1003.6406) )
			{
				SafeDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "{00F70C}ALEPH Menu","Duty\nEquipo\nUniforme SWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás delante del armario de armas de la facción.");
		}*/
		else if(Team_FBI(playerid))
		{
			if(PlayerToPoint(5, playerid,310.2178,-1538.3743,-44.9596) || PlayerToPoint(5, playerid,278.55,-1614.5,51.5))
			{
				SafeDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "{00F70C}FBI Menu","Duty\nEquipo\nUniforme SWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros de FBI.");
		}
		else if(Team_LSTV(playerid))
		{
		    if(PlayerToPoint(5, playerid, 733.761108,-1352.086914,3018.322814)) // Dentro de la HQ.
		    {
		        new cnn[] = "Seguridad\nPeriodista\nRopa Normal";
		        SafeDialogEx(playerid,EQUIPO_CNN,DIALOG_STYLE_LIST,"{00F70C}Equipo SATV",cnn,"Equipar","Cancelar");
		    }
		}
		else if(Team_Mecanicos(playerid))
		{
			if(PlayerToPoint(5, playerid, 3162.8804,-1896.5898,1042.2070) || PlayerToPoint(5, playerid, 1995.458, -1796.01, 13.345))
			{
				new mec[] = "Ayudante\nTrucker\nMecanico\nSupervisor\nMujer\nDirector\nSpray\nArma Liviana\nRopa Normal";
			    SafeDialogEx(playerid,EQUIPO_MECANICO,DIALOG_STYLE_LIST,"{00F70C}Equipo Mecánico <<",mec,"Equipar","Cancelar");
   			}
		}
		else if(Gobierno(playerid))
		{
		    if(PlayerToPoint(5, playerid, 362.1189,-52.2308,-93.8500) || PlayerToPoint(5, playerid, 1480.9568, -1805.3680, 2982.5225))
		    {
		        new gob[] = "Seguridad\nChofér\nRecepcionista\nSecretario/a\nMinistro\nVicepresidente\nPresidente\nChaleco Antibalas\nRopa normal";
		        SafeDialogEx(playerid,EQUIPO_GOB,DIALOG_STYLE_LIST,"{00F70C}Equipo Gobierno",gob,"Equipar","Cancelar");
		    }
		}
        else if(Team_Judicial(playerid))
		{
		    if(PlayerToPoint(5, playerid, 2135.5605,1300.7083,7698.8999) || PlayerToPoint(5, playerid, 1423.673583,-1480.305908,1617.284545))
		    {
		        new SistemaJ[] = "Seguridad\nChofer\nDirector\nRopa Normal";
		        SafeDialogEx(playerid,EQUIPO_SistemaJ,DIALOG_STYLE_LIST,"{00F70C}Equipo Sistema Judicial",SistemaJ,"Equipar","Cancelar");
		    }
		}
		//*******************Facciones Ilegales*******************
		// Pandillas 4.
		else if(Team_Groove(playerid))
		{
		    if(PlayerToPoint(5, playerid, 2496.9312,-1696.5073,1014.742))
		    {
		        new eqg[] = "Bate\nDesert Eagle\nSpray\nTec-9";
			    SafeDialogEx(playerid,EQUIPO_GROOVE,DIALOG_STYLE_LIST,"{00F70C}Equipo GrooveStreet",eqg,"Equipar","Cancelar");
		    }
		}
		if(Team_Ballas(playerid))
		{
		    if(PlayerToPoint(5, playerid, 2075.1799,-1585.4727,-13.3922))
		    {
          new eqbs[] = "Bate\nDesert Eagle\nSpray\nTec-9";
			    SafeDialogEx(playerid,EQUIPO_BALLAS,DIALOG_STYLE_LIST,"{00F70C}Equipo Ballas",eqbs,"Equipar","Cancelar");
		    }
		}
		else if(Team_Sureno(playerid))
		{
		    if(PlayerToPoint(5, playerid, -827.797,472.9131,1866.8000))
		    {
		        new eqs[] = "Bate\nDesert Eagle\nSpray\nTec-9";
			    SafeDialogEx(playerid,EQUIPO_SURENOS,DIALOG_STYLE_LIST,"{00F70C}Equipo Sureños 13",eqs,"Equipar","Cancelar");
		    }
		}
		else if(Team_Latin(playerid))
		{
		    if(PlayerToPoint(5, playerid, 791.7727,-1713.1125,411.1650))
		    {
		        new eql[] = "Bate\nDesert Eagle\nSpray\nTec-9";
			    SafeDialogEx(playerid,EQUIPO_LK,DIALOG_STYLE_LIST,"{00F70C}Equipo Latin Kings",eql,"Equipar","Cancelar");
		    }
		}
		// Mafias 4.
		else if(Team_Rusa(playerid))
		{
		    if(PlayerToPoint(2, playerid, -12.3236,44.0121,4013.7021) || PlayerToPoint(8, playerid, 675.630981,-1257.353759,2204.520263))
		    {
		        new eqr[] = "Cuchillo\nDesert deagle\nMP5\nM4 (Arma pesada)\nShotgun\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_RUSA,DIALOG_STYLE_LIST,"{00F70C}Equipo Ruso",eqr,"Equipar","Cancelar");
		    }
		}
		else if(Team_LCN(playerid))
		{
		    if(PlayerToPoint(5, playerid, 1201.6417,-2015.9741,71.6094) || PlayerToPoint(5, playerid, 1100.179931,-2028.344360,2079.132812)) // Fuera y dentro.
		    {
		        new eqlcn[] = "Cuchillo\nDesert deagle\nMP5\nM4 (Arma pesada)\nShotgun\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_LCN,DIALOG_STYLE_LIST,"{00F70C}Equipo LCN",eqlcn,"Equipar","Cancelar");
		    }
		}
		else if(Team_Yakuza(playerid))
		{
		    if(PlayerToPoint(5, playerid, 1242.5764,-761.2462,5080.7578))
		    {
		        new eqykz[] = "Cuchillo\nDesert deagle\nMP5\nM4 (Arma pesada)\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_YAKUZA,DIALOG_STYLE_LIST,"{00F70C}Equipo Yakuza",eqykz,"Equipar","Cancelar");
		    }
		}
		else if(Team_Santana(playerid))
		{
		    if(PlayerToPoint(2, playerid, 1109.7671,244.3066,9001.6875))
		    {
		        new eqst[] = "Cuchillo\nDesert deagle\nMP5\nAK-47\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_SANTANA,DIALOG_STYLE_LIST,"{00F70C}Equipo Santana",eqst,"Equipar","Cancelar");
		    }
		}
		// Organizaciones.
		else if(Team_Alqaeda(playerid))
		{
		    if(PlayerToPoint(5, playerid, -3804.9746,1306.9164,75.5859))
		    {
		        new eqal[] = "MP5\nAK-47\nDesert Eagle\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_ALQAEDA,DIALOG_STYLE_LIST,"{00F70C}Equipo Alqaeda",eqal,"Equipar","Cancelar");
		    }
		}
		else if(Team_CDG(playerid))
		{
      		if(PlayerToPoint(2, playerid, 1013.5875, -606.4736, 1084.5026)) // NUEVA FACC.
		    {
		        new eqlcn[] = "Cuchillo\nDesert deagle\nMP5\nM4 (Arma pesada)\nSniper Rifle\nShotgun\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_CDG,DIALOG_STYLE_LIST,"{00F70C}Equipo CDG",eqlcn,"Equipar","Cancelar");
		    }
		}
		else if(Team_ALEPH(playerid))
		{
      		if(PlayerToPoint(2, playerid, 2035.6, -1294.5, 2996.3)) // NUEVA FACC.
		    {
		        new eqlcn[] = "Cuchillo\nDesert deagle\nMP5\nM4 (Arma pesada)\nSniper Rifle\nShotgun\nChaleco antibalas";
			    SafeDialogEx(playerid,EQUIPO_CDG,DIALOG_STYLE_LIST,"{00F70C}Equipo ALEPH",eqlcn,"Equipar","Cancelar");
		    }
		}
		else if(Hitman(playerid))
		{
	    	if(PlayerToPoint(2, playerid, 2355.2322,-647.0360,128.0547) || PlayerToPoint(3.5, playerid, 2145.4448,-2269.4490,13.2989))
		   {
	  			new eqh[] = "Silenced 9mm\nCuchillo\nMascara\nSniper\nChaleco\nMP5";
			  	SafeDialogEx(playerid,EQUIPO_HITMAN,DIALOG_STYLE_LIST,"{00F70C}Equipo Hitman",eqh,"Equipar","Cancelar");
		   }
		}
		else if(PlayerToPoint(5, playerid, -26.6254, 38.9020, 999.3485) && IsACop(playerid))
  		{
    		new eqal[] = "MP5\nAK-47\nDesert Eagle\nChaleco antibalas";
			SafeDialogEx(playerid,EQUIPO_ALQAEDA,DIALOG_STYLE_LIST,"{00F70C}Equipo Enforcer",eqal,"Equipar","Cancelar");
 		}
	    return 1;
	}
	zcmd(moneda, playerid, params[])
	{
	    new coin = random(2)+1, string[90], coinname[10];
	    if(coin == 1) 	coinname = "cara";
	    else 			coinname = "cruz";
	    format(string, sizeof(string), "*** %s lanza una moneda al aire y cae %s", GetPlayerNameEx(playerid), coinname);
	    ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    return 1;
	}
	zcmd(ven, playerid, params[])
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
			new string[128];
            if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
	        {
		       VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
		       format(string, sizeof(string), "* %s baja la ventana.", GetPlayerNameEx(playerid));
		       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       return 1;
	        }
            else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
	        {
		       VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
		       format(string, sizeof(string), "* %s sube la ventanilla.", GetPlayerNameEx(playerid));
		       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		       return 1;
	        }
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "Usted necesita estar en el vehiculo para utilizar esta función.");
        return 1;
	}
   	zcmd(nokear, playerid, params[])
	{
	    if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
			return 1;
		}
	    if(sscanf(params, "d", params[0])) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /nokear (ID)");
        if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Usted debe ser mayor al nivel 2.");
        if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
        new string[128];
        if(papilla[params[0]] == 1)
		{
				SetPVarInt(playerid, "IsInArena", 0);
				SetPVarInt(playerid, "ArenaMode", 0);
                Info[playerid][pJailAdmin] += 1;
		        Info[playerid][pJailed] = 1;
		        PhoneOnline[playerid] = 1;
				Info[playerid][pJailTime] = 5*60;
				ResetPlayerWeaponsEx(playerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(playerid);
				SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1000);
				format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /nokear.",GetPlayerNameEx(playerid));
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por usar el CMD /nokear hacia un administrador Onduty.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_AZULL,string,2);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar el CMD /nokear hacia un administrador Onduty.");
				SendClientMessageEx(params[0], COLOR_GRAD2, "Alguien intentó usar /nokear hacia tu ID, ha sido jaileado automáticamente.");
				StopAudioStreamForPlayer(playerid);
				strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
				strmid(Info[playerid][pJailReason], "Usar /nokear a un admin Onduty.", 0, strlen("Usar /nokear a un admin Onduty."), 64);
		}
		else
		{
		if(KnockedDown[playerid] == 0 || IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(params[0]))
		{
			if(ProxDetectorS(3.0, playerid, params[0]))
			{
				new rands = random(2)+1;
				format(string, sizeof(string), "* %s agarra una piedra.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
            	KnockedDown[playerid] = 100;

            	if(rands == 1)
				{
					ApplyAnimation(params[0], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
					SetTimerEx("ClearKnock", 60000, false, "i", params[0]);
					SetTimerEx("ClearKnock", 60000, false, "i", playerid);
					KnockedDown[params[0]] = 1;
                    format(string, sizeof(string), "* %s intenta noquear a %s con la piedra y lo consige.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
					ProxDetector(30.0, playerid, string, 0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF);
					format(string, sizeof(string), "* %s queda inconsciente.", GetPlayerNameEx(params[0]));
            		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					format(string, sizeof(string), "* %s intenta noquear a %s con la piedra y le da muy suave.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
					ProxDetector(30.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador está muy lejos de usted.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no puede utilizar este comando ahora.");
		}
		return 1;
	}
	//SAEM
    zcmd(misil, playerid, params[])
	{
	    new Float:M_X, Float:M_Y, Float:M_Z, Float:radius;
	    if(Team_SAEM(playerid))
		{
	        if(Misile_Launcher < 3)
			{
	            new string[128];
		        if(PlayerToPoint(1.0,playerid,2740.2664,-2423.1470,43.7594)) // Torre SAEM.
				{
			        if(!sscanf(params, "fffiii",M_X,M_Y,M_Z,radius,params[1],params[2])){
			            if(Info[playerid][pRank] > 3){
			                if(radius > 100 || radius < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Radio máximo 100");
			                if(params[1] > 13  || params[1] < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tipo explosión 0-13");
			                if(params[2] > 60  || params[1] < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tiempo máximo 60 segundos");
			            	SetTimerEx("MissileLaunchEx", params[2]*1000, false, "fffii", M_X,M_Y,M_Z,radius,params[1]);
							Misile_Launcher ++;
							SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
                            format(string, sizeof(string), " %s ejecutará Lanzamiento de misil en %d segundos, destino: %0.2f - %0.2f - %0.2f, radio: %d",
                            GetPlayerNameEx(playerid),params[2],M_X,M_Y,M_Z,radius,params[1]);
                            SendRadioMessage(3, TEAM_RADIO_COLOR, string);
						} else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Necesitas ser mayor de rango 3.");
			        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /misil (coordenada X) (coordenada Y) (coordenada Z) (radio) (tipo) (tiempo)");
				}
				else if(PlayerToPoint(1.0,playerid,275.4055,2044.6295,46.5048)) // Torre LV.
				{
				    if(!sscanf(params, "id",params[0], params[1]))
					{
			            if(Info[playerid][pRank] > 3)
						{
			                if(params[0] > MAX_VEHICLES || params[0] < 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vehículo incorrecto.");
			                SetTimerEx("MissileLaunch", params[1]*1000, false, "i", params[0]);
			                Misile_Launcher ++;
			                SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
                            format(string, sizeof(string), " %s ejecutará Lanzamiento de misil en %d Segundos, Objetivo Vehículo %d", GetPlayerNameEx(playerid), params[1], params[0]);
                            SendRadioMessage(3, TEAM_RADIO_COLOR, string);
			            } else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Necesitas ser mayor de rango 3.");
			        } else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /misil (vehículo) (tiempo)");
				} else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en ningún lanzamisiles.");
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Aún no han detonado los otros misiles.");
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
	    return 1;
	}
 CMD:su(playerid, params[]){
	new string[170];
	if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(OnDuty[playerid] == 0 && IsACop(playerid)) return  SendClientMessageEx(playerid, COLOR_WHITE, "No estas en servicio.");
	if(!sscanf(params,"ii", params[0], params[1]))
		{
		 GetPlayerName(params[0], cargos, sizeof(cargos));
		 GetPlayerName(playerid, cargos2, sizeof(cargos2));
		 switch(params[1])
		{
		  case 1:
			{
			 format(string, sizeof(string), "Oficial {FFFFFF}%s quiere hablar contigo, no intentes escapar.", GetPlayerNameEx(playerid));
		     SendClientMessageEx(params[0], TEAM_BLUE_COLOR, string);
			 Info[params[0]][pWantedLevel] = 1;
		     SetPlayerWantedLevel(params[0], 1);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(IsACop(playerid))
		     SetPlayerMarkerForPlayer(i, params[0], c1_color);
		     format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: {00D2CF}%s {FFFFFF}parece sospechoso, voy a interrogarlo.", cargos2, cargos);
		     SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 2:
			{
			 Info[params[0]][pWantedLevel] = 2;
			 SetPlayerWantedLevel(params[0], 2);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(IsACop(playerid))
			 SetPlayerMarkerForPlayer(i, params[0], c2_color);
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: {00D2CF}%s {FFFFFF}se resistió al arresto, procedemos a su persecución.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 3:
			{
			 Info[params[0]][pWantedLevel] = 3;
			 SetPlayerWantedLevel(params[0], 3);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(IsACop(playerid))
			 SetPlayerMarkerForPlayer(i, params[0], c3_color);
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: {00D2CF}%s {FFFFFF}se encuentra armado, procedan con precaución.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 4:
			{
			 Info[params[0]][pWantedLevel] = 4;
			 SetPlayerWantedLevel(params[0], 4);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(IsACop(playerid))
			 SetPlayerMarkerForPlayer(i, params[0], c4_color);
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: {00D2CF}%s {FFFFFF}abrió fuego, necesito refuerzos.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 5:
			{
		     Info[params[0]][pWantedLevel] = 5;
			 SetPlayerWantedLevel(params[0], 5);
			 for(new i = 0; i < GetMaxPlayers(); i++)
			 if(IsACop(playerid))
			 SetPlayerMarkerForPlayer(i, params[0], c5_color);
		   	 format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: {00D2CF}%s {FFFFFF}asesinó, detener vivo o muerto.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		case 6:
			{
			 Info[params[0]][pWantedLevel] = 6;
			 SetPlayerWantedLevel(params[0], 6);
		     for(new i = 0; i < GetMaxPlayers(); i++)
			 if(IsACop(playerid))
			 SetPlayerMarkerForPlayer(i, params[0], c6_color);
			 format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: {00D2CF}%s {FFFFFF}es extremadamente peligroso, disparen a matar.", cargos2, cargos);
			 SendRadioMessage(1, TEAM_BLUE_COLOR, string);
			}
		}
	  }
		else SendClientMessage(playerid, -1, "Utiliza: /su [id] [1-6]");
	return 1;
	}
forward Policia(member, color, string[]);
public Policia(member, color, string[])
{
 for(new i = 0; i < MAX_PLAYERS; i++)
	{
	 if(IsPlayerConnected(i))
		{
	     if(IsACop(i))
		 {
		 SendClientMessage(i, color, string);
		 }
		}
	}
}
	CMD:sospechosos(playerid, params[])
	{
		if(IsACop(playerid))
		{
			new string[128], x;

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Sospechosos buscados:");
			foreach(Player, i)
			{
				if(Info[i][pWantedLevel] >= 1)
				{
					format(string, sizeof(string), "%s%s: %d", string,GetPlayerNameEx(i),Info[i][pWantedLevel]);
					x++;
					if(x > 3)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						x = 0;
						format(string, sizeof(string), " ");
					}
					else
					{
						format(string, sizeof(string), "%s, ", string);
					}
				}
			}
			if(x <= 3 && x > 0)
			{
				string[strlen(string)-2] = '.';
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		else
		{
			 SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
		}
		return 1;
	}
    zcmd(bk, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Ya tienes un pedido de ayuda.");
        if(IsAPolice(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			if(Team_LSPD(playerid))
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", GetPlayerNameEx(playerid));
			    SendRadioMessage(1, TEAM_RADIO_COLOR, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_LSPD(i) && OnDuty[i] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Utiliza /bkc, para cancelar los refuerzos.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
    }
    zcmd(bkc, playerid, params[])
	{
        if(Team_LSPD(playerid) || Team_SAEM(playerid)) BackupClear(playerid, 1, 0);
        else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
	}
    zcmd(bks, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Ya tienes un pedido de ayuda.");
        if(Team_SAEM(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			if(Team_SAEM(playerid))
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", GetPlayerNameEx(playerid));
			    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_SAEM(i) && OnDuty[i] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Utiliza /bkc, para cancelar los refuerzos.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
    }
 	zcmd(darlicencia, playerid, params[])
    {
        if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del cuerpo policial. (LSPD - FBI)");
        if(OnDuty[playerid] == 0 && Info[playerid][pRank] <= 4) return  SendClientMessageEx(playerid, COLOR_WHITE, "No estás en servicio o su rango no es lo suficiente para hacer esto. (5)");
        if(!sscanf(params, "di", params[0], params[1]))
        {
            if(params[1] < 0 || params[1] > 50000) return SendClientMessageEx(playerid, COLOR_WHITE, "El precio máximo para la licencia de armas es 50 mil dólares.");
            if(IsPlayerConnected(params[0]))
			{
			    if(!ProxDetectorS(8.0,playerid,params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
			    if(Info[params[0]][pConnectTime] < 2 || Info[params[0]][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] Este usuario no tiene más de 2 horas de juego o dispone de restricción de armas.");
			    if(Facturing[params[0]] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene una petición pendiente.");
			    if(Info[params[0]][pGunLic] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene una licencia de armas trámitada.");
			    new string[160];
			    if(GetPlayerCash(params[0]) < params[1])
				{
    				format(string, sizeof(string), "* Esta persona no dispone de {FFFF00}%d${FFFFFF} para pagar la licencia de armas.", params[1]);
					return SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else
				{
				    //ClearChatbox(playerid);
				    SendClientMessageEx(params[0], -1, "Estado de San Andreas - Licencia de armas.");
				    // Nombre del policia:
					format(string, sizeof(string), "Trámitada por el policía: %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(params[0], -1, string);
					// Precio de la licencia:
					format(string, sizeof(string), "Precio: %d$", params[1]);
					SendClientMessageEx(params[0], -1, string);
					// Solicitud enviada.
					SendClientMessageEx(playerid, COLOR_WHITE, "* Espera la respuesta del sujeto, espere un momento.");
					SendClientMessageEx(params[0], COLOR_WHITE, "Te han ofrecido una licencia de armas. Utiliza /aceptar licencia ó /cancelar licencia.");
					NombreLicencia[params[0]] = playerid;
					PrecioLicencia[params[0]] = params[1];
					Facturing[params[0]] = 1; // ID ocupado en la tarea.
				}
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darlicencia (ID) (precio) ");
        return 1;
    }
    zcmd(multar, playerid, params[])
    {
        if(!IsACop(playerid) && !Team_SAEM(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del cuerpo policial.");
        if(OnDuty[playerid] == 0 && !Team_SAEM(playerid)) return  SendClientMessageEx(playerid, COLOR_WHITE, "No estas en servicio.");
        if(!sscanf(params, "dis[64]", params[0], params[1], params[2]))
        {
            if(params[1] < 0 || params[1] > 50000) return SendClientMessageEx(playerid, COLOR_WHITE, "El máximo de multa son 50000$");
            if(IsPlayerConnected(params[0]))
			{
			    if(Facturing[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene una petición pendiente.");
			    if(!ProxDetectorS(8.0,playerid,params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
			    new string[128];
			    if(GetPlayerCash(params[0]) < params[1])
				{
    				format(string, sizeof(string), "* El infractor no tiene {FFFF00}%d${FFFFFF} para pagar la multa.", params[1]);
					return SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else
				{
				    ClearChatbox(playerid);
				    SendClientMessageEx(params[0], -1, "Estado de San Andreas");
				    format(string, sizeof(string), "Demandante: %s", GetPlayerNameEx(playerid));
					SendClientMessageEx(params[0], -1, string);
					format(string, sizeof(string), "Infracción: %s", params[2]);
					SendClientMessageEx(params[0], -1, string);
					format(string, sizeof(string), "Multa: %d$", params[1]);
					SendClientMessageEx(params[0], -1, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "* Espera la respuesta del sujeto");
					SendClientMessageEx(params[0], COLOR_WHITE, "Te han multado. Utiliza /aceptar multa ó /cancelar multa, para pagar la multa.");
					TicketOffer[params[0]] = playerid;
					TicketMoney[params[0]] = params[1];
					Facturing[params[0]] = 1;
				}
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /multar (ID) (precio) (razón)");
        return 1;
    }
     zcmd(m, playerid, params[])
    {
        if(sscanf(params, "s[128]", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /m (texto)");
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo.");
		if(Team_SAMD(playerid) || IsACop(playerid) || Team_SAEM(playerid) || Team_FBI(playerid))
        {
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: %s",GetPlayerNameEx(playerid), params[0]);
			ProxDetector(60.0, playerid, string,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes utilizar este comando.");
        return 1;
    }
    zcmd(dni, playerid, params[])
    {
    	new string[120], giveplayerid;
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dni (ID)");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
        if(papilla[giveplayerid] == 1)
		{
				SetPVarInt(playerid, "IsInArena", 0);
				SetPVarInt(playerid, "ArenaMode", 0);
                Info[playerid][pJailAdmin] += 1;
		        Info[playerid][pJailed] = 1;
		        PhoneOnline[playerid] = 1;
				Info[playerid][pJailTime] = 5*60;
				ResetPlayerWeaponsEx(playerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(playerid);
				SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1000);
				format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /dni.",GetPlayerNameEx(playerid));
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por usar el CMD /dni hacia un administrador Onduty.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_AZULL,string,2);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar el CMD /dni hacia un administrador Onduty.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Alguien intentó usar /dnifalso hacia tu ID, ha sido jaileado automáticamente.");
				StopAudioStreamForPlayer(playerid);
				strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
				strmid(Info[playerid][pJailReason], "Usar /dni a un admin Onduty.", 0, strlen("Usar /dni a un admin Onduty."), 64);
				return 1;
		}
		else
		{
        	if(ProxDetectorS(8.0, playerid, giveplayerid))
        	{
	        	ShowDNI(playerid, giveplayerid);
	        	format(string, sizeof(string), "* %s le muestra su DNI a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
		}
		return 1;
    }
    /*zcmd(encontrar, playerid, params[])
    {
        if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a la Unidad de Investigación.");
        if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Central: Ahora es imposible, prueba de aquí a unos segundos");
		if(!sscanf(params, "d", params[0]))
		{
		    if(IsPlayerConnected(params[0]))
			{
                new string[128];
			    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
			    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Estableciendo conexión...");
			    format(string, sizeof(string), "** Conectado con Satélite #%d Cobertura(%d)", sat,luck);
			    SendClientMessageEx(playerid, COLOR_WHITE,string);
			    format(string, sizeof(string), "** Persona a buscar: %s", GetPlayerNameEx(params[0]));
			    SendClientMessageEx(playerid, COLOR_WHITE,string);
				if(luck > 10 && Info[params[0]][pSex] == 1) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Masculino");
				if(luck > 10 && Info[params[0]][pSex] == 2) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Femenino");
				if(luck > 13 && IsPlayerInAnyVehicle(params[0])) 		SendClientMessageEx(playerid, COLOR_WHITE,"Estado: En Automóvil");
				if(luck > 17 && Info[params[0]][pPnumber] != 0)	format(string, sizeof(string), "Teléfono: %d", Info[params[0]][pPnumber]); SendClientMessageEx(playerid, COLOR_WHITE,string);
    			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
       			UsedFind[playerid] = reuse_time;
				WhoFind[playerid] = params[0];
				format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
    			SendClientMessageEx(playerid, COLOR_WHITE,string);
    			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
    			SendClientMessageEx(playerid, COLOR_WHITE,string);
    			SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /encontrar (jugador)");
        return 1;
    }
    zcmd(encontrarveh, playerid, params[])
    {
        if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a la Unidad de Investigación.");
        if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Central: Ahora es imposible, prueba de aquí a unos segundos");
		if(!sscanf(params, "i", params[0]))
		{
            new string[128];
		    if(params[0] < 0 || params[0] > MAX_VEHICLES) return SendClientMessageEx(playerid, COLOR_GRAD2, "Error ID.");
		    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
		    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "* Estableciendo conexión...");
		    format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
		    SendClientMessageEx(playerid, COLOR_WHITE,string);
		    format(string, sizeof(string), "ID Vehículo: %d",params[0]);
		    SendClientMessageEx(playerid, COLOR_WHITE,string);
			if(luck > 13)
			{
   				format(string, sizeof(string), "Modelo Vehículo: %s", GetVehicleFriendlyName(params[0]));
		    	SendClientMessageEx(playerid, COLOR_WHITE,string);
			}
   			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcará en el mapa en: %d segundos.", sat+luck);
	   		SendClientMessageEx(playerid, COLOR_YELLOW,string);
	   		format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
	   		SendClientMessageEx(playerid, COLOR_YELLOW,string);
	   		SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /encontrar (vehículo)");
        return 1;
    }
zcmd(encontrar, playerid, params[])
{
    if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a la Unidad de Investigación.");
    if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Central: Ahora es imposible, prueba de aquí a unos segundos");
	if(!sscanf(params, "d", params[0]))
	{
	    if(IsPlayerConnected(params[0]))
		{
            new string[128];
		    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
		    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Estableciendo conexión . . .");
		    format(string, sizeof(string), "** Conectado con Satélite #%d Cobertura(%d)", sat,luck);
		    SendClientMessageEx(playerid, COLOR_WHITE,string);
		    format(string, sizeof(string), "** Persona a buscar: %s", GetPlayerNameEx(params[0]));
		    SendClientMessageEx(playerid, COLOR_WHITE,string);
			if(luck > 10 && Info[params[0]][pSex] == 1) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Masculino");
			if(luck > 10 && Info[params[0]][pSex] == 2) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Femenino");
			if(luck > 13 && IsPlayerInAnyVehicle(params[0])) 		SendClientMessageEx(playerid, COLOR_WHITE,"Estado: En Automóvil");
			if(luck > 17 && Info[params[0]][pPnumber] != 0)	format(string, sizeof(string), "Teléfono: %d", Info[params[0]][pPnumber]); SendClientMessageEx(playerid, COLOR_WHITE,string);
			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
   			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
			SendClientMessageEx(playerid, COLOR_WHITE,string);
			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE,string);
			SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "* /encontrar <Jugador>");
    return 1;
}
zcmd(encontrarveh, playerid, params[])
{
    if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a la Unidad de Investigación.");
    if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Central: Ahora es imposible, prueba de aquí a unos segundos");
	if(!sscanf(params, "i", params[0]))
	{
	    if(params[0] < 0 || params[0] > MAX_VEHICLES) return SendClientMessageEx(playerid, COLOR_WHITE, "Error ID.");
	    new string[128];
	    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
	    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "* Estableciendo conexión . . .");
	    format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
	    SendClientMessageEx(playerid, COLOR_WHITE,string);
	    format(string, sizeof(string), "ID Vehículo: %d",params[0]);
	    SendClientMessageEx(playerid, COLOR_WHITE,string);
		if(luck > 13)
		{
			format(string, sizeof(string), "Modelo Vehículo: %s", GetVehicleFriendlyName(params[0]));
	    	SendClientMessageEx(playerid, COLOR_WHITE,string);
		}
		SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
		UsedFind[playerid] = reuse_time;
		WhoFind[playerid] = params[0];
		format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
   		SendClientMessageEx(playerid, COLOR_GRAD1,string);
   		format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
   		SendClientMessageEx(playerid, COLOR_GRAD1,string);
   		SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
	} else SendClientMessageEx(playerid, COLOR_WHITE, "* /encontrar <Vehículo>");
    return 1;
}*/
zcmd(encontrar, playerid, params[])
{
    //if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte de LSPD/FBI/SAEM.");
    if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo FBI. No perteneces a la Unidad de Investigación.");
    if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "El sistema se está reiniciando, espere unos segundos para volver a usarlo.");
    new item[32];
    new string[128];
	if(!sscanf(params, "s[32]d",item, params[0]))
	{
	    if(strcmp(item,"vehiculo",true) == 0)
		{
	    	if(params[0] < 0 || params[0] > MAX_VEHICLES) return SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo existente.");
	    	new sat = random(10), luck = random(5), reuse_time = (sat+luck)*2;
	    	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Sistema WIN 10] Estableciendo conexión . . .");
	    	format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat*10,luck*20);
	    	SendClientMessageEx(playerid, COLOR_WHITE,string);
	    	format(string, sizeof(string), "ID Vehículo: %d",params[0]);
	    	SendClientMessageEx(playerid, COLOR_WHITE,string);
			if(luck > 2)
			{
				format(string, sizeof(string), "Modelo Vehículo: %s", GetVehicleNameEx(params[0]));
	    		SendClientMessageEx(playerid, COLOR_WHITE,string);
			}
			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
   			SendClientMessageEx(playerid, COLOR_GRAD1,string);
   			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
   			SendClientMessageEx(playerid, COLOR_GRAD1,string);
   			SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
   			return 1;
		}
  		if(strcmp(item,"casa",true) == 0)
		{
	    	if(params[0] < 0 || params[0] > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_WHITE, "Casa no encontrada.");
	    	new sat = random(10), luck = random(5), reuse_time = (sat+luck)*2;
	    	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Sistema WIN 10] Estableciendo conexión . . .");
	    	format(string, sizeof(string), "Conectado con Satélite #%d Cobertura(%d)", sat*10,luck*20);
	    	SendClientMessageEx(playerid, COLOR_WHITE,string);
	    	if( HouseInfo[params[0]][hOwned] == 1 )
			{
	    		format(string, sizeof(string), "[Información] Casa comprada por %s, valorada en %d dólares.",HouseInfo[params[0]][hOwner], HouseInfo[params[0]][hValue]);
	    		SendClientMessageEx(playerid, COLOR_WHITE,string);
				if(HouseInfo[params[0]][hLock] == 0) {SendClientMessageEx(playerid, COLOR_WHITE, "El acceso a la casa se encuentra abierta.");}
	    	}
	    	format(string, sizeof(string), "Dirección: %d. (NV: %d)",params[0], HouseInfo[params[0]][hLevel]);
	    	SendClientMessageEx(playerid, COLOR_WHITE,string);
			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
   			SendClientMessageEx(playerid, COLOR_GRAD1,string);
   			format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
   			SendClientMessageEx(playerid, COLOR_GRAD1,string);
   			SetTimerEx("Detective_FindHouse", sat+luck*1000, false, "i", playerid);
   			return 1;
		}
		if(strcmp(item,"persona", true) == 0)
		{
  			if(IsPlayerConnected(params[0]))
			{
			    new Float:X[3];
	    		GetPlayerPos(params[0], X[0], X[1], X[2]);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(params[0], zone, sizeof(zone));
				new sat = random(10), luck = random(5), reuse_time = (sat+luck)*2;
		    	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Sistema WIN 10] Estableciendo conexión . . .");
		    	format(string, sizeof(string), "** Conectado con Satélite #%d Cobertura(%d)", sat*10,luck*20);
		    	SendClientMessageEx(playerid, COLOR_WHITE,string);
		    	format(string, sizeof(string), "** Persona a buscar: %s.", GetPlayerNameEx(params[0]));
		    	SendClientMessageEx(playerid, COLOR_WHITE,string);
	    		format(string, sizeof(string), "Localización apróximada: %s",zone);
	    		SendClientMessageEx(playerid, COLOR_WHITE,string);
	    		if(PhoneOnline[params[0]] == 1 && Info[params[0]][pPnumber] != 0) // Teléfono apagado y lo tiene.
				{
					SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "No se han podido obtener más datos, teléfono desconectado. El sistema se ha ralentizado.");
					SendClientMessageEx(params[0], COLOR_LIGHTBLUE, "Su teléfono ha vibrado estando apagado, alguien está intentando localizar su número de teléfono.");
					UsedFind[playerid] = reuse_time+35;
					return 1;
				}
				if(luck > 1 && Info[params[0]][pSex] == 1) 			SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Masculino");
				if(luck > 1 && Info[params[0]][pSex] == 2) 			SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Femenino");
				if(luck > 2 && IsPlayerInAnyVehicle(params[0])) 	SendClientMessageEx(playerid, COLOR_WHITE,"Estado: En Automóvil");
				if(Info[params[0]][pPnumber] != 0 && UnidentifedCall[params[0]] == 0)
				{
					format(string, sizeof(string), "Teléfono: %d", Info[params[0]][pPnumber]);
					SendClientMessageEx(playerid, COLOR_WHITE,string); // Tiene número y no lo tiene en privado.
				}
				SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
   				UsedFind[playerid] = reuse_time;
				WhoFind[playerid] = params[0];
				format(string, sizeof(string), "La información se marcara en el mapa en: %d segundos.", sat+luck);
				SendClientMessageEx(playerid, COLOR_WHITE,string);
				format(string, sizeof(string), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE,string);
				SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		}
   		else SendClientMessage(playerid, COLOR_WHITE, "Nombre incorrecto.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "[CMD]: /encontrar [Vehiculo, Persona, Casa] [ID]");
    return 1;
}
zcmd(pagar, playerid, params[])
    {
    	new string[128];
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
        if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
		//if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		if(sscanf(params, "di", params[0], params[1])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /pagar (Jugador) (Cantidad)");
        if(papilla[params[0]] == 1)
		{
				SetPVarInt(playerid, "IsInArena", 0);
				SetPVarInt(playerid, "ArenaMode", 0);
                Info[playerid][pJailAdmin] += 1;
		        Info[playerid][pJailed] = 1;
		        PhoneOnline[playerid] = 1;
				Info[playerid][pJailTime] = 5*60;
				ResetPlayerWeaponsEx(playerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(playerid);
				SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1000);
				format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /pagar.",GetPlayerNameEx(playerid));
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por usar el CMD /pagar hacia un administrador Onduty.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_AZULL,string,2);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar el CMD /pagar hacia un administrador Onduty.");
				SendClientMessageEx(params[0], COLOR_GRAD2, "Alguien intentó usar /dnifalso hacia tu ID, ha sido jaileado automáticamente.");
				StopAudioStreamForPlayer(playerid);
				strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
				strmid(Info[playerid][pJailReason], "Usar /pagar a un admin Onduty.", 0, strlen("Usar /pagar a un admin Onduty."), 64);
				return 1;
		}
		else
		{
			if(params[1] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No posees esa cantidad.");
            if(params[1] < 1 || params[1] > 50000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Máximo: 50 Mil dólares.");
            if(IsPlayerConnected(params[0]))
			{
                if (GetPVarInt(playerid, "GiveMoneyTimer") > 0)
				{
					format(string, sizeof(string), "Tienes que esperar {FF0000}%d{FFFFFF} segundos después de pagar por primera vez.", GetPVarInt(playerid, "GiveMoneyTimer"));
					SendClientMessageEx(playerid,COLOR_WHITE,string);
					return 1;
				}
				if(ProxDetectorS(5.0, playerid, params[0]))
				{
    				SetPVarInt(playerid, "GiveMoneyTimer", 10); SetTimerEx("OtherTimerEx", 2000, false, "ii", playerid, TYPE_PAYTIMER);
					Bought(playerid, params[1]);
					Earn(params[0], params[1]);
					new Float:X, Float:Y, Float:Z;
 					GetPlayerPos(playerid,X,Y,Z);
 					// Anticheat de dinero. - Info[playerid][pIP]
				 	if(Info[playerid][pMulticuenta] == 0 && Info[params[0]][pMulticuenta] == 0)
				 	{
				 		if(!strcmp(Info[playerid][pIP], Info[params[0]][pIP], false))
						{
 					    	// Si las IP son iguales y ambos son multicuentas NO AUTORIZADAS = 0.
    						new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
 							format(stringlog, sizeof(stringlog), "[ATENCIÓN] Posibles multicuentas: %s(%d) ha pagado [$%d] a %s(%d). [IP: %s]", GetPlayerNameEx(playerid), playerid, params[1],GetPlayerNameEx(params[0]), params[0], ipc);
	 						ABroadCast(COLOR_ORANGE, stringlog, 2); Log("LOGS/multicuentas.log", stringlog);
						}
					}
					PlayerPlaySound(playerid, 1052, X, Y, Z);
					PlayerPlaySound(params[0], 1052, X, Y, Z);
					if(Info[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "* Desconocido saca un poco de dinero (%d$) y se lo da a %s.", params[1], GetPlayerNameEx(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					if(Info[params[0]][pMaskuse] == 1)
					{
						format(string, sizeof(string), "* %s saca un poco de dinero (%d$) y se lo da al desconocido.", GetPlayerNameEx(playerid), params[1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
						format(string, sizeof(string), "* %s saca un poco de dinero (%d$) y se lo da a %s.", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					format(string, sizeof(string), "* %s pagó %d$ a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
    				Log("LOGS/pagos.log", string);
                }
				else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
            }
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		}
		return 1;
    }
    /*zcmd(pagar, playerid, params[])
    {
        new string[128];
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes que tener mínimo 2 Horas de juego para dar dinero.");
        if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar esto aquí.");
        if(!sscanf(params, "di", params[0], params[1]))
		{
            if(params[1] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No posees esa cantidad.");
            if(params[1] < 1 || params[1] > 100000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Máximo: $100,000");
            if(IsPlayerConnected(params[0]))
			{
                if (GetPVarInt(playerid, "GiveMoneyTimer") > 0)
				{
				format(string, sizeof(string), "Tienes que esperar {FF0000}%d{FFFFFF} segundos después de pagado.", GetPVarInt(playerid, "GiveMoneyTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
				}
				if(ProxDetectorS(5.0, playerid, params[0]))
				{
    			SetPVarInt(playerid, "GiveMoneyTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
				Bought(playerid, params[1]);
				Earn(params[0], params[1]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(params[0], 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s saca un poco de dinero (%d$) y se lo da a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s pagó %d$ a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
    			Log("LOGS/pagos.log", string);
                }
				else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
            }
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /pagar (jugador) (cantidad)");
        return 1;
    }*/
	zcmd(vehid, playerid, params[])
	{
	    if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No has logueado.");
        if(IsPlayerInAnyVehicle(playerid))
		{
			new string[12];
	        format(string, sizeof(string), "* Vehiculo ID: %d.", GetPlayerVehicleID(playerid));
	        SendClientMessageEx(playerid, COLOR_GREY, string);
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo");
	    return 1;
	}
    zcmd(desrentarauto, playerid, params[]){
        new idcar = GetPlayerVehicleID(playerid);
        new Float:health;
        if(IsaRent[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No has rentado ningún auto.");
		if(IsARentCar(idcar) && HireKey[playerid] == idcar)
		{
		    SetVehicleParamsEx(idcar,0,0,0,0,0,0,0);
  			SendClientMessageEx(playerid, COLOR_WHITE, "Gracias, así ayudas a mantener en orden la ciudad y conservar el medio ambiente.");
    		GetVehicleHealth(idcar, health);
    		if(health > 900) // Si la vida es mayor de 900, te devolvemos el dinero.
    		{
    			if(TypeOfRent[playerid] == 1)
    			{
    				SendClientMessageEx(playerid, COLOR_GREY, "Has obtenido los 800 dólares por devolver el vehículo en buen estado.");
    				Earn(playerid, 800);
    			}
    			if(TypeOfRent[playerid] == 2)
    			{
    				SendClientMessageEx(playerid, COLOR_GREY, "Has obtenido los 3500 dólares por devolver el vehículo en buen estado.");
    				Earn(playerid, 3500);
    			}
    			if(TypeOfRent[playerid] == 3)
    			{
    				SendClientMessageEx(playerid, COLOR_GREY, "Has obtenido los 200 dólares por devolver el vehículo en buen estado.");
    				Earn(playerid, 200);
    			}
    		}
    		else {SendClientMessageEx(playerid, COLOR_GREY, "No se te devolvió el dinero del alquiler, el vehículo no estaba en condiciones adecuadas.");}
  			SetVehicleToRespawn(HireKey[playerid]);
  			IsaRent[playerid] = 0; TypeOfRent[playerid] = 0;
  			RentTime[playerid] = 0; HireKey[playerid] = 9999;
		}
		else
		{
			SafeDialogEx(playerid, ACEPTAR_MULTA, DIALOG_STYLE_MSGBOX, "[Desrentarauto]: ¿Dónde está el vehículo?", "No estás dentro de tu vehículo para desrentarlo, por ello serás multado.\nSi sabes donde está tu vehículo ver a por este ahora mismo.\nLa multa por no devolver el vehículo es de 500 dólares.", "Aceptar","Salir");
		}
        return 1;
    }
    /*zcmd(subirnivel, playerid, params[])
	{
	    if(Info[playerid][pLevel] >= 0)
		{
			new nxtlevel = Info[playerid][pLevel]+1;
			new expamount = nxtlevel*explevel;
			if(Info[playerid][pExp] < expamount)
			{
			    new infostring[128];
				format(infostring, 128, "Necesitas %i puntos de respeto más para subir de nivel, tienes %d.",expamount,Info[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, infostring);
				return 1;
			}
			else
			{
			    new infostring[64];
				format(infostring, sizeof(infostring), "~g~~h~Nivel %d!", nxtlevel);
				GameTextForPlayer(playerid, infostring, 5000, 1);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Info[playerid][pLevel]++;
				Info[playerid][pExp] = Info[playerid][pExp]-expamount;
				OnPlayerSavedStats(playerid);
				if(Info[playerid][pLevel] == 5) SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}[LVL5]:{FFFFFF} El canal de ayuda será deshabilitado automáticamente al ingresar al servidor.");
			}
		}
	    return 1;
 	}*/
	CMD:subirnivel(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "Este comando ha sido removido. Se sube de nivel automáticamente.");
	    return 1;
	}
    zcmd(quitar, playerid, params[])
    {
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
			return 1;
		}
        if(!IsACop(playerid) && !Team_SAEM(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
        new item[32], string[128], giveplayerid;
        if(!sscanf(params, "ds[32]",giveplayerid,item))
        {
            if(!IsPlayerConnected(giveplayerid))               return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
			if(GetPlayerSpecialAction(giveplayerid) != SPECIAL_ACTION_HANDSUP && Info[giveplayerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes revisar a una persona si no tiene las manos arriba (/rendirse) o si está detenida.");
			if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador muy lejos.");
            if(strcmp(item,"lconduccion",true) == 0)
			{
			    Info[giveplayerid][pCarLic] = 0;
			    format(string, sizeof(string), "* Oficial %s quita la licencia de conducción a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"lvuelo",true) == 0)
			{
			    Info[giveplayerid][pFlyLic] = 0;
			    format(string, sizeof(string), "* Oficial %s quita la licencia de vuelo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"larma",true) == 0)
			{
			    Info[giveplayerid][pGunLic] = 0;
		        format(string, sizeof(string), "* Oficial %s quita la licencia de armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"drogas",true) == 0)
			{
                Info[giveplayerid][pCrack] = 0;
                Info[giveplayerid][pPot] = 0;
			    format(string, sizeof(string), "* Oficial %s quita las drogas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"materiales",true) == 0)
			{
                Info[giveplayerid][pMats] = 0;
			    format(string, sizeof(string), "* Oficial %s quita los materiales a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"ganzuas",true) == 0)
			{
                Info[giveplayerid][pGanzuas] = 0;
			    format(string, sizeof(string), "* Oficial %s quita las ganzúas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"telefono",true) == 0)
			{
                Info[giveplayerid][pPnumber] = 0;
			    format(string, sizeof(string), "* Oficial %s quita el teléfono %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"pasaporte",true) == 0)
			{
                Info[giveplayerid][pPasaporte] = 0;
			    format(string, sizeof(string), "* Oficial %s quita el pasaporte a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"seguro",true) == 0)
			{
                Info[giveplayerid][pSeguro] = 0;
			    format(string, sizeof(string), "* Oficial %s quita el seguro médico a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(strcmp(item,"armas",true) == 0)
			{
			    ResetPlayerWeaponsEx(giveplayerid);
       			format(string, sizeof(string), "* Oficial %s le quita las armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
       			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Item incorrecto.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "* /quitar <jugador> <item>");
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Items: lconduccion, lvuelo, larma, drogas, materiales, ganzuas, telefono, armas, pasaporte, seguro(médico)");
		}
        return 1;
	}
    zcmd(obtenerip, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        if(!sscanf(params, "d", params[0]))
        {
            new ip[20], string[64];
            GetPlayerIp(params[0],ip,sizeof(ip));
            format(string, sizeof(string), "* La IP de %s es %s", GetPlayerNameEx(params[0]), ip);
            SendClientMessageEx(playerid, COLOR_GRAD2, string);
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza /obtenerip (jugador)");
        return 1;
    }
	CMD:desbanip(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pBanAppealer] == 1)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desbanip (ip)");
			if(IsValidIP(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa IP no es válida!");
			new string[128], year, month,day;
			getdate(year, month, day);
			RemoveBan(params);
			format(string, 128, "[AdmCmd]: %s desbaneó la IP %s", GetPlayerNameEx(playerid), params);
			ABroadCast(COLOR_GENERAL,string,2);
			format(string, sizeof(string), "AdmCmdExe: %s desbaneó la IP %s (%d-%d-%d)", GetPlayerNameEx(playerid), params, month, day, year);
			Log("LOGS/desbanip.log", string);
		}
		return 1;
	}
 CMD:desban(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
  		if(Info[playerid][pBanAppealer] == 1)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desban (Nombre_Apellido)");
			if(INI_Exist(params))
			{
				new PlayerFile[ 13 + MAX_PLAYER_NAME + 1], string[128]; //tmpunban[32], stringfile[32]
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"AdminZC",0);
	    		INI_WriteInt(File,"BanAppealer",0);
				INI_WriteInt(File,"FactionModerator",0);
				INI_WriteInt(File,"GangModerator",0);
				INI_WriteInt(File,"AdminNivelZC",0);
				INI_WriteInt(File,"Helper",0);
				INI_WriteInt(File,"BanZC",0);
				INI_WriteInt(File,"ShopTech",0);
				INI_Close(File);
				format(string, 128, "[AdmCmdExe]: %s fue desbaneado por %s.", params, GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "[LOG] %s fue desbaneado por %s. (%d-%d-%d)", params, GetPlayerNameEx(playerid),month,day,year);
				Log("LOGS/desban.log", string);
			}
			else SendClientMessageEx( playerid, COLOR_WHITE, "Esa cuenta no existe." );
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(expulsarstaff, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 6000 && Info[playerid][pModStaff] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /expulsarstaff (Nombre_Apellido)");
  		if(INI_Exist(params))
		{
 			new PlayerFile[MAX_PLAYER_NAME + 32];
	    	format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    	new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
	    	INI_WriteInt(File,"Helper",0);
        	INI_WriteInt(File,"AdminZC",0);
        	INI_WriteInt(File,"AdminNivelZC",0);
    		INI_WriteInt(File,"BanAppealer",0);
    		INI_WriteInt(File,"FactionModerator",0);
    		INI_WriteInt(File,"GangModerator",0);
    		INI_WriteInt(File,"ShopTech",0);
    		INI_Close(File);
           	format(string, sizeof(string), "[INFRANET] %s expulsó del staff a %s (CMD OFFLINE)", GetPlayerNameEx(playerid), params);
           	ABroadCast(COLOR_GENERAL,string,4);
           	Log("LOGS/admin.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Está cuenta no existe.");
		return 1;
	}
    zcmd(banoffline, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	  	if(Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
		new string[128], playername[MAX_PLAYER_NAME], reason[64];
		if(sscanf(params, "ss", playername, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /banear (Nombre_Apellido) (Razón)");
  		if(INI_Exist(playername))
		{
				new PlayerFile[MAX_PLAYER_NAME + 32];
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, playername);
	    		new INI:File = INI_Open(PlayerFile);

	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"AdminZC",0);
	    		INI_WriteInt(File,"Helper",0);
	    		INI_WriteInt(File,"AdminNivelZC",0);
	    		INI_WriteInt(File,"BanZC",1);
	    		INI_Close(File);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "AdmCmd: %s fue baneado por %s, razón: %s (%d-%d-%d)", playername, GetPlayerNameEx(playerid), reason, month, day, year);
				Log("LOGS/offban.log", string);
				format(string, 128, "[AdmCmd]: %s fue baneado por %s, razón: %s [CMD OFFLINE]", playername, GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa cuenta no existe." );
		return 1;
	}
	CMD:changepass(playerid, params[])
	{
		if (gPlayerLogged{playerid})
		{
			SafeDialogEx(playerid, CPASS, DIALOG_STYLE_PASSWORD, "{00F70C}Cambiar Clave", "Por favor pon tu contraseña nueva:", "Cambiar", "Atrás" );
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Debes de estar conectado para usar este comando.");
		return 1;
	}
	CMD:ipod(playerid, params[])
	{
	    if(Info[playerid][pIpadMusic] == 1)
	    {
	        new string[128];
			SafeDialogEx(playerid, IPAD, DIALOG_STYLE_LIST, "{00F70C}Ipod", "Drum and Bass HD\nReggaeton 24/7\nMetal Time\nRock and Roll\nLa Mega\nRap Gansta\nBachata radio\nRadio Mambo\nSlap Back Radio\nMáxima FM\nMúsica personalizada\nApagar IpodMusic", "Play", "Guardar");
            format(string, sizeof(string), "* %s saca su Ipod del bolsillo.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes un IpodMusic, puedes conseguirlo en un 24/7. (Tienda de electrónica)");
		return 1;
	}
 	zcmd(cuenta, playerid, params[]){
		if(Info[playerid][pLevel] >= 1)
		{
			ShowStats(playerid,playerid);
		}
		return 1;
	}
	zcmd(gob, playerid, params[])
	{
	    new string[128];
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /gob (texto)");
			return 1;
		}		if(Info[playerid][pLeader] == 1 || Gobierno(playerid) || Info[playerid][pLeader] == 2 || Info[playerid][pLeader] == 3 || Info[playerid][pLeader] == 4 || Info[playerid][pLeader] == 7 || Info[playerid][pLeader] == 9 || Info[playerid][pLeader] == 17 || Info[playerid][pLeader] == 19 || Info[playerid][pLeader] == 20)
		{
			if(Info[playerid][pLeader] == 1)
	    	{
			    format(string, sizeof(string), "[SAPD] Comandante %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x2641FEAA, string);
	    	}
			else if(Info[playerid][pLeader] == 2)
	    	{
			    format(string, sizeof(string), "[FBI] Director %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x2641FEAA, string);
	    	}
	    	else if(Info[playerid][pLeader] == 3)
	        {
			    format(string, sizeof(string), "[SAEM] Coronel %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x2641FEAA, string);
	        }
            else if(Info[playerid][pLeader] == 4)
	    	{
			    format(string, sizeof(string), "[SEC] Director %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x2641FEAA, string);
	    	}
	        else if(Presidente(playerid))
	        {
			    format(string, sizeof(string), "[GOB] Presidente %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x2641FEAA, string);
			}
			else if(Gobierno(playerid) && Info[playerid][pRank] == 5)
			{
			    format(string, sizeof(string), "[GOB] VicePresidente %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x2641FEAA, string);
			}
			else if(Info[playerid][pLeader] == 9)
			{
			    format(string, sizeof(string), "[S.JUD] Director General %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
			    SendClientMessageToAllEx(0x2641FEAA, string);
			}
  		    else if(Info[playerid][pLeader] == 19) // Al QAEDA.
	    	{
			    format(string, sizeof(string), "[HACKGOB] %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x2641FEAA, string);
	    	}
	    	else if(Info[playerid][pLeader] == 20) // ALEPH.
	    	{
			    format(string, sizeof(string), "[HACKGOB] %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params[0]);
				SendClientMessageToAllEx(0x2641FEAA, string);
	    	}
  		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
		return 1;
	}
	zcmd(himno, playerid, params[])
	{
			if(Info[playerid][pLeader] == 1) // LSPD. Mexico.
	    	{
				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
 					PlayAudioStreamForPlayer(i,"http://k53.offliberty.com/8maaihx8xqY.mp3");
 				}
				SendClientMessageToAllEx(0x2641FEAA, "[SAPD] Inicio de transmisión ((Comienza a sonar el Himno del cuerpo de polícias - Usa /ignorar para no escucharlo.))");
	    	}
	    	else if(Info[playerid][pLeader] == 3) // SAEM. Colombia.
	        {
				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
 					PlayAudioStreamForPlayer(i,"http://k17.offliberty.com/XIwGi9gcgQE.mp3");
 				}
				SendClientMessageToAllEx(0x2641FEAA, "[SAEM] Inicio de transmisión ((Comienza a sonar el Himno del Ejército - Usa /ignorar para no escucharlo.))");
	    	}
	        else if(Presidente(playerid)) // Gobierno.
	        {
				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
 					PlayAudioStreamForPlayer(i,"http://k13.offliberty.com/1BJPW8YmP_U.mp3");
 				}
				SendClientMessageToAllEx(0x2641FEAA, "[GOB] Inicio de transmisión ((Comienza a sonar el Himno de la Nación - Usa /ignorar para no escucharlo.))");
	    	}
	    	else if(Info[playerid][pLeader] == 19) // Al QAEDA.
	    	{
				for(new i = 0; i < MAX_PLAYERS; i++)
	   			{
 					PlayAudioStreamForPlayer(i,"http://k58.offliberty.com/O_0ZTsLHycU.mp3");
 				}
				SendClientMessageToAllEx(0x2641FEAA, "[HACKGOB] Inicio de transmisión no autorizada ((Comienza a sonar algo - Usa /ignorar para no escucharlo.))");
	    	}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
			return 1;
	}
 	zcmd(impuesto, playerid, params[])
	{
	    if(Presidente(playerid))
	    {
	        if(!sscanf(params, "i", params[0]))
	        {
	            if(params[0] < 0 || params[0] > 1000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Valor entre 1 - 1000");

	            new string[90];
	            TaxValue = params[0];
				format(string, sizeof(string), "* [GOBIERNO] {FFFFFF}Nuevo pago por impuesto. (%d$)", TaxValue);
				SendClientMessageToAllEx(0x00ACFFFF, string);

	        }
	        else SendClientMessageEx(playerid, COLOR_GRAD2, "* /impuesto <cantidad>");
	    }
	    else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
	    return 1;
 	}
	zcmd(altavoz, playerid, params[])
	{
        if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no tiene un telefono.");
        if(Mobile[playerid] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una llamada telefonica.");
        if(IsPlayerConnected(playerid))
        {
			if(Info[playerid][pSpeaker] == 0)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW2, "* Beep * El altavoz está conectado.");
				Info[playerid][pSpeaker] = 1;
				return 1;
			}
			if(Info[playerid][pSpeaker] == 1)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW2, "* Beep * El altavoz se ha desconectado.");
				Info[playerid][pSpeaker] = 0;
				return 1;
			}
		}
		return 1;
	}
    zcmd(derechos, playerid, params[])
    {
        if(IsACop(playerid))
        {
            new string[128];
	        format(string, sizeof(string),"%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        format(string, sizeof(string),"%s dice: Tiene derecho a un abogado, si no puede pagar uno, se le asignará uno a costas del Estado.",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        format(string, sizeof(string),"%s dice: Tiene derecho a una llamada por teléfono.",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        format(string, sizeof(string),"%s dice: ¿De acuerdo señor?",GetPlayerNameEx(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        }
        return 1;
    }
    zcmd(codigos, playerid, params[])
    {
        if(IsACop(playerid))
        {
            SendClientMessageEx(playerid,COLOR_BLUE,"[LSPD-FBI] Códigos de radio de uso IC. [Disponible más detallado en el foro (URL en /foro).]");
			SendClientMessageEx(playerid,COLOR_WHITE,"10-0 Despejado. || 10-1 Persecución en ... || 10-2 Sospechoso en... || 10-3 Detenido. || 10-4 Recibido, OK. || 10-5 Retransmitir mensaje.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-6 Ocupado. || 10-7 Precaución en... || 10-8 Procesar al detenido. || 10-9 Llamada atendida. || 10-10 Unidad libre de asignación.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-11 Robo en progreso. || 10-14 Requisa,Revisión,Revisar. || 10-15 Disturbio por problema civil en... || 10-16 Reten.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-17 Situación controlada. || 10-20 Lugar donde se encuentra. || 10-21 Teléfono || 10-22 Moto/vehículo || 10-23 Esperar un momento.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-24 Ponerse en contacto || 10-25 Terminar tarea. || 10-26 Cancelar la última información. || 10-30 No está de acuerdo a las reglas.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-31 Coche mal aparcado en... || 10-33 Mi vida corre peligro. || 10-34 Solicitud de ayuda. || 10-35 Información Clasificada.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-36 Candado policial. || 10-37 Solicitud de grúa en... || 10-38 Solicitud de Paramédicos en ... || 10-39 Solicitud de Bomberos.");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-40 Situación actual... || 10-42 Accidente de tránsito en... || 10-44 Tengo un recado. || 10-48 Mal uso de la radio. || 10-53 Civil/Persona");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-54 Civil/es fuertemente armado/s. || 10-57 Irse del lugar.. || 10-68 Enviar información. || 10-73 Patrullando en... || 10-74 Negativo...");
        	SendClientMessageEx(playerid,COLOR_WHITE,"10-76 Voy a/me dirijo a... || 10-80 Nos vemos en... || 10-81 Solicitud de extracción (Que alguien me recoja) en... || 10-86 Agente disponible");
        }
        return 1;
    }
   	zcmd(autorizar, playerid, params[])
	{
		if(!sscanf(params, "d", params[0]))
 		{
			if(params[0] == playerid) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡No puedes autorizarte a ti mismo!");
			if(params[0] == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador no conectado.");
 			if(ProxDetectorS(8.0, playerid, params[0]))
 			{
		    		new string[90];
					format(string, sizeof(string), "El policía %s le autorizó para entrar en prisión.", GetPlayerNameEx(playerid));
					SendClientMessageEx(params[0], COLOR_RED2, string);
					format(string, sizeof(string), "Has autorizado a %s para que pueda acceder a la prisión.", GetPlayerNameEx(params[0]));
					SendClientMessageEx(playerid, COLOR_RED2, string);
					Autorizado[params[0]] = 1; Info[params[0]][pMember] = 1; Info[params[0]][pRank] = 1;
 			}
		 	else SendClientMessageEx(playerid, COLOR_GREY, "El jugador está muy lejos.");
        }
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utilize: /autorizar <ID> [Este comando sirve para permitir el acceso a un civil a la prisión]");
    	return 1;
    }
   	zcmd(camaras, playerid, params[])
  	{
		if (Vigilando[playerid] == 1)
		{
			new CAM1[500];
	    	strcat(CAM1,"\tCamara 1.0\t\t\t\t(Unity Station) \n\tCamara 2.0\t\t\t\t(Ayuntamiento INT)\n\tCamara 3.0\t\t\t\t(Juzgados)\n\tCamara 4.0\t\t\t\t(Grotti)\n");
	    	strcat(CAM1,"\tCamara 5.0\t\t\t\t(Banco Safe)\n\tCamara 6.0\t\t\t\t(Avenida Principal)\n\tCamara 7.0\t\t\t\t(VineWood)\n\tCamara 8.0\t\t\t\t(Comisaria)");
			ShowPlayerDialog(playerid,CAMARAS_DIALOGO,DIALOG_STYLE_LIST,
			"CCTV - Seguridad LSPD",CAM1,"Ver","Salir");
			return 1;
		}
		else if (PlayerToPoint(3.5, playerid, 1574.6801, -1642.7600, 4989.5900))
  		{
			new CAM1[500];
	    	strcat(CAM1,"\tCamara 1.0\t\t\t\t(Unity Station) \n\tCamara 2.0\t\t\t\t(Ayuntamiento INT)\n\tCamara 3.0\t\t\t\t(Juzgados)\n\tCamara 4.0\t\t\t\t(Grotti)\n");
	    	strcat(CAM1,"\tCamara 5.0\t\t\t\t(Banco Safe)\n\tCamara 6.0\t\t\t\t(Avenida Principal)\n\tCamara 7.0\t\t\t\t(VineWood)\n\tCamara 8.0\t\t\t\t(Comisaria)");
			ShowPlayerDialog(playerid,CAMARAS_DIALOGO,DIALOG_STYLE_LIST,
			"CCTV - Seguridad LSPD",CAM1,"Ver","Salir");
			return 1;
		}
        else if (PlayerToPoint(5, playerid, 2365.8762, 1562.0962, 28.0)) return Message(playerid, COLOR_GRAD2, "Las cámaras de FBI se encuentran inoperativas.");
		else SendClientMessageEx(playerid, COLOR_GRAD2, "¡No estás en la sala de cámaras de LSPD/FBI!");
		return 1;
    }
   	zcmd(salircamaras, playerid, params[])
  	{
   		if(Team_LSPD(playerid))
   		{
   			if (Vigilando[playerid] == 1)
			{
				SetPosEx(playerid,1573.819213,-1642.713256,4990.585937, 90.0, 1, 1);
				TogglePlayerControllable(playerid, 1);
				SetCameraBehindPlayer(playerid);
				LoadObjects(playerid);
 				Vigilando[playerid] = 0;
 				Muted[playerid] = 0;
 				RemoveFlashBack(playerid);
 			}
	 		else SendClientMessageEx(playerid, COLOR_GRAD2, "¡No estás revisando las cámaras en este momento!");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "¡No puedes usar este comando!");
 		return 1;
    }
    zcmd(salircamara, playerid, params[])
	{
 	return cmd_salircamaras(playerid, params);
    }
    zcmd(robar, playerid, params[])
    {
        if(Hitman(playerid) || Team_Groove(playerid) || Team_Ballas(playerid) || Team_Latin(playerid) || Team_Sureno(playerid) || Team_Rusa(playerid) || Team_LCN(playerid) || Team_Yakuza(playerid) || Team_Alqaeda(playerid) || Info[playerid][pFMember] < 255)
        {
           if(Tienda_247(playerid))

           {
              if(Info[playerid][pRob] >= 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya robaste, espera al próximo PayDay.");
              else
              {
		      GivePlayerCash(playerid, 3500);
		      Info[playerid][pRob]++;
		      SendClientMessageEx(playerid, COLOR_WHITE, "Has robado un 24/7.");
              }
            }
		 return 1;
		}
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
			return 1;
		}
        if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar esto aquí.");
        if(Hitman(playerid) || Team_Groove(playerid) || Team_Ballas(playerid) || Team_Latin(playerid) || Team_Sureno(playerid) || Team_Rusa(playerid) || Team_LCN(playerid) || Team_Yakuza(playerid) || Team_Alqaeda(playerid) || Info[playerid][pFMember] < 255)
        {
		    if(Info[playerid][pRob] >= 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya robaste, espera al próximo PayDay.");
		    if(!sscanf(params, "s[32]", params[0]))
		    {
		        new string[128];
		        if(strcmp(params[0],"persona",true) == 0)
		        {
		            new victim = GetClosestPlayer(playerid);
		            if(ProxDetectorS(2.0,playerid, victim))
		            {
                        if(GetPlayerWeapon(victim) == 41)
		    			{
	        				format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla", GetPlayerNameEx(playerid), GetPlayerNameEx(victim));
							ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
       						format(string, sizeof(string), "* %s le rocía la cara con un spray anti-ladrones a %s.", GetPlayerNameEx(victim), GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							Info[playerid][pRob]++;
							SendClientMessageEx(params[0], COLOR_YELLOW2, "-> ¡Evitaste que te robaran!");
					    }
					    new rob = random(2)+1;
					    if(rob == 1)
					    {
	        				Info[params[0]][pPnumber] = 0;
					        format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y lo logra", GetPlayerNameEx(playerid) ,GetPlayerNameEx(params[0]));
							ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
       						format(string, sizeof(string), "* %s se acerca hacia %s y le roba su teléfono.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(params[0]));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendClientMessageEx(params[0], COLOR_YELLOW2, "¡Te han robado el teléfono!");
							SendClientMessageEx(playerid, COLOR_YELLOW2, "¡Has robado un teléfono! Véndelo en el mercado negro!");
							Info[playerid][pRob]++;
							TelfRob[playerid] += 1;
						}
						else
						{
      						format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
							ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
       						format(string, sizeof(string), "* %s se da cuenta y le da un golpe de puño a %s.", GetPlayerNameEx(params[0]), GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendClientMessageEx(params[0], COLOR_GENERAL, "Has evitado que te roben.");
							SendClientMessageEx(playerid, COLOR_YELLOW, "Te han pillado, Menudo ostión te has llevado, ¡Corre!");
							Info[playerid][pRob]++;
						}
		            }
		        }
		        else if(strcmp(params[0],"24-7",true) == 0)
		        {
		            if(!Tienda_247(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en el 24/7.");
		            else
		            {
		            	new robmoney = random(2000);
			            Earn(playerid, robmoney);
						ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000); // Rob
						Info[playerid][pRob]++;
						format(string, sizeof(string), "* %s amenaza con un arma al vendedor", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendRadioMessage(1, 0x8D8DFFFF, "* Central: Unos de las tiendas del 24/7 está siendo robada.");
						format(string, sizeof(string), "* Sospechoso identificado como: %s.", GetPlayerNameEx(playerid));
		            }
		        }
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /robar (24-7) ó (Persona)");
		}
        return 1;
    }
	CMD:ayudafichas(playerid, params[])
	{
    	SendClientMessageEx(playerid, COLOR_GREEN,"*** SOBRE FICHAS ***");
    	SendClientMessageEx(playerid, COLOR_WHITE,"Fichas VIP pueden ser canjeadas por armas en el VIP Locker.");
    	SendClientMessageEx(playerid, COLOR_WHITE,"Fichas VIP pueden ser ganadas en eventos o regalos.");
    	SendClientMessageEx(playerid, COLOR_WHITE,"Las armas cuestan de 1 a 5 fichas cada una.");
	    SendClientMessageEx(playerid, COLOR_WHITE,"Si tu deseas dar fichas VIP usa /darfichas");
	    SendClientMessageEx(playerid, COLOR_WHITE,"Si tu deseas vender fichas VIP usa /venderfichasvip");
	    return 1;
	}
	/////////////// SISTEMA DE RELIGIONES ////////////////////
	// - /togreligion. (Tog Channel)
	zcmd(rlider, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] >= 4000 || Info[playerid][pFactionModerator] == 1)
		{
		    if(!sscanf(params, "dd", params[0], params[1]))
		    {
                new rtext[30];
		        if(params[1] < 0 || params[1] > 4) 					return SendClientMessageEx(playerid, COLOR_WHITE, "Religión incorecta: 1 al 4.");
		        if(!IsPlayerConnected(params[0]))                   return SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		        switch(params[1])
		        {
		            case 0: 	{rtext = "Ninguna";}
		            case 1: 	{rtext = "Cristianismo";}
		            case 2: 	{rtext = "Islamismo";}
		            case 3: 	{rtext = "Nazismo";}
		            case 4: 	{rtext = "Shintoismo";}
		        }
		        new string[128];
		        gRel[playerid] = 0; // Canal religiodo abierto.
		        Info[params[0]][pReligion] = params[1]; // Religión ID.
		        Info[params[0]][pLiderReligioso] = params[1]; // Religión ID (Líder).
		        SendClientMessageEx(params[0], COLOR_GREY, "[COMANDOS LÍDER]: /togreligion - /y [Avisos a los Seguidores] - /seguidores [Lista miembros].");
		        format(string, sizeof(string), "Administrador %s te asignó líder religioso del %s.", GetPlayerNameEx(playerid), rtext);
		        SendClientMessageEx(params[0], COLOR_GREY, string);
		        format(string, sizeof(string), "[Religión]: %s asigno líder religioso del %s a %s.", GetPlayerNameEx(playerid), rtext, GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_LIGHTGREEN, string, 5000);
		    }
		    else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /rlider (jugador) (religión)");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "[EF] No autorizado.");
        return 1;
    }
    CMD:seguidores(playerid, params[])
	{
	new member = Info[playerid][pReligion];
    new leader = Info[playerid][pLiderReligioso];
    new teamnumber;
	if (Info[playerid][pLiderReligioso] != 0) teamnumber = Info[playerid][pLiderReligioso];
	else if (Info[playerid][pReligion] != 0) teamnumber = Info[playerid][pReligion];
    if(member > 0 || leader > 0)
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "{46FF92}[RELIGIÓN] Seguidores Conectados:");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    new string[40];
			if (IsPlayerConnected(i))
			{
				if (Info[i][pLiderReligioso] == teamnumber) format(string, sizeof(string), "%s (Líder Religioso).",GetPlayerNameEx(i));
				else if (Info[i][pReligion] == teamnumber) format(string, sizeof(string), "%s (Seguidor).",GetPlayerNameEx(i));
				if(strlen(string) > 0) SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a ninguna religión.");
    return 1;
	}
	zcmd(y, playerid, params[])
	{
	    if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
	    if(Info[playerid][pReligion] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no pertenece a ninguna religión.");
        if(!isnull(params))
	    {
			if(Info[playerid][pLiderReligioso] > 0)
			{
			    new religion = Info[playerid][pLiderReligioso], string[128];
			    if(religion==1) // Cristianos.
			    {format(string, sizeof(string), "** [CRISTIANOS] Patriarca %s dice %s **", GetPlayerNameEx(playerid), params);}
				else if(religion==2) // Musulmanes.
				{format(string, sizeof(string), "** [MUSULMANES] Imán %s dice %s **", GetPlayerNameEx(playerid), params);}
				else if(religion==3) // Nazis.
				{format(string, sizeof(string), "** [NAZIS] Führer %s dice %s **", GetPlayerNameEx(playerid), params);}
				else if(religion==4) // Shintoismo.
				{format(string, sizeof(string), "** [SHINTO] Aum Shinrikyo %s dice %s **", GetPlayerNameEx(playerid), params);}
				CanalReligioso(religion, COLOR_NEWS, string);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No eres líder de ninguna religión.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /y (texto). [Canal religioso]. Oyentes: /seguidores.");
		return 1;
	}
	CMD:religiones(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "[INFO]: (Religiomes disponibles en el servidor) - Cristianismo, Islamismo, Nazismo y Shintoismo.");
	    return 1;
	}
    zcmd(hotdog, playerid, params[])
	{
        if(!IsAtHotDogCar(playerid))   return SendClientMessageEx(playerid, COLOR_WHITE, "No estas en un lugar donde comprar un Hot Dog.");
		if(GetPlayerMoney(playerid) < 30) return SendClientMessageEx(playerid, COLOR_FADE2, "Vendedor dice: ¡Vete a otro lugar a comer gratis!");

		 new string[200];
	     new Float:Health;
         GetPlayerHealth(playerid, Health);
	        if(Health < 101)
		    {
            SetHP(playerid, Health+20);
            }
	    format(string, sizeof(string), "* %s come un Hot Dog", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    GivePlayerCash(playerid, -30);
	    ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,0);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Te has comido un Hot Dog y has recuperado 20 puntos de HP.");
		return 1;
	}
	zcmd(irfacc, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] >= 3 || Info[playerid][pFactionModerator] == 1)
		{
  			new admintel[] = "SAPD\nFBI\nSAEM\nSEC\nLSTV\nMecanicos\nGobierno\nAgencia Hitman\nSistema Judicial\nGroove Street\nBallaz the King\nLatin Kings\nSureños 13\nMafia Rusa\nLCN\nMafia Yakuza\nCartel del Golfo\nEE.UU";
            SafeDialogEx(playerid,TELEPORTS_FACCIONES,DIALOG_STYLE_LIST,"{00F70C}Teleports Facciones {FF0000}INFRANET-RP",admintel,"Ir","Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "[EF] No autorizado.");
		return 1;
	}
	zcmd(darlider, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pFactionModerator] == 1)
		{
		    if(!sscanf(params, "dd", params[0], params[1]))
		    {
                new ftext[30];
		        if(params[1] < 0 || params[1] > 20) 				return SendClientMessageEx(playerid, COLOR_WHITE, "ID facción incorrecto.");
		        if(!IsPlayerConnected(params[0]))                   return SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		        switch(params[1])
		        {
		            case 0: 	{Info[params[0]][pRank] = 0; ftext = "Ninguna"; }
		            case 1: 	{Info[params[0]][pRank] = 6; ftext = "Los Santos Dep Policial"; }
		            case 2: 	{Info[params[0]][pRank] = 6; ftext = "Federal Bureau Investigation"; }
		            case 3: 	{Info[params[0]][pRank] = 6; ftext = "San Andreas Ejercito Militar"; }
		            case 4: 	{Info[params[0]][pRank] = 6; ftext = "S.E.C - Médicos y Bomberos"; }
		            case 5:     {Info[params[0]][pRank] = 6; ftext = "Los Santos Televisión"; }
		            case 6:     {Info[params[0]][pRank] = 6; ftext = "Crazy Motors"; }
		            case 7:     {Info[params[0]][pRank] = 6; ftext = "Gobierno"; }
                    case 8:     {Info[params[0]][pRank] = 6; ftext = "Hitman"; }
                    case 9:     {Info[params[0]][pRank] = 6; ftext = "Sistema Judicial"; }
                    case 10:    {Info[params[0]][pRank] = 6; ftext = "Groove Street";}
                    case 11:    {Info[params[0]][pRank] = 6; ftext = "Ballas the Kings";}
                    case 12:    {Info[params[0]][pRank] = 6; ftext = "Latin Kings";}
                    case 13:    {Info[params[0]][pRank] = 6; ftext = "Sureños 13";}
                    case 14:    {Info[params[0]][pRank] = 6; ftext = "Mafia Rusa";}
                    case 15:    {Info[params[0]][pRank] = 6; ftext = "La Cosa Nostra";}
                    case 16:    {Info[params[0]][pRank] = 6; ftext = "Mafia Yakuza"; }
                    case 17:    {Info[params[0]][pRank] = 6; ftext = "Cartel del Golfo"; }
                    case 18:    {Info[params[0]][pRank] = 6; ftext = "Mafia Donakov"; }
                    case 19:     {Info[params[0]][pRank] = 6; ftext = "FACC 19"; }
                    case 20:     {Info[params[0]][pRank] = 6; ftext = "FACC 20";}
		        }
		        new string[128];
		        pTazer[params[0]] = 0;
		        Info[params[0]][pFMember] = 255; // Desbugfamilias.
		        Info[params[0]][pLeader] = params[1];
		        Info[params[0]][pMember] = params[1];
		        format(string, sizeof(string), "Administrador %s te asignó el líder de la facción %s.", GetPlayerNameEx(playerid), ftext);
		        SendClientMessageEx(params[0], 0x6ADFFFFF, string);
		        format(string, sizeof(string), "[ADMIN]: %s asigno lider de la facción %s a %s.", GetPlayerNameEx(playerid), ftext, GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_LIGHTGREEN, string, 5000);
		    }
		    else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /darlider (jugador) (facción)");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "[EF] No autorizado.");
        return 1;
    }
	zcmd(darliderxd, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pFactionModerator] == 1)
		{
		    if(!sscanf(params, "dd", params[0], params[1]))
		    {
                new string[128];
		        if(params[1] < 0 || params[1] > MAX_FACTION) 		return SendClientMessageEx(playerid, COLOR_WHITE, "ID facción incorrecto.");
		        if(!IsPlayerConnected(params[0]))                   return SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		        OnDuty[params[0]] = 0; pTazer[params[0]] = 0; Info[params[0]][pFMember] = 255; // Desbug Onduty, Desbug del Tazer y Desbug Familias.
		        Info[params[0]][pLeader] = params[1];
		        Info[params[0]][pMember] = params[1];
		        if(params[1] == 0){Info[params[0]][pRank] = 0;} // Si la facción es ID 0, el rango es 0.
		        else {Info[params[0]][pRank] = 6;} // Si la facción no es ID 0, se le da el rango 6.
		        format(string, sizeof(string), "[Aviso] Administrador %s te asignó el líder de la facción %s.", GetPlayerNameEx(playerid), InfoFacc[params[1]][gFacc]);
		        SendClientMessageEx(params[0], 0x6ADFFFFF, string);
		        format(string, sizeof(string), "[ADM]: %s asigno lider de la facción %s a %s.", GetPlayerNameEx(playerid), InfoFacc[params[1]][gFacc], GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_LIGHTGREEN, string, 2);
		    }
		    else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /darlider (jugador) (facción)");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "[EF] No autorizado.");
        return 1;
    }
	zcmd(darmiembro, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pFactionModerator] == 1)
		{
		    new rango; // Rango dentro de la facción, entre el 1 y el 6.
		    if(!sscanf(params, "dii", params[0], params[1], rango))
		    {
                new string[128];
		        if(params[1] < 0 || params[1] > MAX_FACTION) 		return SendClientMessageEx(playerid, COLOR_WHITE, "ID facción incorrecto.");
		        if(!IsPlayerConnected(params[0]))                   return SendClientMessageEx(playerid, COLOR_WHITE, "Jugado desconectado.");
		        if(rango <= 0 || rango >= 6) 						return SendClientMessageEx(playerid, COLOR_WHITE, "Rango erróneo (1-5).");
		        OnDuty[params[0]] = 0; // Desbug Onduty.
		        pTazer[params[0]] = 0; // Desbug Tazer.
		        Info[params[0]][pLeader] = 0; // Desbug Lider.
		        Info[params[0]][pMember] = params[1]; // Miembro de la facción In Game.
		        Info[params[0]][pFMember] = 255; // Desbug Familias.
		        Info[params[0]][pRank] = rango; //Rango de la facción.
		        Info[params[0]][pDivision] = 0; // Reset de división en la facción.
		        format(string, sizeof(string), "[Aviso] Administrador %s te asignó el miembro de la facción %s, con rango %d.", GetPlayerNameEx(playerid), InfoFacc[params[1]][gFacc], rango);
		        SendClientMessageEx(params[0], 0x6ADFFFFF, string);
		        format(string, sizeof(string), "[ADM]: %s asigno miembro de la facción %s (Rango: %d) a %s.", GetPlayerNameEx(playerid), InfoFacc[params[1]][gFacc], rango, GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_LIGHTGREEN, string, 2);
		    }
		    else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /darmiembro [Jugador] [Facción ID] [Rango].");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "[EF] No autorizado.");
        return 1;
    }
CMD:infofacciones(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
		SendClientMessageEx(playerid, COLOR_RED, "[IMPORTANTE] Información respecto a facciones/familias. [Leer con atención]");
		SendClientMessageEx(playerid, COLOR_WHITE, "1. Hay 3 encargados, una persona se legales, otra de ilegales y otra de familias.");
		SendClientMessageEx(playerid, COLOR_WHITE, "Comunicate con el administrador correcto para que revise tu postulación en el foro.");
		SendClientMessageEx(playerid, COLOR_WHITE, "2. Listado de facciones en /facc, cada facción puede tener como máximo 2 líderes.");
		SendClientMessageEx(playerid, COLOR_WHITE, "Los lideres están obligados a permanecer como mínimo 7 días en la facción. (Excepciones)");
		SendClientMessageEx(playerid, COLOR_WHITE, "3. Las facciones pueden ser limpiadas por el encargado cuando llegen a 3/3 ADV.");
		SendClientMessageEx(playerid, COLOR_WHITE, "Una vez superen el número de advertencias se saca a todo miembro de la facción.");
		SendClientMessageEx(playerid, COLOR_WHITE, "4. Despidos/Contrataciones se realizan con rol obligatorio, sea por abandono vuluntario o PK.");
		SendClientMessageEx(playerid, COLOR_WHITE, "En el foro se dispone de toda la información acerca de las facciones. WEB: infranet.foroactivo.com");
		SendClientMessageEx(playerid, COLOR_WHITE, "[NEW] Podrán hacerse cambios de liderazgo de manera IC sin necesidad de ser limpiada.");
	}
	return 1;
}
CMD:infoad(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
		SendClientMessageEx(playerid, COLOR_RED, "[IMPORTANTE] Requísitos al enviar un anuncio por /ad(s). [Leer con atención]");
		SendClientMessageEx(playerid, COLOR_WHITE, "1. No se permiten expresiones OOC, tipo: faccion, admin y similares.");
		SendClientMessageEx(playerid, COLOR_WHITE, "2. Todo término de rol está prohibido, sea MG, PG u otros. Disponen de /servicios.");
		SendClientMessageEx(playerid, COLOR_WHITE, "3. Prohibido anuncios que inciten al PG, publicidad de mafias o servicios ilegales.");
		SendClientMessageEx(playerid, COLOR_WHITE, "4. El Tag -EXTRA- es exclusivo para los miembros de LSTV (Online), con su CMD propio.");
		SendClientMessageEx(playerid, COLOR_WHITE, "5. Los precios no pueden seguir el formaro 10K, 5KK. En su lugar usar 5 mil dólares por ejemplo.");
		SendClientMessageEx(playerid, COLOR_WHITE, "6. Queda totalmente prohibido la búsqueda de personas, para ello existe FBI, es su rol.");
		SendClientMessageEx(playerid, COLOR_WHITE, "7. Usar este canal para insultar llevará un jail directo por IOOC vía /ad.");
		SendClientMessageEx(playerid, COLOR_WHITE, "8. Cualquier información que no sea IC no será válido como AD, para dudas usen /duda [Texto].");
		SendClientMessageEx(playerid, COLOR_WHITE, " ");
	}
	return 1;
}
CMD:editarf(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pFactionModerator] == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "[EF] No autorizado.");
		return 1;
	}
	new string[128], faccid, choice[12], valor[24];
	if(sscanf(params, "ds[12]s[24]", faccid, choice, valor)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarf (Facción Slot) (Tipo de edición: lider1/lider2/nombre) (Valor)");
	if(faccid < 0 || faccid > MAX_LEADERS) return SendClientMessageEx(playerid, COLOR_GREY, "Sólo hay 18 slots disponibles.");
 	if(strlen(valor) >= sizeof(valor)-1) return SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} El valor no puede ser más largo de 24 carácteres.");
	if(strcmp(choice, "nombre", true) == 0)
	{
		format(string, sizeof(string), "El administrador %s cambió el nombre de la facción (ID:%d) a %s.", GetPlayerNameEx(playerid), faccid, valor);
		ABroadCast(COLOR_GENERAL, string, 3);
		SendClientMessageEx(playerid, COLOR_WHITE, "Usaste con éxito el CMD /editarf [Facción Slot] [nombre, lider1, lider2] [Valor: nombre facc/Nombre_Apellido]");
		format(InfoFacc[faccid][gFacc], 24, "%s", valor);
		saveLideres(faccid);
		//return 1;
	}
	else if(strcmp(choice, "lider1", true) == 0)
	{
		format(string, sizeof(string), "El administrador %s puso como nuevo líder de la facción %s (ID:%d) a %s.", GetPlayerNameEx(playerid), InfoFacc[faccid][gFacc], faccid, valor);
		ABroadCast(COLOR_GENERAL, string, 3);
		SendClientMessageEx(playerid, COLOR_WHITE, "Usaste con éxito el CMD /editarf [Facción Slot] [nombre, lider1, lider2] [Valor: nombre facc/Nombre_Apellido]");
		format(InfoFacc[faccid][gLeader], 24, "%s", valor);
		saveLideres(faccid);
		//return 1;
	}
	/*else if(strcmp(choice, "materiales", true) == 0)
	{
		format(string, sizeof(string), "El administrador %s actualizó las armas de la facción %s (ID:%d).", GetPlayerNameEx(playerid), InfoFacc[faccid][gFacc], faccid);
		ABroadCast(COLOR_GENERAL, string, 3);
		SendClientMessageEx(playerid, COLOR_WHITE, "Usaste con éxito el CMD /editarfaccion [Facción Slot] [nombre, lider1, lider2] [Valor: nombre facc/Nombre_Apellido]");
		InfoFacc[faccid][gMateriales] = valor;
		saveLideres(faccid);
		//return 1;
	}*/
	else if(strcmp(choice, "lider2", true) == 0)
	{
		format(string, sizeof(string), "El administrador %s puso como nuevo Sub-líder de la facción %s (ID:%d) a %s.", GetPlayerNameEx(playerid),InfoFacc[faccid][gFacc], faccid, valor);
		ABroadCast(COLOR_GENERAL, string, 3);
		SendClientMessageEx(playerid, COLOR_WHITE, "Usaste con éxito el CMD /editarf [Facción Slot] [nombre, lider1, lider2] [Valor: nombre facc/Nombre_Apellido]");
		format(InfoFacc[faccid][gLeader2], 24, "%s", valor);
		saveLideres(faccid);
		//return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "Uso correcto: /editarf[Facción Slot(0-20)] [nombre, lider1, lider2] [Valor(Sea nombre o líder de la facc)].");
	return 1;
}
CMD:editarm(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pFactionModerator] == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "[EF] No autorizado.");
		return 1;
	}
	new string[128], faccid, material;
	if(sscanf(params, "dd", faccid, material)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarm (Facción Slot) (Número de materiales)");
	if(faccid < 0 || faccid > MAX_LEADERS) return SendClientMessageEx(playerid, COLOR_GREY, "Sólo hay 18 slots disponibles.");
	if(material < 0) return SendClientMessageEx(playerid, COLOR_GREY, "La cantidad tiene que ser positiva.");
	format(string, sizeof(string), "El administrador %s ha actualizado las armas de la facción %s (ID:%d) a %d unidades.", GetPlayerNameEx(playerid),InfoFacc[faccid][gFacc], faccid, material);
	ABroadCast(COLOR_GENERAL, string, 3);
	InfoFacc[faccid][gMateriales] = material;
	//saveLideres(faccid); Ya no se guarda, se actualiza el textdraw de información.
	ActualizarFaccion(faccid);
	return 1;
	
}
CMD:editarp(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pFactionModerator] == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "[EF] No autorizado.");
		return 1;
	}
	new string[128], faccid, paga;
	if(sscanf(params, "dd", faccid, paga)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarp (Facción Slot) (Cantidad)");
	if(faccid < 0 || faccid > MAX_LEADERS) return SendClientMessageEx(playerid, COLOR_GREY, "Sólo hay 18 slots disponibles.");
	if(paga < 0 || paga > 10000) return SendClientMessageEx(playerid, COLOR_GREY, "La cantidad tiene que ser positiva y no alcanzar los 10.000 dólares.");
	format(string, sizeof(string), "El administrador %s ha actualizado la paga de la facción %s (ID:%d) a %d dólares/rango.", GetPlayerNameEx(playerid),InfoFacc[faccid][gFacc], faccid, paga);
	ABroadCast(COLOR_GENERAL, string, 3);
	InfoFacc[faccid][gPaga] = paga;
	saveLideres(faccid);
	return 1;

}
zcmd(moverf, playerid, params[])
{
	if(Info[playerid][pAdminZC] < 4000) return Message(playerid, COLOR_GRAD2, "¡No autorizado!");
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, COLOR_GRAD2, "Utilize: /moverf <Facción ID> (Almacén Facción).");
 	if(params[0] < 0 || params[0] >= MAX_LEADERS) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} ID de facción errónea.");
	new string[128];
	new Float:X, Float:Y, Float:Z;
 	GetPlayerPos(playerid,X,Y,Z);
 	format(string,sizeof(string),"Facción %d creada/ajustada en %f - %f - %f.", params[0],X,Y,Z);
	SendClientMessage(playerid,COLOR_YELLOW2,string);
	InfoFacc[params[0]][gExteriorPos][0] = X;
	InfoFacc[params[0]][gExteriorPos][1] = Y;
	InfoFacc[params[0]][gExteriorPos][2] = Z;
	ActualizarFaccion(params[0]);
	//ActualizarNegocio(params[0]); // Actualiza LabelText, Pickup y después lo guarda.
	return 1;
}
zcmd(irf, playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
if(Info[playerid][pAdminZC] < 2) return Message(playerid, COLOR_WHITE, "No autorizado.");
if(sscanf(params, "i", params[0])) return Message(playerid, COLOR_WHITE, "Utiliza: /irf (Facc ID) - CMD para realizar TP al almacén de dicha facción.");
if(params[0] < 0 || params[0] >= MAX_LEADERS) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} ID de facción erróneo.");
if(InfoFacc[params[0]][gExteriorPos][0] == 0.0) return Message(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Almacén no creado InGame, usa antes /moverf. (/adminfac)");
SetPlayerPos(playerid, InfoFacc[params[0]][gExteriorPos][0], InfoFacc[params[0]][gExteriorPos][1], InfoFacc[params[0]][gExteriorPos][2]);
SetPlayerInterior(playerid,0); Info[playerid][pInt] = 0;
Message(playerid, COLOR_WHITE, "Teleportado a la facción solicitada.");
return 1;
}
/*CMD:facc(playerid, params[])
{
    //if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "");
	new string[128], totalstring[1800];
	new number = 0;
	for(new i =0; i < sizeof(InfoFacc); i++)
	{
	    number ++;
		format(string, sizeof(string), "{FFFFFF}%d) %s {A9D0F5}[Líder: %s | Sub-Líder: %s]\n",number-1, InfoFacc[i][gFacc], InfoFacc[i][gLeader], InfoFacc[i][gLeader2]);
        strcat(totalstring,string);
		//SendClientMessageEx(playerid, COLOR_WHITE, string);
		
	}
	ShowPlayerDialog(playerid,STATS,DIALOG_STYLE_MSGBOX,"NS-RP Lista de Facciones Oficiales",totalstring,"Cerrar","");
	SendClientMessageEx(playerid, COLOR_WHITE, "Postulaciones a facciones via foro, seguir el formato disponible en el subforo correspondiente.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Facción 20 [ Líder: Rai_Salazar | Sub-Líder: Nick_Aldershot]");
	return 1;
}*/
CMD:facc(playerid, params[])
{
    new Stringo_[1024], Stringo[1024], number = 0;
    strcat(Stringo, "{FFFFFF}ID-Nombre\tLíder\tSub-Líder");
    for(new i =0; i < sizeof(InfoFacc); i++)
    {
        number ++;
        format(Stringo_, sizeof(Stringo_), "%s\n%d)%s \t%s\t%s",Stringo_, number-1, InfoFacc[i][gFacc], InfoFacc[i][gLeader], InfoFacc[i][gLeader2]);
    }
    strcat(Stringo, Stringo_);
    SafeDialogEx(playerid, STATS, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}INFRANET-RP Lista de Facciones", Stringo, "Cerrar", "");
    return 1;
}
CMD:statusfacc(playerid, params[])
{
    if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "");
	new string[128], totalstring[1800];
	new number = 0;
	for(new i =0; i < sizeof(InfoFacc); i++)
	{
	    number ++;
		format(string, sizeof(string), "{FFFFFF}%d) %s {A9D0F5}[Fondos: %d | Materiales: %d | Paga: %d $xR]\n",number-1, InfoFacc[i][gFacc], InfoFacc[i][gFondos], InfoFacc[i][gMateriales], InfoFacc[i][gPaga]);
		strcat(totalstring,string);
		//SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	ShowPlayerDialog(playerid,STATS2,DIALOG_STYLE_MSGBOX,"INFRANET Stats de las Facciones",totalstring,"Cerrar","");
	/*SendClientMessageEx(playerid, COLOR_WHITE, "Facción 20 [ Líder: Rai_Salazar | Sub-Líder: Nick_Aldershot]");*/
	return 1;
}
/*CMD:facc2(playerid, params[])
{
	new string[2048];
	new number = 0;
	for(new i =1; i < 8; i++)
	{
	    number ++;
	    format(string,sizeof(string), "%d) Facción %s [ Líder: %s | Sub-Líder: %s]\n",number-1, InfoFacc[i][gFacc], InfoFacc[i][gLeader], InfoFacc[i][gLeader2]);
		ShowPlayerDialog(playerid, LISTA_FACC, DIALOG_STYLE_MSGBOX , "Lista de facciones", string, "Aceptar", "");
	}
	return 1;
}*/
//CMD:adminidioma(playerid, params[])
/*{
    if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "");
	new string[128];
		Info[i][pIngles] = 0;
		Info[i][pInglesSkill] = 0;
	return 1;*/
//}
//zcmd - Bank
    zcmd(balance, playerid, params[])
	{
        if(IsAtATM(playerid))
	    {
            new string[64];
            SendClientMessageEx(playerid, COLOR_WHITE, "Banco de Los Santos");
			format(string, sizeof(string), "{A2DC35}[BANCO LS]:{FFFFFF} Saldo Disponible:  %d$",Info[playerid][pAccount]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		} else SendClientMessageEx(playerid, COLOR_GREY, "{FF0000}[ATENCION]:{FFFFFF} No estás en un cajero.");
		return 1;
	}
    zcmd(licencias, playerid, params[])
	{
	    new giveplayerid, item[32], string[128];
        if(!sscanf(params, "ds[32]", giveplayerid, item))
		{
		if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
  		if(IsPlayerConnected(giveplayerid))
		{
  			if(papilla[giveplayerid] == 1)
			{
				SetPVarInt(playerid, "IsInArena", 0);
				SetPVarInt(playerid, "ArenaMode", 0);
                Info[playerid][pJailAdmin] += 1;
		        Info[playerid][pJailed] = 1;
		        PhoneOnline[playerid] = 1;
				Info[playerid][pJailTime] = 5*60;
				ResetPlayerWeaponsEx(playerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(playerid);
				SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1000);
				format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /licencias.",GetPlayerNameEx(playerid));
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por usar el CMD /licencias hacia un administrador Onduty.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_AZULL,string,2);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar el CMD /licencias hacia un administrador Onduty.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Alguien intentó usar /licencias hacia tu ID, ha sido jaileado automáticamente.");
				StopAudioStreamForPlayer(playerid);
				strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
				strmid(Info[playerid][pJailReason], "Usar /licencias a un admin Onduty.", 0, strlen("Usar /licencias a un admin Onduty."), 64);
				return 1;
			}
			else
   			{
   				if(ProxDetectorS(5.0, playerid, giveplayerid))
   				{
   				    if(strcmp(item,	"conduccion",	true) == 0)
   				    {
   				        if(Info[playerid][pCarLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,1);
   				            format(string, sizeof(string), "* %s muestra su licencia de conducción a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"navegacion",	true) == 0)
   				    {
   				        if(Info[playerid][pBoatLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,2);
                            format(string, sizeof(string), "* %s muestra su licencia de navegación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"aviacion",	true) == 0)
   				    {
   				        if(Info[playerid][pFlyLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,3);
                            format(string, sizeof(string), "* %s muestra su licencia de aviación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
				   		    ShowLicencia(playerid,giveplayerid,3);
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"armas",	true) == 0)
   				    {
   				        if(Info[playerid][pGunLic] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,4);
                            format(string, sizeof(string), "* %s muestra su licencia de armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
   				    if(strcmp(item,	"taxista",	true) == 0)
   				    {
   				        if(Info[playerid][pTaxiLicense] > 0)
   				        {
   				            ShowLicencia(playerid,giveplayerid,5);
                            format(string, sizeof(string), "* %s muestra su licencia de taxista a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
   				        }
   				        else
				   		{
						   SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						   SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
						   return 1;
				   		}
   				    }
					format(string, sizeof(string), "* %s muestra sus licencias a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
					ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    }else SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos del jugador.");
			}
		}else SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador desconectado.");
        }else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /licencias (jugador) (opcion: conduccion, navegacion, aviacion, armas, taxista).");
        return 1;
    }
	CMD:reportarbug(playerid, params[])
	{
	    if(Info[playerid][pBlockBug] == 0)
	    {
	   		SafeDialogEx(playerid,REBUG,DIALOG_STYLE_INPUT,"{00F70C}Reportar Bug","{FFFFFF}Escribe exactamente el bug que has encontrado, se quedará guardado en la base de datos\ncuando el equipo de desarrolladores lo revise, tratarán de solucionar el bug lo más rapido posible.\n\nGracias por reportar.", "Reportar", "Cancelar");
	   	}
	   	else SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No puedes reportar bugs, estás bloqueado del comando. Razón: Abuso de Comando");
	   	return 1;
	}
	CMD:retips(playerid, params[])
	{
		SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{00F70C}Tips para Reportar","{FFFFFF}\n- Reporta lo que necesitas, no a quien necesitas.\n- Sé especifico y claro, reporta exactamente lo que necesitas.\n- No hacer falsos reportes [Advertencia].\n- No llames administradores.\n- Reporta sólo asuntos, In Game [IG].","Cerrar", "");
		return 1;
	}
    zcmd(reply, playerid, params[])
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /reply (texto)");
		new string[128];
		new reportid = INVALID_REPORT_ID;
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != 999)
			{
				reportid = i;
			}
		}
		if(reportid == INVALID_REPORT_ID)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un reporte ahora mismo.");
			return 1;
		}
		if (IsPlayerConnected(Reports[reportid][CheckingReport]))
		{
			format(string, sizeof(string), "{FF0000}[RID]{FFFFFF} %s(ID: %d): %s", GetPlayerNameEx(playerid), playerid, params);
			SendClientMessageEx(Reports[reportid][CheckingReport], COLOR_YELLOW, string);

			format(string, sizeof(string), "{00F70C}Respuesta enviada{FFFFFF} a %s: %s", GetPlayerNameEx(Reports[reportid][CheckingReport]), params);
			SendClientMessageEx(playerid,  COLOR_YELLOW, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		return 1;
	}
	CMD:limpiarreportes(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    if (Info[playerid][pAdminZC] >= 1338)
		{
	        new string[128];
	        ClearReports();
	        SendClientMessageEx(playerid,COLOR_GRAD1, "Has limpiado todos los reportes activos.");
	        format(string, sizeof(string), "[AdmCmd]: %s ha limpiado todos los reportes activos.", GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_GENERAL, string, 2);
	    }
	    else
		{
	        SendClientMessageEx(playerid, COLOR_WHITE, "No estas autorizado a usar este comando.");
	    }
	    return 1;
	}
	zcmd(re, playerid, params[])
    {
        if(Info[playerid][pRMuted] != 0) return SafeDialogEx(playerid,TIPRE,DIALOG_STYLE_MSGBOX,"{F95322}Reporte Bloqueado.","{FFFFFF}\n- Estas bloqueado de los reportes, tienes que esperar.\n- Reporta lo que necesitas, no a quien necesitas.\n- Se especifico y claro, reporta exactamente lo que necesitas.\n- No hacer falsos reportes [Advertencia].\n- No llames administradores.\n- Reporta sólo asuntos, In Game [IG].","Cerrar", "");
        if(AdminOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}No hay {FF0000}administradores online{FF0000} en este momento, intenta más tarde!");
        if(JustReported[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Espera 60 segundos para otro reporte.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /re (REPORTE)");

		SendReportToQue(playerid, params);
 		SendClientMessageEx(playerid, COLOR_WHITE, "Tu reporte fue enviado al equipo de{00F70C} administración{FFFFFF} en breve te ayudarán.");
        JustReported[playerid] = 60;
        if(Info[playerid][pAccount] >= 50000) Info[playerid][pAccount] -= 1000;
        return 1;
    }
	CMD:creporte(playerid, params[])
	{
	    for(new i = 0; i < MAX_REPORTS; i++)
		{
		    if(Reports[i][ReportFrom] == playerid)
		    {
		        Reports[i][ReportFrom] = 999;
				Reports[i][BeingUsed] = 0;
				Reports[i][TimeToExpire] = 0;
				return SendClientMessageEx(playerid, COLOR_WHITE, "Cancelaste el reporte satisfactoriamente." );
			}
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "{FF0000}[ATENCION]:{FFFFFF} Actualmente no tienes reportes pendientes.");
		return 1;
	}
   zcmd(ar, playerid, params[])
	{
	  if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 1)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ar (Reporte ID)");
			if(reportid < 0 || reportid > 50) { SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[AdmCmd]:{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Ese RID ya fue atendido.");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El que reportó se ha desconectado !");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
				format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} %s aceptó el reporte de %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
				ABroadCast(COLOR_ORANGE, string, 2);
				format(string, sizeof(string), "%s ha aceptado tu reporte, Puedes usar {A2DC35}/reply{FFFFFF} para explicar tu reporte. [T: 60 Seg.]", GetPlayerNameEx(playerid));
				SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
				Reports[reportid][CheckingReport] = playerid;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
    }
    zcmd(rr, playerid, params[])
	{
	  if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 1)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USE: /rr [Report ID]");

			if(reportid < 0 || reportid > 499) { SendClientMessageEx(playerid, COLOR_WHITE, "ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Ese RID ya fue atendido!");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El que reportó se ha desconectado !");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
				format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} %s rechazó el reporte de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
				ABroadCast(COLOR_ORANGE, string, 2);
				format(string, sizeof(string), "%s marcó tu reporte como invalido. Usa y lee muy bien {FF0000}/retips{FFFFFF} antes de reportar.", GetPlayerNameEx(playerid));
				SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
	}
	CMD:nao(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 3)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /nao [Reporte ID (RID)]");

			if(reportid < 0 || reportid > 50) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499!"); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese RID ya fue atendido.");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reportó se ha desconectado.");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
			format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} %s ha revisado el reporte de %s (RID: %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
			ABroadCast(COLOR_GENERAL, string, 2);
			format(string, sizeof(string), "%s ha revisado tu reporte, y no podrá ayudarte debido a la ausencia de administradores de mayor rango.", GetPlayerNameEx(playerid));
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Puedes acercarte a nuestro foro para un mejor soporte, disculpa los inconvenientes.");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
	}
    zcmd(aforo, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 3)
		{
			new string[128], reportid;
			if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /aforo [Reporte ID (RID)]");

			if(reportid < 0 || reportid > 50) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ID del reporte no debe ser menor de 0 ni mayor de 499."); return 1; }
			if(Reports[reportid][BeingUsed] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Ese RID ya fue atendido.");
				return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El que reportó se ha desconectado.");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				return 1;
			}
				format(string, sizeof(string), "{FFFF00}Administración:{FF0000} %s revisó y señalo el reporte de %s como correspondiente al foro.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
				ABroadCast(COLOR_GENERAL, string, 2);
				format(string, sizeof(string), "%s marcó tu reporte como correspondiente al foro. Recuerda que en el foro puedes hacer reportes, quejas y dudas.", GetPlayerNameEx(playerid));
                SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
                SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE,"Nuestro foro es: {A2DC35}infranet.foroactivo.com{FFFFFF} - Muchas Gracias");
				Reports[reportid][ReportFrom] = 999;
				Reports[reportid][BeingUsed] = 0;
				Reports[reportid][TimeToExpire] = 0;
				strmid(Reports[reportid][Report], "None", 0, 4, 4);
		}
		return 1;
	}
    CMD:mps(playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 5000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        if(See_MP[playerid] == 1)
		{
			See_MP[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Notificación de respuestas administrativas desactivada.");
		}
        else
		{
            See_MP[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Notificación de respuestas administrativas activada.");
		}
        return 1;
    }
    CMD:versms(playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        if(See_SMS[playerid] == 1)
		{
			See_SMS[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Notificación de SMS entre usuarios desactivada.");
		}
        else
		{
            See_SMS[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Notificación de SMS entre usuarios activada.");
		}
        return 1;
    }
    CMD:verwalkie(playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        if(See_FRC[playerid] == 1)
		{
			See_FRC[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Notificación del uso de la radio portátil entre usuarios desactivada.");
		}
        else
		{
            See_FRC[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Notificación del uso de la radio portátil entre usuarios activada.");
		}
        return 1;
    }
    CMD:verfam(playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        new string[128], fid;
		if(sscanf(params, "d", fid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /verfam [ID de la Facción]");
		See_FAM[playerid] = fid;
        format(string, sizeof(string), "[AdmCmd]: El administrador %s está vigilando el canal /f de facciones. [ID:%d]", GetPlayerNameEx(playerid),fid);
 		ABroadCast(COLOR_ORANGE, string, 2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Estás vigilando el canal de una facción, usa /verfam 0 para finalizar.");
        return 1;
    }
	CMD:tipduda(playerid, params[]){
	if(Info[playerid][pAdminZC] > 0){
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}Tips para responder una duda.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Sé claro y directo, simplemente una respuesta clara");
	        SendClientMessageEx(playerid, COLOR_WHITE, "No es necesaria una conversación con el usuario, esto es sencillo, responde lo necesario.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Termina una y atiende otra, no te apresures.");
	        return 1;
	    }
	    else{
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}Tips para enviar una duda.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Sé claro y directo con el administrador, no necesitas conversar con él.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Si no te dieron una respuesta clara tienes todo el derecho de mandar otra duda.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Usa el CMD /soporte para buscar la respuesta de tu duda manualmente si lo deseas.");
	    }
	    return 1;
	}
	CMD:reportes(playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 2)
		{
			new reportdialog[1000], itemid = 0;
			for(new i = 0; i < MAX_REPORTS; i++)
			{
				if(Reports[i][BeingUsed] == 1 && itemid < 40)
				{
					ListItemReportId[playerid][itemid] = i;
					itemid++;
					format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | RID:%i | Reporte: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire]);
					format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				}
			}
			CancelReport[playerid] = itemid;
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
			format(reportdialog, sizeof(reportdialog), "%sSalir", reportdialog);
			SafeDialogEx(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "{00F70C}Reportes", reportdialog, "Aceptar", "Rechazar");
		}
		return 1;
	}
	zcmd(darvida, playerid, params[])
    {
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(!sscanf(params, "di", params[0], params[1]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		        if(Info[playerid][pAdminZC] >= 2)
		        {
		            new string[128];
		            SetHP(params[0],params[1]);
				 	format(string, sizeof(string), "[AdmCmd]: %s estableció la salud de %s a %dHP.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[1]);
				 	ABroadCast(COLOR_ORANGE, string, 2);
				 	return 1;
		        }
				else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres administrador!");
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darvida (PlayerID) (HP)");
        return 1;
    }
    zcmd(darchaleco, playerid, params[])
    {
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(!sscanf(params, "di", params[0], params[1]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		        if(Info[playerid][pAdminZC] >= 3)
		        {
		            new string[128];
		            SetPlayerArmour(params[0],params[1]);
					format(string, sizeof(string), "[AdmCmd]: %s estableció el chaleco de %s a %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[1]);
				 	ABroadCast(COLOR_ORANGE, string, 2);
				 	return 1;
		        }
				else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres administrador!");
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darchaleco (PlayerID) (armor)");
        return 1;
    }
    zcmd(loteria, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        else
        {
			new string[128];
            format(string, sizeof(string), "{2F99B5}[Lotería]:{FFFFFF} Hemos empezado la elección de la lotería.");
	        OOCNews(COLOR_WHITE, string);
	        new rand = random(250);
	        if(rand < 101) { rand += 3; }
	        Lotto(rand);
		}
        return 1;
    }
    zcmd(darstat, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        new string[128];
        if(CommandSpamTimes[playerid] == 10)
		{
          	format(string, sizeof(string), "[ATENCIÓN]: %s fue baneado automáticamente, razón: Flood Cmd darstat", GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_GENERAL,string,2);
	        Log("LOGS/hackeraction.log", string);
	        Info[playerid][pBannedZC] = 2;
			Kick(playerid);
			return 1;
		}
        if(IsPlayerConnected(playerid)){
	        if(Info[playerid][pAdminZC] >= 3000){
	            if(!sscanf(params, "dii", params[0],params[1],params[2])){
	                if(IsPlayerConnected(params[0])){
			    	    if(IsPlayerConnected(params[0])){
			    	        switch (params[1]){
								case 1:{
									Info[params[0]][pLevel] = params[2];
									format(string, sizeof(string), "Nivel: %d", params[2]);
								}
								case 2:
								{
									Info[params[0]][pAccount] = params[2];
									format(string, sizeof(string), "Cuenta bancaria: $%d", params[2]);
								}
								case 3:
								{
									Info[params[0]][pPnumber] = params[2];
									format(string, sizeof(string), "Teléfono: #%d", params[2]);
								}
								case 4:
								{
									Info[params[0]][pExp] = params[2];
									format(string, sizeof(string), "Puntos Respeto: %d", params[2]);
								}
								case 5:
								{
									Info[params[0]][pPhousekey] = params[2];
									format(string, sizeof(string), "Casa: %d", params[2]);
								}
								case 6:
								{
								    Info[params[0]][pPot] = params[2];
								    format(string, sizeof(string), "Hierba: %d", params[2]);
								}
								case 7:
								{
								    PlayerDrunk[playerid] = params[2];
								    format(string, sizeof(string), "Drunk: %d", params[2]);
									SetPlayerDrunkLevel(playerid, params[2]);
								}
								case 8:
								{
								    Info[params[0]][pRenting] = params[2];
								    format(string, sizeof(string), "Renta: %d", params[2]);
								}
								case 9:
								{
								    Info[params[0]][pFStyle] = params[2];
								    format(string, sizeof(string), "Tipo Lucha: %d", params[2]);
								}
								case 10:
								{
								    Info[params[0]][pMats] = params[2];
								    format(string, sizeof(string), "Materiales: %d", params[2]);
								}
								case 11:
								{
								    Info[params[0]][pCrack] = params[2];
								    format(string, sizeof(string), "Drogas: %d", params[2]);
								}
								case 12:
								{
								    Info[params[0]][pAge] = params[2];
								    format(string, sizeof(string), "Edad: %d", params[2]);
								}
								case 13:
								{
								    Info[params[0]][pJob] = params[2];
								    format(string, sizeof(string), "Trabajo: %d", params[2]);
								}
								case 14:
								{
                                    Info[params[0]][pCarKey2] = params[2];
                                    format(string, sizeof(string), "Auto2: %d", params[2]);
                                }
								case 15:
								{
                                    Info[params[0]][pNMute] = params[2];
                                    format(string, sizeof(string), "NMute: %d", params[2]);
                                }
								case 16:
								{
                                    Info[params[0]][pWarn] = params[2];
                                    format(string, sizeof(string), "Warns: %d", params[2]);
                                }
								case 17:
								{
									Info[params[0]][pConnectTime] = params[2];
									format(string, sizeof(string), "Connect Time: %d", params[2]);
								}
								case 18:{
									Info[params[0]][pJailAdmin] = params[2];
									format(string, sizeof(string), "Jails: %d", params[2]);
								}
								case 19:{
									Info[params[0]][pPhousekey2] = params[2];
									format(string, sizeof(string), "House 2: %d", params[2]);
								}
								case 20:{
									Info[params[0]][pArmsSkill] = params[2];
									format(string, sizeof(string), "habilidad Guns: %d", params[2]);
								}
								case 21:
								{
									SetPVarInt(params[0], "Packages",  params[2]);
									format(string, sizeof(string), "Paquetes: %d", params[2]);
								}
						 		case 22:
						 		{
								 	Info[params[0]][pCrates] = params[2];
								 	format(string, sizeof(string), "Pack Drug: %d", params[2]);
								}
						 		case 23:
						 		{
								 	Info[params[0]][pADMuteTotal] = params[2];
								 	format(string, sizeof(string), "Total Ad Mutes: %d.", params[2]);
								}
						 		case 24:
						 		{
								 	Info[params[0]][pPbizzkey] = params[2];
								 	format(string, sizeof(string), "Negocio ID: %d.", params[2]);
								}
								case 25:
								{
									Info[params[0]][pVIPDateD] = params[2];
									format(string, sizeof(string), "Dia VIP: %d.", params[2]);
								}
								case 26:
								{
									Info[params[0]][pVIPDateM] = params[2];
									format(string, sizeof(string), "Mes VIP: %d.", params[2]);
								}
								case 27:
								{
									Info[params[0]][pReligion] = params[2];
									format(string, sizeof(string), "Religión ID: %d", params[2]);
								}
								case 30:
								{
									Info[params[0]][pPhousekeyX] = params[2];
									format(string, sizeof(string), "House 3: %d", params[2]);
								}
								default: SendClientMessageEx(playerid, COLOR_WHITE, "Código inválido!");
							}
							CommandSpamTimes[playerid]++;
							CommandSpamUnmute[playerid] = 60;
							SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
							SendClientMessageEx(playerid, COLOR_GRAD2, string);
			    	    }
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	            }
	            else{
	                SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /darstat (playerid/nombre) (Numero) (valor)");
	                SendClientMessageEx(playerid, COLOR_GRAD1, "1 Nivel 2 $ Bank 3 Tlf. 4 Respeto 5 ID Casa 6 Hierba 7 Drunk 8 Renta 9 E. Pelea 10 Mats 11 Drog 12 Edad 13 Trabajo 14 ID Veh 15 NMute 16 Warns");
	                SendClientMessageEx(playerid, COLOR_GRAD1, "17 ConnectTime 18 Jails 19 ID Casa[2] 20 Habilidad Armero 21 Pack Mat 22 Pack Drug 23 Total AD Mutes 24 Negocio 27 Religion 30 Casa[3]");
	            }
	        } else SendClientMessageEx(playerid, COLOR_GRAD2, "No estás autorizado para usar este comando.");
	    }
        return 1;
    }
    zcmd(verstat, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "d", params[0]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    ShowStats(playerid,params[0]);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza /verstat (ID)");
        return 1;
    }
    zcmd(cambiarint, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    new string[64];
		    SetPlayerInterior(params[0], params[1]);
		    format(string, sizeof(string), "Interior de %s es ahora %d", GetPlayerNameEx(params[0]), params[1]);  SendClientMessageEx(playerid, COLOR_GRAD1, string);
			return SendClientMessageEx(params[0], COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarint (PlayerID) (Interior)");
        return 1;
    }
    zcmd(cambiarvw, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    new string[64];
		    SetPlayerVirtualWorld(params[0], params[1]);
		    format(string, sizeof(string), "VirtualWorld de %s ahora es %d", GetPlayerNameEx(params[0]), params[1]);  SendClientMessageEx(playerid, COLOR_GRAD1, string);
			return SendClientMessageEx(params[0], COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarvw (PlayerID) (VirtualWorld)");
        return 1;
    }
    zcmd(autovw, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[64];
    	if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
			SetVehicleVirtualWorld(params[0], params[1]);
		    format(string, sizeof(string), "VirtualWorld del Auto ID %d, ahora es %d.", params[0], params[1]);
			return SendClientMessageEx(playerid, COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /autovw (Auto ID) (VirtualWorld)");
		return 1;
	}
 	zcmd(autoint, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[64];
    	if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "dd", params[0],params[1]))
		{
			LinkVehicleToInterior(params[0], params[1]);
		    format(string, sizeof(string), "Interior del Auto ID %d, ahora es %d.", params[0], params[1]);
			return SendClientMessageEx(playerid, COLOR_GRAD1, string);
		} else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /autoint (Auto ID) (INTERIOR)");
		return 1;
	}
    zcmd(silenciar, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "d", params[0]))
		{
		    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    new string[128];
		    if(Muted[params[0]] == 0)
			{
   				Muted[params[0]] = 1;
			    format(string, sizeof(string), "{AA3333}[AdmCmd]:{FFFF00} El Administrador %s ha silenciado al jugador %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
				SendClientMessageEx(params[0],COLOR_RED2,string);
				return ABroadCast(COLOR_GENERAL,string,2);
			}
			else
			{
				Muted[params[0]] = 0;
				format(string, sizeof(string), "{AA3333}[AdmCmd]:{FFFF00} El Administrador %s ha desilenciado al jugador %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
				SendClientMessageEx(params[0],COLOR_RED2,string);
				return ABroadCast(COLOR_GENERAL,string,2);
			}
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /silenciar (PlayerID)");
        return 1;
    }
    zcmd(warn, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128], reason[64];
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "ds[64]", params[0], reason))
		{
   			if(Info[params[0]][pAdminZC] >= 3)
			{
				return SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} No puedes hacer esto a administradores.");
			}
			if(Info[params[0]][pWarn] == 2)
			{
                new ip[32];
				GetPlayerIp(params[0],ip,sizeof(ip));
			    Info[params[0]][pBannedZC] = 2;
			    Info[params[0]][pWarn]= 0;
			    format(string, sizeof(string), "[AdmCmd]: %s fue baneado automaticamente, razón: Execesivas advertencias.", GetPlayerNameEx(params[0]));
				BroadCast(COLOR_LIGHTRED,string);
				AddBan(ip);
				Kick(params[0]);
			}
			Info[params[0]][pWarn]++;
			format(string, sizeof(string), "[AdmCmdExe]: %s dió una advertencia a %s, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]), reason);
			ABroadCast(COLOR_GENERAL,string,2);
			format(string, sizeof(string), "[AdmCmdExe]: %s te dió una advertencia [%d/3], razón: %s (TIP: A la 3ra serás baneado automaticamente)",GetPlayerNameEx(playerid), Info[params[0]][pWarn],reason);
			SendClientMessageEx(params[0], COLOR_LIGHTRED, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /warn (PlayerID)");
        return 1;
    }
    zcmd(nowarn, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128], reason[64];
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if(!sscanf(params, "ds[64]", params[0], reason))
		{
			if(Info[params[0]][pWarn] <= 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Esta persona no tiene advertencias.");
			Info[params[0]][pWarn]--;
			format(string, sizeof(string), "[AdmCmdExe]: %s le restó una advertencia a %s, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]), reason);
			ABroadCast(COLOR_GENERAL,string,2);
			format(string, sizeof(string), "[AdmCmdExe]: %s te quitó una advertencia [%d/3], razón: %s.",GetPlayerNameEx(playerid), Info[params[0]][pWarn],reason);
			SendClientMessageEx(params[0], COLOR_LIGHTRED, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /warn (PlayerID)");
        return 1;
    }
   	zcmd(staff, playerid, params[])
	{
	    new string[84];
		if(Info[playerid][pAdminZC] >=2)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Admins en servicio:");
  			foreach(Player, i)
  			{
  				if(Info[i][pAdminZC] >= 1 && Info[i][pAdminZC] <= Info[playerid][pAdminZC])
  				{
                    if(Info[i][pAdminZC] == 1)
					{
                        format(string, sizeof(string), "{FF8000}- Moderador a Pruebas: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 2)
					{
                        format(string, sizeof(string), "{FF8000}- Moderador: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 3)
					{
                        format(string, sizeof(string), "{FF8000}- Moderador Global: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 4)
					{
                        format(string, sizeof(string), "{FF8000}- Administrador: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 5)
					{
                        format(string, sizeof(string), "{FF8000}- Administrador General: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 6)
					{
                        format(string, sizeof(string), "{FF8000}- Administrador Líder: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 7)
					{
                        format(string, sizeof(string), "{FF8000}- Publicista: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 8)
					{
                        format(string, sizeof(string), "{FF8000}- Webmaster: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 9)
					{
                        format(string, sizeof(string), "{FF8000}- Mapper: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 10)
					{
                        format(string, sizeof(string), "{FF8000}- Game Operator: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 11)
					{
                        format(string, sizeof(string), "{FF8000}- Encargado de familias: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 12)
					{
                        format(string, sizeof(string), "{FF8000}- Encargado de facciones: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 4000)
					{
                        format(string, sizeof(string), "{FF8000}- Administrador técnico: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 5000)
					{
                        format(string, sizeof(string), "{FF8000}- Admin Subdueño: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pAdminZC] == 6000)
					{
                        format(string, sizeof(string), "{FF8000}- Admin Fundador: {FFFFFF}%s", GetPlayerNameEx(i));
                    }
                    else
					{
                        format(string, sizeof(string), "*{FF8000}Admin indefinido (%d): {FFFFFF}%s", Info[i][pAdminZC], GetPlayerNameEx(i));
                    }
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
  				}
  			}
		}
		return 1;
	}
	zcmd(tecnicos, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] > 5000){
		    SendClientMessageEx(playerid, COLOR_GRAD1, "Tecnicos Online:");
  			foreach(Player, i){
  			    new string[84];
			    if(Info[i][pShopTech] >= 1){
  			    	if(Info[i][pShopTech] == 1){
					  format(string, sizeof(string), "*Shop Tecnico: %s", GetPlayerNameEx(i));
					}
					else{
	    			  format(string, sizeof(string), "*Undefined: %s", GetPlayerNameEx(i));
	    			}
  			    	SendClientMessageEx(playerid, COLOR_GRAD2, string);
  			    }
  			}
  		}
  		return 1;
	}
CMD:taxiduty(playerid, params[])
{
    if(IsAPizzabike(playerid) || Info[playerid][pJob] == 8  || Info[playerid][pJob2] == 8)
	{
        if(OnDuty[playerid] == 1)
		{
 			new string[128];
			format(string, sizeof(string), "[Taxi]: Taxista %s está fuera de servicio",GetPlayerNameEx(playerid));
			BroadCast(COLOR_YELLOW, string);
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ahora estás fuera servicio, ya no recibirás llamadas.");
            OnDuty[playerid] = 0;

        }
        else
		{
			new string[128];

			format(string, sizeof(string), "[Taxi]: Taxista %s está en servicio  (Tlf. %d)",GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			BroadCast(COLOR_YELLOW, string);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
            OnDuty[playerid] = 1;

        }
    }
    else
	{

        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres Taxista.");
    }
    return 1;
}
zcmd(ayudantes, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128];
		if(Info[playerid][pAdminZC] >= 1338)
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "ayudantes Online:");
  			foreach(Player, i)
  			{
  				if(Info[i][pHelper] >= 1)
  				{
                    if(Info[i][pHelper] == 1)
					{
                        format(string, sizeof(string), "*Ayudante: %s", GetPlayerNameEx(i));
                    }
                    else if(Info[i][pHelper] == 2)
					{
                        format(string, sizeof(string), "*Lider de Ayudantes: %s", GetPlayerNameEx(i));
                    }
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
  				}
  			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes utilizar este comando.");
		return 1;
	}
    zcmd(creaunauto, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 6000)	return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "iii", params[0], params[1], params[2]))
		{
            new Float:X,Float:Y,Float:Z;
            GetPlayerPos(playerid, X,Y,Z);
            new carid = CreateVehicle(params[0], X+5,Y,Z, 0.0, params[1], params[2], 600000);
            new string[32];
            format(string, sizeof(string), ". Vehículo %d creado .", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /creaunauto (id) (color1) (color2)");
        return 1;
    }
   zcmd(ir, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 1 || Info[playerid][pHelper] >= 2){
        	if(!sscanf(params, "d", params[0])){
		    	if(IsPlayerConnected(params[0])){
		        	new Float:p_x,Float:p_y,Float:p_z;
		        	GetPlayerPos(params[0], p_x,p_y,p_z);
		        	new interior = GetPlayerInterior(params[0]);
		        	new vw = GetPlayerVirtualWorld(params[0]);
          			SetPosEx(playerid, p_x,p_y,p_z,0,interior,vw);
          			return SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado.");
		    	} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ir (PlayerID)");
        	return 1;
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
    zcmd(traer, playerid, params[]){
        new giveplayerid;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "d", giveplayerid)){
		    if(IsPlayerConnected(giveplayerid)){
		        if(Info[giveplayerid][pAdminZC] > 1337) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando con este jugador.");
		        if(Info[giveplayerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes sacar a gente de jail, usa el CMD /ir o /liberar.");
		        new Float:p_x,Float:p_y,Float:p_z;
		        GetPlayerPos(playerid, p_x,p_y,p_z);
		        new interior = GetPlayerInterior(playerid);
		        new vw = GetPlayerVirtualWorld(playerid);
          		SetPosEx(giveplayerid, p_x,p_y,p_z,0,interior,vw);
          		return SendClientMessageEx(giveplayerid, COLOR_WHITE, "Teleportado.");
		    } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /traer (PlayerID)");
        return 1;
    }
    zcmd(verarmas, playerid, params[]){
        new giveplayerid;
        if(!sscanf(params, "d", giveplayerid)){
		    if(IsPlayerConnected(giveplayerid)){
				if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "IsInArena") == 1) SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[INFO]:{FFFFFF} Estás armas son del paintball o un evento.");
		        new x,xweapon, xbalas, string[80],NombreArma[24];
			    format(string, sizeof(string), "Armas de %s:", GetPlayerNameEx(giveplayerid)); SendClientMessageEx(playerid, COLOR_GRAD1, string);
				for (new slot=0; slot<14; slot++){
				    GetPlayerWeaponData(giveplayerid, slot, xweapon, xbalas);
				    if(xweapon != 0){
                        GetWeaponName(xweapon,NombreArma,sizeof(NombreArma));
				        format(string, sizeof(string), "%s Balas: [%d]",NombreArma, xbalas);
				        x++;
				        SendClientMessageEx(playerid, COLOR_GRAD1, string);
				        if(x >= 5){
								SendClientMessageEx(playerid, COLOR_GRAD1, string);
								x = 0;
								format(string, sizeof(string), "");
							} else format(string, sizeof(string), "%s,  ", string);
						}
					}
		    } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		    return 1;
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /verarmas (PlayerID)");
        return 1;
    }
    zcmd(facciones, playerid, params[]){
   	 if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
 		if(Info[playerid][pAdminZC] > 4 || Info[playerid][pFactionModerator] == 1){
			SendClientMessageEx(playerid, COLOR_ASKQ, "================== ID'S de Facciones ==================");
			SendClientMessageEx(playerid, -1, "1. SAPD - 2. FBI - 3. SAEM - 4. S.E.C - 5. LSTV - 6. Crazy Motor - 7. Gobierno - 8. Hitman");
			SendClientMessageEx(playerid, -1, "9. Sistema Judicial - 10. Groove Street - 11. Ballas the Kings - 12. Latin Kings - 13. Sur13");
			SendClientMessageEx(playerid, -1, "14. Mafia Rusa - 15. LCN - 16. Yakuza - 17. C.D.G - 18. Mafia (Santana - EEUU - Donakov)");
		 }
		 else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado");
		 return 1;
	}
 	zcmd(facciones2, playerid, params[]){
   	 if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
 		if(Info[playerid][pAdminZC] > 3 || Info[playerid][pFactionModerator] == 1){
			SendClientMessageEx(playerid, COLOR_ASKQ, "================== ID'S de Facciones ==================");
			SendClientMessageEx(playerid, -1, "1. SAPD - 2. FBI - 3. SAEM - 4. S.E.C - 5. LSTV - 6. Crazy Motor - 7. Gobierno - 8. Hitman");
			SendClientMessageEx(playerid, -1, "9. Sistema Judicial - 10. Groove Street - 11. Ballas the Kings - 12. Latin Kings - 13. Sur13");
			SendClientMessageEx(playerid, -1, "14. Mafia Rusa - 15. LCN - 16. Yakuza - 17. ALEPH - 18. Santana - 19. Terroristas - 20. C.D.G");
		 }
		 else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado");
		 return 1;
	}
    zcmd(limpiarchat, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        CleanScreen();
        new string[1000];
		format(string, sizeof(string), "[ADM]: Limpieza de chat por %s", GetPlayerNameEx(playerid));
		return ABroadCast(COLOR_LIGHTBLUE,string,1);
    }
    zcmd(leetodo, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	  if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (!BigEar[playerid]){
            BigEar[playerid] = 1;
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Chat global activado.");
		}
		else{
			BigEar[playerid] = 0;
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Chat global desactivado.");
		}
    }
    zcmd(slap, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	   new giveplayerid, altura;
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(!sscanf(params, "di", giveplayerid, altura)){
			new Float:slx, Float:sly, Float:slz, string[128];
			if(IsPlayerConnected(giveplayerid)){
			    GetPlayerPos(giveplayerid, slx, sly, slz);
				SetPlayerPos(giveplayerid, slx, sly, slz+altura);
				PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+altura);
				format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000}Administrador %s golpeó a %s. (Altura: %d)",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), altura);
				ABroadCast(COLOR_GENERAL,string,2);
				return SendClientMessageEx(giveplayerid, COLOR_RED2, string);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /slap (PlayerID) (Altura)");
        return 1;
    }
    zcmd(darskin, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	  if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		new giveplayerid, skin;
		if(!sscanf(params, "di", giveplayerid, skin)){
		    if(IsPlayerConnected(giveplayerid)){
			    if(skin > 311 || skin < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Skin ID incorrecto (0-311)");
			    new string[128];
			    Info[giveplayerid][pChar] = skin;
			    SetPlayerSkin(giveplayerid, Info[giveplayerid][pChar]);
			    format(string, sizeof(string), "[AdmCmdExe]: %s te cambió el skin, ID SKIN: %d.", GetPlayerNameEx(playerid), skin);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "[AdmCmdExe]: %s cambió el skin de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				return ABroadCast(COLOR_GENERAL,string,2);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darskin (PlayerID) (SkinID)");
        return 1;
    }
    zcmd(vehslap, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	  if(Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		new alt, giveplayerid;
		if(!sscanf(params, "di", giveplayerid, alt)){
		    if(IsPlayerConnected(giveplayerid)){
			    new Float:slx, Float:sly, Float:slz, string[64];
			    GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
				SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+alt);
				PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+alt);
				format(string, sizeof(string), "[AdmCmdExe]:%s golpeó tu vehiculo.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_RED2, string);
				format(string, sizeof(string), "[AdmCmdExe]: %s golpeó el vehiculo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				return ABroadCast(COLOR_GENERAL,string,3);
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vehslap (PlayerID) (Altitud)");
        return 1;
    }
    zcmd(irpunto, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
		}
		else{SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);}
		return SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado.");
    }
    zcmd(punto, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
		return SendClientMessageEx(playerid, COLOR_WHITE, "Posición guardada.");
    }
    zcmd(traerauto, playerid, params[]){
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No tienes autorización a usar este comando.");
        new Float:plocx,Float:plocy,Float:plocz, vehicleid;
		if(!sscanf(params, "i", vehicleid)){
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
			return SetVehiclePos(vehicleid,plocx,plocy+4, plocz);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /traerauto (Auto ID)");
		return 1;
    }
    zcmd(irauto, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        new Float:cwx2,Float:cwy2,Float:cwz2,vehicleid;
        if(!sscanf(params, "i", vehicleid)){
			GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
			return SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /irauto (Auto ID)");
		return 1;
    }
    zcmd(repararveh, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo.");
        SetVehicleHealth(GetPlayerVehicleID(playerid), 10000.0);
    	RepairVehicle(GetPlayerVehicleID(playerid));
		return SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo reparado.");
    }
    zcmd(mascara, playerid, params[]){
        new string[90];
        if(Info[playerid][pMask] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes máscara.");
        if(Info[playerid][pMaskuse] == 0){
            foreach(Player, i){
   		    	if(IsPlayerConnected(i)){
		   			ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
			Info[playerid][pMaskuse] = 1;
			SetPlayerAttachedObject( playerid, 0, 19036, 2, 0.090156, 0.045901, -0.005574, 90.110733, 81.638343, 4.973568, 0.887882, 1.139873, 1.000000 );
      		format(string, sizeof(string), "* %s se pone una máscara.", GetPlayerNameEx(playerid));
      		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else{
            foreach(Player, i){
   		    	if(IsPlayerConnected(i)){
		   			ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
			}
			Info[playerid][pMaskuse] = 0;
			RemovePlayerAttachedObject(playerid,0);
      		format(string, sizeof(string), "* %s se quita la máscara de su rostro.", GetPlayerNameEx(playerid));
      		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        return 1;
    }
zcmd(1, playerid, params[])
	{
		new string[128];
      	{
	            if(Info[playerid][pMaskuse] == 1)
				{
  					format(string, sizeof(string), "* Desconocido toma su arma cargada de su cinturon.");
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  					format(string, sizeof(string), "* Desconocido le quita el seguro rapidamente.");
    				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				format(string, sizeof(string), "* [CLICK-CLACK] (( Desconocido )).");
    				ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
			}
			else
			{
    			if(IsPlayerConnected(playerid))
			    {
				    format(string, sizeof(string), "* %s toma su arma cargada de su cinturon.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(string, sizeof(string), "* %s le quita el seguro rapidamente.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(string, sizeof(string), "* [CLICK-CLACK] (( %s )).",GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);

                }
			}
		}
	return 1;
}
zcmd(2, playerid, params[])
	{
		new string[128];
      	{
	            if(Info[playerid][pMaskuse] == 1)
				{
  					format(string, sizeof(string), "* Desconocido le pone el seguro a su arma.");
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(string, sizeof(string), "* [CLICK-CLACK] (( Desconocido )).");
    				ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
					format(string, sizeof(string), "* Desconocido guarda su arma en su cinturon.");
    				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
    			if(IsPlayerConnected(playerid))
			    {
				    format(string, sizeof(string), "* %s le pone el seguro a su arma.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(string, sizeof(string), "* [CLICK-CLACK] (( %s )).",GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
					format(string, sizeof(string), "* %s guarda su arma en su cinturon.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                }
			}
		}
	return 1;
}
zcmd(3, playerid, params[])
	{
		new string[128];
      	{
	            if(Info[playerid][pMaskuse] == 1)
				{
  					format(string, sizeof(string), "* Desconocido descuelga su arma cargada de su espalda.");
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  					format(string, sizeof(string), "* Desconocido le quita el seguro rapidamente.");
    				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				format(string, sizeof(string), "* [CLICK-CLACK] (( Desconocido )).");
    				ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
			}
			else
			{
    			if(IsPlayerConnected(playerid))
			    {
				    format(string, sizeof(string), "* %s descuelga su arma cargada de su espalda.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(string, sizeof(string), "* %s le quita el seguro rapidamente.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(string, sizeof(string), "* [CLICK-CLACK] (( %s )).",GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);

                }
			}
		}
	return 1;
}
zcmd(4, playerid, params[])
	{
		new string[128];
      	{
	            if(Info[playerid][pMaskuse] == 1)
				{
  					format(string, sizeof(string), "* Desconocido le pone el seguro a su arma.");
					ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(string, sizeof(string), "* [CLICK-CLACK] (( Desconocido )).");
    				ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
					format(string, sizeof(string), "* Desconocido cuelga su arma en su espalda.");
    				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
    			if(IsPlayerConnected(playerid))
			    {
				    format(string, sizeof(string), "* %s le pone el seguro a su arma.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    format(string, sizeof(string), "* [CLICK-CLACK] (( %s )).",GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
					format(string, sizeof(string), "* %s cuelga su arma en su espalda.", GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                }
			}
		}
	return 1;
}
    zcmd(choque, playerid, params[]){
        new string[90];
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Tienes que estar dentro de un vehículo para usar este macro.");
       	new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 448 || GetVehicleModel(vehicleid) == 461 || GetVehicleModel(vehicleid) == 462 || GetVehicleModel(vehicleid) == 521 || GetVehicleModel(vehicleid) == 522 || GetVehicleModel(vehicleid) == 581)
		{
        	if(Info[playerid][pMaskuse] == 1)
			{
 				if(IsPlayerConnected(playerid))
   				{
      				format(string, sizeof(string), "* Desconocido choca contra un obstáculo en la carretera.");
      				ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				format(string, sizeof(string), "*Bim*-*Bam*-*Pum* [Moto choca, el casco le protege del golpe] ((Desconocido)).");
      				ProxDetector(50.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
      				format(string, sizeof(string), "* Desconocido se recupera del golpe y continua conduciendo.");
      				ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
        	else
			{
 				if(IsPlayerConnected(playerid))
   				{
      				format(string, sizeof(string), "* %s choca contra un obstáculo en la carretera.", GetPlayerNameEx(playerid));
      				ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				format(string, sizeof(string), "*Bim*-*Bam*-*Pum* [Moto choca, el casco le protege del golpe] ((ID: %d))", playerid);
      				ProxDetector(50.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
      				format(string, sizeof(string), "* %s se recupera del golpe y continua conduciendo.", GetPlayerNameEx(playerid));
      				ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        		}
			}
       	}
       	else
       	{
       		if(Info[playerid][pMaskuse] == 1)
			{
 				if(IsPlayerConnected(playerid))
   				{
      				format(string, sizeof(string), "* Desconocido choca contra un obstáculo en la carretera.");
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				format(string, sizeof(string), "*Bim*-*Bam*-*Pum* [Vehículo choca y el airbag sale disparado] ((Desconocido)).");
      				ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
      				format(string, sizeof(string), "* Desconocido se recupera del golpe y continua conduciendo.");
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
        	}
        	else
			{
 				if(IsPlayerConnected(playerid))
   				{
      				format(string, sizeof(string), "* %s choca contra un obstáculo en la carretera.", GetPlayerNameEx(playerid));
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      				format(string, sizeof(string), "*Bim*-*Bam*-*Pum* [Vehículo choca y el airbag sale disparado] ((ID: %d))", playerid);
      				ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
      				format(string, sizeof(string), "* %s se recupera del golpe y continua conduciendo.", GetPlayerNameEx(playerid));
      				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        		}
			}
       	}
        return 1;
    }
 zcmd(cmdmod, playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new admstring[2450]; // Guardado de los CMD.
 	if(Admin(1,playerid))
	{
 		strcat(admstring, "{2F99B5}INFRANET ROLEPLAY\n");
		strcat(admstring, "{BDBDBD}\n**Comandos Moderador A Pruebas**\n");
		strcat(admstring, "{2F99B5}/adminduty o /adminoffduty /ls /lv /sf /mandarls /leetodo /jail /ir /traer /(des)congelar\n");
	}
        ShowPlayerDialog(playerid,CMDSTAFF,DIALOG_STYLE_MSGBOX,"Comandos Administrativos",admstring,"Aceptar","");
 		return 1;
}
zcmd(cmdstaff, playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new admstring[2450]; // Guardado de los CMD.
	
	if(Admin(2,playerid))
	{
	    strcat(admstring, "{2F99B5}INFRANET ROLEPLAY\n");
		strcat(admstring, "{BDBDBD}\n**Comandos Moderador**\n");
		strcat(admstring, "{2F99B5}/adminduty o /adminoffduty /soffduty /togac /togpm /togmuertes /ar /rr /tipduda /reportes /cambiarint /cambiarvw /silenciar\n");
		strcat(admstring, "{2F99B5}/staff /ir /traer /leetodo /slap /darskin /irpunto /punto /repararveh /desarmar /jail /ls /sf /lv /aa /a /verstat /warn\n");
		strcat(admstring, "{2F99B5}/enmascarados /bloqre /desbloqre /checkllaves /mandarls /spec /liberar /(des)congelar /j /toghelper /noev\n");
		strcat(admstring, "{2F99B5}/niveluno /darrol /desmutearad /mutearad /aduda /rduda /kick /kickname /listaafk /noobs /checkjail /encarcelados\n");
	}
	if(Admin(3,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Moderador Global**\n");
		strcat(admstring, "{2F99B5}/quitardni /adminnombre /irfacc /nao /aforo /autovw /limpiarchat /irauto /jailoffline /entrarauto /ao\n");
		strcat(admstring, "{2F99B5}/armareset /darrehelper /mandarsf /respawntodo /revivir /qseguroveh /notutorial /ooc (Chat eventos)\n");
	}
	if(Admin(4,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador Junior**\n");
		strcat(admstring, "{2F99B5}/banoffline /facciones /vehslap /traerauto /llenargas /recargarautos /respawncars /respawnauto\n");
		strcat(admstring, "{2F99B5}/reparartodo /banear /bgf (Borrar Graffiti). /nog (Bloquear Uso del Graffiti)\n");
	}
	if(Admin(5,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador Superior**\n");
		strcat(admstring, "{2F99B5}/loteria /bloqbug /desbloqbug /cfuego /vidainf /darestilopelea /cambiarhora /aborrarplanta /smstodos\n");
		strcat(admstring, "{2F99B5}/banip /musica [NUEVO] /versms - /verfam - /verwalkie\n");
	}
	if(Admin(6,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador General**\n");
		strcat(admstring, "{2F99B5}/darlider /darmiembro /nofac /anunciostaff /facchat /weaponr /jetpack /qfaccoff /activarbanco /irnegocio\n");
	}
	if(Admin(10,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador Líder**\n");
		strcat(admstring, "{2F99B5}[E.F]: /adminfac - [G.O]: /dpr, /qpr y /dedicados.\n");
	}
	if(Admin(3000,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador Líder**\n");
		strcat(admstring, "{2F99B5}/limpiarreportes /darstat /ayudantes /qdinero /darfichaspball /msjhelper /darhelper /darliderhelper\n");
		strcat(admstring, "{2F99B5}/quitarhelper /clima /climatodos /adminevento /darobjeto /msjvip /venderfichasv /verregalo\n");
		strcat(admstring, "{2F99B5}/limpiarregalo /darfichascash /quitarfichascash\n");
	}
	if(Admin(4000,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador Tecnico**\n");
		strcat(admstring, "{2F99B5}/adminradar /adminnegocio /admincasa /adminfam /admingarage /adminporton /adminpuntos /adminactor /shopdoor\n");
		strcat(admstring, "{2F99B5}/famchat /msjfam - /gotoco /getpos /goto - /ip /obtenerip /multicuenta [Autorizar/Rechazar]\n");
	}
	if(Admin(5000,playerid))
	{
		strcat(admstring, "{BDBDBD}\n**Comandos Administrador Subdueño**\n");
		strcat(admstring, "{2F99B5}/mps /noduda /crearregalo /regalararma /msjfacc /msjfam /editarf - /editarm - /editarp\n");
		strcat(admstring, "{2F99B5}/msjstaff /sfondos /regaloatodos /horaregalo /activofuego /desactivofuego\n");
	}
	if(Admin(6000,playerid))
	{
		SendClientMessageEx(playerid, -1, "{BDBDBD}[EXTRA] Comandos de propietario (Usar con precaución).");
		SendClientMessageEx(playerid, -1, "{2F99B5}/setpayday /editarnegocio /noac /darpremium /vipregalo /darauto /amotor /adminconcesionario /expdoble /crearactortemp");
		SendClientMessageEx(playerid, -1, "{2F99B5}/dares [Encargado Staff] - /darefam [E. de Fams] - /daref [E. de Faccs] - /daregame [Game Operator] - /dareban [Bans]");
	}
	ShowPlayerDialog(playerid,CMDSTAFF,DIALOG_STYLE_MSGBOX,"Comandos Administrativos Generales",admstring,"Aceptar","");
 	return 1;
}
    zcmd(multicuenta, playerid, params[])
	{
		if(Info[playerid][pAdminZC] >= 4000)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USE: /multicuenta [playerid]");
			if(IsPlayerConnected(giveplayerid))
			{
				if(Info[giveplayerid][pMulticuenta] == 0)
				{
				    new autoip[32]; GetPlayerIp(giveplayerid, autoip, 32);
					format(string, sizeof(string), "[AdmCmdExe]: El administrador %s autorizó la multicuenta a %s. (IP.Info: %s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), autoip);
					ABroadCast(COLOR_ORANGE, string,2);
 	 				Log("LOGS/multicuenta.log", string);
					Info[giveplayerid][pMulticuenta] = 1; // Multicuenta Autorizada.
					return 1;
				}
				else
				{
					format(string, sizeof(string), "[AdmCmdExe]: El administrador %s rechazó la multicuenta a %s. Sólo puede tener una cuenta.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_ORANGE, string,2);
 	 				Log("LOGS/multicuenta.log", string);
					Info[giveplayerid][pMulticuenta] = 0; // Mlticuenta No Autorizada.
					return 1;
				
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
		return 1;
	}
    zcmd(cmdhelper, playerid, params[]){
	    switch(Info[playerid][pHelper]){
	        case 1: SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Comandos: {FFFFFF}/cduty - /aceptarayuda - /finalizarayuda /n /nmute /nocanal");
	        case 2: SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Comandos: {FFFFFF}/cduty - /aceptarayuda - /finalizarayuda - /quitarhelper - /darhelper - /msjhelper  /n /nmute /nocanal");
	        default: SendClientMessageEx(playerid, COLOR_WHITE, "No puedes utilizar este comando.");
	    }
		return 1;
	}
    zcmd(bloqbug, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 5){
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bloqbug (playerid)");
			if(IsPlayerConnected(giveplayerid)){
				format(string, sizeof(string), "[AdmCmdExe]: %s no podrá reportar nunca más un bug's, razón: Abuso de comando. Admin: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				BroadCast(COLOR_LIGHTRED, string);
  				Log("LOGS/reportbug.log", string);
				//Info[giveplayerid][pAdminZC] = 0;
				Info[giveplayerid][pBlockBug] = 1;
				Kick(giveplayerid);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(desbloqbug, playerid, params[]){
		if(Info[playerid][pAdminZC] >= 5){
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USE: /unbloqbug [playerid]");
			if(IsPlayerConnected(giveplayerid)){
				format(string, sizeof(string), "[AdmCmdExe]: %s desbloqueó del comando [/reportarbug] a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED, string,3);
 	 			Log("LOGS/reportbug.log", string);
				Info[giveplayerid][pBlockBug] = 0;
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(quitarstaff, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new string[128], giveplayerid;
		if(Info[playerid][pAdminZC] >= 6000 || Info[playerid][pModStaff] == 1){
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /quitarstaff (playerid)");
			if(IsPlayerConnected(giveplayerid)){
           		format(string, sizeof(string), "[INFRANET] %s limpió variables administrativas a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
           		ABroadCast(COLOR_GENERAL,string,2);
				Log("LOGS/admin.log", string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Restearon tus variables de administrador a 0.");
    			Info[giveplayerid][pAdminZC] = 0;
    			Info[giveplayerid][pLvlAdminZC] = 0;
				Info[giveplayerid][pHelper] = 0;
				Info[giveplayerid][pFactionModerator] = 0;
				Info[giveplayerid][pModStaff] = 0;
				Info[giveplayerid][pBanAppealer] = 0;
				Info[giveplayerid][pGangModerator] = 0;
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
		return 1;
	}
    zcmd(noduda, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 5000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (!nod){
			nod = 1;
			return SendClientMessageToAllEx(COLOR_GRAD2,"{FFFF00}[ADM]:{FFFFFF} Canal de dudas ha sido desactivado.");
		}
		else{
			nod = 0;
			return SendClientMessageToAllEx(COLOR_GRAD2,"{FFFF00}[ADM]:{FFFFFF} Canal de dudas ha sido activado.");
		}
    }
    CMD:borrargraffiti(playerid, params[]) {return cmd_bgf(playerid, params);}
    zcmd(bgf, playerid, params[])
	{
 	if(Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
    foreach(Player, i)
    {
        for(new Graffiti = 0; Graffiti < MAX_PLAYERS_TAGS; Graffiti++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, SprayTags[i][Graffiti][_spPosX], SprayTags[i][Graffiti][_spPosY], SprayTags[i][Graffiti][_spPosZ]))
            {
                new string[128];
                format(string, sizeof(string), "[BGF-ADM] Administrador %s limpió un graffiti [%s].", GetPlayerNameEx(playerid), SprayTags[i][Graffiti][_spText]);
           		ABroadCast(COLOR_GENERAL,string,2);
                //format(SprayTags[playerid][iIndex][_spText], 50, "Ejemplo");
                Tags_Clear(i, Graffiti);
            }
        }
    }
	return 1;
	}
	CMD:nog(playerid, params[])
	{
	if(Info[playerid][pAdminZC] > 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /nog [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			//if(Info[giveplayerid][pAdminZC] >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando con administradores de mayor rango.");
			if(Info[giveplayerid][pBlockG] == 0)
			{
				Info[giveplayerid][pBlockG] = 1;
				format(string, sizeof(string), "[NOG-ADM] Administrador %s le a bloqueado el uso del CMD /graffiti a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("LOGS/admin.log", string);
				ABroadCast(COLOR_GENERAL,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GREY, "[Aviso]: Fuiste bloqueado del comando /graffiti.");
			}
			else
			{
				Info[giveplayerid][pBlockG] = 0;
				format(string, sizeof(string), "[NOG-ADM] Administrador %s  ha desbloqueado el uso del CMD /graffiti a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("LOGS/admin.log", string);
				ABroadCast(COLOR_GENERAL,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GREY, "[Aviso]: Fuiste desbloqueado del comando /graffiti.");
			}
 		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
    return 1;
	}
	zcmd(removergps, playerid, params[]){
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Primero Conectate.");
		if(Info[playerid][pMember] == 1||Info[playerid][pLeader] == 1){
			DisablePlayerCheckpoint(playerid);
		}
		else if(Info[playerid][pMember] == 4||Info[playerid][pLeader] == 4){
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
    zcmd(noac, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No tienes autorización a usar este comando.");
        new string[80];
        if (!noac){
			noac = 1;
			format(string, sizeof(string), "[INFRANET] [ADMIN CHAT BLOQUEADO Por %s]",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,string,2);
		}
		else{
			noac = 0;
			format(string, sizeof(string), "[INFRANET] [ADMIN CHAT DESBLOQUEADO Por %s]",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,string,2);
		}
		return 1;
    }
    zcmd(nofac, playerid, params[]){
    	new string[80];
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 6 || Info[playerid][pFactionModerator] == 1)
        if (!nofac){
			nofac = 1;
			format(string, sizeof(string), "{FF0000}[ATENCION]:{FFFFFF} Chat de Facción Bloqueado por %s ",GetPlayerNameEx(playerid));
			SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
		}
		else{
			nofac = 0;
			format(string, sizeof(string), "{FF0000}[ATENCION]:{FFFFFF} Chat de Facción desbloqueado por %s",GetPlayerNameEx(playerid));
			SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
		}
		return 1;
    }
    zcmd(actualizarsv, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if (Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        saveAccounts();
		foreach(Player, i){ OnPlayerSavedStats(i); }
		print("EXE:saveAccounts;");
		ABroadCast(COLOR_GENERAL,"Servidor INFRANET-RP guardado correctamente.",2);
        return 1;
    }
    zcmd(stopanim, playerid, params[]){
    	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
		if(Info[playerid][pEstado] == 0) return ClearAnimations(playerid);
		else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto ahora.");
		return 1;
    }
   	CMD:navidad(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: Lo sentimos, tendrá que esperar hasta el día 24 de diciembre del 2016 para usar el CMD." );
	    return 1;
	}
	CMD:recibirmiregalo(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: Lo sentimos, tendrá que esperar hasta el día 24 de diciembre del 2016 para usar el CMD." );
	    return 1;
	}
    /*zcmd(navidad, playerid, params[])
	{
    SetPlayerAttachedObject(playerid, 1, 19066, 2, 0.1469, 0.0080,  0.0020, 91.8000, 102.0999, 0.0000);
    PlayAudioStreamForPlayer(playerid, "http://k54.offliberty.com/AYRSV3XIA-4.mp3");
    SetPlayerAttachedObject(playerid, 2, 18863, 2, 13.7769, 0.0000,  -4.98790, 0.0000, 0.0000, 0.0000);
    SetPlayerWeather(playerid, 32);
    SetPlayerTime(playerid, 7,0);
    SendClientMessageEx(playerid, COLOR_WHITE, "Has recibido un gorro de navidad, si deseas quitarte el gorro, usa /qtoys. Para quitar la música, /ignorar.");
    return 1;
	}*/
	// CMD's navidad eliminados.
	/*zcmd(recibirmiregalo, playerid, params[])
    {
        if(!IsPlayerInRangeOfPoint(playerid, 5, 1476.0930, -1718.5381, 13.7674)) return SendClientMessageEx(playerid, COLOR_GREY, "No estás debajo del árbol de navidad.");
        if (Info[playerid][pPasaporte] == 0)
        {
        new RegalosRandom;
        new string[128];
        RegalosRandom = random(10);
        switch(RegalosRandom)
        {
        	case 1,3,5,7:
         	{
      				RobarPC(playerid);
                    format(string, sizeof(string), "* %s agarra un regalo y lo abre rápidamente.", GetPlayerNameEx(playerid));
                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    SendClientMessageEx(playerid, COLOR_GRAD2, "[navidad] Recibiste un Pack Maravilloso:");
                    SendClientMessageEx(playerid, COLOR_GRAD2, "Ordenador, 35 mil dólares, Chaleco, 3 Horas VIP Bronce y una Escopeta de combate.");
                    GivePlayerCash(playerid, 35000);
                    SetPlayerArmour(playerid,100);
                    Info[playerid][pVIP] = 1;
        			Info[playerid][pTempVIP] = 10800;
		    		Info[playerid][pBuddyInvited] = 1;
		    		GivePlayerValidWeapon(playerid, 27);
                    Info[playerid][pPasaporte] = 1;

     		}
       		case 2,4,6:
         	{
         	        RobarTVBuena(playerid);
                    format(string, sizeof(string), "* %s toma un regalo, lo mira detenidamente y lo abre.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessageEx(playerid, COLOR_GRAD2, "[navidad] Recibiste un Pack incréible:");
					SendClientMessageEx(playerid, COLOR_GRAD2, "Una televisión, 25 mil dólares, 5 Mil materiales, 2 Horas de respeto y 2 horas VIP Gold.");
					Info[playerid][pVIP] = 3;
        			Info[playerid][pTempVIP] = 7200;
		    		Info[playerid][pBuddyInvited] = 1;
					Info[playerid][pMats] += 5000;
					GivePlayerCash(playerid, 25000);
			    	Info[playerid][pExp] += 2;
					Info[playerid][pPasaporte] = 1;
     		}
     		case 8,9:
         	{
                    format(string, sizeof(string), "* %s se acerca al regalo más grande de todos y lo abre.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessageEx(playerid, COLOR_GRAD2, "[navidad] Recibiste un Pack inédito:");
					SendClientMessageEx(playerid, COLOR_GRAD2, "20 Mil dólares, Un hermoso Dildo, Chaleco, 2 horas de respeto y 4 horas VIP Platino.");
					GivePlayerCash(playerid, 20000);
					GivePlayerValidWeapon(playerid, 27);
					SetPlayerArmour(playerid,100);
					Info[playerid][pExp] += 2;
     				Info[playerid][pVIP] = 1;
        			Info[playerid][pTempVIP] = 14400;
		    		Info[playerid][pBuddyInvited] = 1;
					Info[playerid][pPasaporte] = 1;

     		}
  		 	case 10:
         	{
                    format(string, sizeof(string), "* %s agarra el regalo, lo agita y alegremente lo abre.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					new playervehicleid = GetPlayerFreeVehicleId(playerid);
     				if(playervehicleid == -1)
					{
					SendClientMessageEx(playerid, COLOR_GRAD2, "[navidad] Recibiste un regalo fuera de lo normal:");
					SendClientMessageEx(playerid, COLOR_GRAD2, "Has recibido 35 mil dólares y 50 gramos de crack. Al igual que un paracaidas y un condón usado.");
					Info[playerid][pCrack] += 50;
					GivePlayerValidWeapon(playerid, 27);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GRAD2, "Recibiste un regalo único:");
						SendClientMessageEx(playerid, COLOR_GRAD2, "Has recibido una Freeway valorada en más de 50 mil dólares, al igual que 2 horas de juego.");
						new Float:X,Float:Y,Float:Z;
    					GetPlayerPos(playerid,X,Y,Z);
    					new Float:Angle;
    					GetPlayerFacingAngle(playerid,Angle);
    					CreatePlayerVehicle(playerid, playervehicleid, 463, X, Y, Z+5, Angle, 0, 0, 0);
    					Info[playerid][pExp] += 2;
					}
					Info[playerid][pPasaporte] = 1;
       		}
		}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Ya recibiste tu regalo, el equipo de INFRANET te desea feliz navidad. [#Navidad2015]");
        return 1;
    }
    zcmd(resetregalo, playerid, params[])
    {
    	if(Info[playerid][pAdminZC] < 5000) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
        new giveplayerid;
        if(!sscanf(params, "d",giveplayerid))
        {
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
            if (Info[giveplayerid][pPasaporte] == 1)
        	{
        	    Info[giveplayerid][pPasaporte] = 0;
        	    SendClientMessageEx(playerid, COLOR_GRAD2, "Has reseteado el regalo de ese usuario.");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] Este usuario puede recibir regalos ya, avisale.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "* /resetregalo [ID]");
		    SendClientMessageEx(playerid, COLOR_GRAD2, "De esta manera podrán recibir regalo de nuevo.");
		}
        return 1;
	}*/
    zcmd(daradmin, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
 		if(Info[playerid][pAdminZC] >= 6000)
 		{
		new giveplayerid, level;
		if(!sscanf(params, "di", giveplayerid, level)){
            if(IsPlayerConnected(giveplayerid)){
               	new string[128];
			    Info[giveplayerid][pAdminZC] = level;
			    format(string, sizeof(string), "[AdmCmdExe]: %s lo ha asignado administrador nivel %d", GetPlayerNameEx(playerid), level);
			    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			    format(string, sizeof(string), "[AdmCmdExe]: %s ha asignado administrador nivel %d a %s", GetPlayerNameEx(playerid), level, GetPlayerNameEx(giveplayerid));
			    ABroadCast(COLOR_GENERAL,string,2);
			    format(string, sizeof(string), "* %s asignó a %s administrador nivel [%d]", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),level);
			    Log("LOGS/admins.log", string);
			    new log[255];
				format(log, 225, "* El usuario %s se le ha modificado su nivel administrativo a %d ", GetPlayerNameEx(giveplayerid), level);
    			Log("LOGS/Admins.log", log);
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /daradmin (ID) (Nivel) [NIVEL]: (1-3 MOD), (4-6 ADM), (7-9 ESP), (10-12 ENC), 4000, 5000, 6000.");
		}
        return 1;
    }
    zcmd(daref, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
				Info[giveplayerid][pFactionModerator] = 1;
				format(string, sizeof(string), "%s lo ha asignado moderador de facciones.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s ha asignado moderador de facciones a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_GENERAL,string,2);
				Log("LOGS/security.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /daref (ID)");
        return 1;
    }
    zcmd(dares, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] > 6000) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
				Info[giveplayerid][pModStaff] = 1;
				format(string, sizeof(string), "%s lo ha asignado Encargado de Staff.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dares (ID)");
        return 1;
    }
    zcmd(daregame, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pShopTech] = 1;
				format(string, sizeof(string), "%s lo ha asignado Técnico de la Tienda Online.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s ha asignado encargado de dar puntos de rol [GameOperator] a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_GENERAL,string,2);
				Log("LOGS/security.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /daregame (ID)");
        return 1;
    }
    zcmd(darefam, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	   	new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pGangModerator] = 1;
				format(string, sizeof(string), "%s lo ha asignado moderador de familias y bandas.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s ha asignado moderador de familias y bandas a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_GENERAL,string,2);
				Log("LOGS/security.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darefam (ID)");
        return 1;
    }
    zcmd(dareban, playerid, params[])
	{
	    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	    new string[128], giveplayerid;
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, " No autorizado.");
        if(!sscanf(params, "d", giveplayerid))
		{
            if(IsPlayerConnected(giveplayerid))
			{
				Info[giveplayerid][pBanAppealer] = 1;
				format(string, sizeof(string), "%s lo ha asignado Apelador a desbaneo.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s ha asignado Apelador de desbaneos a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_GENERAL,string,2);
				Log("LOGS/security.log", string);
			}	else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
        }	else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dareban (ID)");
        return 1;
    }
	zcmd(desarmar, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new giveplayerid;
        if (Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
		if(!sscanf(params, "d", giveplayerid))
		{
			if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
            new string[84];
            ResetPlayerWeaponsEx(giveplayerid);
            format(string, sizeof(string), "[AdmCmdExe]: %s limpio el inventario de armas de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
            ABroadCast(COLOR_GENERAL,string,2);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /desarmar (PlayerID)");
		return 1;
	}
	zcmd(qdinero, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		new giveplayerid, money, reason[64];
        if (Info[playerid][pAdminZC] < 1338) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		if (!sscanf(params, "dds", giveplayerid, money, reason)){
            if(money > 99999999 || money < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo de 0 - 99999999 de dinero");
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
			new string[128];
            GivePlayerCash(giveplayerid, -money);
            format(string, sizeof(string), "[AdmCmdExe]: %s quitó $%d a %s, razón: %s.", GetPlayerNameEx(playerid), money,GetPlayerNameEx(giveplayerid),reason);
            BroadCast(COLOR_LIGHTRED,string);
            Log("LOGS/removemoney.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qdinero (PlayerID) (Dinero) (Razón)");
		return 1;
	}
CMD:jail(playerid, params[]){
		new string[132], time, giveplayerid, reason[64];
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(CommandSpamTimes[playerid] == 999){
          	format(string, sizeof(string), "INFRANET-RP: %s fue baneado automáticamente, razón: Flood Cmd´s", GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_ORANGE,string,2);
	        Log("LOGS/hackeraction.log", string);
	        Info[playerid][pBannedZC] = 0;
			Kick(playerid);
			return 1;
		}
        if (Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "dds[64]", giveplayerid, time, reason)){
            if(IsPlayerConnected(giveplayerid)){
            ///if(strlen(reason) > 64)
            if(strlen(reason) >= sizeof(reason)-1) return SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}[INFO]:{FFFFFF} El motivo del jail no puede ocupar más de 64 carácteres.");
				strmid(Info[giveplayerid][pJailedBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
				strmid(Info[giveplayerid][pJailReason], reason, 0, strlen(reason), 64);
				SetPVarInt(giveplayerid, "IsInArena", 0);
				SetPVarInt(giveplayerid, "ArenaMode", 0);
              	CommandSpamTimes[playerid]++;
				CommandSpamUnmute[playerid] = 60;
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
                Info[giveplayerid][pJailAdmin] += 1;
		        Info[giveplayerid][pJailed] = 1;
		        PhoneOnline[giveplayerid] = 1;
				Info[giveplayerid][pJailTime] = time*60;
				ResetPlayerWeaponsEx(giveplayerid);
				new rand = random(sizeof(OOCJail));
				SetPlayerPos(giveplayerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerInterior(giveplayerid, 0);
				SetPlayerVirtualWorld(giveplayerid, 1000);
				format(string, sizeof(string), "[ADM]:{F5A9A9} %s encarceló a %s{FA5858} - Razón:{F5A9A9} %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), Info[giveplayerid][pJailReason]);
				BroadCast(0xFA5858FF, string);
				format(string, sizeof(string), "[AdmCmd]: %s encarceló a %s, razón: %s, tiempo: %d minuto(s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), Info[giveplayerid][pJailReason], time);
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} Tiempo: %d minuto(s) - Jugador: %s", time, GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_AZULL,string,2);
				format(string, sizeof(string), "Tiempo: %d minuto(s)", time);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				StopAudioStreamForPlayer(giveplayerid);
            }
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Esa ID es inválida.");
        }
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /jail (playerid) (minutos) (razón)");
        return 1;
    }
	CMD:jailoffline(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 3){
			new string[128], name[MAX_PLAYER_NAME], minutes;
			if(sscanf(params, "s[24]d", name, minutes)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /jailoffline (Nombre_Apellido) (Minutos)");

			if(INI_Exist(name))
			{
				//strmid(Info[giveplayerid][pJailedBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
				//strmid(Info[giveplayerid][pJailReason], reason, 0, strlen(reason), 64);
				new PlayerFile[MAX_PLAYER_NAME + 32];
				//GetPlayerNameEx(playerid);
				new sendername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
	    		format( PlayerFile , sizeof PlayerFile, USERFILE, name);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,"Jailed",2);
	    		INI_WriteInt(File,"JailTime",minutes*60);
        		INI_WriteFloat(File,"Pos_x",2172.82);
        		INI_WriteFloat(File,"Pos_y",3951.59);
        		INI_WriteFloat(File,"Pos_z",1870.5);
        		INI_WriteString(File,"JailedBy",sendername);
        		INI_WriteString(File,"JailReason","Reporte en el foro/Desconectarse en rol.");
	    		INI_Close(File);
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "AdmCmd: %s fue jaileado por %s (%d-%d-%d) [CMD OFFLINE]", name, GetPlayerNameEx(playerid),month,day,year);
				Log("LOGS/admin.log", string);
				format(string, 128, "INFRANET-RP: %s fue jaileado por %s. [CMD OFFLINE]", name, GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
			}
			else SendClientMessageEx( playerid, COLOR_WHITE, "Esa cuenta no existe." );
		}
		return 1;
	}
	CMD:checkjail(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] >= 1)
		{
		    new string[132+MAX_PLAYER_NAME], giveplayerid;
		    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utilize: /checkjail <PlayerID>");
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(Info[giveplayerid][pJailed] > 0)
			    {
		    		new minutos = (Info[giveplayerid][pJailTime]/60)+1;
      				format(string, sizeof(string), "%s - %d segundos restantes. {FFFFFF}(Menos de %d minuto/s).", GetPlayerNameEx(giveplayerid), Info[giveplayerid][pJailTime], minutos);
        			SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "(ID %d) Ha sido jaileado por %s, motivo: %s", giveplayerid, Info[giveplayerid][pJailedBy], Info[giveplayerid][pJailReason]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
				else SendClientMessageEx(playerid, COLOR_GRAD2, "Este usuario no ha sido jaileado (Ni IC, ni OOC). En caso de estar en jail, usar /mandarls.");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Esa ID es inválida.");
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Sólo administradores." );
		return 1;
	}
	zcmd(encarcelados, playerid, params[])
	{
	    if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx( playerid, COLOR_WHITE, "Sólo administradores.");
		SendClientMessage(playerid, COLOR_GRAD1, "Encarcelados (Tanto IC como OOC)- Más información con /checkjail:");
		new string[180];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
   				if(Info[i][pJailed] > 0)
   				{
					format(string, sizeof(string), "(ID: %d) - %s, tiempo de jail: %d minutos. [Encarcelado por %s]", i, GetPlayerNameEx(i), (Info[i][pJailTime]/60)+1, Info[i][pJailedBy]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
		}
		return 1;
	}
	zcmd(darpuntosrol, playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pShopTech] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "[GO] No autorizado.");
		if (!sscanf(params, "ui", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
			new string[128];
				{
				Info[params[0]][pPuntosRol] += params[1];
				format(string, sizeof(string), "[Aviso]: El administrador %s ha otorgado [%d] puntos de rol a %s.", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_RED2, string, 2);
				format(string, sizeof(string), "[Información] %s tiene ahora un total de %d puntos de rol.", GetPlayerNameEx(params[0]), Info[params[0]][pPuntosRol]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(params[0], COLOR_WHITE, "Has recibido puntos de rol, felicidades.");
				}
			}else SendClientMessageEx(playerid, COLOR_GRAD2, " Jugador no conectado.");
		}else SendClientMessageEx(playerid, COLOR_GRAD2, "CMD: /Darpuntosrol [ID] [Cantidad]");
	return 1;
	}
	zcmd(quitarpuntosrol, playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pShopTech] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "[GO] No autorizado.");
		if (!sscanf(params, "ui", params[0], params[1]))
		{
			if(IsPlayerConnected(params[0]))
			{
			new string[128];
				{
				Info[params[0]][pPuntosRol] -= params[1];
				format(string, sizeof(string), "[Aviso]: %s ha quitado [%d] puntos de rol a %s.", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
				ABroadCast(COLOR_RED2, string, 2);
				format(string, sizeof(string), "[Información] %s tiene ahora un total de %d puntos de rol.", GetPlayerNameEx(params[0]), Info[params[0]][pPuntosRol]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(params[0], COLOR_WHITE, "Le han retirado parte de sus puntos de rol.");
				}
			} else SendClientMessageEx(playerid, COLOR_GRAD2, " Jugador no conectado.");
		} else SendClientMessageEx(playerid, COLOR_GRAD2, "CMD: /quitarpuntosrol [ID] [Cantidad]");
	return 1;
	}
 	CMD:dpr(playerid, params[])
	{
		return cmd_darpuntosrol(playerid, params);
	}
 	CMD:qpr(playerid, params[])
	{
		return cmd_quitarpuntosrol(playerid, params);
	}
    zcmd(ls, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] >= 1 ){
        	if (GetPlayerState(playerid) == 2)
			{
				return SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6, -1705.5, 13.4); //1529.6,-1691.2,13.3
			}
			else{
				SetPosEx(playerid, 1529.6, -1705.5, 13.4, 0, 0 ,0); //1529.6,-1691.2,13.3
			}
		}
		return 1;
    }
    zcmd(sf, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if (Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			return SetVehiclePos(GetPlayerVehicleID(playerid), -2016.4399,-79.7714,35.3203);
		}
		else{
			SetPosEx(playerid, -2016.4399,-79.7714,35.3203, 0, 0 ,0);
			return 1;
		}
    }
    zcmd(lv, playerid, params[]){
    	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if (Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (GetPlayerState(playerid) == 2){
			return SetVehiclePos(GetPlayerVehicleID(playerid), 1694.6566,1453.4523,10.7632);
		}
		else{
			SetPosEx(playerid, 1694.6566,1453.4523,10.7632, 0, 0 ,0);
			return 1;
		}
    }
    zcmd(entrarauto, playerid, params[]){
        new vehicleid;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if (Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "i", vehicleid)){
            PutPlayerInVehicle(playerid, vehicleid, 1);
			return SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /entrarauto (VehicleID)");
        return 1;
    }
    zcmd(llenargas, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if (Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        SendClientMessageToAllEx(COLOR_GREEN, "La gasolina de los vehículos fue llenada.");
  		for(new c=0;c<MAX_VEHICLES;c++) VehicleFuel[c] = 200;
        return 1;
    }
    zcmd(anunciostaff, playerid, params[]){
        new text[64], type;
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if (Info[playerid][pAdminZC] < 6) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        if (!sscanf(params, "is", type, text))
		{
            if(type == 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes elegir el numero 2.");
			for(new i = 0; i < MAX_PLAYERS; i++){ if(gPlayerLogged{i}){ GameTextForPlayer(i, text, 5000, type); } }
            new string[128];
            format(string, sizeof(string), "[AdmCmdExe]: %s usó el comando /anunciostaff.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,string,4);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /anunciostaff (Tipo) (Texto)");
        return 1;
    }
   	zcmd(abrirspray, playerid, params[])
	{
		if(Team_Mecanicos(playerid))
		{
		    new string[128];
  			MoveDynamicObject(SprayLS,2071.57642, -1831.40344, 7.0, 5.5, 0.00000, 0.00000, 90.00000);
  			SendClientMessageEx(playerid, COLOR_WHITE, "Atención, abriste el Spray al lado del taller, la gente pagará 100 dólares por reparación.");
  			format(string, sizeof(string), "[AbrirSpray]: El mecánico %s abrió el acceso al Spray, todo usuario podrá reparar gratis.", GetPlayerNameEx(playerid));
	 		ABroadCast(COLOR_ORANGE, string, 2);
		}
		return 1;
	}
	zcmd(cerrarspray, playerid, params[])
	{
		if(Team_Mecanicos(playerid))
		{
		    new string[128];
  			MoveDynamicObject(SprayLS,2071.57642, -1831.40344, 12.94390, 5.5, 0.00000, 0.00000, 90.00000);
  			SendClientMessageEx(playerid, COLOR_WHITE, "Atención, cerraste el Spray al lado del taller, ahora las reparaciones las realizan los mecánicos.");
  			format(string, sizeof(string), "[CerrarSpray]: El mecánico %s cerró el Spray, todo usuario tendrá que ir al taller a reparar.", GetPlayerNameEx(playerid));
	 		ABroadCast(COLOR_ORANGE, string, 2);
		}
		return 1;
	}
	zcmd(deposito, playerid, params[])
	{
		if(IsACop(playerid))
		{
       		if (PlayerToPoint(10, playerid,1630.40356, -1862.23682, 14.25000)){
  			MoveDynamicObject(depgateA,1626.40356, -1862.23682, 14.25000, 1.5, 0.00000, 0.00000, 0.00000);
  			MoveDynamicObject(depgateB,1643.95410, -1862.23657, 14.25000, 1.5, 0.00000, 0.00000, -180.00);
  			SendClientMessageEx(playerid, COLOR_WHITE, "Bienvenido al depósito de Los Santos, una vez embarge el vehículo, lo tiene que estacionar en su lugar.");
      		PlayerPlaySound(playerid, 1153, 1630.40356, -1862.23682, 14.25000);
      		SetTimer("depositogate", 25000, 0);
			}
		}
		return 1;
	}
	zcmd(apgarage, playerid, params[])
	{
        for(new b = 0; b < MAX_PORTONES; b++)
		{
            if(PlayerToPoint(15, playerid, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]))
			{
			    if(Info[playerid][pMember] != 0 && Info[playerid][pMember] == iPorton[b][pFac]) // Tiene facción y es miembro de la facción a la que pertenece el portón.
			    {
                	MoveDynamicObject(iPorton[b][pObject],iPorton[b][pZ][0], iPorton[b][pZ][1], iPorton[b][pZ][2], iPorton[b][pSpeed], iPorton[b][pZ][3], iPorton[b][pZ][4], iPorton[b][pZ][5]);
			    	PlayerPlaySound(playerid, 1153, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]);
        			SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Portón Facción]: {FFFFFF}Abriste el acceso, usa /cpgarage para cerrarlo de nuevo. (Dinamic System)");
			    	return 1;
				}
    			if(Info[playerid][pFMember] != 0 && Info[playerid][pFMember] == iPorton[b][pFam]) // Tiene familia y es miembro de la familia a la que pertenece el portón.
			    {
                	MoveDynamicObject(iPorton[b][pObject],iPorton[b][pZ][0], iPorton[b][pZ][1], iPorton[b][pZ][2], iPorton[b][pSpeed], iPorton[b][pZ][3], iPorton[b][pZ][4], iPorton[b][pZ][5]);
			    	PlayerPlaySound(playerid, 1153, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]);
			    	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Portón Familia]: {FFFFFF}Abriste el acceso, usa /cpgarage para cerrarlo de nuevo. (Dinamic System)");
			    	return 1;
				}
			} // Se cierra el LOOP de revisar todo garage cerca de la persona.
		} // Se cierra el LOOP de todos los portones existentes en el servidor (Actualmente 50).
		if(IsAPolice(playerid)){
        	if (PlayerToPoint(10, playerid,1586.73999, -1638.14319, 14.56300)){
      			MoveDynamicObject(pdgate1,1576.8200, -1638.1432, 14.5630, 1.0, 0.00000, 0.00000, 180.00000);
      			PlayerPlaySound(playerid, 1153, 1586.73999, -1638.14319, 14.56300);
				return 1;
			}
			if (PlayerToPoint(15, playerid,1546.19897, -1627.59656, 21.01976)){
      			MoveDynamicObject(pdgate2,1546.19897, -1627.59656, 21.01976, 3.0 , 0.00000, 0.00000, 90.00000);
      			PlayerPlaySound(playerid, 1153, 1546.19897, -1627.59656, 21.01976);
      			SetTimer("GateClose5", 7000, 0);
      			return 1;
			}
			if (PlayerToPoint(15, playerid,1643.5000000,-1719.4000000,14.7000000)){
      			MoveDynamicObject(pdgate3,1643.5000000,-1711.2001000,14.7000000, 3.0);
      			PlayerPlaySound(playerid, 1153, 1643.5000000,-1719.4000000,14.7000000);
      			SetTimer("CloseGarage", 7000, 0);
      			return 1;
			}
    	}
    	else if(Team_LSTV(playerid)){
      		if (PlayerToPoint(20, playerid,649.71960, -1367.87195, 12.88290)){
	       		MoveDynamicObject(tvp,649.71960, -1367.87195, 12.88290, 5.0);
	       		SetTimer("GateCloseCNN", 7000, 0);
	       		return 1;
       		}
  		}
  		else if(Hitman(playerid)){
      		if (PlayerToPoint(15, playerid,2235.10010, -2216.00000, 15.27796)){
	       		MoveDynamicObject(porhit,2235.1001, -2216.0000, 20.8756, 5.0);
	       		PlayerPlaySound(playerid, 1153, 2235.10010, -2216.00000, 15.27796);
	       		SetTimer("CloseGarageHitman", 7000, 0);
	       		return 1;
       		}
       		if (PlayerToPoint(15, playerid,2178.3999000,-2254.8000000,15.4000000)){
	       		MoveDynamicObject(porhitint,2178.3999, -2254.8000, 19.9642, 5.0);
	       		PlayerPlaySound(playerid, 1153, 2178.3999000,-2254.8000000,15.4000000);
	       		SetTimer("CloseGarageHitman2", 7000, 0);
	       		return 1;
  		    }
  		        else SendClientMessageEx(playerid, COLOR_WHITE,"");
		}
		else if(Team_SAEM(playerid))
		{
      		if (PlayerToPoint(30, playerid,2457.80, -2254.76, 26.90)){
      		    MoveDynamicObject(saem1, 2457.7957, -2254.7603, 21.2877, 5.0);
      		    PlayerPlaySound(playerid, 1153, 2457.80, -2254.76, 26.90);
	       		SetTimer("OpenDoorNG", 7000, 0);
	       		return 1; // SAEM LS.
	       	}
			if (PlayerToPoint(30, playerid,2338.10571, -2353.88281, 15.2)){
      		    MoveDynamicObject(saem2, 2338.10571, -2353.88281, 20.72, 5.0);
      		    PlayerPlaySound(playerid, 1153, 2338.10571, -2353.88281, 15.2);
	       		SetTimer("OpenDoorNG2", 7000, 0);
	       		return 1; //SAEM LS.
	       	}
      		if (PlayerToPoint(30, playerid,2273.59570, -2663.29053, 15.2)){
      		    MoveDynamicObject(saem3, 2273.59570, -2663.29053, 20.72, 5.0);
      		    PlayerPlaySound(playerid, 1153, 2273.59570, -2663.29053, 15.2);
	       		SetTimer("OpenDoorNG3", 7000, 0);
	       		return 1; // SAEM LS.
	       	}
      		if (PlayerToPoint(30, playerid,-1529.0433, 482.4390, 9.0600)){
      		    MoveDynamicObject(saemSF, -1529.0433, 482.4390, 3.4648, 5.0);
	       		SetTimer("OpenDoorNGSF", 7000, 0);
	       		return 1; // SAEM SF.
	       	}
      		if (PlayerToPoint(30, playerid,135.2415, 1941.0129, 26.1857)){
      		    MoveDynamicObject(saemLV, 135.2415, 1941.0129, 26.1857, 5.0);
	       		SetTimer("OpenDoorNGLV", 7000, 0);
	       		return 1; // SAEM LV.
	       	}
 			if (PlayerToPoint(30, playerid,348.9841, 1801.1180, 25.4055)){
      		    MoveDynamicObject(saemLV2, 348.9841, 1801.1180, 25.4055, 5.0, 0.00000, 358.25000, 41.75000);
	       		SetTimer("OpenDoorNGLV2", 7000, 0);
	       		return 1; // SAEM LV.
	       	}
          	else SendClientMessageEx(playerid, COLOR_WHITE,"");
		}
		else if(Team_SAMD(playerid)){
	      	if (PlayerToPoint(30, playerid,1121.61951, -1315.17566, 1.97200)){
	      	//CreateDynamicObject(980, 1121.61951, -1315.17566, 1.97200,   0.00000, 0.00000, -90.00000); CERRADO.
		       	MoveDynamicObject(hospitalgate, 1121.61951, -1315.17566, -3.5, 1.5, 0.0, 0.0, -90.0); // Abierto.
		       	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Garage Staff]: {FFFFFF}Abriste el acceso al estacionamiento del Hospital, usa /cpgarage para cerrarlo.");
		       	//SetTimer("GateClose4", 7000, 0); // No se necesita Timer.
		       	return 1;
	       }
	       else SendClientMessageEx(playerid, COLOR_WHITE,"");
		}
		else if(Team_Rusa(playerid)){
	      	if (PlayerToPoint(30, playerid,787.20361328,-1152.45361328,25.40438461)){
		       	MoveDynamicObject(RejaRusa,787.20312500,-1152.45312500,29.85149193, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseRusa", 7000, 0);
		       	return 1;
		       	}
			if (PlayerToPoint(15, playerid,662.1038,-1228.5162,15.5905)){
	      		MoveDynamicObject(RejaRusa2,658.6991,-1225.7975,1.7825, 2.0, -1000.0, -1000.0, -1000.0);
	      		SetTimer("GateCloseRusa2", 7000, 0);
	      		return 1;
	       }
	       if (PlayerToPoint(15, playerid,665.0096,-1304.3438,13.4609)){
	      		MoveDynamicObject(RejaRusa3,665.3931,-1308.6857,20.6859, 2.0, -1000.0, -1000.0, -1000.0);
	      		SetTimer("GateCloseRusa3", 7000, 0);
	      		return 1;
	       }
	       if (PlayerToPoint(15, playerid,720.01898, -1322.44202, 2072.70996)){
	      		MoveDynamicObject(BunkerRusos,720.01898, -1322.44202,2079.0, 2.0, 0.0, 0.0, 0.0);
	      		SetTimer("GateCloseBunker", 9000, 0);
	      		return 1;
	       }
	       else SendClientMessageEx(playerid, COLOR_WHITE,"");
		}
		else if(Team_Yakuza(playerid)){
	      	if (PlayerToPoint(30, playerid,321.32, -1188.11, 78.08)){
		       	MoveDynamicObject(yakuzagate,321.38, -1188.19, 72.29, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseYakuza", 7000, 0);
		       	return 1;
		       	}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	    	if(Info[playerid][pVIP] > 0 || Info[playerid][pAdminZC] >= 1338){
	      	if (PlayerToPoint(30, playerid,2901.7615,-666.2679,10.8576)){
		       	MoveDynamicObject(rejavip,2909.96484, -666.21680, 16.8, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseRejavip", 7000, 0);
		       	return 1;
		       	}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	    if(Team_Santana(playerid)){
	    if (PlayerToPoint(30, playerid,1245.7603,-764.0747,92.1280)){
		       	MoveDynamicObject(SantanaReja,1245.49, -766.67, 88.27, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseSantana", 7000, 0);
		       	return 1;
		       	}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
		/*else if(Gobierno(playerid)){
	        if (PlayerToPoint(10, playerid,1386.099609375, -1647.8994140625, 14.10000038147)){
	      		MoveDynamicObject(gobiernogate,1390.39074707,-1639.57287598,16.29999924, 5.0);
	            SetTimer("GateCloseGob", 7000, 0);
	            return 1;
			}
			if (PlayerToPoint(15, playerid,1391.29980469,-1629.89941406,12.52500343) || PlayerToPoint(15, playerid,1391.29980469,-1629.89941406,37.20010376)){
	      		MoveDynamicObject(gobiernogate1,1391.29980469,-1629.89941406,37.20010376, 5.0);
	      		SetTimer("GateCloseGob1", 7000, 0);
	      		return 1;
			}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }*/
	    else if(Team_Mecanicos(playerid)){
	    	if (PlayerToPoint(30, playerid,2237.3669, -1962.7161, 14.8617)){
		       	MoveDynamicObject(mecareja,2237.36694, -1962.71606, 9.69644, 2.0);
		       	SetTimer("GateCloseMecas", 8000, 0);
		       	return 1;
     		}
   			if (PlayerToPoint(30, playerid,1975.92395, -1780.50000, 12.38)){
		       	MoveDynamicObject(EntradaTaller,1975.92395, -1780.50000, 12.38, 2.0,   0.00000, -90.00000, 0.00000);
		       	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Taller Mecánico]: {FFFFFF}Abriste el acceso al taller público, usa /cpgarage para cerrarlo.");
		       	//SetTimer("GateCloseTaller1", 8000, 0);
		       	return 1;
     		}
   			if (PlayerToPoint(30, playerid,2030.15137, -1780.31531, 15.1176)){
		       	MoveDynamicObject(EntradaTaller2,2030.15137, -1780.31531, 15.1176, 2.0,   0.00000, 0.00000, 90.00000);
		       	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Taller Mecánico]: {FFFFFF}Abriste el acceso al taller privado, usa /cpgarage para cerrarlo.");
		       	//SetTimer("GateCloseTaller2", 8000, 0);
		       	return 1;
     		}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	   else if(Team_LCN(playerid)){
	    	if (PlayerToPoint(30, playerid,1426.66724, -1883.32166, 15.13657)){
		       	MoveDynamicObject(rejalcn,1426.66724, -1883.32166, 9.28971, 2.5);
		       	SetTimer("GateCloseLCN1", 7000, 0); // Acceso inicial.
		       	return 1;
     		}
     		if (PlayerToPoint(30, playerid,1284.10754, -2047.3293, 59.45000)){
		       	MoveDynamicObject(rejalcn1,1284.10754, -2047.3293, 59.45000, 2.0);
		       	MoveDynamicObject(rejalcn2,1284.10754, -2065.6009, 59.45000, 2.0);
		       	SetTimer("GateCloseLCN2", 7000, 0); // Puerta principal.
		       	return 1;
     		}
     		if (PlayerToPoint(30, playerid,1132.73877, -2080.80762, 71.53810)){
		       	MoveDynamicObject(rejalcn3,1132.73877, -2080.80762, 60.0, 3.5);
		       	SetTimer("GateCloseLCN3", 7000, 0); // Puerta secundaria.
		       	return 1;
     		}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	    if(Team_LCN(playerid)){
	    	if (PlayerToPoint(20, playerid,1384.0200, -1883.0172, 13.8000)){
		       	MoveDynamicObject(portonbarlcn,1384.0200, -1883.0172, 13.8000, 2.0);
		       	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Portón Restaurante]: {FFFFFF}Abriste el portón de LCN, si deseas cerrarlo usa /cpgarage.");
		       	return 1;
     		}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	    if(Team_Alqaeda(playerid)){
	    if (PlayerToPoint(30, playerid,1023.6000, -371.7000, 75.3000)){
		       	MoveDynamicObject(AlqaedaReja,1023.6000, -371.7000, 69.6740, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseAlqaeda", 7000, 0);
		       	return 1;
		       	}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	    /*if(Team_ALEPH(playerid)){
	    if (PlayerToPoint(30, playerid,1987.2, -1276.2, 3.0)){
		       	MoveDynamicObject(rejaALEPH, 1971.2939, -1278.69995, 4.84980, 3.5, 0.0, 0.0, 180.0);
		       	MoveDynamicObject(rejaALEPH2, 2002.7996, -1278.72607, 4.84980, 3.5, 0.0, 0.0, 0.0);
		       	SetTimer("GateCloseALEPH", 8000, 0);
		       	return 1;
		       	}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }*/
	    else if(Team_Judicial(playerid)){
	    if (PlayerToPoint(30, playerid,1457.14, -1505.88, 1510.28)){
		       	MoveDynamicObject(sisporton,1457.1400, -1505.8800, 1510.28, 2.0, -1000.0, -1000.0, -1000.0);
		       	SetTimer("GateCloseSis", 7000, 0);
		       	return 1;
		       	}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
	    else SendClientMessageEx(playerid, COLOR_WHITE,"Usted no tiene un mando a distancia.");
	    return 1;
    }
   /* zcmd(afbi, playerid, params[])
   	{
	    if(Team_Judicial(playerid))
	{
		    if (PlayerToPoint(5, playerid, 1440.71216, -1469.97485, 1615.26636)){
			MoveDynamicObject(SJ_NEW1, 1439.3900, -1469.97485, 1615.26636, 2.0, 0.0000000, 0.0000000, 0.0000000);
			return SendClientMessage(playerid, COLOR_WHITE, "FBI: Has abierto la puerta");
		}
	    	else return SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	}
		    return 0;
}
	zcmd(cfbi, playerid, params[])
   	{
	 if(Team_Judicial(playerid))
	{
		    if (PlayerToPoint(5, playerid, 1440.71216, -1469.97485, 1615.26636)){
			MoveDynamicObject(SJ_NEW1, 1440.71216, -1469.97485, 1615.26636,2.0, 0.00000000,0.00000000, 0.0000000);
		    return SendClientMessage(playerid, COLOR_WHITE, "FBI: Has cerrado la puerta");
		}
	    	else return SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	}
		    return 0;
}
zcmd(afbi1, playerid, params[])
   	{
	    if(Team_Judicial(playerid))
	{
		    if (PlayerToPoint(5, playerid, 1422.93811, -1469.96814, 1616.24707)){
			MoveDynamicObject(SJ_NEW2, 1421.6000, -1469.96814, 1616.24707, 2.0, 0.0000000, 0.0000000, 0.0000000);
			return SendClientMessage(playerid, COLOR_WHITE, "FBI: Has abierto la puerta");
		}
	    	else return SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	}
		    return 0;
}
	zcmd(cfbi1, playerid, params[])
   	{
	 if(Team_Judicial(playerid))
	{
		    if (PlayerToPoint(5, playerid, 1422.93811, -1469.96814, 1616.24707)){
			MoveDynamicObject(SJ_NEW2, 1422.93811, -1469.96814, 1616.24707,2.0, 0.00000000,0.00000000, 0.0000000);
		    return SendClientMessage(playerid, COLOR_WHITE, "FBI: Has cerrado la puerta");
		}
	    	else return SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	}
		    return 0;
}*/
    zcmd(ap, playerid, params[])
   	{
	    if(IsAPolice(playerid))
	{
		if (PlayerToPoint(5, playerid, 1556.67175, -1698.34778, 4991.90405)){
			MoveDynamicObject(LSPD_NEW1, 1556.67175, -1694.8400, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000);
			return 1;
		}
		else if (PlayerToPoint(5, playerid, 1556.77905, -1636.08850, 4991.912)){
			MoveDynamicObject(LSPD_NEW2, 1556.77905, -1632.6560, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1562.7060, -1659.93030, 4989.41101)){
			MoveDynamicObject(LSPD_NEW3, 1562.7060, -1658.4360, 4989.4110, 1.0, 0.0000000, 0.0000000, -90.000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1570.5215, -1643.77222, 4989.41101)){
			MoveDynamicObject(LSPD_NEW4, 1570.5215, -1645.2640, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1570.5500, -1649.62769, 4989.41101)){
			MoveDynamicObject(LSPD_NEW5, 1570.5500, -1651.1120, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1570.51929, -1661.46106, 4989.41101)){
			MoveDynamicObject(LSPD_NEW6, 1570.51929, -1662.9520, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
		else if (PlayerToPoint(3.5, playerid, 1569.067016,-1698.031372,4990.585937 )){
			MoveDynamicObject(LSPD_NEW7, 1569.6000, -1700.284, 4989.5800, 1.0, 0.0000000, 0.0000000, 90.0000000);
			MoveDynamicObject(LSPD_NEW8, 1569.6000, -1695.756, 4989.5800, 1.0, 0.0000000, 0.0000000, -90.000000);
			return 1;
		}
		else if (PlayerToPoint(5, playerid, 1564.73792, -1664.65930, 4989.52588)){
			MoveDynamicObject(LSPD_NEW9, 1564.73792, -1663.3313, 4989.52588, 1.0, 0.0000000, 0.0000000, -90.0000000);
			return 1;
		}
		else if (PlayerToPoint(5, playerid, 1564.76685, -1688.26770, 4989.52588)){
			MoveDynamicObject(LSPD_NEW10, 1564.76685, -1689.5956, 4989.52588, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
	}
	else if(Hitman(playerid))
	{
		    if (PlayerToPoint(5, playerid, 2118.2234, -2274.4893, 19.5600)){
			MoveDynamicObject(HIT_NEW1, 2117.0789, -2273.3682, 19.5600, 2.0, 0.0000000, 0.0000000, 314.9950);
		}
	    	else SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	    	return 1;
	}
	else if(Team_FBI(playerid))
	{
		    if (PlayerToPoint(5, playerid, 303.84756470,-1521.62988281,-46.13965225)){
			MoveDynamicObject(FBI_NEW1, 302.39355469,-1521.62988281,-46.13965225, 2.0, 0.0000000, 0.0000000, 270.0000000);
			SendClientMessage(playerid, COLOR_WHITE, "FBI: Has abierto la puerta");
		}
	    	else SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	    	return 1;
	}
	else if(IsAPolice(playerid) || Team_Judicial(playerid))
	{
        if (PlayerToPoint(5, playerid, 1440.71216, -1469.97485, 1615.26636))
		{
		       	MoveDynamicObject(SJ_NEW1, 1439.3900, -1469.97485, 1615.26636, 2.0, 0.0000000, 0.0000000, 0.0000000);
  				return 1;
     	}
        if (PlayerToPoint(5, playerid, 1422.93811, -1469.96814, 1616.24707))
		{
		       	MoveDynamicObject(SJ_NEW2, 1421.6000, -1469.96814, 1616.24707, 2.0, 0.0000000, 0.0000000, 0.0000000);
  				return 1;
     	}
	    if(PlayerToPoint(8.0, playerid,1452.379394,-1506.422851,1604.029052))
		{
		       	MoveDynamicObject(PJCELDA3,1451.96338, -1507.66687, 1607.5, 2.0,  0.00000, 0.00000, 90.00000);
		       	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Prisión Judicial]: {FFFFFF}Recuerda usar /cp para cerrar la celda número 1.");
  				return 1;
     	}
  		else if(PlayerToPoint(8.0, playerid,1443.875610,-1524.978759,1604.029052))
		{
		       	MoveDynamicObject(PJCELDA4,1444.35950, -1523.42847, 1607.5,  2.0, 0.00000, 0.00000, 90.00000);
		       	SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Prisión Judicial]: {FFFFFF}Recuerda usar /cp para cerrar la celda número 2.");
  				return 1;
     	}
 	}
 	else SendClientMessageEx(playerid, COLOR_WHITE,"Usted no puede abrir esta puerta, solo policias.");
	return 1;

	}
	zcmd(cp, playerid, params[])
   	{
	 if(IsAPolice(playerid))
	{
		if (PlayerToPoint(5, playerid, 1556.67175, -1698.34778, 4991.90405)){
			MoveDynamicObject(LSPD_NEW1, 1556.67175, -1698.34778, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000);
			return 1;
		}
		else if (PlayerToPoint(5, playerid, 1556.77905, -1636.08850, 4991.91199)){
			MoveDynamicObject(LSPD_NEW2, 1556.77905, -1636.08850, 4991.5, 1.0, 0.0000000, 0.0000000, 270.0000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1562.7060, -1659.93030, 4989.41101)){
			MoveDynamicObject(LSPD_NEW3, 1562.7060, -1659.93030, 4989.4110, 1.0, 0.0000000, 0.0000000, -90.000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1570.5215, -1643.77222, 4989.41101)){
			MoveDynamicObject(LSPD_NEW4, 1570.5215, -1643.77222, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1570.5500, -1649.62769, 4989.41101)){
			MoveDynamicObject(LSPD_NEW5, 1570.5500, -1649.62769, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
		else if (PlayerToPoint(2, playerid, 1570.51929, -1661.46106, 4989.41101)){
			MoveDynamicObject(LSPD_NEW6, 1570.51929, -1661.46106, 4989.4110, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
		else if (PlayerToPoint(3.5, playerid, 1569.067016,-1698.031372,4990.585937 )){
			MoveDynamicObject(LSPD_NEW7, 1569.59998, -1699.50000, 4989.57996, 1.0, 0.0000000, 0.0000000, 90.0000000);
			MoveDynamicObject(LSPD_NEW8, 1569.59998, -1696.50000, 4989.57996, 1.0, 0.0000000, 0.0000000, -90.000000);
			return 1;
		}
		else if (PlayerToPoint(5, playerid, 1564.73792, -1663.3313, 4989.52588)){
			MoveDynamicObject(LSPD_NEW9, 1564.73792, -1664.65930, 4989.52588, 1.0, 0.0000000, 0.0000000, -90.0000000);
			return 1;
		}
		else if (PlayerToPoint(5, playerid, 1564.76685, -1689.5956, 4989.52588)){
			MoveDynamicObject(LSPD_NEW10, 1564.76685, -1688.26770, 4989.52588, 1.0, 0.0000000, 0.0000000, 90.0000000);
			return 1;
		}
	}
	else if(Hitman(playerid))
	{
		    if (PlayerToPoint(5, playerid, 2118.2234, -2274.4893, 19.5600)){
			MoveDynamicObject(HIT_NEW1, 2118.2234, -2274.4893, 19.5600, 2.0, 0.0000, 0.0000, 314.9950);
		}
	    	else SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	    	return 1;
	}
	else if(Team_FBI(playerid))
	{
		    if (PlayerToPoint(5, playerid, 303.84756470,-1521.62988281,-46.13965225)){
			MoveDynamicObject(FBI_NEW1, 302.39355469,-1521.62988281,-46.13965225,2.0, 0.00000000,0.00000000, 179.99450684);
			SendClientMessage(playerid, COLOR_WHITE, "FBI: Has cerrado la puerta");
		}
	    	else SendClientMessage(playerid, COLOR_WHITE, "ERROR: Debes estar cerca de la puerta para usar este comando");
	    	return 1;
	}
	else if(IsAPolice(playerid) || Team_Judicial(playerid))
	{
	    if (PlayerToPoint(5, playerid, 1440.71216, -1469.97485, 1615.26636))
		{
		       	MoveDynamicObject(SJ_NEW1, 1440.71216, -1469.97485, 1615.26636,2.0, 0.00000000,0.00000000, 0.0000000);
  				return 1;
     	}
     	if (PlayerToPoint(5, playerid, 1422.93811, -1469.96814, 1616.24707))
		{
		       	MoveDynamicObject(SJ_NEW2, 1422.93811, -1469.96814, 1616.24707,2.0, 0.00000000,0.00000000, 0.0000000);
  				return 1;
     	}
	    if(PlayerToPoint(8.0, playerid,1452.379394,-1506.422851,1604.029052))
		{
		       	MoveDynamicObject(PJCELDA3,1451.96338, -1507.66687, 1605.03467, 2.0,  0.00000, 0.00000, 90.00000);
  				return 1;
     	}
  		else if(PlayerToPoint(8.0, playerid,1443.875610,-1524.978759,1604.029052))
		{
		       	MoveDynamicObject(PJCELDA4,1444.35950, -1523.42847, 1605.03467,  2.0, 0.00000, 0.00000, 90.00000);
  				return 1;
     	}
 	}
 	else SendClientMessageEx(playerid, COLOR_WHITE,"Usted no puede abrir esta puerta, solo policias.");
	return 1;
	}
   zcmd(cpgarage, playerid, params[]) return CheckForCloseDoor(playerid);
   zcmd(sacarsangre, playerid, params[]){
        new giveplayerid;
        if(!sscanf(params, "d", giveplayerid)){
            if(OnDuty[playerid] == 0)   return SendClientMessageEx(playerid, COLOR_WHITE, "No estás de servicio.");
            if(IsPlayerConnected(giveplayerid)){
                if(Team_SAMD(playerid)){
                    if (ProxDetectorS(50.0, playerid, giveplayerid)){
            		    new Float:HP, string[128]; GetPlayerHealth(giveplayerid, HP);
            		    if(HP < 100) return SendClientMessageEx(playerid, COLOR_WHITE, "El paciente debe estar con el máximo de vida.");
            		    SetHP(giveplayerid, HP-80);
						SetPlayerDrunkLevel(giveplayerid, 3000);
						Blood += 80;
						format(string, sizeof(string), "* El doctor %s realiza una extracción de sangre a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						format(string, sizeof(string), "Información: Hay %d ml de sangre disponible.", Blood);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						SaveStuff();
            		} else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador debe estar cerca de usted.");
                } else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No eres médico.");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sacarsangre (jugador)");
        return 1;
    }
    zcmd(pcinfo, playerid, params[]){
        if(Team_SAMD(playerid)){
			new string[128];
        	ClearChatbox(playerid);
	        SendClientMessageEx(playerid, 0x00D535FF, "PCU (Loading ... )");
	        format(string, sizeof(string), "Sangre disponible: %d", Blood+9999);
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "Radiación TAC: No disponible");
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "Fondos: No disponible");
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        SendClientMessageEx(playerid, 0x00D535FF, "------------------------------");
		} else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres médico.");
		return 1;
	}
    zcmd(atar, playerid, params[]){
		if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
		if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para arriba.");
        new giveplayerid;
		if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnected(giveplayerid)){
                if(ProxDetectorS(15.0,playerid,giveplayerid)){
                    new string[128];
                    if(Tied[giveplayerid] == 0){
                        Tied[giveplayerid] = 1;
						format(string, sizeof(string), "* %s agarra una cuerda y ata a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
                    else{
                        Tied[giveplayerid] = 0;
						format(string, sizeof(string), "* %s agarra una cuerda y desata a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(giveplayerid, 1);
                    }
                } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /atar (ID)");
        return 1;
    }
    zcmd(vendar, playerid, params[]){
		if(GetPVarInt(playerid, "Injured") == 0){
            if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 para arriba.");
            if(Rope[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes venda.");
            new giveplayerid;
			if(!sscanf(params, "d", giveplayerid)){
                if(IsPlayerConnected(giveplayerid)){
                    if(ProxDetectorS(25.0,playerid,giveplayerid)){
                        new string[90];
                        if(Blinded[giveplayerid] == 0){
                            Blinded[giveplayerid] = 1;
							format(string, sizeof(string), "* %s venda los ojos de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPlayerCameraPos(giveplayerid,0.0,0.0,1000);
							SetPlayerCameraLookAt(giveplayerid,0.0,0.0,5000);
							Info[playerid][pRob]++;
                        }
                        else{
                            Blinded[giveplayerid] = 0;
							format(string, sizeof(string), "* %s desvenda los ojos de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetCameraBehindPlayer(giveplayerid);
                        }
                    } else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
                } else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
            } else return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendar (ID)");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
		return 1;
    }
	zcmd(atm, playerid,parms[])
	{
	    if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	    if(!IsAtATM(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un ATM/Banco.");

			if(Info[playerid][pTarjetaCredito] == 0)
            {
            SendClientMessageEx(playerid, COLOR_GRAD2, "{A2DC35}[ATM]:{FFFFFF} No tienes una tarjeta de crédito, consiguela en el banco se ha marcado un punto rojo en el mapa.");
            SetPlayerCheckpoint(playerid, 981.7520, -1156.5608, 23.8562,5.0);
            return 1;
            }

        SafeDialogEx(playerid,BANCO_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Banco de Los Santos", "{FFFFFF}Retirar dinero\n{FFFFFF}Depositar dinero\n{FFFFFF}Transferir dinero\n{FFFFFF}Balance de fondos", "Seleccionar", "Cancelar");
        return 1;
	}
    zcmd(tarjeta, playerid, params[]){
    if(IsPlayerConnected(playerid))
    {
    if(Info[playerid][pTarjetaCredito] == 1)
    {
    SendClientMessageEx(playerid, COLOR_GREY, "Secretario: Dísculpe señor pero sus datos indican que ya tiene una cuenta registrada en nuestro banco.");
    return 1;
    }
    if (!PlayerToPoint(50, playerid,985.7003, -1171.2474, 24.9037) || PlayerToPoint(5, playerid,379.1408,-1620.8060,38.7596))
    {
    SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el banco para registrar tu tarjeta.");
    return 1;
    }
    SendClientMessageEx(playerid, COLOR_WHITE, " Felicidades hemos registrado una nueva cuenta a su nombre en el banco. ");
    Info[playerid][pTarjetaCredito] = 1;
    }
    return 1;
    }
  CMD:mccomprar(playerid, params[]){
	if (PlayerToPoint(50, playerid,1294.7615,-988.5920,32.6953)){
		return SafeDialogEx(playerid, MENUMC, DIALOG_STYLE_LIST, "{00F70C}Mercado negro","Puño americano [20$]\nMáscara [50$]\nGanzúas [500$]\nSoga + Venda [120$]\nDesert eagle [18k$]\nMP5 [35k$]", "Ok", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en el mercado negro!");
	return 1;
 	}
	zcmd(ganzua, playerid, params[]){
 	    if(Info[playerid][pGanzuas] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ganzúas.");
 	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No eres el conductor.");
 	    if(Info[playerid][pLevel] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo los usuarios nivel 3 para adelante pueden usar este comando.");
 	    if(IsPlayerInAnyVehicle(playerid)){
		    new string[128], vehicleid;
 	    	format(string, sizeof(string), "* %s utiliza unas ganzúas y cruza los cables.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetTimerEx("SetVehicleEngine", 2500, 0, "dd",  vehicleid, playerid);
			GameTextForPlayer(playerid, "~p~haciendo puente.",2500,3);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo.");
		return 1;
	}
	CMD:sms(playerid, params[]){
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
		new string[80+MAX_PLAYER_NAME], phonenumb, text[128]; //128. y //100.
		if(sscanf(params, "ds[128]", phonenumb, text)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sms (numero teléfonico) (texto)");
		if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes un teléfono.");
		if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en prisión.");
		foreach(Player, i){
			if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
				new giveplayerid = i;
				if(Mobile[giveplayerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador está en una llamada.");
				Mobile[playerid] = giveplayerid;
				if(IsPlayerConnected(giveplayerid)){
					if(giveplayerid != INVALID_PLAYER_ID){
						if(PhoneOnline[giveplayerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador tiene el teléfono apagado.");
						if(UnidentifedCall[playerid] == 1)
						{
							format(string, sizeof(string), "SMS: %s, de: Numero Privado.", text,GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
						}
						else
						{
							format(string, sizeof(string), "SMS: %s, de: %s (%d)", text,GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
						}
						SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
						SendClientMessageEx(playerid, COLOR_WHITE, "Mensaje de Texto Enviado.");
						GameTextForPlayer(playerid, "~r~$-25", 5000, 1);
						GivePlayerCash(playerid,-25);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						Mobile[playerid] = INVALID_PLAYER_ID;
						for(new n = 0; n < MAX_PLAYERS; n++) // A cada user conectado.
    					{
   							if(Info[n][pAdminZC] >= 3) // Admins 6000 0 mayor.
   	    					{
  									if(See_SMS[n] == 1) // Estos admins pueden ver los MP.
    	    						{
        								format(string, sizeof(string), "(SMS Admin): %s(%d) envia a %s(%d) el mensaje: %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, text);
				                		SendClientMessage(n, 0xFFF700A8, string);
	            					}
			        		}
					    }
						if(strcmp(Info[giveplayerid][pAutoTextReply], "Nada", true) != 0)
						{
							format(string, sizeof(string), "SMS: %s, Destinatario: %s [Auto Respuesta] (%d)", Info[giveplayerid][pAutoTextReply], GetPlayerNameEx(giveplayerid), Info[giveplayerid][pPnumber]);
							SendClientMessageEx(playerid, COLOR_YELLOW, string);
						}
						return 1;
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Envio de mensaje falló.");
		return 1;
	}
	CMD:numero(playerid, params[])
	{
		if(Info[playerid][pPuntosRol] >= 2) // Más de 2 puntos de rol.
		{
			if(Info[playerid][pLevel] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo los usuarios nivel 3 para adelante pueden usar este comando.");
			if(Info[playerid][pPhoneBook] == 1)
			{
				new iTarget;
				if(sscanf(params, "d", iTarget))
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /numero (playerid)");
				}
				else if(IsPlayerConnected(iTarget))
				{
					new szNumber[16 + MAX_PLAYER_NAME];
                	if(UnidentifedCall[iTarget] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Número privado.");
                	if(!Team_LSTV(playerid)) Info[iTarget][pWarn]++;
					format(szNumber, sizeof(szNumber), "* %s (%i)", GetPlayerNameEx(iTarget), Info[iTarget][pPnumber]);
					SendClientMessageEx(playerid, COLOR_GRAD1, szNumber);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un PhoneBook.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Precisas más de 20 puntos de rol para realizar esta acción.");
		return 1;
	}
	CMD:agenda(playerid, params[])//agendapamodificarviteh
	{
	if(!IsPlayerConnected(playerid)) return Kick(playerid);
	if(Info[playerid][pLibreta] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una agenda, comprala en la tienda de electrónica.");
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, "Agenda", "Contactos\nBloc de Notas\nRestaurar Contactos\nTirar agenda\nSalir", "Aceptar", "");
	return 1;
	}
	zcmd(crearnota, playerid, cmdtext[], params[])
	{
	    if(Info[playerid][pLibreta] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No tienes una agenda, comprala en la tienda de electrónica. Bloc de notas en su interior.");
        if(strfind(cmdtext,"=",true) != -1) return SendClientMessage(playerid,COLOR_RED,"[ERROR 404]{FFFFFF} Prueba en otro server, aqui no funciona.");
		if(!isnull(params))
		{
		    new string[236];
            strmid(Info[playerid][pBlocNotas], params, 0, strlen(params), 128);
    		format(string, sizeof(string), "[Nota 1] - %s", Info[playerid][pBlocNotas]);
    		ShowPlayerDialog(playerid, INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"{00F70C}Bloc de Notas - /mostrarnota",string, "Aceptar", "");
    		SendClientMessageEx(playerid, COLOR_GRAD2, "Has creado una nota, usa /agenda para ver las notas creadas, podrás crear según el límite creado.");
        }
		else SendClientMessageEx(playerid, COLOR_GRAD2, "* /crearnota [Texto]");
        return 1;
    }
    zcmd(mostrarnota, playerid, params[])
    {
    	new string[180], giveplayerid;
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mostrarnota (ID)");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        if(Info[playerid][pLibreta] == 0)    return SendClientMessageEx(playerid, COLOR_GRAD2, "No posees una Agenda con bloc de noras.");
        if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
        if(papilla[giveplayerid] == 1)
		{
				SetPVarInt(playerid, "IsInArena", 0);
				SetPVarInt(playerid, "ArenaMode", 0);
                Info[playerid][pJailAdmin] += 1;
		        Info[playerid][pJailed] = 1;
		        PhoneOnline[playerid] = 1;
				Info[playerid][pJailTime] = 5*600;
				ResetPlayerWeaponsEx(playerid);
				new rand = random(sizeof(OOCJail));
				LoadObjects(playerid);
				SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
				SetPlayerToTeamColor(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 1000);
				format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /mostrarnota.",GetPlayerNameEx(playerid));
				Log("LOGS/sancionar.log", string);
				format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por usar el CMD /mostrarnota hacia un administrador Onduty.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_AZULL,string,2);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar el CMD /mostrarnota hacia un administrador Onduty.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Alguien intentó usar /mostrarnota hacia tu ID, ha sido jaileado automáticamente.");
				StopAudioStreamForPlayer(playerid);
				strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
				strmid(Info[playerid][pJailReason], "Usar /mostrarnota a un admin Onduty.", 0, strlen("Usar /mostrarnota a un admin Onduty."), 64);
		}
		else
		{
        	if(ProxDetectorS(20.0, playerid, giveplayerid))
        	{
            	//new string[90];
           		format(string, sizeof(string), "[Nota] - %s", Info[playerid][pBlocNotas]);
    			ShowPlayerDialog(giveplayerid, INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"{00F70C}Bloc de Notas",string, "Aceptar", "");
            	format(string, sizeof(string), "* %s le muestra una nota a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador muy lejos.");
		}
		return 1;
    }
	CMD:bebersprunk(playerid, params[]){
		if(Info[playerid][pSprunk] > 0){
			if( Info[playerid][pEstado] >= 1 || GetPVarInt(playerid, "Injured") == 1 || GetPVarInt(playerid, "EventToken") != 0){
				SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto ahora.");
				return 1;
			}
			if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes beber aqui, estás conduciendo.");
			new string[128];
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
			format(string, sizeof(string), "* %s abre su sprunk para beberlo.", GetPlayerNameEx(playerid));
			ProxDetector(60.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "UsingSprunk", 1);
			Info[playerid][pSprunk]--;
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un sprunk, compralo en el 24/7.");
		return 1;
	}
	/*zcmd(estado, playerid, params[]) {
		if( !IsPlayerConnected( playerid ) ) return 0;

		if( !sscanf( params, "s[32]", params[ 0 ] ) ) {
			new szFormat[ 2 ][ 50 ];
			format( szFormat[ 0 ], 31, "%s", params[ 0 ] );
			format( szFormat[ 1 ], 49, "Te has puesto el Estado: %s.", szFormat[ 0 ] );
			SendClientMessageEx( playerid, COLOR_GRAD2, szFormat[ 1 ] );

			Delete3DTextLabel( giPlayerStatus[ playerid ] );
			giPlayerStatus[ playerid ] = Create3DTextLabel( szFormat[ 0 ], 0x00EEFFFF, 1.0, 1.0, 1.0, 15.0, 0, 1 );

			Attach3DTextLabelToPlayer( giPlayerStatus[ playerid ], playerid, 0.0, 0.0, 0.3 );
		}

		return 1;
	}
	zcmd(qestado, playerid, params[]) {
		if( !IsPlayerConnected( playerid ) ) return 0;
		Delete3DTextLabel( giPlayerStatus[ playerid ] );
		SendClientMessageEx( playerid, COLOR_GRAD2, "Te has quitado el Estado." );
		return 1;
	}*/
	zcmd(estado, playerid, params[])
	{
		if(Info[playerid][pLevel] < 2) return Message(playerid, COLOR_GRAD2, "Debes ser mínimo nivel 2 para utilizar este comando.");
		DialogoEstado(playerid);
		return 1;
	}
	CMD:activarlinea(playerid, params[]){
	    if(!Team_LSTV(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte de LSTV.");
	    if(InLive == 0){
	        SendClientMessageEx(playerid, COLOR_GREEN, "* Activaste el número 757, la línea está abierta, ahora la gente puede llamar.");
	        return InLive = 1;
		}
		else{
	        InLive = 1;
	        SendClientMessageEx(playerid, COLOR_GREEN, "* Desactivaste el número 757, ahora la línea está cerrada.");
		}
		return 1;
	}
	CMD:sacarlinea(playerid, params[]){
        new string[128], giveplayerid;
        if(!sscanf(params, "d", giveplayerid))
		{
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(Mobile[giveplayerid] == 758)
				{
		    		SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(giveplayerid, 9);
					InLive = 0; //Se siguen recibiendo llamadas teléfonicas.
					SendClientMessageEx (giveplayerid, COLOR_WHITE, "* LSTV: Gracias por llamar a Los Santos televisión.");
					Mobile[giveplayerid] = INVALID_PLAYER_ID;
 					format(string, sizeof(string), "Has expulsado a %s de la conexión teléfonica. Para desactivar la linea usa /activarlinea.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string),"[LSTV] El periodista %s ha expulsado a %s de la llamada teléfonica. Se mantienen las lineas abiertas.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendFamilyMessage(5, COLOR_LIGHTGREEN, string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "Esta persona no ha llamado al 757, no se encuentra en la conexión.");
		    }
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sacarlinea (PlayerID)");
        return 1;
    }
	CMD:llamar(playerid, params[])
	{
		new string[128], phonenumb;

		if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /llamar (numero telefónico)");
		if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en prisión.");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes usar tu teléfono.");
		if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un teléfono.");
		if(PhoneOnline[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu telefono está apagado.");
		if(Mobile[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, " Ya se encuentra en una llamada.");
		if(Info[playerid][pJailed] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este numero no lo puedes usar en sancion.");
		format(string, sizeof(string), "* %s coge su teléfono.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerPlaySound(playerid, 3600, 0, 0, 0);
		if(phonenumb == 911){
            SetPlayerAttachedObject(playerid, 9, 330, 6);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Ahora usa T, y habla por el chat por teléfono, usa /colgar para finalizar la llamada.");
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Central: Que servicio desea? Policia o Paramédico?");
			Mobile[playerid] = 911;
			return 1;
		}
		if(phonenumb == 757){
            if(InLive == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "En este momento la línea está fuera de servicio u ocupada.");
			InLive = 0;
            Mobile[playerid] = 758;
			format(string,128,"Llamada entrante: Nombre: %s - Número: %d.", GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			SendFamilyMessage(5, COLOR_YELLOW, string);
            SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
            return SendClientMessageEx(playerid, COLOR_WHITE, "LSTV: Hola, estás en línea, desde este momento puedes hablar.");
		}
		else if(phonenumb == 3900){
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Bienvenido. ¿Tiene algúna noticia, quiere participar?");
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Déjenos un mensaje después de la señal, ¡hasta la vista!");
		  	SendClientMessageEx(playerid, COLOR_WHITE, "Biiip!");
		   	return Mobile[playerid] = 3901;
		}
		if(phonenumb == Info[playerid][pPnumber]) return SendClientMessageEx(playerid, COLOR_WHITE, " Está ocupado.");
		foreach(Player, i){
			if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
				new giveplayerid = i;
				Mobile[playerid] = giveplayerid;
				if(IsPlayerConnected(giveplayerid)){
					if(giveplayerid != INVALID_PLAYER_ID){
						if(GetPVarInt(giveplayerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador está en el paintball arena no puede recibir llamadas.");
						if(PhoneOnline[giveplayerid] > 0){
							SendClientMessageEx(playerid, COLOR_WHITE, "Tono a apagado.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if(Mobile[giveplayerid] != INVALID_PLAYER_ID){
							SendClientMessageEx(playerid, COLOR_WHITE, "Tono a ocupado.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if (Mobile[giveplayerid] == INVALID_PLAYER_ID){
						    SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
							format(string, sizeof(string), "Tu telefono está sonando - Usa /contestar para atender la llamada. [De: %s]", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
							format(string, sizeof(string), "* Teléfono de %s suena.", GetPlayerNameEx(i));
							SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Ahora usa T, y habla por el chat por teléfono.");
							ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							CellTime[playerid] = 1;
       return 1;
						}
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Su llamada no puede darse por el numero marcado, por favor, compruebe el número e inténtelo nuevamente.");
		return 1;
	}
	CMD:contestar(playerid, params[]){
		new string[128];
		if(Mobile[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "  Ya estás en una llamada.");
		foreach(Player, i){
			if(Mobile[i] == playerid){
				Mobile[playerid] = i;
				SendClientMessageEx(i,  COLOR_WHITE, "Contestaron la llamada.");
				format(string, sizeof(string), "* %s contesta su teléfono.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetPlayerAttachedObject(playerid, 9, 330, 6);
				return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
		}
		return 1;
	}
	CMD:colgar(playerid,params[]){
		new string[128];
		if(Info[playerid][pEstado]!=0) return SendClientMessageEx (playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
		if(Mobile[playerid] == 758){
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			InLive = 1;
			SendClientMessageEx (playerid, COLOR_WHITE, "* LSTV: Gracias por llamar a Los Santos televisión.");
			return Mobile[playerid] = INVALID_PLAYER_ID;
		}
		new caller = Mobile[playerid];
		if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 911 || caller == 3901){
			if(caller < 500){
				SendClientMessageEx(caller,  COLOR_WHITE, "Colgaron el teléfono.");
				format(string, sizeof(string), "* %s guarda su teléfono.", GetPlayerNameEx(caller));
				ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				CellTime[caller] = 0;
				Mobile[caller] = INVALID_PLAYER_ID;
			}
			CellTime[playerid] = 0;
			SendClientMessageEx(playerid,  COLOR_WHITE, "has colgado.");
			format(string, sizeof(string), "* %s guarda su teléfono.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(caller, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			return 1;
		}
		SendClientMessageEx(playerid,  COLOR_WHITE, "Tu teléfono está en el bolsillo.");
		return 1;
	}
    zcmd(enmascarados, playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(IsPlayerConnected(playerid))
	    if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");{
			SendClientMessageEx(playerid, COLOR_BLUE, "Enmascarados:");
			for(new i = 0; i < MAX_PLAYERS; i++) {
				if(IsPlayerConnected(i)) {
				    if(Info[i][pMaskuse] == 1) {
						new string[128];
						format(string, 80, "** ID: %d ** %s", i, GetPlayerNameEx(i));
						SendClientMessageEx(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	// zcmd:job
    zcmd(unirse, playerid, params[])
    {
		if(Info[playerid][pJob] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes un trabajo. Usa /unirse2 o /renunciar.");
		if(PlayerToPoint(2.0, playerid, 499.962921,-20.802886,1000.679687)){
	        SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Bartender! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob] = 1;
		}
		else if (PlayerToPoint(3.0, playerid, 1219.6438, -1425.7828, 13.0908)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de móviles! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob] = 2;
		}
		else if (PlayerToPoint(3.0, playerid, 1029.7059,-1340.5267,13.8093)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Chofer de Viajes! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob] = 3;
		}
		else if (PlayerToPoint(3.0, playerid, 2104.8408,-1810.0991,13.5547)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Pizzero y te dieron el uniforme! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            Info[playerid][pChar] = 155;
			SetPlayerSkin(playerid, 155);
			return Info[playerid][pJob] = 4;
        }
		else if (PlayerToPoint(3.0, playerid, 1689.9009,-1494.9858,13.5469)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de Drogas! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob] = 5;
		}
        else if(IsPlayerInRangeOfPoint(playerid,3.0,2218.0525,-2662.2483,13.5536)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Camionero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 6;
		}
        else if (PlayerToPoint(3.0, playerid, 2487.4983,-1410.0270,28.8375)){
            if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes restricción de armas las 2 primeras horas de juego.");
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de Armas! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 7;
		}
        else if (PlayerToPoint(3.0, playerid, 1752.7062,-1894.1708,13.5574)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Taxista! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 8;
		}
        else if (PlayerToPoint(3.0, playerid, -108.897529,-3.433296,3.117187)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Granjero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 9;
		}
        else if (PlayerToPoint(3.0, playerid,2355.1594,-1169.2037,28.0057)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Traficante de Drogas! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Tu puedes obtener paquetes de drogas en un pueblo. (Vé al checkpoint)");
            SetPlayerCheckpoint(playerid, 646.7178,-511.4338,16.3359, 2);
            PlayerPlaySound(playerid, 1138, 0,0,0);
            return Info[playerid][pJob] = 10;
		}
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1423.9009,-1355.9692,13.2810)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de chalecos! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 11;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,659.3577,-634.6320,16.3359)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Artesano! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 12;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,2021.5721,-1274.4832,23.9810)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Jardinero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            SetPlayerSkin(playerid, 73);
			return Info[playerid][pJob] = 13;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,2420.0740, -1509.0592, 24.0213)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres un Heladero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 14;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1685.6, -1944.73, 13.545)){
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} No tienes la experiencia necesaria para hacer esto. Necesitas más tiempo.");
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres un Conductor de Tren! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob] = 15;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,-1873.293457,50.047901,1055.189086)){
        if(Info[playerid][pFlyLic] == 0) return SendClientMessage(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} No puedes realizar este trabajo, necesitas licencia de vuelo.");
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres un Piloto! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
		SendClientMessageEx(playerid, COLOR_WHITE, "[Nota] Dirijíte al final de la pista del Aeropuerto, helicópteros y Aeroplanos disponibles.");
            return Info[playerid][pJob] = 16;
        }
		else {SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");}
		SendClientMessageEx(playerid, COLOR_WHITE, "Si necesitas ayuda con tu Job principal usa /ayudatrabajo.");
		return 1;
	}
    zcmd(unirse2, playerid, params[])
    {
		if(Info[playerid][pJob2] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes un trabajo. Usa /unirse2.");
		if(PlayerToPoint(2.0, playerid, 499.962921,-20.802886,1000.679687)){
	        SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Bartender! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob2] = 1;
		}
		else if (PlayerToPoint(3.0, playerid, 1219.6438, -1425.7828, 13.0908)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de móviles! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob2] = 2;
		}
		else if (PlayerToPoint(3.0, playerid, 1029.7059,-1340.5267,13.8093)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Chofer de Viajes! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob2] = 3;
		}
		else if (PlayerToPoint(3.0, playerid, 2104.8408,-1810.0991,13.5547)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Pizzero y te dieron el uniforme! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            Info[playerid][pChar] = 155;
			SetPlayerSkin(playerid, 155);
			return Info[playerid][pJob2] = 4;
        }
		else if (PlayerToPoint(3.0, playerid, 1689.9009,-1494.9858,13.5469)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de Drogas! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
			return Info[playerid][pJob2] = 5;
		}
        else if(IsPlayerInRangeOfPoint(playerid,3.0,2218.0525,-2662.2483,13.5536)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Camionero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 6;
		}
        else if (PlayerToPoint(3.0, playerid, 2487.4983,-1410.0270,28.8375)){
            if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Tienes restricción de armas las 2 primeras horas de juego.");
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de Armas! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 7;
		}
        else if (PlayerToPoint(3.0, playerid, 1752.7062,-1894.1708,13.5574)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Taxista! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 8;
		}
        else if (PlayerToPoint(3.0, playerid, -108.705574, -3.399344, 3.117187)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Granjero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 9;
		}
        else if (PlayerToPoint(3.0, playerid,2355.1594,-1169.2037,28.0057)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Traficante de Drogas! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            SendClientMessageEx(playerid, COLOR_YELLOW, "{FF8000}[INDICACION]:{FFFFFF} Tu puedes obtener paquetes de drogas en un pueblo. (Vé al checkpoint)");
            SetPlayerCheckpoint(playerid, 646.7178,-511.4338,16.3359, 2);
            PlayerPlaySound(playerid, 1138, 0,0,0);
            return Info[playerid][pJob2] = 10;
		}
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1423.9009,-1355.9692,13.2810)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Vendedor de chalecos! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 11;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,659.3577,-634.6320,16.3359)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Artesano! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 12;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,2021.5721,-1274.4832,23.9810)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres Jardinero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            SetPlayerSkin(playerid, 73);
			return Info[playerid][pJob2] = 13;
        }
	    else if (IsPlayerInRangeOfPoint(playerid,3.0,2420.0740, -1509.0592, 24.0213)){
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres un Heladero! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 14;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,1685.6, -1944.73, 13.545)){
        if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} No tienes la experiencia necesaria para hacer esto. Necesitas más tiempo.");
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres un Conductor de Tren! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
            return Info[playerid][pJob2] = 15;
        }
        else if (IsPlayerInRangeOfPoint(playerid,3.0,-1873.293457,50.047901,1055.189086)){
        if(Info[playerid][pFlyLic] == 0) return SendClientMessage(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} No puedes realizar este trabajo, necesitas licencia de vuelo.");
		SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF}Ahora eres un Piloto! Usa /ayuda - /ayudatrabajo(2) para ver los comandos disponibles.");
		SendClientMessageEx(playerid, COLOR_WHITE, "[Nota] Dirijíte al final de la pista del Aeropuerto, helicópteros y Aeroplanos disponibles.");
            return Info[playerid][pJob2] = 16;
        }
		else {SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");}
		SendClientMessageEx(playerid, COLOR_WHITE, "Si necesitas ayuda con tu Job secundario, usa /ayudatrabajo2.");
		return 1;
	}
	zcmd(renunciar, playerid, params[])
	{
		if(Info[playerid][pJob] > 0)
		{
		    Info[playerid][pJob] = 0;
			return SendClientMessageEx(playerid, COLOR_WHITE, "* Has renunciado a tu trabajo, ya puedes obtener uno nuevo.");
		}
		else if(Info[playerid][pJob] == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Tu no tienes trabajo.");
		}
		return 1;
	}
	zcmd(renunciar2, playerid, params[])
	{
		if(Info[playerid][pJob2] > 0)
		{
		    Info[playerid][pJob2] = 0;
			return SendClientMessageEx(playerid, COLOR_WHITE, "* Has renunciado a tu trabajo, ya puedes obtener uno nuevo.");
		}
		else if(Info[playerid][pJob2] == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Tu no tienes segundo trabajo.");
		}
		return 1;
	}
	zcmd(cfuego, playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] >= 5 || Info[playerid][pFactionModerator] == 1)
		{
	   new Float:X, Float:Y, Float:Z, Float:A;
	   GetPlayerPos(playerid, X, Y, Z);
	   GetPlayerFacingAngle(playerid, A);
	   new block = CreateObject(18694, X, Y, Z -2.5, 0.0, 0.0, A);
	   CreatedBlocks[CreatedBlock] = block;
	   CreatedBlock++;
	   SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} Has provocado un incendio.");
	    }
	   return 1;
	}
	zcmd(qfuego, playerid, params[]){
       if(Team_SAMD(playerid))
	   for(new i = 0; i <= CreatedBlocks[i]; i++) DestroyObject(CreatedBlocks[i]);
	   return 1;
	}
	zcmd(vendertelefono, playerid, params[]){
		new giveplayerid, number, price;
		if(!sscanf(params, "ddd", giveplayerid, number, price)){
		    if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} No estás cerca del jugador.");
		    if(IsPlayerConnected(giveplayerid)){
		        new string[128];
		        if(number > 999999 || number < 4000) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} Número no puede ser mayor de 999999 y menor de 4000.");
		        if(price < 1 || price > 5000) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF}Precio entre 1 a 5.000 dólares.");
                NumSeller[giveplayerid] = playerid;
				NumBuy[giveplayerid] = number;
				NumPrice[giveplayerid] = price;
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} Ofreciste vender un telefono");
				format(string, sizeof(string), "* %s te ofrece venderte el número %d por %d$, utiliza /aceptar telefono", GetPlayerNameEx(playerid), number, price);
				return SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE, string);
		    }
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendertelefono (ID) (número) (precio)");
        return 1;
    }
    zcmd(cosechar, playerid, params[]){
        new idcar = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9){
		    if(IsAHarvest(idcar)){
                if(DrugFarming[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[JOB]:{FFFFFF} Ya estás cosechando!");
	      	    DrugFarming[playerid] = 1;
				new randomize = random(sizeof(gDrugFarmVar));
	      		SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
	       	    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} Dirígete a los Checkpoints y cosecha lo que necesites.");
	       	    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} Cuando quieras dejar de cosechar usa /dcosechar.");
	       	} else return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[JOB]:{FFFFFF} No estás en una cosechadora!");
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No eres Granjero!");
        return 1;
    }
    zcmd(dcosechar, playerid, params[]){
        new idcar = GetPlayerVehicleID(playerid);
        if(!IsAHarvest(idcar)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} No estás en una cosechadora.");
        if(DrugFarming[playerid] == 1){
	  	    if(DrugFarming[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} No estás cosechando.");
	  	    DrugFarming[playerid] = 0;
	  	    SetVehicleToRespawn(idcar);
	  	    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[JOB]:{FFFFFF} Dejaste de cosechar! Puedes ver los Kg que hiciste (/cuenta).");
	  	    DisablePlayerCheckpoint(playerid);
	    } else SendClientMessageEx(playerid, COLOR_WHITE, "No estás cosechando.");
        return 1;
    }
    //*******************Google*******************
    zcmd(google, playerid, params[]){
		if(PlayerToPoint(200.0,playerid,959.3875, -1443.0875, 13.6144)){
		 	return SafeDialogEx(playerid, GOOGLE, DIALOG_STYLE_INPUT, "{00F70C}Google Chrome", "{FFFFEE}www.{0077AA}G{FF2200}o{EE9900}o{0077AA}g{338800}l{FF2200}e{FFFFEE}.com - buscar online","Buscar","Salir");
		}
		return 1;
	}
    //*******************Mecanicos*******************
    zcmd(amenu, playerid, params[]){
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    	if(Info[playerid][pAdminZC] >= 6000){
	    	return SafeDialogEx(playerid, ADMIN_MENU, DIALOG_STYLE_LIST, "{00F70C}Menú", "Repararaciones\nGasolina\nTunning", ">>", "<<");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Este comando solo puede ser usado por administradores de alto rango.");
		return 1;
    }
	zcmd(menu, playerid, params[]){
        if(Team_Mecanicos(playerid)) {
     		if(OnDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás de servicio.");
	    	return SafeDialogEx(playerid, MECANICO_MENU, DIALOG_STYLE_LIST, "{00F70C}Menú", "Repararaciones\nGasolina\nTunning", ">>", "<<");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "No eres mecánico.");
		return 1;
    }
    zcmd(comprar, playerid, params[])
	{
	    for(new x = 0; x < MAX_NEGOCIOS; x++) // Si están en el interior de un negocio.
		{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, NegociosVariables[x][bInteriorPos][0], NegociosVariables[x][bInteriorPos][1], NegociosVariables[x][bInteriorPos][2]))
				{
  					if (NegociosVariables[x][bType] == 1) // 24/7.
  					{
  					    return SafeDialogEx(playerid, TIENDA_MENU, DIALOG_STYLE_LIST, "{00F70C}24/7", "Loteria\t\t\t$10\nSpray\t\t\t$100\nCigarros\t\t$40\nEncendedor\t\t$20\nFlores\t\t\t$7\nSprunk\t\t\t$8\nSeguro Alarma\t\t$500\nSeguro Industrial\t$2000", "Comprar", "Cancelar");
  					}
					else if (NegociosVariables[x][bType] == 2) // Ropa.
					{
		    			if(IsPlayerConnected(playerid)) {ShowModelSelectionMenu(playerid, skinlist, "Selecciona Tu Nuevo Skin"); return 1;} // Revisa si está conectado, evitar crash generalizado. (MSelection)
					}
					else if (NegociosVariables[x][bType] == 3) // Restaurante.
					{
		    			return SafeDialogEx(playerid, BAR_MENU, DIALOG_STYLE_LIST, "{A2DC35}Menú del Día", "Platos Combinados & Tapas\nRefrescos & Bebidas & Vinos\nComida para llevar ($100)", "Ver", "Salir");
					}
					else if (NegociosVariables[x][bType] == 4) // Gasolinera.
					{
		    			return SafeDialogEx(playerid, TIENDA_GAS, DIALOG_STYLE_LIST, "{A2DC35}Gasolinera", "Lata Gas.\t\t$200\nBolsa Patatas\t\t$30\nRefresco\t\t$20\nCigarros\t\t$40\nEncendedor\t\t$20", "Comprar", "Cancelar");
					}
					else if (NegociosVariables[x][bType] == 5) // Armas.
					{
		    			return SafeDialogEx(playerid, DIALOG_AMMU, DIALOG_STYLE_LIST, "{00F70C}Tienda de Armas","Puño americano(25$)\nBate de Béisbol(50$)\n9 Milímetros (Liviana) (15000$)\nEscopeta de Caza (Pesada) (28000$)\nRifle (Arma de Coleccionista) (35000$)", "Comprar", "Salir");
					}
					//else return SendClientMessageEx(playerid, COLOR_WHITE, "Este negocio no dispone del comando /comprar."); // Negocios tipo 6 en adelante. (Locales para rolear ganancias NPC). EJ: Gestorías, Abogados, Caja de Ahorros, Clubs.
				} // Se cierra la revisión de los negocios, todos con "return true", a continuación.
		}
		// A continuación lugares con el CMD /comprar, pero que NO ESTÁN EN EL SISTEMA DE NEGOCIOS, es decir son NEGOCIOS ÚNICOS. (Véase tienda de pesca o tienda de electrónica).
		if (Tienda_247(playerid)) // Estas tiendas son robadas con el CMD /robar, el dinero no es quitado de la caja fuerte del negocio.
		{
  			return SafeDialogEx(playerid, TIENDA_MENU, DIALOG_STYLE_LIST, "{00F70C}24/7", "Loteria\t\t\t$10\nSpray\t\t\t$100\nCigarros\t\t$40\nEncendedor\t\t$20\nFlores\t\t\t$7\nSprunk\t\t\t$8\nSeguro Alarma\t\t$500\nSeguro Industrial\t$2000", "Comprar", "Cancelar");
		}
		if (Tienda_Erotica(playerid)) // Tienda de erótica y objetos sexuales. (Aclaración: Disponible el CMD /comprar en interiores de Sexshops o Puticlubs).
		{
			return SafeDialogEx(playerid, TIENDA_EROS, DIALOG_STYLE_LIST, "{00F70C}Tienda erótica","Dildo - $350\nConsolador - $200\nCondón - $50\n50 Gray's Pack - $5000", "Comprar", "Salir");
		}
		if (PlayerToPoint(10, playerid,991.2456,-1942.9379,2835.0078)) // Tienda de pesca, en Los Santos.
		{
			return SafeDialogEx(playerid, DIALOG_SHOPFISH, DIALOG_STYLE_LIST, "Tienda del Puerto","Carnada\nLineas", "Comprar", "Salir");
		}
		if (PlayerToPoint(20, playerid,1006.0530,52.7181,55.3221)) // Tienda de electrónica, en Los Santos.
		{
			return SafeDialogEx(playerid, TIENDA_ELEC, DIALOG_STYLE_LIST, "{00F70C}Tienda electronica","Teléfono\t\t$500\nAgenda\t\t\t$200\nPhoneBook\t\t$150\nCámara\t\t\t$120\nRadio Portable\t\t$800\nIpodMusic\t\t$850\nBoombox\t\t$750", "Comprar", "Salir");
		}
		// Los Ammu Nations como negocio único han sido retirados, serán negocios dentro del sistema dinámico del servidor, el motivo de este es el siguiente:
		// 1. Limitar el número de productos de cada negocio, mayor control de armas.
		// 2. El propietario tendrá que comprar productos en la compra de armamento, ARMAS NO INFINITAS.
		/*if (PlayerToPoint(20, playerid,308.15,-141.46,999.60)||PlayerToPoint(20, playerid,295.89,-80.81,1001.52)||PlayerToPoint(20, playerid,313.3958,-138.9780,1004.0625))
		{
		return SafeDialogEx(playerid, DIALOG_AMMU, DIALOG_STYLE_LIST, "{00F70C}Tienda de Armas","Brass Knuckles(25$)\nBate de Beisbol(50$)\nDesert Eagle (10000$)\nMP5(25000$)", "Comprar", "Salir");
		}*/
		return 1;
    }
    zcmd(comprararmas, playerid, params[])
	{
		/*if (PlayerToPoint(20, playerid,308.15,-141.46,999.60)||PlayerToPoint(20, playerid,295.89,-80.81,1001.52)||PlayerToPoint(20, playerid,313.3958,-138.9780,1004.0625)){
		return SafeDialogEx(playerid, DIALOG_AMMU, DIALOG_STYLE_LIST, "{00F70C}Tienda de Armas","Brass Knuckles(25$)\nBate de Beisbol(50$)\nDesert Eagle (10000$)\nMP5(25000$)", "Comprar", "Salir");
		}*/
    SendClientMessageEx(playerid, COLOR_WHITE, "Comando removido, usa /comprar una vez esté dentro de la tienda de armamento." );
	return 1;
	}
       zcmd(cropa, playerid, params[]){
        /*if(!IsAtClothShop(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en una tienda de Ropa.");
        if(IsPlayerConnected(playerid)){
            ShowModelSelectionMenu(playerid, skinlist, "Selecciona Tu Nuevo Skin");
        }*/
        SendClientMessageEx(playerid, COLOR_WHITE, "Comando removido, usa /comprar o /ctoys, disculpa las molestias." );
        //else SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
        return 1;
    }
    ////////////////////////////////// SISTEMA DE IDIOMAS ///////////////////////////
    //[AYUDA] Información Variables de Idioma:
    //
    //Info[playerid][pIngles] = 0;					Info[playerid][pAleman] = 0;
    //Info[playerid][pRuso] = 0;					Info[playerid][pJapones] = 0;
    //Info[playerid][pItaliano] = 0;				Info[playerid][pArabe] = 0;
    zcmd(ale, playerid, params[]) // 1 Aleman.
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	        if(Info[playerid][pAleman] == 1) // ALEPH.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ale (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pAlemanSkill] <100) {Info[playerid][pAlemanSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 17 || Info[i][pMember] == 17 || Info[i][pAleman] == 1) // ALEPH.
							{
					    		format(string, sizeof(string), "%s dice en alemán: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: {FFFFFF}[Lenguaje Desconocido]", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE3, string);
							}

						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No sabes alemán, podrás aprenderlo en la Universidad.");
			}
		}
		return 1;
	}
	zcmd(ing, playerid, params[]) // 2. Inglés.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	        if(Info[playerid][pLeader] == 18 || Info[playerid][pMember] == 18 || Info[playerid][pIngles] == 1) // SANTANA.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ing (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pInglesSkill] <100) {Info[playerid][pInglesSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 18 || Info[i][pMember] == 18 || Info[i][pIngles] == 1) // SANTANA.
							{
					    		format(string, sizeof(string), "%s dice en inglés: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: {FFFFFF}[Lenguaje Desconocido]", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No sabes inglés, podrás aprenderlo en la Universidad.");
			}
		}
		return 1;
	}
	zcmd(ita, playerid, params[]) // 3. Italiano.
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	        if(Info[playerid][pLeader] == 15 || Info[playerid][pMember] == 15 || Info[playerid][pItaliano] == 1) // LCN.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ita (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pItalianoSkill] <100) {Info[playerid][pItalianoSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 15 || Info[i][pMember] == 15 || Info[i][pItaliano] == 1) // LCN.
							{
					    		format(string, sizeof(string), "%s dice en italiano: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: {FFFFFF}[Lenguaje Desconocido]", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No sabes italiano, podrás aprenderlo en la Universidad.");
			}
		}
		return 1;
	}
//----------------------------------------------------------------------------//
	zcmd(rus, playerid, params[]) // 4. Rusos.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	        if(Info[playerid][pLeader] == 14 || Info[playerid][pMember] == 14 || Info[playerid][pRuso] == 1) // Rusos.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /rus (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pRusoSkill] <100) {Info[playerid][pRusoSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 14 || Info[i][pMember] == 14 || Info[i][pRuso] == 1) // RUSO.
							{
					    		format(string, sizeof(string), "%s dice en ruso: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: {FFFFFF}[Lenguaje Desconocido]", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No sabes ruso, podrás aprenderlo en la Universidad.");
			}
		}
		return 1;
	}
//----------------------------------------------------------------------------//
	zcmd(jap, playerid, params[]) // 5. Japonés.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	        if(Info[playerid][pLeader] == 16 || Info[playerid][pMember] == 16 || Info[playerid][pJapones] == 1) // YKZ.
			{
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /jap (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pJaponesSkill] <100) {Info[playerid][pJaponesSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 16 || Info[i][pMember] == 16 || Info[i][pJapones] == 1) // YKZ.
							{
					    		format(string, sizeof(string), "%s dice en japonés: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: {FFFFFF}[Lenguaje Desconocido]", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No sabes japonés, podrás aprenderlo en la Universidad.");
			}
		}
		return 1;
	}
	zcmd(ara, playerid, params[]) // 6 Arabe.
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás logeado.");
	        if(Info[playerid][pLeader] == 19 || Info[playerid][pMember] == 19 || Info[playerid][pArabe] == 1) // OTA.
	        {
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ara (texto)");
				new string[128];
				new Float:x, Float:y, Float:z;
    			GetPlayerPos(playerid,x,y,z);
    			if(Info[playerid][pArabeSkill] <100) {Info[playerid][pArabeSkill] += 1;}
   				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
					    if(PlayerToPoint(20, i, x, y, z))
					    {
							if(Info[i][pLeader] == 19 || Info[i][pMember] == 19 || Info[i][pArabe] == 1) // OTA.
							{
					    		format(string, sizeof(string), "%s dice en árabe: %s", GetPlayerNameEx(playerid), params);
					    		SendClientMessage(i, COLOR_FADE3, string);
							}
							else
							{
					    		format(string, sizeof(string), "%s dice: {FFFFFF}[Lenguaje Desconocido]", GetPlayerNameEx(playerid));
					    		SendClientMessage(i, COLOR_FADE3, string);
							}

						}
					}
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No sabes árabe, podrás aprenderlo en la Universidad.");
			}
		}
		return 1;
	}
 	zcmd(acento, playerid, params[])
	{
		new accent;
		if(sscanf(params, "d", accent)){
			SendClientMessageEx(playerid, COLOR_BLUE, "USO: /acento [id acento]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Acentos: [1]Normal, [2]Britanico, [3,4,5]Asiatico, [6]Venezolano, [7]Peruano, [8]Ruso, [9]Americano.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Acentos: [10]Español, [11]Colombiano, [12]Francés, [13]Italiano, [14]Gangster, [15]Uruguayo.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Acentos: [16]Brasilero, [17]Argentino, [18]Chileno, [19]Cubano, [20]Israeli, [21]Alemán, [22]Hippie.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Acentos: [23] Méxicano, [24]Árabe, [25]Noruego, [26]Australiano.");
			return 1;
		}
		switch(accent){
			case 1:{
				Info[playerid][pAccent] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Normal, usa /acento para cambiarlo." );
			}
			case 2:{
				Info[playerid][pAccent] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Britanico, usa /acento para cambiarlo." );
			}
			case 3:{
				Info[playerid][pAccent] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Japones, usa /acento para cambiarlo." );
			}
			case 4:{
				Info[playerid][pAccent] = 4;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Chino, usa /acento para cambiarlo." );
			}
			case 5:{
				Info[playerid][pAccent] = 5;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Koreano, usa /acento para cambiarlo." );
			}
			case 6:{
				Info[playerid][pAccent] = 6;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Venezolano, usa /acento para cambiarlo." );
			}
			case 7:{
				Info[playerid][pAccent] = 7;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Peruano, usa /acento para cambiarlo." );
			}
			case 8:{
				Info[playerid][pAccent] = 8;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Ruso, usa /acento para cambiarlo." );
			}
			case 9:{
				Info[playerid][pAccent] = 9;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Americano, usa /acento para cambiarlo." );
			}
			case 10:{
				Info[playerid][pAccent] = 10;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Español, usa /acento para cambiarlo." );
			}
			case 11:{
				Info[playerid][pAccent] = 11;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Colombiano, usa /acento para cambiarlo." );
			}
			case 12:{
				Info[playerid][pAccent] = 12;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Francés, usa /acento para cambiarlo." );
			}
			case 13:{
				Info[playerid][pAccent] = 13;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tu acento es Italiano, usa /acento para cambiarlo." );
			}
			case 14:{
				Info[playerid][pAccent] = 14;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Gangster, usa /acento para cambiarlo." );
			}
			case 15:{
				Info[playerid][pAccent] = 15;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Uruguayo, usa /acento para cambiarlo." );
			}
			case 16:{
				Info[playerid][pAccent] = 16;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Brasilero, usa /acento para cambiarlo." );
			}
			case 17:{
				Info[playerid][pAccent] = 17;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Argentino, usa /acento para cambiarlo." );
			}
			case 18:{
				Info[playerid][pAccent] = 18;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Chileno, usa /acento para cambiarlo." );
			}
			case 19:{
				Info[playerid][pAccent] = 19;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Cubano, usa /acento para cambiarlo." );
			}
			case 20:{
				Info[playerid][pAccent] = 20;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Israeli, usa /acento para cambiarlo." );
			}
			case 21:{
				Info[playerid][pAccent] = 21;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Alemán, usa /acento para cambiarlo." );
			}
			case 22:{
				Info[playerid][pAccent] = 22;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Hippie, usa /acento para cambiarlo." );
			}
			case 23:{
				Info[playerid][pAccent] = 23;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Mexicano, usa /acento para cambiarlo." );
			}
			case 24:{
				Info[playerid][pAccent] = 24;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Árabe, usa /acento para cambiarlo." );
			}
			case 25:{
				Info[playerid][pAccent] = 25;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Noruego, usa /acento para cambiarlo." );
			}
			case 26:{
				Info[playerid][pAccent] = 26;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ahora tienes acento Australiano, usa /acento para cambiarlo." );
			}
		}
		return 1;
	}
	CMD:me(playerid, params[]){
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /me (acción)");
  		new string[128];
  		if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "* Desconocido %s.", params);
		else format(string, sizeof(string), "* %s %s.", GetPlayerNameEx(playerid), params);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	/*CMD:b(playerid, params[]){
		if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logueado.");
		if(Muted[playerid] == 1) return	SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "* No puedes hablar estás silenciado.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /b (ooc chat)");
		new string[128];
		format(string, sizeof(string), "{FF0000}[OOC]{FFFFFF} %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}CMD:b(playerid, params[]){
		if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logueado.");
		if(Muted[playerid] == 1) return	SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "* No puedes hablar estás silenciado.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /b (ooc chat)");
		new string[128];
		format(string, sizeof(string), "{FF0000}[OOC]{FFFFFF} %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}*/
		CMD:b(playerid, params[]){
		if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logueado.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /b (ooc chat)");
		new string[128];
		format(string, sizeof(string), "(( [OOC] %s:{BDBDBD} %s {848484}))", GetPlayerNameEx(playerid), params);
		ProxDetector(30.0, playerid, string,COLOR_CMDAA2,COLOR_CMDAA2,COLOR_CMDAA2,COLOR_CMDAA2,COLOR_CMDAA2);
		return 1;
	}
	zcmd(intentar, playerid, params[])
    {
        if(Intentar[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Espera 10 segundos para volver a utilizar este comando!");
        new randa = random(3)+1;
        if(!sscanf(params, "s[128]", params[0]))
        {
            new string[128];
			if(Info[playerid][pMaskuse] == 1)
			{
					if(randa == 1)
					{
						format(string, sizeof(string), "* Desconocido intenta %s y lo logra.", params[0]);
						ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
					}
					else
					{
						format(string, sizeof(string), "* Desconocido intenta %s pero falla.", params[0]);
						ProxDetector(30.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
					}
					Intentar[playerid] = 1;
					SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
			}
			else
			{
				    if(randa == 1)
					{
						format(string, sizeof(string), "* %s intenta %s y lo logra.", GetPlayerNameEx(playerid), params[0]);
						ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
					}
					else
					{
						format(string, sizeof(string), "* %s intenta %s pero falla.", GetPlayerNameEx(playerid), params[0]);
						ProxDetector(30.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
					}
					Intentar[playerid] = 1;
					SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
			}
		} else SendClientMessage(playerid, COLOR_WHITE, "Utilize: /intentar <Acción>");
		return 1;
    }
 	/*CMD:aa(playerid, params[])
	{
     if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes acceso a usar este comando.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /aa (texto)");
		new string[128];
		if(Info[playerid][pAdminZC] == 2) format(string, sizeof(string), "{00FF00}((Moderador %s: %s))", GetPlayerNameEx(playerid), params);
		else format(string, sizeof(string), "{00FF00}((Administrador %s: %s)){FFFFFF} ", GetPlayerNameEx(playerid), params);
		ProxDetector(40.0, playerid, string,COLOR_CMDAA,COLOR_CMDAA,COLOR_CMDAA,COLOR_CMDAA,COLOR_CMDAA);
		SetPlayerChatBubble(playerid,string,COLOR_CMDAA,60.0,5000);
		return 1;
	}*/
	CMD:aa(playerid, params[])
	{
     if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(Info[playerid][pAdminZC] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes acceso a usar este comando.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /aa (texto)");
		new string[128];
		if(strlen(params) > 80) return SendClientMessageEx(playerid, COLOR_GRAD2, "!Texto demasiado largo, cambiálo!");
		if(Info[playerid][pSex] == 1)
		{
			if(Info[playerid][pAdminZC] == 1 || Info[playerid][pAdminZC] == 2 || Info[playerid][pAdminZC] == 3) format(string, sizeof(string), "(( Moderador %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 11) format(string, sizeof(string), "(( Encargado Fams. %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 12) format(string, sizeof(string), "(( Encargado Facc. %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 5000 || Info[playerid][pAdminZC] == 6000) format(string, sizeof(string), "(( Propietario %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else format(string, sizeof(string), "(( Administrador %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
		}
		else
		{
			if(Info[playerid][pAdminZC] == 1 || Info[playerid][pAdminZC] == 2 || Info[playerid][pAdminZC] == 3) format(string, sizeof(string), "(( Moderadora %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 11) format(string, sizeof(string), "(( Encargada Fams. %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 12) format(string, sizeof(string), "(( Encargada Facc. %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 5000 || Info[playerid][pAdminZC] == 6000) format(string, sizeof(string), "(( Propietaria %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
			else format(string, sizeof(string), "(( Administradora %s:{F5A9A9} %s {FA5858}))", GetPlayerNameEx(playerid), params);
		}
		ProxDetector(40.0, playerid, string,COLOR_CMDAA3,COLOR_CMDAA3,COLOR_CMDAA3,COLOR_CMDAA3,COLOR_CMDAA3);
		SetPlayerChatBubble(playerid,string,COLOR_CMDAA3,60.0,5000);
		return 1;
	}
    zcmd(c, playerid, params[])
    {
        if(Muted[playerid] == 1) return	SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "* No puedes hablar estás silenciado.");
		if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás logueado.");
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /c (IC chat)");
		new string[128];
		format(string, sizeof(string), "%s: %s", GetPlayerNameEx(playerid), params);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 1;
	}
    zcmd(do, playerid, params[]){ // 
        if(!isnull(params)){
            new string[128];
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "* %s (( Desconocido )).", params);
			else format(string, sizeof(string), "* %s (( %s )).", params, GetPlayerNameEx(playerid));
            return ProxDetector(30.0, playerid, string, COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN,COLOR_LIGHTGREEN);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /do (Acción)");
        return 1;
    }
    zcmd(e, playerid, params[]){ // 0x452D8896
        if(!isnull(params)){
            new string[128];
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "{81F79F}[Entorno: %s ((Desconocido)) ]", params);
			else format(string, sizeof(string), "{81F79F}[Entorno: %s (( %s )) ]", params, GetPlayerNameEx(playerid));
            return ProxDetector(30.0, playerid, string, 0x81F79FFF,0x81F79FFF,0x81F79FFF,0x81F79FFF,0x81F79FFF);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /e (Rol de Entorno)");
        return 1;
    }
    zcmd(s, playerid, params[]){
		if(!isnull(params)){
		    new string[128];
		    if(Muted[playerid] == 1) return	SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "* No puedes hablar estás silenciado.");
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "Desconocido susurra: %s", params);
			else format(string, sizeof(string), "%s susurra: %s", GetPlayerNameEx(playerid), params);
            ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			format(string, sizeof(string), "(susurro) %s", params);
			return SetPlayerChatBubble(playerid,string,COLOR_WHITE,5.0,5000);
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "* /s <Acción>");
        return 1;
    }
	zcmd(g, playerid, params[]){
        if(!isnull(params)){
            new string[128];
            if(Muted[playerid] == 1) return	SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "* No puedes hablar estás silenciado.");
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "Desconocido grita: ¡¡ %s !!", params);
			else format(string, sizeof(string), "%s grita: ¡¡%s!!", GetPlayerNameEx(playerid), params);
            ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
			format(string, sizeof(string), "(grito) ¡¡%s!!", params);
			return SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
        } else SendClientMessageEx(playerid, COLOR_GRAD2, "* /g <Acción>");
        return 1;
    }
    zcmd(ao, playerid, params[]){
     if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted aún no está conectado.");
        if(Info[playerid][pAdminZC] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ao (general chat)");
        new string[110];
		if(Info[playerid][pAdminZC] == 2 || Info[playerid][pAdminZC] == 3){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Moderador) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 4 || Info[playerid][pAdminZC] == 5 || Info[playerid][pAdminZC] == 6){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Administrador) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 7){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Publicista) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 8){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Webmaster) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 9){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Mapper) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 10){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Game Operator) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 11){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Encargado FAM) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 12){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Encargado FAC) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 4000){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Admin Técnico) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] == 5000){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Administrador) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
		}
		else if(Info[playerid][pAdminZC] >= 6000){
		//new string[128];
		format(string, sizeof(string), "*[ [AOOC](Administrador) %s: %s ]*", GetPlayerNameEx(playerid), params);
		OOCOff(0x808080FF,string);
  		}
        return 1;
    }
    zcmd(ooc, playerid, params[])
	{
     	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted aún no está conectado.");
        if(Info[playerid][pAdminZC] <= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        if(gMusic[playerid] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Activa el canal antes, /togmusic.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ooc (Chat para eventos)");
        new string[80];
		if(Info[playerid][pAdminZC] > 1)
		{
			format(string, sizeof(string), "*((OOC)) [Evento] Staff %s: %s ]*", GetPlayerNameEx(playerid), params);
			OOCMusic(0x808080FF,string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
    }
  	zcmd(a, playerid, params[]){
        if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted aún no está conectado.");
        if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /a (Admin Chat)");
        new string[140];
       	if(Info[playerid][pAdminZC] == 1){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Moderador a pruebas] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x7BA05BFF,string); //Celeste_Admin
		}
       	else if(Info[playerid][pAdminZC] == 2){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Moderador] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x7BA05BFF,string);
		}
		else if(Info[playerid][pAdminZC] == 3){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Moderador Global] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x7BA05BFF,string);
		}
		else if(Info[playerid][pAdminZC] == 4){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Administador] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x87CEFAFF,string);
		}
		else if(Info[playerid][pAdminZC] == 5){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Administrador General] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x87CEFAFF,string); //Morado_Admin
		}
		else if(Info[playerid][pAdminZC] == 6){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Administrador Líder] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x87CEFAFF,string);
		}
		else if(Info[playerid][pAdminZC] == 7){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Publicista] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x9966CCFF,string);
		}
		else if(Info[playerid][pAdminZC] == 8){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Webmaster] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x9966CCFF,string);
		}
		else if(Info[playerid][pAdminZC] == 9){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Mapper Oficial] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0x9966CCFF,string);
		}
		else if(Info[playerid][pAdminZC] == 10){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Game Operator] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0xCD7F32FF,string);
		}
		else if(Info[playerid][pAdminZC] == 11){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Encargado FAM.] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0xCD7F32FF,string);
		}
		else if(Info[playerid][pAdminZC] == 12){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Encargado FAC.] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(0xCD7F32FF,string);
		}
		else if(Info[playerid][pAdminZC] == 69){
			//new string[128];
			format(string, sizeof(string), "(( [ADM][Sexy] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_TWPINK,string);
		}
		else if(Info[playerid][pAdminZC] == 70){
			//new string[128];
			format(string, sizeof(string), "(( [ADM][Noob] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(COLOR_TWPINK,string);
		}
		else if(Info[playerid][pAdminZC] == 4000){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Técnico] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(ROJO_ADMIN,string);
		}
		else if(Info[playerid][pAdminZC] == 5000){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Subdueño] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(ROJO_ADMIN,string);
		}
		else if(Info[playerid][pAdminZC] >= 6000){
			//new string[128];
			format(string, sizeof(string), "(( [STAFF][Dueño] %s: %s ))", GetPlayerNameEx(playerid), params);
			SendAdminMessage(ROJO_ADMIN,string);
		}
        return 1;
    }
CMD:crearregalo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 5000)
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un vehículo.");
		new string[128], Float:Position[4];
		if(dynamicgift == 0)
		{
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			dynamicgift = CreateDynamicObject(19054, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
			dynamicgift3DText = CreateDynamic3DTextLabel("Para recibir tu premio\n{FFFFFF}/regalo",COLOR_YELLOW,Position[0], Position[1], Position[2]+0.25,8.0);
			SetPlayerPos(playerid, Position[0], Position[1], Position[2]+3);
			format(string, sizeof(string), "[AdmCmd]: %s pusó un regalo temporal.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_GENERAL, string, 1337);
		}
		else
		{
			DestroyDynamicObject(dynamicgift);
			dynamicgift = 0;
			DestroyDynamic3DTextLabel( Text3D:dynamicgift3DText );
			format(string, sizeof(string), "[AdmCmd]: %s eliminó un regalo temporal.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_GENERAL, string, 1337);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado.");
	return 1;
}

CMD:regalo(playerid, params[])  //
{
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 3.0,799.3140,-1419.6476,1016.4688) || (playerid, 3.0,2376.4890, 1115.3467, 34.9547))
	{
		if(Info[playerid][pVIP] >= 1)
		{
			if(VIPGifts == 0 && Info[playerid][pVIP] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "La caja está bloqueada.");
	        if(Info[playerid][pGiftTime] != 0){
				format(string, sizeof(string), "* Necesitas esperar %i hora(s) para abrir de nuevo el regalo.", Info[playerid][pGiftTime] / 3600);
				return SendClientMessageEx(playerid, COLOR_WHITE, string);
	        }
			format(string, sizeof(string), "* %s abre el regalo con los ojos cerrados.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            Info[playerid][pGiftTime] = 18000;
			GiftPlayer(playerid);
		}
	}
	else if(dynamicgift != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(dynamicgift, Position[0], Position[1], Position[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			if(Info[playerid][pLevel] >= 1)
			{
	        	if(Info[playerid][pGiftTime] != 0){
					format(string, sizeof(string), "* Necesitas esperar %i hora(s) para abrir de nuevo el regalo.", Info[playerid][pGiftTime] / 3600);
					return SendClientMessageEx(playerid, COLOR_WHITE, string);
	       	 	}
				format(string, sizeof(string), "* %s mira el interior del regalo.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                Info[playerid][pGiftTime] = 18000;
				return GiftPlayer(playerid);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
		}
	}
	return 1;
}
CMD:vipregalo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new string[128];
    if(Info[playerid][pAdminZC] >= 6000)
    {
     	if(VIPGifts == 0)
     	{
           	VIPGifts = 1;
           	new sString[128];
			format( sString, sizeof( sString ), "%s quiere que vengas al Club VIP hay regalos para ti (20 minutos restantes).", GetPlayerNameEx(playerid));
			BroadCast(COLOR_LIGHTGREEN, sString);
			VIPGiftsTimeLeft = 20;
			format(VIPGiftsName, sizeof(VIPGiftsName), "%s", GetPlayerNameEx(playerid));
		}
		else
		{
		    VIPGifts = 0;
		    new sString[128];
	   		format( sString, sizeof( sString ), "[AdmCmd]: %s ha deshabilitado el comando /regalo", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_GENERAL, sString, 1337 );
			format(string, sizeof(string), "Club {FFFF00}VIP{FFFFFF} ya no está regalando obsequios. Gracias por venir!", VIPGiftsName, VIPGiftsTimeLeft);
			BroadCast(COLOR_LIGHTGREEN, string);
			VIPGiftsTimeLeft = 0;
		}
	}
	return 1;
}

CMD:bloqre(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[512], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bloqre(ID) (razón)");

		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pRMuted] == 0)
			{
			    if(Info[giveplayerid][pRMutedTotal] == 0)
			    {
  					Info[giveplayerid][pRMutedTotal] = 1;
					format(string, sizeof(string), "[AdmCmdExe]: %s ha dado a %s su primera advertencia sobre abuso de reportes, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Un administrador te ha advertido sobre un abuso en el comando /re.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.");
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia de abuso", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s ha dado a %s su primera advertencia sobre abuso, razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("LOGS/mute.log", string);
			    }
			    else if(Info[giveplayerid][pRMutedTotal] == 1)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 2;
					Info[giveplayerid][pRMutedTime] = 15*60;
					format(string, sizeof(string), "[AdmCmdExe]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la segunda vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 15 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("LOGS/mute.log", string);
			    }
			    else if(Info[giveplayerid][pRMutedTotal] == 2)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 3;
					Info[giveplayerid][pRMutedTime] = 30*60;
					format(string, sizeof(string), "[AdmCmdExe]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la tercera vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 30 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("LOGS/mute.log", string);
			    }
			    else if(Info[giveplayerid][pRMutedTotal] == 3)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 4;
					Info[giveplayerid][pRMutedTime] = 45*60;
					format(string, sizeof(string), "[AdmCmdExe]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la cuarta vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 45 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("LOGS/mute.log", string);
				}
			    else if(Info[giveplayerid][pRMutedTotal] == 4)
			    {
  					Info[giveplayerid][pRMuted] = 2;
  					Info[giveplayerid][pRMutedTotal] = 5;
					Info[giveplayerid][pRMutedTime] = 60*60;
					format(string, sizeof(string), "[AdmCmdExe]: %s ha bloqueado temporalmente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Has sido bloqueado temporalmente del comando de reportes por %s, razón: %s.\n\nComo está es la quinta vez que tu has sido bloqueado de los reportes, no podrás usar el comando por 60 minutos.\n\nTen en cuenta que un abuso futuro del comando /re podrías resultar muteado de tal comando o perder el privilegio por completo.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo temporal", string,"OK", "");

					format(string, sizeof(string), "AdmCmdExe: %s fue bloqueado temporalmente del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("LOGS/mute.log", string);
				}
			    else if(Info[giveplayerid][pRMutedTotal] >= 5)
			    {
  					Info[giveplayerid][pRMuted] = 1;
  					Info[giveplayerid][pRMutedTotal] = 6;
					format(string, sizeof(string), "[AdmCmdExe]: %s ha bloqueado permanentemente a %s del comando /re, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "Tu has sido bloqueado permanentemente de los reportes por %s, razón: %s.\n\nComo está es la sexta vez que tu has sido bloqueado de los reportes, ya no podrás usar este comando, lo sentimos pero lo advertimos desde mucho antes.", GetPlayerNameEx(playerid), reason);
					SafeDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"{00F70C}Bloqueo indefinido de reportes", string,"OK", "");

					format(string, sizeof(string), "AdmCmd: %s fue bloqueado permanentemente (6 Mutes) del comando /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("LOGS/mute.log", string);
				}
				for(new i = 0; i < MAX_REPORTS; i++)
				{
					if(Reports[i][ReportFrom] == giveplayerid)
					{
						Reports[i][BeingUsed] = 0;
					}
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya está deshabilitado de /re.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:desbloqre(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desbloqre (playerid) (reason)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pRMuted] == 2)
			{
				Info[giveplayerid][pRMuted] = 0;
				Info[giveplayerid][pRMutedTotal]--;
				Info[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "[AdmCmdExe]: %s ha desbloqueado del comando /re a %s, razón: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_GENERAL,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Por favor acepta nuestras disculpas por cualquier error y molestias que esto pueda haber causado.");
				format(string, sizeof(string), "AdmCmdExe: %s fue desbloqueado del cmd /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("LOGS/mute.log", string);
			}
			else if(Info[giveplayerid][pRMuted] == 1)
			{
				Info[giveplayerid][pRMuted] = 0;
				Info[giveplayerid][pRMutedTotal] = 0;
				Info[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "[AdmCmdExe]: %s ha desbloqueado del cmd /re a %s, razón: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_GENERAL,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Por favor acepta nuestras disculpas por cualquier error y molestias que esto pueda haber causado.");
				format(string, sizeof(string), "AdmCmdExe: %s fue desbloqueado del cmd /re por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("LOGS/mute.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está bloqueado de los reportes.");
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}


CMD:divorcio(playerid, params[])
{
	if(Info[playerid][pMarried] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás casado.");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /divorcio (ID)");
	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", Info[playerid][pMarriedTo]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true ) == 0 )
			{
				format(string, sizeof(string), "* Has propuesto divorcio a %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s te ha propuesto divorcio. (escribe /aceptar divorcio)", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está casado contigo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
}
CMD:adivorcio(playerid, params[])
{
	if(Info[playerid][pAdminZC] > 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /adivorcio (ID)");
		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "* Limpiaste el matrimonio de %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Tu has sido divorciado por %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			return 1;

		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	}
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
}
CMD:proponer(playerid, params[])
{
	if(GetPlayerCash(playerid) < 20000) return SendClientMessageEx(playerid, COLOR_GREY, "El matrimonio y recepción cuesta 10,000");
	if(Info[playerid][pMarried] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Tu ya estás casado.");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /proponer (ID)");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No te puedes proponer a tí mismo.");
		if(Info[giveplayerid][pMarried] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador ya está casado.");
		else if(MarryWitness[playerid] == giveplayerid) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes casarte con el testigo.");
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			format(string, sizeof(string), "* Propusiste matrimonio a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s te propuso matrimonio. (Escribe /aceptar matrimonio)", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			ProposeOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	return 1;
}
CMD:testigo(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /testigo (ID)");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(20.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_WHITE, "No puedes proponerte a ti mismo."); return 1; }
			format(string, sizeof(string), "* Has solicitado a %s para ser tu testigo de matrimonio.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s te ha pedido que seas su testigo de matrimonio. (usa /aceptar testigo)", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	return 1;
}

CMD:radargun(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás herido.");
	if(IsAPolice(playerid))
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un vehículo.");
			return 1;
		}
		if(Info[playerid][pJailed] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás prisión.");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un evento.");
			return 1;
		}
		if(Info[playerid][pEstado] >= 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás tazeado.");
			return 1;
		}
		new SpeedRadar = GetPVarInt(playerid, "SpeedRadar");
		if(SpeedRadar == 0)
		{
			SetPVarInt(playerid, "RadarReplacement", Info[playerid][pWeapons][9]);
			if(Info[playerid][pWeapons][9] != 0) RemovePlayerWeapon(playerid, Info[playerid][pWeapons][9]);
			format(string, sizeof(string), "* %s coge la cámara de velocidad.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 43);
			SetPVarInt(playerid, "SpeedRadar", 1);
		}
		else
		{
			RemovePlayerWeapon(playerid, 43);
			GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"));
			format(string, sizeof(string), "* %s guarda la cámara de velocidad.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "SpeedRadar");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
		return 1;
	}
	return 1;
}
CMD:regalararma(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 5000)
	{
        new sstring[128], playa, gun;
        if(sscanf(params, "dd", playa, gun))
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "Usa: /regalararma (ID) (ID Arma)");
            SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________________________________");
            SendClientMessageEx(playerid, COLOR_WHITE, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
            SendClientMessageEx(playerid, COLOR_WHITE, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flores 15: Cane 16: Frag Grenade");
            SendClientMessageEx(playerid, COLOR_WHITE, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
            SendClientMessageEx(playerid, COLOR_WHITE, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
            SendClientMessageEx(playerid, COLOR_WHITE, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
            SendClientMessageEx(playerid, COLOR_WHITE, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
            SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________________________________________________________________________________");
            return 1;
        }

        format(sstring, sizeof(sstring), "%s le dió un arma a %s [ID Arma: %d]",GetPlayerNameEx(playerid),GetPlayerNameEx(playa),gun);
        ABroadCast(COLOR_ORANGE, sstring, 2);
		format(sstring, sizeof(sstring), "Has dado tu arma a %s [ID Arma: %d]",GetPlayerNameEx(playa),gun);
        if(gun < 1||gun > 47)
            { SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ADM]:{FFFFFF} ID de Arma invalido."); return 1; }
        if(IsPlayerConnected(playa))
		{
            if((Info[playa][pConnectTime] < 2 || Info[playa][pWRestricted] > 0) && gun != 46 && gun != 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador tiene restricción de armas de momento.");
            if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22)
			{
                GivePlayerValidWeapon(playa, gun);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21)
			{
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
    return 1;
}
CMD:creararma(playerid, params[]){
	if (Info[playerid][pJob] == 7 || Info[playerid][pJob2] == 7){
		if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes crear armas en Jail.");
		if(Info[playerid][pEstado] == 0){
    		if (GetPVarInt(playerid, "ArmsTimer") > 0){
			    new string[128];
        		format(string, sizeof(string), "Tienes que esperar %d segundos despues de haber creado algún arma.", GetPVarInt(playerid, "ArmsTimer"));
        		SendClientMessageEx(playerid,COLOR_GREY,string);
        		return 1;
    		}
			else{
				switch(Info[playerid][pArmsSkill]){
					case 0 .. 49: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)","Ok", "Cancelar");
					case 50 .. 99: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm (300)","Ok", "Cancelar");
					case 100 .. 199: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm (300)\nPistola silenciada (400)","Ok", "Cancelar");
					case 200 .. 299: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm(300)\nPistola silenciada (400)\nEscopeta (450)","Ok", "Cancelar");
					case 300 .. 399: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)","Ok", "Cancelar");
					case 400 .. 499: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)\nMP5 (1200)","Ok", "Cancelar");
					case 500 .. 599: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)\nMP5 (1200)\nAK-47 (2000)","Ok", "Cancelar");
					case 600 .. 700: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (150)\nPalo Billar(90)\nCaña (90)\nBate baseball (90)\nPala (90)\nPistola 9mm (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800)\nMP5 (1200)\nAK-47\nM4A1 (2000)","Ok", "Cancelar");
					default: SafeDialogEx(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "{00F70C}Seleccionar Arma", "Katana (50)\nCaña (90)\nPalo Billar(90)\nBate baseball (90)\nPala (90)\n9mm Pistol (300)\nPistola silenciada (400)\nEscopeta (450)\nDesert Eagle (800\nMP5 (1200)\nAK-47 (2000)\nM4A1 (2000)\nSniper (4000)\nSPAS12 (3000)","Ok", "Cancelar");
				}
			}
			return 1;
		}
		else SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas tazeado, congelado o esposado.");
	}
	return 1;
}
CMD:cancelar(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "|__________________ Cancelar __________________|");
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cancelar (Nombre)");
		SendClientMessageEx(playerid, COLOR_GREY, "bebida - materiales - matrimonio - arma - divorcio - testigo");
		SendClientMessageEx(playerid, COLOR_GREY, "telefono - taxi - multa - coche - mecanico - droga - casa - vip");
		return 1;
	}
	else if(strcmp(choice,"hierba",true) == 0) { PotOffer[playerid] = 999; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"crack",true) == 0) { CrackOffer[playerid] = 999; CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"materiales",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"arma",true) == 0) { GunOffer[playerid] = 999; GunId[playerid] = 0; }
	else if(strcmp(choice,"testigo",true) == 0) { MarryWitnessOffer[playerid] = 999; }
	else if(strcmp(choice,"matrimonio",true) == 0) { ProposeOffer[playerid] = 999; }
	else if(strcmp(choice,"divorcio",true) == 0) { DivorceOffer[playerid] = 999; }
	else if(strcmp(choice,"live",true) == 0) { LiveOffer[playerid] = 999; }
	else if(strcmp(choice,"bebida",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"coche",true) == 0) { VehicleOffer[playerid] = 999; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"casa",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"Guardaespaldas",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
	else if(strcmp(choice,"fichasvip",true) == 0) { FOffer[playerid] = 999; FPrice[playerid] = 0; FAmount[playerid] = 0; }
    else if(strcmp(choice,"fichasg",true) == 0) { GGOffer[playerid] = 999; GGPrice[playerid] = 0; GGAmount[playerid] = 0; }
    else if(strcmp(choice,"vip",true) == 0){ VIPOffer[playerid] = 999; VIPPrice[playerid] = 0; }
	else if(strcmp(choice,"camion",true) == 0)
	{
 		DestroyProgressBar(LoadTruckBar[playerid]);
		LoadTruckBar[playerid] = INVALID_BAR_ID;
		LoadTruckTime[playerid] = 0;
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 		DisablePlayerCheckpoint(playerid);
	}
	if(strcmp(choice,"telefono",true) == 0)
    {
	    if(NumBuy[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido un número.");
        NumBuy[playerid] = 0;
        NumPrice[playerid] = 0;
        NumSeller[playerid] = 0;
        Facturing[playerid] = 0;
	}
	else if(strcmp(choice,"multa",true) == 0)
	{
	    if(TicketOffer[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te multado.");
	    format(string, sizeof(string), " %s se niega a pagar una multa", GetPlayerNameEx(playerid));
	    ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), "* %s canceló el pago de una multa de %d$.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
	    SendClientMessageEx(TicketOffer[playerid], -1, string);
	    TicketOffer[playerid] = 999;
	    TicketMoney[playerid] = 0;
	    Facturing[playerid] = 0;
	}
	else if(strcmp(choice,"licencia",true) == 0)
	{
	    if(NombreLicencia[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha ofrecido una licencia de armas.");
	    format(string, sizeof(string), " %s se niega a pagar la licencia de armas.", GetPlayerNameEx(playerid));
	    ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), "* %s canceló el pago de la licencia por %d dólares.", GetPlayerNameEx(playerid), PrecioLicencia[playerid]);
	    SendClientMessageEx(NombreLicencia[playerid], -1, string);  // Mensaje al policia.
	    NombreLicencia[playerid] = 999;
	    PrecioLicencia[playerid] = 0;
	    Facturing[playerid] = 0;
	}
	else if(strcmp(choice,"mecanico",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   No has llamado a un mecanico!"); return 1; } } }
	else if(strcmp(choice,"ayuda",true) == 0) { if(IsPlayerConnected(AdvisorCall)) { if(AdvisorCall == playerid) { AdvisorCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   No has pedido ese servicio!"); return 1; } } }
	else if(strcmp(choice,"taxi",true) == 0){
		if(TaxiCall < 999){
			if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0){
				TaxiAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Cancelaste~n~~r~la llamada", 5000, 1);
				TaxiCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				TaxiCall = 999;
			}
			else{
				if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
				foreach(Player, i){
					if(TaxiAccepted[i] < 999){
						if(TaxiAccepted[i] == playerid){
							TaxiAccepted[i] = 999;
							GameTextForPlayer(i, "~w~Llmada de taxi~n~~r~Cancelada", 5000, 1);
							TaxiCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else { return 1; }
	format(string, sizeof(string), "* Cancelaste: %s.", choice);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:dararma(playerid, params[])
{

	new string[128],id,weapon;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, COLOR_GREY, "Utiliza: /dararma (playerid)");
	else if(Info[playerid][pEstado]==0)
	{
		if(id == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes darte un arma a ti mismo!");
		if(Info[id][pConnectTime] < 2 || Info[id][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador tiene restricción de armas.");
		if(Info[playerid][pMember] != Info[id][pMember] && Info[playerid][pMember] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes dar armas a los jugadores fuera de tu facción.");
			return 1;
		}
		if(IsPlayerConnected(id))
		{
	   	    if(ProxDetectorS(6.0, playerid, id) && !IsPlayerInAnyVehicle(playerid))
  			{
                if(IsPlayerInAnyVehicle(id)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes dar un arma si el jugador esta en un vehículos.");
				weapon = GetPlayerWeapon(playerid);
				switch(weapon)
				{
					case 16, 18, 35, 36, 37, 38, 39, 40, 44, 45, 46, 0: SendClientMessage(playerid, COLOR_GREY, "Arma Inválida.");
					default:
					{
						format(string, sizeof(string), "Ofreciste a %s tu %s.", GetPlayerNameEx(id), WeaponNames[weapon]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s te ha ofrecido su %s - Usa /aceptar arma para recibirla.", GetPlayerNameEx(playerid), WeaponNames[weapon]);
						SendClientMessage(id, COLOR_LIGHTBLUE, string);
						SetPVarInt(id,"gunID",playerid);
						SetPVarInt(playerid,"gun",weapon);
						SetPVarInt(playerid,"slot",GetWeaponSlot(weapon));
						manubrio[playerid] = 1;
						SetTimerEx("Timermanubrio",900000,false,"d",playerid);
					}
				}
	    	}
	    	else SendClientMessage(playerid, COLOR_WHITE, "Tu estas lejos del jugador o en un vehículo.");
	    }
		else SendClientMessage(playerid, COLOR_WHITE, "La ID que has ingresado es inválida.");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas tazeado, esposado o congelado.");
	return 1;
}
CMD:misarmas(playerid, params[]){
	new string[128], myweapons[13][2], weaponname[50], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	format(string, sizeof(string), "Armas - %s:", name);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	for (new i = 0; i < 13; i++)	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)		{
			if(Info[playerid][pWeapons][i] == myweapons[i][0])			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "%s (%d)", weaponname, myweapons[i][0]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
			}
		}
	}
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(string, sizeof(string), "[%d/%d/%d %d:%d:%d]", month, day, year, hour, minute,second);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}
CMD:armareset(playerid, params[])
{
   if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 3)
	{
	    new string[75 + (MAX_PLAYER_NAME * 2)], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /armareset (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(Info[giveplayerid][pWRestricted] > 0)
		    {
		        Info[giveplayerid][pWRestricted] = 0;
		        format(string, sizeof(string), "{FFFF00}INFRANET-RolePlay:{FF0000} %s reseteó la restricción de armas de %s's (ID:%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
		        ABroadCast(COLOR_GENERAL, string, 2);
		    }
		    else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene restricción de armas.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado, está desconectado.");
	}
	return 1;
}

CMD:habilidad(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /habilidad (Número)");
		SendClientMessageEx(playerid, COLOR_GREY, "| 1: Vendedor de Armas 		| 4: Pesca");
		SendClientMessageEx(playerid, COLOR_GREY, "| 2: Camionero         		| 5: Vendedor de drogas ");
		SendClientMessageEx(playerid, COLOR_GREY, "| 3: Traficante de drogas 	| 6: Idiomas Extrangeros [NUEVO]");
		return 1;
	}
    else switch(strval(params))
    {
		case 1:
		{
			new level = Info[playerid][pArmsSkill], string[62];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de armas es 1."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 99) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de armas es 2."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 299) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de armas es 3."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 300 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 300 && level < 599) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de armas es 4."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 600 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 600) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de armas es 5."); }
		}
		case 2://Trucker
		{
			new level = Info[playerid][pTruckSkill], string[62];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de camionero es 1."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 51 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de camionero es 2."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 101 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de camionero es 3."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 201 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de camionero es 4."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 401 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de camionero es 5."); }
		}
 		case 3://Drug Smuggling
		{
			new level = Info[playerid][pSmugSkill], string[62];
			if(level >= 0 && level <= 20) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de Traficante es 1."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 20 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 21 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de Traficante es 2."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de Traficante es 3."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de Traficante es 4."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de Traficante es 5."); }
		}
		case 4://Fishing
		{
			new level = Info[playerid][pFishSkill], string[62];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Eres Nivel 1."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Eres Nivel 2."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Eres Nivel 3."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Eres Nivel 4."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Eres Nivel 5."); }
		}
		case 5://Drugs Dealer
		{
			new level = Info[playerid][pDrugsSkill], string[62];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de drogas es 1."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de drogas es 2."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de drogas es 3."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de drogas es 4."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "{A2DC35}[SKILL]:{FFFFFF} Tu nivel de vendedor de drogas es 5."); }
		}
		case 6: // Experiencia Idiomas.
		{
			SendClientMessageEx(playerid, COLOR_GREY, "[IDIOMAS]:{FFFFFF} Lista de idiomas y conocimiento.");
			if(Info[playerid][pIngles] == 1)
			{
			    new string[90];
				format(string, sizeof(string), "Tu habilidad de inglés es:{FFFFFF} [%d] - [Tener habilidad siempre entre 10 y 100]", Info[playerid][pInglesSkill]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			}
			if(Info[playerid][pAleman] == 1)
			{
			    new string[90];
				format(string, sizeof(string), "Tu habilidad de alemán es:{FFFFFF} [%d] - [Tener habilidad siempre entre 10 y 100]", Info[playerid][pAlemanSkill]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			}
			if(Info[playerid][pItaliano] == 1)
			{
			    new string[90];
				format(string, sizeof(string), "Tu habilidad de italiano es:{FFFFFF} [%d] - [Tener habilidad siempre entre 10 y 100]", Info[playerid][pItalianoSkill]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			}
			if(Info[playerid][pRuso] == 1)
			{
			    new string[90];
				format(string, sizeof(string), "Tu habilidad de ruso es:{FFFFFF} [%d] - [Tener habilidad siempre entre 10 y 100]", Info[playerid][pRusoSkill]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			}
			if(Info[playerid][pJapones] == 1)
			{
			    new string[90];
				format(string, sizeof(string), "Tu habilidad de japonés es:{FFFFFF} [%d] - [Tener habilidad siempre entre 10 y 100]", Info[playerid][pJaponesSkill]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			}
			if(Info[playerid][pArabe] == 1)
			{
			    new string[90];
				format(string, sizeof(string), "Tu habilidad de árabe es:{FFFFFF} [%d] - [Tener habilidad siempre entre 10 y 100]", Info[playerid][pArabeSkill]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
			}
		}
 	}
	return 1;
}

CMD:arena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == 0)
	{
        if(Info[playerid][pConnectTime] < 2)
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Paintball Arena]:{5ABAFF} No puedes entrar al Paintball ya que tienes restricción de armas.");
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid,5.0,305.3528,-141.9280,1004.0625))
		{
            PaintballMainMenu(playerid);
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el Paintball.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "Ya estás en el Paintball.");
    }
    return 1;
}

CMD:scores(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == 1)
	{
        PaintballScoreboard(playerid);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si no estás en el paintball.");
    }
    return 1;
}

CMD:salirarena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == 1)
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando en este momento.");
            return 1;
        }
        LeavePaintballArena(playerid);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si no estás en el paintball.");
    }
    return 1;
}

CMD:cequipo(playerid, params[])
{
    if(GetPVarInt(playerid, "ArenaMode") == 2)
    {
		PaintballSwitchTeam(playerid);
    }
    else
	{
        SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si no estás en el paintball modo Team DeathMatch.");
    }
    return 1;
}

CMD:darfichaspball(playerid, params[])
{
	new string[128], giveplayerid, amount;
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(sscanf(params, "dd", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /adarfichas (playerid) (fichas)");

	if(IsPlayerConnected(giveplayerid))
	{
		if(Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para dar fichas.");
		Info[giveplayerid][pPaintTokens] += amount;
		format(string, sizeof(string), "Te han dado %d fichas de paintball - Administrador %s.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Has dado a %s, %d fichas de paintball.", GetPlayerNameEx(giveplayerid), amount);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "{FFFF00}INFRANET-RP:{FF0000} %s dió %s, %d Fichas de Paintball.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
		ABroadCast(COLOR_GENERAL, string, 2);

	}
	return 1;
}

CMD:fumarhierba(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes drogarte en el paintball.");
	if(UsedWeed[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que esperar 5 segundos para usar hierba.");
	new string[128], Float:health, healthint;
	GetPlayerHealth(playerid, health);
	healthint = floatround(health, floatround_round);
	if(healthint >= 100 ) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes la vida llena.");
	if(Info[playerid][pPot] > 0)
	{
		if(PlayerStoned[playerid] > 100) return SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado drogado para utilizar hierba.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 100)
		{
			GameTextForPlayer(playerid, "~w~Estas ~b~...jodido", 5000, 3);
		}
		if(healthint > 74)
		{
			SetHP(playerid, 100);
		}
		else
		{
			SetHP(playerid, health + 10.0);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Usaste 1 gramo de hierba.");
		format(string, sizeof(string), "* %s se fuma algo de hierba.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Info[playerid][pPot] -= 1;
		UsedWeed[playerid] = 1;
 		Info[playerid][pAdiccion] += 0;
		SetPlayerDrunkLevel(playerid, Info[playerid][pAdiccion]*500);
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE,"No tienes hierba.");
	return 1;
}

CMD:fumarcrack(playerid, params[])
{
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en el paintball.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás herido.");
	if(UsedCrack[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Debe esperar 8 segundos antes de usar más drogas.");
	if(armour >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando, tienes demasiada armadura.");
	if(Info[playerid][pCrack] > 0)
	{
		if(PlayerStoned[playerid] > 100) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás muy drogado.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 100)
		{
			GameTextForPlayer(playerid, "~w~Estas ~b~Drogado", 5000, 3);
		}
		new string[128], Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		SendClientMessageEx(playerid, COLOR_WHITE, " Usaste 1 gramo de crack!");
		format(string, sizeof(string), "* %s usa un poco de droga.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		UsedCrack[playerid] = 1;
		Info[playerid][pAdiccion] += 0;
		SetPlayerDrunkLevel(playerid, Info[playerid][pAdiccion]*1000);
		SetTimerEx("ClearDrugs", 8000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		if(PlayersArmour > 65)
		{
			SetPlayerArmour(playerid, 100);
		}
		else
		{
			SetPlayerArmour(playerid, PlayersArmour + 33.0);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si no tienes drogas.");
	}
	return 1;
}

CMD:venderspray(playerid, params[])
{
    if(!Team_Mecanicos(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si no eres mecánico.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás herido.");
	new string[128], giveplayerid, spray, money;
	if(sscanf(params, "ddd", giveplayerid, spray, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderspray (playerid) (potes) (precio)");
	if(spray < 1 || spray > 30) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Los valores no pueden ser mayores a 30 potes."); return 1; }
	if(money < 1 || money > 5000) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} El precio no puede ser menor que 1 ni mayor que 5.000!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "El vendedor no está cerca tuyo.");
					return 1;
				}
				format(string, sizeof(string), "* Ofreciste a %s para que te compre %d potes de spray por $%d.", GetPlayerNameEx(giveplayerid), spray, money);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Mecánico %s quiere venderte %d potes de spray por $%d. (escribe /aceptar spray)", GetPlayerNameEx(playerid), spray, money);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				SprayOffer[giveplayerid] = playerid;
				SprayPrice[giveplayerid] = money;
				SprayGram[giveplayerid] = spray;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "   Ese jugador está desconectado.");
	}
	return 1;
}
CMD:tirararma(playerid, params[]){
	if(isnull(params)){
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /tirararma [Nombre de Arma]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Nombres: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper, camara");
		SendClientMessageEx(playerid, COLOR_WHITE, "Nombres: flores, knuckles, baseballbat, caña, pala, poolcue, golfclub, katana, dildo, paracaidas");
		if(Info[playerid][pMember] == 8 || Info[playerid][pLeader] == 8) { SendClientMessageEx(playerid, COLOR_GRAD2, "Nombres: cuchillo"); }
		if(Info[playerid][pMember] == 3 || Info[playerid][pLeader] == 3 || Info[playerid][pMember] == 1 || Info[playerid][pLeader] == 1 || Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2) {
			SendClientMessageEx(playerid, COLOR_WHITE, "Nombres: pala, maza, ghumo, motosierra, extinguidor");
		}
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid)) {
		SendClientMessageEx (playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un vehiculo.");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0){
		SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un evento.");
		return 1;
	}
	new string[128];
	if(strcmp(params, "sdpistol", true) == 0){
		if(Info[playerid][pWeapons][ 2 ] == 23){
		    if(pTazer[playerid] == 1) return SendClientMessageEx(playerid, COLOR_RED, "No puedes botar tu tazer.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu pistola con silenciador.");
			format(string, sizeof(string), "* %s tirá su pistola con silenciador.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 23);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "camara", true) == 0){
		if(Info[playerid][pWeapons][ 9 ] == 43){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu camara.");
			format(string, sizeof(string), "* %s tirá su camara.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 43);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "palo", true) == 0){
		if(Info[playerid][pWeapons][1] == 3){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu palo.");
			format(string, sizeof(string), "* %s tirá su palo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 3);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "masa", true) == 0){
		if(Info[playerid][pWeapons][9] == 41){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu maza.");
			format(string, sizeof(string), "* %s tirá su maza.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 41);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "cuchillo", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 4){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu cuchillo.");
			format(string, sizeof(string), "* %s tirá su cuchillo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 4);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "9mm", true) == 0){
		if(Info[playerid][pWeapons][ 2 ] == 22){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu 9mm pistol.");
			format(string, sizeof(string), "* %s tirá su 9mm pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 22);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "shotgun", true) == 0){
		if(Info[playerid][pWeapons][ 3 ] == 25){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu shotgun.");
			format(string, sizeof(string), "* %s tirá su shotgun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 25);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "mp5", true) == 0){
		if(Info[playerid][pWeapons][ 4 ] == 29){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu MP5.");
			format(string, sizeof(string), "* %s tirá su MP5.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 29);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "uzi", true) == 0){
		if(Info[playerid][pWeapons][ 4 ] == 28){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu Micro SMG.");
			format(string, sizeof(string), "* %s tirá su Micro SMG.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 28);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "tec9", true) == 0){
		if(Info[playerid][pWeapons][ 4 ] == 32){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu Tec-9.");
			format(string, sizeof(string), "* %s tirá su Tec-9.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 32);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "pistol", true) == 0){
		if(Info[playerid][pWeapons][ 2 ] == 24){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu Desert Eagle.");
			format(string, sizeof(string), "* %s tirá su Desert Eagle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 24);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "rifle", true) == 0){
		if(Info[playerid][pWeapons][ 6 ] == 33){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu rifle.");
			format(string, sizeof(string), "* %s tirá su rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 33);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "ak47", true) == 0){
		if(Info[playerid][pWeapons][ 5 ] == 30){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu AK-47.");
			format(string, sizeof(string), "* %s tirá su AK-47.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 30);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "m", true) == 0){
		if(Info[playerid][pWeapons][ 5 ] == 31){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu M4.");
			format(string, sizeof(string), "* %s tirá su M4.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 31);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "spas12", true) == 0){
		if(Info[playerid][pWeapons][ 3 ] == 27){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu SPAS-12.");
			format(string, sizeof(string), "* %s tirá su SPAS-12.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 27);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "sniper", true) == 0){
		if(Info[playerid][pWeapons][ 6 ] == 34){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu sniper rifle.");
			format(string, sizeof(string), "* %s tirá su sniper rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 34);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "flores", true) == 0){
		if(Info[playerid][pWeapons][ 10 ] == 14){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu flores.");
			format(string, sizeof(string), "* %s tirá su flores.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "knuckles", true) == 0)
	{
		if(Info[playerid][pWeapons][ 0 ] == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu brass knuckles.");
			format(string, sizeof(string), "* %s tirá su brass knuckles.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "baseballbat", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 5){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu baseball bat.");
			format(string, sizeof(string), "* %s tirá su baseball bat.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "coña", true) == 0){
		if(Info[playerid][pWeapons][ 10 ] == 15){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu caña.");
			format(string, sizeof(string), "* %s tirá su cane.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pWeapons][ 10 ] = 0;
			RemovePlayerWeapon(playerid, 15);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "pala", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 6){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu pala.");
			format(string, sizeof(string), "* %s tirá su shovel.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "golfclub", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 2){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu golf club.");
			format(string, sizeof(string), "* %s tirá su golf club.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "katana") == 0){
		if(Info[playerid][pWeapons][ 1 ] == 8){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu katana.");
			format(string, sizeof(string), "* %s tirá su katana.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "dildo", true) == 0){
		if(Info[playerid][pWeapons][ 10 ] == 10){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu dildo.");
			format(string, sizeof(string), "* %s tirá su dildo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "paracaidas", true) == 0){
		if(Info[playerid][pWeapons][ 11 ] == 46){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu paracaidas.");
			format(string, sizeof(string), "* %s tirá su paracaidas.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "ghumo", true) == 0){
		if(Info[playerid][pWeapons][ 8 ] == 17){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has tirado tu granada de humo.");
			format(string, sizeof(string), "* %s tirá su granada de humo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 17);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "motosierra", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 9){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu motosierra.");
			format(string, sizeof(string), "* %s tirá su motosierra.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 9);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "extinguidor", true) == 0){
		if(Info[playerid][pWeapons][ 9 ] == 42){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu extinguidor.");
			format(string, sizeof(string), "* %s tirá su extinguidor.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 42);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "minigun", true) == 0){
		if(Info[playerid][pWeapons][ 7 ] == 38){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu minigun.");
			format(string, sizeof(string), "* %s tirá su minigun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 38);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else if(strcmp(params, "poolcue", true) == 0){
		if(Info[playerid][pWeapons][ 1 ] == 7){
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "has tirado tu palo de billar.");
			format(string, sizeof(string), "* %s tirá su pool cue.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 7);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma!");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Has ingresado el nombre de un arma incorrecta.");
	return 1;
}
CMD:msjlogueo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 5000)
    {
    	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjlogueo (mensaje)");
		new string[200];
    	format(string, sizeof(string), "[AdmCmdExe]: %s cambió el msjlogueo a: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_WHITE, string, 4);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de logueo.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjfacc(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] >= 5000 || Info[playerid][pGangModerator] == 1)
    {
    	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjfacc (mensaje)");
		new string[80];
    	format(string, sizeof(string), "[AdmCmdExe]: %s cambió el msjfacc a: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_GENERAL, string, 4);
		format(FACMOTD, sizeof(FACMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de facciones.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjfam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] >= 5000 || Info[playerid][pGangModerator] == 1)
    {
    	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjfam (mensaje)");
		new string[80];
    	format(string, sizeof(string), "[AdmCmdExe]: %s cambió el msjfam a: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_GENERAL, string, 4);
		format(FAMMOTD, sizeof(FAMMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de familias.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjstaff(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] >= 5000)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjstaff (mensaje)");
		new string[80];
		format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
		format(string, sizeof(string), "[AdmCmdExe]: %s cambió el admin msjstaff a: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_GENERAL, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el Mensaje staff.");
		SaveMOTDs();
	}
	return 1;
}

CMD:msjhelper(playerid, params[])
{
    if(Info[playerid][pAdminZC] >= 1338 || Info[playerid][pHelper] >= 2)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjhelper (mensaje)");
		new string[80];
		format(CAMOTD, sizeof(CAMOTD), "%s", params);
		if(Info[playerid][pAdminZC] >= 1338)
		{
			format(string, sizeof(string), "[AdmCmd]: %s cambió el msjhelper para ayudantes a: %s.", GetPlayerNameEx(playerid), params);
			ABroadCast( COLOR_GENERAL, string, 5);
		}
		else if(Info[playerid][pHelper] >= 2)
		{
		    format(string, sizeof(string), "[CACmd]: %s cambió el msjhelper para ayudantes a: %s.", GetPlayerNameEx(playerid), params);
			CBroadCast( TEAM_AZTECAS_COLOR, string, 2);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el MOTD para ayudantes.");
		SaveMOTDs();
	}
	return 1;
}

CMD:numeropriv(playerid, params[])
{
    if(Info[playerid][pPnumber] != 0)
	{
        if(UnidentifedCall[playerid] == 1)
		{
            UnidentifedCall[playerid] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "Desabilitaste el numero privado.");
        }
        else
		{
            UnidentifedCall[playerid] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "Activaste el numero privado.");
        }
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un teléfono o no eres {FFFF00}SILVERVIP{FFFFFF}.");
    return 1;
}

CMD:vidainf(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 5)
	{
        SetHP(playerid, 10000000000);
        SetPlayerArmour(playerid, 10000000000);
    }
	return 1;
}

CMD:ayudame(playerid, params[])
{
	if(Advisors < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "En este momento no hay ayudantes, intenta en otro momento.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ayudame (razón)");
	new string[128];
	if(Info[playerid][pLevel] < 4)
	{
		if(JustReported[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Espera 30 segundos para enviar otra solicitud.");
			return 1;
		}
		JustReported[playerid]=30;
		format(string, sizeof(string), "** %s solicita ayuda, razón: %s. (usa /aceptarayuda)", GetPlayerNameEx(playerid), params);
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has solicitado ayuda a nuestros ayudantes, espera a una respuesta.");
		SetPVarInt( playerid, "COMMUNITY_ADVISOR_REQUEST", 1 );
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres un usuario nuevo.");
	}
	return 1;
}

CMD:aceptarayuda(playerid, params[])
{
	foreach(Player, i)
	{
		if( GetPVarInt( i, "COMMUNITY_ADVISOR_REQUEST" ) >= 1 )
		{
			AdvisorCall = i;
		}
	}
	if(AdvisorCall < 999)
	{
		if(IsPlayerConnected(AdvisorCall))
		{
			new string[128];
			if(HelpingNewbie[playerid] != 999)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ya estás ayudando a alguien.");
				return 1;
			}
			if(GetPVarInt(playerid, "AdvisorDuty") == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No está en servicio como ayudante /cduty.");
				return 1;
			}
			format(string, sizeof(string), "* %s ha aceptado la petición de ayuda de %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(AdvisorCall));
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			format(string, sizeof(string), "* Has aceptado la solicitud de ayuda %s, una vez que hayas terminado usa /finalizarayuda para volver a su posición.",GetPlayerNameEx(AdvisorCall));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Ayudante %s ha aceptado tu solicitud de ayuda.",GetPlayerNameEx(playerid));
			SendClientMessageEx(AdvisorCall, COLOR_LIGHTBLUE, string);
			SendClientMessageEx(AdvisorCall, COLOR_WHITE, "* Por favor espera en tu posición actual, muchas gracias.");
			new Float: x, Float: y, Float: z, Float: r, i, vw;
			vw = GetPlayerVirtualWorld(playerid);
			i = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, r);
			SetPVarFloat(playerid, "AdvisorLastx", x);
			SetPVarFloat(playerid, "AdvisorLasty", y);
			SetPVarFloat(playerid, "AdvisorLastz", z);
			SetPVarFloat(playerid, "AdvisorLastr", r);
			SetPVarInt(playerid, "AdvisorLastInt", i);
			SetPVarInt(playerid, "AdvisorLastVW", vw);
			GetPlayerPos(AdvisorCall, x, y, z);
			vw = GetPlayerVirtualWorld(AdvisorCall);
			i = GetPlayerInterior(AdvisorCall);
			SetPlayerPos(playerid, x, y+2, z);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid, i);
			HelpingNewbie[playerid] = AdvisorCall;
			AdvisorCall = 999;
			//AddCAReportToken(playerid); // Advisor Tokens
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "* Todavía nadie ha solicitado ninguna ayuda o ya aceptaron a la que ibas.");
		return 1;
	}
	return 1;
}

CMD:finalizarayuda(playerid, params[])
{
	if(HelpingNewbie[playerid] < 999)
	{
		new string[128];
		format(string, sizeof(string), "* %s ha finalizado la solicitud de ayuda de %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(HelpingNewbie[playerid]));
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SetPlayerPos(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "AdvisorLastVW"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "AdvisorLastInt"));
		SetPVarInt(HelpingNewbie[playerid], "COMMUNITY_ADVISOR_REQUEST", 0 );
		HelpingNewbie[playerid] = 999;
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "   No estás ayudando a nadie!");
	return 1;
}
	CMD:ocultarinfo(playerid, params[])
	{
 		TextDrawHideForPlayer(playerid, PRUEBA1);
    	TextDrawHideForPlayer(playerid, PRUEBA2);
    	SendClientMessageEx(playerid, COLOR_GREY, "[Atención]: Has ocultado la barra inferior de información. Si deseas activarla usa /mostrarinfo.");
    	return 1;
	}
	CMD:mostrarinfo(playerid, params[])
	{
 		TextDrawShowForPlayer(playerid, PRUEBA1);
    	TextDrawShowForPlayer(playerid, PRUEBA2);
     	SendClientMessageEx(playerid, COLOR_GREY, "[Atención]: Has activado la barra inferior de información. Si deseas desactivarla usa /ocultarinfo.");
    	return 1;
	}
	
	CMD:informacion(playerid, params[])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "El Sistema de Información no está habilitado todavía." );
	}
	CMD:puntosrol(playerid, params[])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Para obtener soporte del sistema de Puntos de rol, contácte con un miembro del staff." );
	}
	CMD:discord(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[Discord]:{FFFFFF} http://discord.gg/SwFp9NK" );
	    return 1;
	}
	CMD:idiomas(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "[INFO]: (Idiomas disponibles en el servidor) - /ing, /ale, /rus, /ita, /ara y /jap.");
	    return 1;
	}
	CMD:pesca(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "[Sistema de pesca]: /liberarpez - /venderpez - /pescar.");
	    return 1;
	}
	CMD:foro(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_GENERAL, "{A2DC35}FORO:{FFFFFF} infranet.foroactivo.com" );
	    return 1;
	}
    CMD:verjail(playerid, params[])
	{
		return cmd_checkjail(playerid, params);
	}
	CMD:pendejo(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Usted quiso decir Alessando_DelPiero." );
	    return 1;
	}
/*CMD:cduty(playerid, params[])  //BUG
{
    if(Info[playerid][pHelper] >= 1)
	{
        if(OnDuty[playerid] == 1)
		{
 			new string[128];
			format(string, sizeof(string), "**Ayudante INFRANET-RP: Helper %s está fuera de servicio ya no podrá responder.",GetPlayerNameEx(playerid));
			BroadCast(COLOR_LIGHTBLUE, string);
		    SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora estás fuera de servicio como ayudante y no recibirás solicitudes de usuarios nuevos.");
            OnDuty[playerid] = 0;
        }
        else
		{
			new string[128];

			format(string, sizeof(string), "**Ayudante INFRANET-RP: Helper %s Esta En Servicio Para Responder y Ayudar Con Las Dudas",GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			BroadCast(COLOR_LIGHTBLUE, string);
			SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora te encuentras en servicio como ayudante y recibirás llamadas de personas que te necesiten.");
            OnDuty[playerid] = 1;

        }
    }
    else
	{

        SendClientMessageEx(playerid, COLOR_WHITE, "No eres un Ayudante.");
    }
    return 1;
}*/
CMD:cduty(playerid, params[])
{
    if(Info[playerid][pHelper] >= 1)
	{
        if(GetPVarInt(playerid, "AdvisorDuty") == 1)
		{
 			new string[128];
			format(string, sizeof(string), "[AVISO] El ayudante %s está fuera de servicio, ya no podrá responder dudas.",GetPlayerNameEx(playerid), playerid);
			BroadCast(COLOR_LIGHTBLUE, string);
		    SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora estás fuera de servicio como ayudante y no recibirás solicitudes de usuarios nuevos.");
            DeletePVar(playerid, "AdvisorDuty");
            SetPlayerColor(playerid,COLOR_WHITE);
        	SetPlayerSkin(playerid, Info[playerid][pChar]);
            Advisors -= 1;
            // LABEL AVISO:
            if(YoActivado[playerid] == 1){Delete3DTextLabel(YO[playerid]); YoActivado[playerid] = 0;}
        }
        else
		{
			new string[128];
			format(string, sizeof(string), "[AVISO] El ayudante %s [ID: %d] esta en servicio para responder y ayudar en dudas. {DD1F1F}(/ayudame -/n)",GetPlayerNameEx(playerid), playerid);
			BroadCast(COLOR_LIGHTBLUE, string);
			SendClientMessageEx(playerid, COLOR_BLUE, "* Ahora te encuentras en servicio como ayudante y recibirás solicitudes de personas que te necesiten. (/cmdhelper).");
            OnDuty[playerid] = 0;
            SetPVarInt(playerid, "AdvisorDuty", 1);
            SetPlayerColor(playerid,0x0098FFFF);
 			if(Info[playerid][pSex] == 1){SetPlayerSkin(playerid, 217);}
			else {SetPlayerSkin(playerid, 211);}
			Advisors += 1;
			// LABEL AVISO:
			if(YoActivado[playerid] == 1){Delete3DTextLabel(YO[playerid]);}
   			YO[playerid] = Create3DTextLabel("- AYUDANTE - ONDUTY",0x0098FFFF,30.0,40.0,50.0,40.0,0);
  			YoActivado[playerid] = 1;
   			Attach3DTextLabelToPlayer(YO[playerid], playerid, 0.0, 0.0, 0.5);
        }
    }
    else
	{

        SendClientMessageEx(playerid, COLOR_WHITE, "No eres un Ayudante.");
    }
    return 1;
}
CMD:darhelper(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 1338 || Info[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darhelper (playerid)");

		if(IsPlayerConnected(giveplayerid))
		{
			Info[giveplayerid][pHelper] = 1;
			format(string, sizeof(string), "Te han asignado ayudante - Responsable: %s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "Asignaste ayudante a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s asignó ayudante a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("LOGS/makehelp.log", string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
	return 1;
}

CMD:darliderhelper(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 1338)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darliderhelper (playerid)");

		if(IsPlayerConnected(giveplayerid))
		{
			Info[giveplayerid][pHelper] = 2;
			format(string, sizeof(string), "Te han asignado lider de ayudantes - Responsable: %s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "Asignaste lider de ayudantes a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s asignó lider de ayudantes a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("LOGS/makehelp.log", string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
	return 1;
}

CMD:quitarhelper(playerid, params[]){
   if (Info[playerid][pAdminZC] >= 1338 || Info[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /quitarhelper [playerid]");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pHelper] != 0){
				if(GetPVarType(playerid, "AdvisorDuty")){
					DeletePVar(playerid, "AdvisorDuty");
					Advisors -= 1;
				}
				Info[giveplayerid][pHelper] = 0;
				format(string, sizeof(string), "%s te ha expulsado del equipo de ayudantes.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "Has expulsado a %s del equipo de ayudantes.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}

		}
	} else SendClientMessageEx(playerid, COLOR_GRAD1, "No estás autorizado para usar este comando!");
	return 1;
}

CMD:darrehelper(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 3)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"Utiliza: /darrehelper (reportid)");
		if(reportid < 0 || reportid > 499) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Es de 0 y no por encima de 499."); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Ese reporte ya fue revisado.");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} El que reporto se ha desconectado.");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}

		if(Advisors < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora no hay ayudantes disponibles, intenta más tarde.");
			return 1;
		}

		format(string, sizeof(string), "[AdmCmdExe]: %s ha enviado a %s (ID: %i) el (RID: %i) a los ayudantes.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_GENERAL, string, 2);
		if(Info[playerid][pHelper] >= 1)
		{
			format(string, sizeof(string), "%s ha revisado tu reporte y lo remitió a los ayudantes.", GetPlayerNameEx(playerid));
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Un ayudante debe estar contigo en breve.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "A los nuevos jugadores se les recomienda utilizar /ayudame para cualquier pregunta que puedas tener, en lugar de utilizar /re para reportes de violaciónes de reglas y obtener ayuda de un administrador.");
			SetPVarInt( Reports[reportid][ReportFrom], "COMMUNITY_ADVISOR_REQUEST", 1 );
			format(string, sizeof(string), "Administrador %s ha remitido a un reporte. Jugador %s (ID: %d) Reporte: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][Report]);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, "Por favor escribe /aceptarayuda para teleportarte al jugador.");
		}
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][CheckingReport] = 999;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}
    CMD:cerrajearveh(playerid, params[])
	{
		return cmd_cerrajear(playerid, params);
	}
	CMD:cerrajear(playerid, params[])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas tener una palanca en mano." );
	    return 1;
	}
zcmd(puente, playerid, params[ ])
{
	if(!IsPlayerConnected(playerid)) return 0;
 	//new mbr = Info[playerid][pMember];
 	if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes la experiencia necesaria para hacer esto. Necesitas más tiempo de juego.");
 	if(IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Los policias no pueden realizar puentes a los vehículos!");
 	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡No estás en un vehículo!");
 	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Tienes que ser el conductor!");
  	if(Info[playerid][pGanzuas] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Primero necesitas una ganzúa para hacer el puente!");
	// EL CMD lo podrán usar mafias y organizaciones. ((8. Hitman - 14. Mafia Rusa - 15. LCN - 16. Yakuza - 17. ALEPH - 18. Santana - 19. Terroristas - 20. C.D.G))
 	//if(mbr == 8 || mbr == 14 || mbr == 15 || mbr == 16 || mbr == 17 || mbr == 18 || mbr == 19 || mbr == 20)
 	//{
		if(IntentarPuente[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Espera 30 segundos para volver a utilizar este comando!");
        if(PlazaAyuntamiento(playerid))  return SendClientMessageEx(playerid, COLOR_GREY, "¡No puedes robar coches aquí, estás en una zona muy transitada!");
        new engine, lights, alarm, doors, bonnet, boot, objective;
        new vehicleid = GetPlayerVehicleID(playerid);
	    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		new string[128];
		if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
        	foreach(Player, i)
			{
			    gLastCar[playerid] = vehicleid;
      			new v = GetPlayerVehicle(i, vehicleid);
		    	if(v != -1)
				{
					if(i != playerid && i != Info[playerid][pVehicleKeysFrom] && PlayerVehicleInfo[i][v][pvLocked] == 0) // No es el propietario del coche, no tiene la llave.
					{
						ProxDetector(30.0, playerid, "* Alguien utiliza unas ganzúas, cruza los cables e intenta encender el motor.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new arranque = random(3)+1;
	    				if(arranque == 1 || arranque == 3)
						{
						    if(Info[playerid][pMaskuse] == 0)
							{
								format(string, sizeof(string), "* %s intentó arrancar el vehículo y lo logró.", GetPlayerNameEx(playerid));
								ProxDetector(3.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
							}
							else{ProxDetector(3.0, playerid, "Desconocido intentó arrancar el vehículo y lo logró.", COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);}
							SetTimerEx("SetVehicleEngine", 2000, 0, "dd",  vehicleid, playerid); // Se ejecuta el arranque del coche.
							GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
	    					SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
	    					Info[playerid][pGanzuas] -= 1;
	    					IntentarPuente[playerid] = 1;
	    					return SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
						}
						else
						{
						    if(Info[playerid][pMaskuse] == 0)
							{
							    format(string, sizeof(string), "* %s intentó arrancar el vehículo, pero falló.", GetPlayerNameEx(playerid));
								ProxDetector(3.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
								new Float:cx,Float:cy,Float:cz;
								GetPlayerPos(playerid, cx, cy, cz);
        						new zone[MAX_ZONE_NAME];
        						GetPlayer3DZone(playerid, zone, sizeof(zone));
								SendRadioMessage(1, TEAM_RADIO_COLOR, "** Central: Se ha detectado el robo de un vehículo recientemente, alguien reportó el aviso.");
								SendRadioMessage(2, TEAM_RADIO_COLOR, "** Central: Se ha detectado el robo de un vehículo recientemente, alguien reportó el aviso.");
								for(new x = 0; x < MAX_PLAYERS; x++)
								{
									if(OnDuty[x] == 1) // Los agentes que estén Onduty podrán acudir al aviso de "Intento de Robo".
									{
					    				if(Team_LSPD(x) || Team_FBI(x))
									    {
											SetPlayerCheckpoint(x, cx, cy, cz, 10.0);
											format(string, sizeof(string), "Ha sido robado un vehículo modelo %s cerca de %s, se espera el envio de una patrulla.", GetVehicleName(vehicleid),zone);
											SendClientMessageEx(x, COLOR_GREY, string);
										}
									}
								}
							}
							else{ProxDetector(50.0, playerid, "Desconocido intentó arrancar el vehículo, pero falló.", 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);}
							GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
	    					SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
	    					Info[playerid][pGanzuas] -= 1;
	    					IntentarPuente[playerid] = 1;
	    					format(string, sizeof(string), "[INFO]: {FFFFFF}No has podido puntear el vehículo, te quedan %d ganzúas.", Info[playerid][pGanzuas]);
							SendClientMessageEx(playerid, COLOR_GREY, string);
	    					return SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
						}
					}
					else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] No puedes realizar un puente a un vehículo el cual tienes las llaves o tiene alarma instalada.");
                        //SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] En caso de no ser su vehículo, está intentando usar un vehículo asegurado.");
					}
				}
			}
			for(new f = 0; f < MAX_FAMILY; f++)
			{
		    	new v = GetPlayerVehicle(f, vehicleid);
				v = GetGangVehicle(f, vehicleid);
				if(v != -1)
				{
					if(Info[playerid][pFMember] != f && FVINFO[f][v][fvLocked] == 0) // No es de la familia y está abierto. FVINFO[f][v][fvLocked] == 1 significa que está cerrado.
					{
					    ProxDetector(50.0, playerid, "* Alguien utiliza unas ganzúas, cruza los cables e intenta encender el motor.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new arranque = random(3)+1;
	    				if(arranque == 1 || arranque == 3)
						{
						    if(Info[playerid][pMaskuse] == 0)
							{
								format(string, sizeof(string), "* %s intentó arrancar el vehículo y lo logró.", GetPlayerNameEx(playerid));
								ProxDetector(3.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
							}
							else{ProxDetector(3.0, playerid, "Desconocido intentó arrancar el vehículo y lo logró.", COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);}
							SetTimerEx("SetVehicleEngine", 2000, 0, "dd",  vehicleid, playerid); // Se ejecuta el arranque del coche.
							GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
	    					SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
	    					Info[playerid][pGanzuas] -= 1;
	    					IntentarPuente[playerid] = 1;
	    					return SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
						}
						else
						{
						    if(Info[playerid][pMaskuse] == 0)
							{
							    format(string, sizeof(string), "* %s intentó arrancar el vehículo, pero falló.", GetPlayerNameEx(playerid));
								ProxDetector(3.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
							}
							else{ProxDetector(3.0, playerid, "Desconocido intentó arrancar el vehículo, pero falló.", 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);}
							GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
	    					SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
	    					Info[playerid][pGanzuas] -= 1;
	    					IntentarPuente[playerid] = 1;
	    					format(string, sizeof(string), "[INFO]:{FFFFFF} No has podido puntear el vehículo, te quedan %d ganzúas.", Info[playerid][pGanzuas]);
							SendClientMessageEx(playerid, COLOR_GREY, string);
	    					return SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
						}
					}
					else if(Info[playerid][pFMember] != f)
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] El vehículo tiene la alarma activada, no puedes robarlo.");
					}
					else
					{
				 		SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] No puedes realizar un puente al coche de tu familia. Usa /motor.");
					}
				}
			}
			if(IsALicCar(vehicleid))
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "[Aviso] Intentaste realizar un puente a un vehículo de la Autoescuela, las camaras te grabaron.");
			    Info[playerid][pWantedLevel] += 1; // Se le sube el nivel de búsqueda.
				SendRadioMessage(1, TEAM_BLUE_COLOR,  "[Radio de policía] {FFFFFF}(Oficial Martín) dice: Están intentando robar un vehículo de la Autoescuela, preciso de refuerzos.");
			    return 1;
			}
			if(VehiculoFaccionLegal(vehicleid) == true){return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] No está permitido realizar puentes a vehículos de facciones legales.");}
			if(VehiculoFaccionIlegal(vehicleid) == true){return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] No está permitido realizar puentes a vehículos de facciones ilegales.");}
			if(IsARentCar(vehicleid) || Vortex_Vehicle(vehicleid)) {return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR] No está permitido realizar puentes a vehículos de alquiler/especiales.");}
			if(IsAHarvest(vehicleid) || Taxi_Vehicle(vehicleid) || Bus_Vehicle(vehicleid) || Heladero_Vehicle(vehicleid) || IsAPizzabike(vehicleid) || IsATruckerCar(vehicleid)) {return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR] No está permitido realizar puentes a vehículos de trabajo.");}
			if(Entorno_Car(vehicleid))
			{
				//new v = GetPlayerVehicle(playerid, vehicleid);
				/*if(v != -1)
				{*/
					ProxDetector(20.0, playerid, "* Alguien utiliza unas ganzúas, cruza los cables e intenta encender el motor.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					new arranque = random(3)+1;
					if(arranque == 1 || arranque == 3)
					{
    					if(Info[playerid][pMaskuse] == 0)
						{
							format(string, sizeof(string), "* %s intentó arrancar el vehículo y lo logró.", GetPlayerNameEx(playerid));
							ProxDetector(20.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
						}
						else{ProxDetector(20.0, playerid, "Desconocido intentó arrancar el vehículo y lo logró.", COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);}
						SetTimerEx("SetVehicleEngine", 2000, 0, "dd",  vehicleid, playerid); // Se ejecuta el arranque del coche.
						GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
 						SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
 						TimerCochesPuente = SetTimerEx("ApagarMotorPuente", 300000, false, "dd", vehicleid, playerid); // Si consigue arrancar el motor de un coche puente, este se apagará.
  						IntentarPuente[playerid] = 1; // 300.000 - 5 Minutos. (60.000 por Minuto - 60*1000). Timer puesto en 5 minutos.
  						Info[playerid][pGanzuas] -= 1;
   						return SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
					}
					else
					{
						if(Info[playerid][pMaskuse] == 0)
						{
	    					format(string, sizeof(string), "* %s intentó arrancar el vehículo, pero falló.", GetPlayerNameEx(playerid));
							ProxDetector(20.0, playerid, string, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
						}
						else{ProxDetector(20.0, playerid, "Desconocido intentó arrancar el vehículo, pero falló.", 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);}
						GameTextForPlayer(playerid, "~w~Realizando puente...",2500,3);
						SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective );
						Info[playerid][pGanzuas] -= 1;
						IntentarPuente[playerid] = 1;
						format(string, sizeof(string), "[INFO]:{FFFFFF} No has podido puntear el vehículo, te quedan %d ganzúas.", Info[playerid][pGanzuas]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
						return SetTimerEx("IntentarPuenteTimer", 30000, false, "i", playerid);
					}
				/*}
				else SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] No es posible efectuar esta acción en estos momentos.");*/
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] No puedes usar el comando con el motor encendido.");
	/*}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR] Sólo mafias pueden utilizar el comando.");*/
	return 1;
}
zcmd(motor, playerid, params[]) // ACTUALIZADO: Privados, Familias, Renta y Facc.
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON)
		{
			SetVehicleEngine(vehicleid, playerid);
		}
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
			foreach(Player, i)
			{
			    gLastCar[playerid] = vehicleid;
      			new v = GetPlayerVehicle(i, vehicleid);
		    	if(v != -1)
				{
					if(i != playerid && i != Info[playerid][pVehicleKeysFrom]) // No es el propietario del coche, no tiene la llave.
					{
	      				SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] Este vehículo es privado, pero lo han dejado abierto. Puedes usar /puente para usarlo.");
					}
					else
					{
	      				SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
						SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
					}
				}
			}
			for(new f = 0; f < MAX_FAMILY; f++)
			{
		    	new v = GetPlayerVehicle(f, vehicleid);
				v = GetGangVehicle(f, vehicleid);
				if(v != -1)
				{
					if(Info[playerid][pFMember] == f)
					{
						SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
						SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
					}
					else if(Info[playerid][pFMember] != f && FVINFO[f][v][fvLocked] == 0) // No es de la familia y está abierto. FVINFO[f][v][fvLocked] == 1 significa que está cerrado.
					{
						SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] Este vehículo es de una familia, pero lo han dejado abierto. Puedes usar /puente para usarlo.");
					}
					return 1;
				}
			}
			if(IsARentCar(vehicleid))
			{
		    	if(IsaRent[playerid] == 1 && HireKey[playerid] == vehicleid)
		    	{
		    		SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
   				}
   				else
   				{
   			    	SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] Este vehículo es de renta, no dispones de sus llaves.");
   			    	RemovePlayerFromVehicle(playerid);
   				}
			}
			else if(Entorno_Car(vehicleid))
			{
                SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] No puedes arrancar el motor de este vehículo, necesitarás ganzúas.");
			}
			else if(VIP_Car(vehicleid) && Info[playerid][pVIP] != 0) // VIP VEHICULOS.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
			else if(Vortex_Vehicle(vehicleid) && Vortex[playerid]== 1) // Vehículo VORTEX.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
			else if(IsALicCar(vehicleid))
			{
				if(DrivingTest[playerid] == 1 || DrivingTest[playerid] == 2) // Está en la clase o inicio la primera vez. Lo podrá arancar entonces.
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
					return 1;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "No dispones de las llaves, solicitalas a un profesor de la Autoescuela.");
					return 1;
				}
			}
			// VEH FACCIÓN.
			else if (LSPD_Vehiculos(vehicleid) && Team_LSPD(playerid)) // FACC 1.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 100, 0, "dd",  vehicleid, playerid);
			}
			else if(FBI_Vehiculos(vehicleid) && Team_FBI(playerid)) // FACC 2.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 100, 0, "dd",  vehicleid, playerid);
			}
			else if(SAEM_Vehiculos(vehicleid) && Team_SAEM(playerid)) // FACC 3.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 100, 0, "dd",  vehicleid, playerid);
			}
			else if(SEC_Vehiculos(vehicleid) && Team_SAMD(playerid)) // FACC 4.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 100, 0, "dd",  vehicleid, playerid);
			}
            else if(LSTV_Vehiculos(vehicleid) && Team_LSTV(playerid)) // FACC 5.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(Mecanicos_Vehiculos(vehicleid) && Team_Mecanicos(playerid)) // FACC 6.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(Gobierno_Vehiculos(vehicleid) && Gobierno(playerid)) // Facc 7.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(IsAnHitmanCar(vehicleid) && Hitman(playerid)) // FACC 8.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(SistemaJudicialAuto(vehicleid) && Team_Judicial(playerid)) // FACC 9.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(IsAnGrooveCar(vehicleid) && Team_Groove(playerid)) // FACC 10.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(IsAnBallasCar(vehicleid) && Team_Ballas(playerid)) // FACC 11.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(IsAnLatinCar(vehicleid) && Team_Latin(playerid)) // FACC 12.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(IsAnSurCar(vehicleid) && Team_Sureno(playerid)) // FACC 13.
 			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
			else if(Rusos_Vehiculos(vehicleid) && Team_Rusa(playerid)) // FACC 14.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
			else if(LCN_Vehiculos(vehicleid) && Team_LCN(playerid)) // FACC 15.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            else if(Yakuza_Vehiculos(vehicleid) && Team_Yakuza(playerid)) // FACC 16.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
            /*else if(ALEPH_Vehiculos(vehicleid) && Team_ALEPH(playerid)) // FACC 17.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}*/
            else if(Santana_Vehiculos(vehicleid) && Team_Santana(playerid)) // FACC 18.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 5000, 0, "dd",  vehicleid, playerid);
			}
  	        /*else if(AlQaeda_Vehiculos(vehicleid) && Team_Alqaeda(playerid)) // FACC 19.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}*/
  	        else if(CDG_Vehiculos(vehicleid) && Team_CDG(playerid)) // FACC 20.
			{
                SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
				SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
			// VEH JOBS.
			else if(Aero_Vehicle(vehicleid)) // Piloto.
			{
		    	if(Info[playerid][pJob] == 16 || Info[playerid][pJob2] == 16)
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(Tren_Vehicle(vehicleid)) // Trenero.
			{
		    	if(Info[playerid][pJob] == 15 || Info[playerid][pJob2] == 15)
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "Iniciando el motor del tren, espere unos minutos...");
   					SetTimerEx("SetVehicleEngine", 5000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(Heladero_Vehicle(vehicleid)) // HELADERO.
			{
		    	if(Info[playerid][pJob] == 14 || Info[playerid][pJob2] == 14)
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(Jardinero_Vehicle(vehicleid)) // JARDINERO.
			{
		    	if(Info[playerid][pJob] == 13 || Info[playerid][pJob2] == 13)
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(Bus_Vehicle(vehicleid)) // CHÓFER.
			{
		    	if(Info[playerid][pJob] == 3 || Info[playerid][pJob2] == 3)
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(IsAPizzabike(vehicleid))
			{
		    	if(Info[playerid][pJob] == 4 || Info[playerid][pJob2] == 4) // PIZZERRO.
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(Taxi_Vehicle(vehicleid))
			{
		    	if(Info[playerid][pJob] == 8 || Info[playerid][pJob2] == 8) // TAXISTA.
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(IsAHarvest(vehicleid))
			{
		    	if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9) // GRANJERO.
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
			else if(IsATruckerCar(vehicleid))
			{
		    	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6) // CAMIONERO.
				{
					SendClientMessageEx(playerid, COLOR_BLUE, "El Motor del vehículo se está prendiendo, por favor espera.");
					SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
				}
			}
		}
	}
	return 1;
}
CMD:v(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /v (nombre)");
		SendClientMessageEx(playerid, COLOR_WHITE, "Nombres: estado, luces, maletero, capo");
		return 1;
	}
	else if(strcmp(params, "luces", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
		SetVehicleLights(vehicleid, playerid);
	}
	else if(strcmp(params, "capo", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			SetVehicleHood(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
				}
				SetVehicleHood(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "maletero", true) == 0)
  	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			SetVehicleTrunk(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
				}
				SetVehicleTrunk(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "estado", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[15],lightstatus[15], string[128];
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
			if(engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "Apagado");
			else format(enginestatus, sizeof(enginestatus), "Prendido");
			if(lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "Apagadas");
			else format(lightstatus, sizeof(lightstatus), "Prendidas");
			format(string, sizeof(string), "Motor: %s | Luces: %s | Gasolina: %d",enginestatus,lightstatus,VehicleFuel[vehicleid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}


CMD:llenar(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_WHITE, "Es necesario apagar el motor antes de llenar el tanque ({5ABAFF}pulsa [N]{FFFFFF}).");
	    if(!IsAtGasStation(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No estás en la gasolineria.");
	    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
	    if(VehicleFuel[vehicleid] >= 200) return SendClientMessageEx(playerid, COLOR_RED, "El tanque de gasolina de este vehiculo está lleno.");
	    if(RefuelingVehicle[playerid] == 1) return SendClientMessageEx(playerid, COLOR_RED, "Se está recargando el tanque de tu vehículo.");
       	SendClientMessageEx(playerid, COLOR_WHITE, "Recargando tanque de tu vehiculo, no bajes del vehiculo y por favor espera.");
       	RefuelingVehicle[playerid] = 1;
       	RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 1000, true, "i", playerid);
	}
	return 1;
}
zcmd(amotor, playerid, params[])
{
	if(Info[playerid][pAdminZC] != 6000) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new engine,lights,alarm,doors,bonnet,boot,objective;
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si estás en este tipo de vehiculos.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON)
		{
		    SendClientMessageEx(playerid, COLOR_RED, "[ADM] El motor del vehículo ha sido apagado correctamente.");
			SetVehicleEngine(vehicleid, playerid);
		}
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
			SendClientMessageEx(playerid, COLOR_RED, "[ADM] El motor del vehículo ha sido encendido correctamente.");
			SetVehicleEngine(vehicleid, playerid);
		}
	}
	return 1;
}
CMD:darauto(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new string[128], giveplayerid, modelid, color1, color2, invoicenum[32];
	if(sscanf(params, "dddds", giveplayerid, modelid, color1, color2, invoicenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darauto (playerID) (modeloID) (color 1) (color 2) (precio)");
	if(Info[playerid][pAdminZC] != 6000) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "   Numero de color no debe ser menor de 0 o mayor que 126."); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "   Numero de color 2 no debe ser menor de 0 o mayor que 126.SetMinigunActive."); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_WHITE, "   Id del vehiculo debe ser del 400 al 611."); return 1; }
	new playervehicleid = GetPlayerFreeVehicleId(giveplayerid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} El jugador no puede tener más coches.");
    if(carsforplayer[giveplayerid] == 4) return SendClientMessageEx(playerid,COLOR_WHITE,"* El jugador sólo puede tener 4 coches spawneados y 4 guardados.");
	new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
    new Float:Angle;
    GetPlayerFacingAngle(giveplayerid,Angle);
    new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
    if(car == INVALID_PLAYER_VEHICLE_ID)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Algo salió mal y el coche no se creó.");
	}
    else
    {
	    format(string, sizeof(string), "{A2DC35}[CREARAUTO]:{FFFFFF} %s creó [M-%d C1-%d C2-%d] - Factura por %s a %s", GetPlayerNameEx(playerid), modelid, color1, color2, invoicenum, GetPlayerNameEx(giveplayerid));
	    SendClientMessageEx(playerid, COLOR_GRAD1, string);
	    Log("LOGS/shoplog.log", string);
    }
    return 1;
}
CMD:estacionar(playerid, params[])
{
	if(Info[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
		new ownerid = Info[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = Info[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu debes ser el conductor.");
				new Float:x, Float:y, Float:z, Float:angle, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				PlayerVehicleInfo[ownerid][d][pvHealth] = health;
				if(Info[playerid][pLockCar] == GetPlayerVehicleID(playerid)) Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
				GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
				GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
				SurfingCheck(GetPlayerVehicleID(playerid));
				UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			 	SetPlayerArmedWeapon(playerid, 0);
			 	//LoadAllPlayerVehicleMods(playerid);
				new string[29 + (MAX_PLAYER_NAME * 2)];
				format(string, sizeof(string), "* %s ha estacionado el vehiculo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(ownerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                fVehSpeed[playerid] = 0.0;
				return 1;
			}
		}
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu debes ser el conductor.");
			new Float:x, Float:y, Float:z, Float:angle, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
			PlayerVehicleInfo[playerid][d][pvHealth] = health;
			if(Info[playerid][pLockCar] == GetPlayerVehicleID(playerid)) Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			UpdatePlayerVehicleParkPosition(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], 0);
			SetPlayerArmedWeapon(playerid, 0);
			LoadAllPlayerVehicleMods(playerid);
			new string[30 + (MAX_PLAYER_NAME * 2)];
			format(string, sizeof(string), "* %s ha estacionado su vehiculo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            fVehSpeed[playerid] = 0.0;
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "Tu necesitas estar dentro de tu vehiculo para hacer esto.");
	return 1;
}

CMD:desguazar(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid,35.0,-72.8083, -1579.2710, 1.6217)) return SendClientMessage(playerid,COLOR_WHITE,"No estás en el desguaze de vehículos a las afueras, en el peaje entre Los Santos y San Fierro.");
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "El uso de este comando {9c2828}borrará completamente{FFFFFF} el vehículo y no habrá reembolso");
		SendClientMessageEx(playerid, COLOR_WHITE, "Si estás seguro de que deseas eliminar tu vehículo, por favor re-escriba el comando {9c2828}/DESGUAZAR.");
	}
	else
	{
		DeletePVar(playerid, "dcConfirm");
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
			{
			    carsforplayer[playerid]--;
				DestroyVehicle(PlayerVehicleInfo[playerid][d][pvId]);
				PlayerVehicleInfo[playerid][d][pvId] = 0;
                PlayerVehicleInfo[playerid][d][pvModelId] = 0;
				PlayerVehicleInfo[playerid][d][pvPosX] = 0.0;
				PlayerVehicleInfo[playerid][d][pvPosY] = 0.0;
				PlayerVehicleInfo[playerid][d][pvPosZ] = 0.0;
				PlayerVehicleInfo[playerid][d][pvPosAngle] = 0.0;
				PlayerVehicleInfo[playerid][d][pvLock] = 0;
				PlayerVehicleInfo[playerid][d][pvLocked] = 0;
				PlayerVehicleInfo[playerid][d][pvPaintJob] = -1;
				PlayerVehicleInfo[playerid][d][pvColor1] = 0;
				PlayerVehicleInfo[playerid][d][pvColor2] = 0;
				PlayerVehicleInfo[playerid][d][pvPrice] = 0;
				PlayerVehicleInfo[playerid][d][pvImpounded] = 0;
				strcpy(PlayerVehicleInfo[playerid][d][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
				PlayerVehicleInfo[playerid][d][pvPark] = 0;
				PlayerVehicleInfo[playerid][d][pvAllowedPlayerId] = INVALID_PLAYER_ID;
				for(new m = 0; m < MAX_MODS; m++)
				{
					PlayerVehicleInfo[playerid][d][pvMods][m] = 0;
				}
				PlayerCars--;
				SendClientMessageEx(playerid, COLOR_WHITE, "Su vehículo ha sido borrado.");
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, " Tienes que estar dentro de tu vehiculo.");
 }

	return 1;
}

CMD:verllaves(playerid, params[])
{
    if(IsACop(playerid))
    {
        new string[128], giveplayerid;
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /verllaves (jugador)");

   		if(IsPlayerConnected(giveplayerid))
    	{
	        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** Coches de %s  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        for(new i=0; i<MAX_PLAYERVEHICLES; i++)
         	{
			    if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
    				format(string, sizeof(string), "Registro del Coche: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded])
				{
    				format(string, sizeof(string), "Registro del Coche: Anulado (No Disponible) | Modelo:{A2DC35} %s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
	    	}
	    	SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
   		}
    }
	return 1;
}

CMD:vcoche(playerid, params[])
{
    if(IsACop(playerid))
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, carbeingtowed);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",carbeingtowed,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, carbeingtowed);
                if(v != -1)
                {
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF}.",carbeingtowed,GetVehicleName(FVINFO[f][v][fvId]),fINFO[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie.");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, closestcar);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF} | Multa: {A2DC35}$%d{FFFFFF}.",closestcar,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, closestcar);
                if(v != -1)
				{
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Registro Vehicular: {A2DC35}%d{FFFFFF} | Modelo: {A2DC35}%s{FFFFFF} | Dueño: {A2DC35}%s{FFFFFF}.",closestcar,GetVehicleName(FVINFO[f][v][fvId]),fINFO[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie.");
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No estás cerca de un vehículo.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
    }
    return 1;
}

CMD:embargar(playerid, params[])
{
	switch(Info[playerid][pMember])
	{
		case 1:
		{
			if(!IsAtImpoundingPoint(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás cerca del punto de incautación, no puedes confiscar!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed))
				{
					return SendClientMessageEx(playerid, COLOR_WHITE, "El vehículo en el remolque se ha desenganchado y por lo tanto no puede ser confiscado.");
				}
				foreach(Player, i)
				{
					iVehIndex = GetPlayerVehicle(i, iVehTowed);
					if(iVehIndex != -1)
					{
						iVehType = 1;
						iTargetOwner = i;
						break;
					}
				}
				if(!iVehType)
				{
					for(new i; i < MAX_FAMILY; ++i)
					{
						iVehIndex = GetGangVehicle(i, iVehTowed);
						if(iVehIndex != -1)
						{
							iVehType = 2;
							iTargetOwner = i;
							break;
						}
					}
				}
				switch(iVehType)
				{
					case 0, 2:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No se pudo encontrar ningún tipo de registro en el vehículo y se ha devuelto.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0);
						SetVehicleToRespawn(iVehTowed);
					}
					case 1:
					{
					    if(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket] <= 1000) return SendClientMessageEx(playerid, COLOR_WHITE, "Para embargar un vehiculo es necesario que este mismo tenga mínimo 2 multas.");
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						DestroyVehicle(iVehTowed);
						//new szMessage[128];
						format(szMessage, sizeof(szMessage),"* Has confiscado el vehiculo de %s - Modelo %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "Su %s ha sido confiscado. Es posible que lo pueda sacar pagando la multa en SAPD.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "HQ: %s ha confiscado el vehiculo de %s - Modelo %s (No pagó $%i de multa).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400], PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket]);
						SendRadioMessage(Info[playerid][pMember], TEAM_RADIO_COLOR, szMessage);
						carsforplayer[iTargetOwner]--;
						--PlayerCars;
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:pagarm(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 240.4770,112.7777,1003.2188) || IsPlayerInRangeOfPoint(playerid, 3.0, 358.236083,182.073394,1008.382812))
	{ // Map de LSPD y DGT respectivamente.

	    if(Info[playerid][pCarLic] == 0)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[MULTA]:{FFFFFF} Una licencia de conducir válida es necesaria para liberar su vehículo del depósito municipal.");
	        return 1;
	    }

		new
			vstring[1024],
			iCount;

		for(new i; i < MAX_PLAYERVEHICLES; i++)
		{
		    if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 10000;

			if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			{
				if(PlayerVehicleInfo[playerid][i][pvTicket])
				{
					format(vstring, sizeof(vstring), "%s\n%s (Multa - $%i)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket]);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
    		else if(PlayerVehicleInfo[playerid][i][pvImpounded])
			{
				format(vstring, sizeof(vstring), "%s\n%s (Multa - $%i) (Embargado - $%i Liberación)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket],(PlayerVehicleInfo[playerid][i][pvPrice] / 10) + PlayerVehicleInfo[playerid][i][pvTicket] + (Info[playerid][pLevel] * 1000));
				++iCount;
			}
			else format(vstring, sizeof(vstring), "%s\nNada", vstring);
		}
		if(iCount)
		{
			SafeDialogEx(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "{00F70C}Vehiculos", vstring, "Liberar", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes multas para pagar o vehículos para ser liberados.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Las multas pueden ser pagadas en la DGT, Dirección General de Tráfico.");
	return 1;
}

CMD:enganchar(playerid, params[])
{
 	if(IsACop(playerid))
	 {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid);

       			if(GetDistancePlayerVeh(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
				   {
					foreach(Player, i)
					{
						if(GetPlayerVehicle(i, closestcar) != -1)
						{
						    if(ProxDetectorS(30.0,playerid,i))
								SendClientMessageEx(i, COLOR_LIGHTBLUE, "Alguien está tratando de remolcar tu vehículo!");

							arr_Towing[playerid] = closestcar;
						    SendClientMessageEx(playerid, COLOR_WHITE, "Este coche está disponible para embargar.");
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo no tiene ningún registro, está disponible para embargar");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes remolcar en este tipo de vehículo.");
   		}
     	else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Tienes que estar en un coche.");
	}
   	else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
	return 1;
}

CMD:desenganchar(playerid, params[])
{
 	if(IsACop(playerid))
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessageEx(playerid, COLOR_WHITE,"Has desenganchado el vehículo que traías.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessageEx(playerid, COLOR_WHITE,"Aún no has enganchado nada.");
        }
  	}
   	else
	{
 		SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
	}
	return 1;
}

CMD:dejarmulta(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dejarmulta (Registro Vehicular)");

		if(Info[playerid][pRank] < 2)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 2 y superiores pueden dejar multas!");
			return 1;
		}
        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
                        if(PlayerVehicleInfo[i][v][pvTicket] >= 3000) return SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo ya excedio el máximo de multas, se debe embargar.");
						new string[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvTicket] += 1000;
                        //Info[playerid][pTicketTime] = 60;
                        format(string, sizeof(string), "Dejaste una multa de $1000 en el coche de %s, modelo %s.",GetPlayerNameEx(i),GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
                        SendClientMessageEx(playerid, COLOR_WHITE, string);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes dejar multas a vehículos sin propietario, llevalos al depósito.");
                        return 1;
                    }
                }
                SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no tiene ningún registro.");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de dicho vehículo.");
        }
    }
    return 1;
}

CMD:lock(playerid, params[])
{
   	if(Info[playerid][pLock] == 1)
	{
 		if(IsPlayerInAnyVehicle(playerid))
   		{
			if(Info[playerid][pLockCar] != GetPlayerVehicleID(playerid) && Info[playerid][pLockCar] != INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un bloqueo para este vehículo, compralo en el 24/7.");
   			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No es posible cerrar los vehículos con pasajeros.");
			if(GetCarDealershipVehicleId(GetPlayerVehicleID(playerid)) != -1) return SendClientMessageEx(playerid, COLOR_WHITE, "No se puede bloquear los vehículos de Concesionario.");
   			if(Info[playerid][pLockCar] == INVALID_VEHICLE_ID) Info[playerid][pLockCar] = GetPlayerVehicleID(playerid);
      		if(LockStatus[GetPlayerVehicleID(playerid)] == 0)
        	{
				LockStatus[GetPlayerVehicleID(playerid)] = 1;
    			GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
       			PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
          		vehicle_lock_doors(Info[playerid][pLockCar]);
      		}
        	else
	        {
				LockStatus[GetPlayerVehicleID(playerid)] = 0;
   				vehicle_unlock_doors(Info[playerid][pLockCar]);
      			GameTextForPlayer(playerid, "~g~abierto", 1000, 6);
        		PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
 	        }
   		}
	    else
	    {
     		new Float: x, Float: y, Float: z;
       		GetVehiclePos(Info[playerid][pLockCar], x, y, z);
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z))
        	{
         		if(LockStatus[Info[playerid][pLockCar]] == 0)
           		{
    				LockStatus[Info[playerid][pLockCar]] = 1;
            		vehicle_lock_doors(Info[playerid][pLockCar]);
            		GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
	            	PlayerPlaySoundEx(1145, x, y, z);
 	            }
 	            else
 	            {
					LockStatus[Info[playerid][pLockCar]] = 0;
	            	vehicle_unlock_doors(Info[playerid][pLockCar]);
	            	GameTextForPlayer(playerid, "~g~abierto", 1000, 6);
	            	PlayerPlaySoundEx(1145, x, y, z);
          		}
   	        }
   	        else
   	        {
            	SendClientMessageEx(playerid, COLOR_WHITE, "Primero echale seguro desde adentro del vehiculo.");
	            return 1;
   	        }
       	}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, " Usted no ha comprado seguridad para su auto.");
		return 1;
 	}
	return 1;
}

CMD:seguro(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(Info[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = Info[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = Info[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
                if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
                        PlayerPlaySoundEx(1145, x, y, z);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
                        PlayerPlaySoundEx(1145, x, y, z);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
						return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, " Usted no tiene un sistema de bloqueo instalado en el vehículo.");
                    return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
                PlayerPlaySoundEx(1145, x, y, z);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
                PlayerPlaySoundEx(1145, x, y, z);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;

            }
            SendClientMessageEx(playerid, COLOR_WHITE, " Usted no tiene un sistema de bloqueo instalado en el vehículo.");
            return 1;
        }
    }
    SendClientMessageEx(playerid, COLOR_WHITE, " Debes de estar cerca de un coche tuyo.");
    return 1;
}

CMD:recargarautos(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 4)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        return 1;
    }
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /recargarautos (playerid)");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(string, sizeof(string), " Recargaste los vehiculos de %s.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GREY, string);

	return 1;
}

CMD:eliminarauto(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new string[128], giveplayerid, vehicleid;
	if(sscanf(params, "dd", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /eliminarauto (playerid) (vehiculoid)");
	format(string, sizeof(string), "%s ha destruido el auto %s de %s.", GetPlayerNameEx(playerid), GetVehicleName(vehicleid), GetPlayerNameEx(giveplayerid));
	Log("LOGS/playervehicle.log", string);
	new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El jugador no tiene ese vehículo.");
	DestroyPlayerVehicle(giveplayerid, playervehicleid);
	return 1;
}

CMD:quitarllave(playerid, params[])
{
    new vstring[512], iValidVehicles;
	for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	{
	    if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
			format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]), GetPlayerNameEx(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId])), ++iValidVehicles;

        else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
            format(vstring, sizeof(vstring), "%s\n%s (Embargado)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

        else
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
	}
	if(iValidVehicles != 0)
	{
		SafeDialogEx(playerid, REMOVEKEYS, DIALOG_STYLE_LIST, "{00F70C}Por favor selecciona un vehiculo.", vstring, "Quitar", "Cancelar");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Usted no tiene ninguna llave para quitar.");
	}
	return 1;
}
CMD:casco(playerid, params[])
{
	if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora !");
    SafeDialogEx(playerid,CASCO_DIALOG,DIALOG_STYLE_LIST,"Sistema de /casco - /cinturon","Ponerse casco\nQuitarse casco","Aceptar","Cerrar"); //showing dialog.
    return 1;
}
zcmd(vermapa, playerid, params[]){
        if(!MapaInteres(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡No estás delante de un mapa de la ciudad!");
        if(IsPlayerConnected(playerid))
        {
            new MAP[360];
   	    	strcat(MAP,"Concesionario Grotti\nBanco Central\nHospital General\nAyuntamiento de los Santos\n24/7 Unity\n24/7 Centro\nDiscoteca Alhambra\nPizzeria Idlewood\nTienda de Electronica\nPiscina Municipal\nOficinas del Gobierno\n");
    	    strcat(MAP,"Restaurante\nBiblioteca\nFuneraria\nJuzgados\nTaller Mecánico\nCentro Social\nUniversidad\nDGT - Tráfico\nLavanderia");
            SafeDialogEx(playerid, MAPINTERES, DIALOG_STYLE_LIST, "{FFFFFF}Mapa de{088A4B} Los Santos",MAP, "Ok", "Cancelar");
		}
		else SendClientMessage(playerid, 0xFFFF00FF, "No estás conectado.");
		return 1;
	}
/*CMD:gps(playerid, params[])
{
	new vstring[1024];
	for(new i; i < MAX_PLAYERVEHICLES; i++)
	{
		if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
		{
			format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvId]);
		}
		else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
		{
			format(vstring, sizeof(vstring), "%s\n%s (Embargado)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
		}
	}
	SafeDialogEx(playerid, TRACKCAR, DIALOG_STYLE_LIST, "{00F70C}GPS - Llaves", vstring, "Buscar", "Salir");
	return 1;
}*/
CMD:gps(playerid, params[])
{
	SafeDialogEx(playerid, GPSX, DIALOG_STYLE_LIST, "{00F70C}GPS", "{FFFFFF}Buscar {8181F7}[Vehículos]\n{FFFFFF}Buscar {8181F7}[Propiedades]\n{FFFFFF}Buscar {8181F7}[Ubicaciones]\n{FFFFFF}Buscar {8181F7}[Trabajos]", "Buscar", "Salir");
	return 1;
}
CMD:darllave(playerid, params[])
{
	new
		giveplayerid;

    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darllave (id)");
    if(IsPlayerConnected(giveplayerid))
	{
        if(playerid == giveplayerid) return 1;
        if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
            new
				iValidVehicles,
				vstring[512];

			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]), ++iValidVehicles;

				else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (Embargado)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else
					format(vstring, sizeof(vstring), "%s\nVacío", vstring);
			}
            if(iValidVehicles != 0)
			{
                GiveKeysTo[playerid] = giveplayerid;
                SafeDialogEx(playerid, GIVEKEYS, DIALOG_STYLE_LIST, "{00F70C}Por favor, selecciona un vehículo.", vstring, "Dar llaves", "Cancelar");
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ningún vehículo para que puedas dar llaves.");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás lo suficientemente cerca de ese jugador.");
        }
    }
    return 1;
}

CMD:vendermicoche(playerid, params[])
{
    new string[128], giveplayerid, price;
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(Info[playerid][pLevel] == 1)
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser nivel 2 o más para poder vender vehículos.");
                return 1;
            }
            if(health < 500) return SendClientMessageEx(playerid, COLOR_WHITE, " El vehiculo está muy dañado para ser vendido.");

			if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendermicoche (id) (precio)");

            if(price < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Precio debe ser mayor a 0.");
            if(Info[giveplayerid][pLevel] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador tiene que ser nivel 2 o más para que puedas venderle vehiculos.");
            if(playerid == giveplayerid)
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes venderte el auto a ti mismo.");
                return 1;
            }
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está conectado al servidor.");
            if (ProxDetectorS(8.0, playerid, giveplayerid))
		 	{
                VehicleOffer[giveplayerid] = playerid;
                VehicleId[giveplayerid] = d;
                VehiclePrice[giveplayerid] = price;
                format(string, sizeof(string), "* Ofreciste a %s para comprar este %s por $%d.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "* %s te ha ofrecidor su %s por $%d, (usa /aceptar coche).", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " Tu necesitas estar dentro de un vehiculo que te pertenece.");
    return 1;
}

CMD:checkllaves(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 2)
    {
        new vstring[1024],giveplayerid,stext[11];
        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /checkllaves (Jugador)");
		if(IsPlayerConnected(giveplayerid))
		{
			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
   	    		switch(PlayerVehicleInfo[giveplayerid][i][pvSpawned])
	    		{
	        		case 0: stext = "Despawned";
	        		case 1: stext = "Spawned";
	    		}
    			if(PlayerVehicleInfo[giveplayerid][i][pvModelId] != 0)
					format(vstring, sizeof(vstring), "%s\n%s - (%s)", vstring, VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400], stext);
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (Embargado) (%s)", vstring, VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400], stext);
				else
					format(vstring, sizeof(vstring), "%s\nVacío", vstring);
			}
		    SafeDialogEx(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "{00F70C}Teleportar a Coche", vstring, "Ir", "Cancelar");
       		SetPVarInt(playerid, "playeraffectedcarTP", giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "ID no válida.");
  	}
	return 1;
}

CMD:respawncars(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 4)
	{
		new string[128], radius;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /respawncars (Radio)");

		if(radius < 1 || radius > 40)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} El radio debe ser de 1 a 40.");
			return 1;
		}
		RespawnNearbyVehicles(playerid, radius);
		format(string, sizeof(string), "Usted ha respawneado los vehículos dentro del radio de %d.", radius);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:respawnauto(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 4)
	{
		new string[128], carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /respawnauto (carid)");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "Coche ID %d - Respawneado.", carid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
	}
	return 1;
}

CMD:colorcoche(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en un vehiculo.");
	}

	else if(Info[playerid][pSpraycan] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes un spray.");
	}

	new iVeh = GetPlayerVehicleID(playerid);
	if(VehiculoFaccionLegal(iVeh) == true){return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso] Los coches de facciones LEGALES no pueden ser modificados bajo ningún concepto.");}
	if(VehiculoFaccionIlegal(iVeh) == true){return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso] Los coches de facciones ILEGALES no pueden ser modificados bajo ningún concepto.");}
	if(Vortex_Vehicle (iVeh) || Taxi_Vehicle(iVeh) || Bus_Vehicle(iVeh) || Heladero_Vehicle(iVeh) || IsAPizzabike(iVeh) || VIP_Car(iVeh)) {return SendClientMessageEx(playerid, COLOR_GREY, "[Aviso] No está permitido la modificación de vehículos públicos.");}
	new iColors[2], iPlayerVeh;
	if(sscanf(params, "ii", iColors[0], iColors[1]))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /colorcoche (ID 1) (ID 2), Color debe ser una ID.");
	}
	else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Color Inválido (ID comienza en 0, y el final es 255).");
	}
	foreach(Player, i)
	{
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1)
		{
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvColor1] = iColors[0], PlayerVehicleInfo[playerid][iPlayerVeh][pvColor2] = iColors[1];
			else return SendClientMessageEx(playerid,COLOR_WHITE,"No se puede pintar los vehículos de otras personas.");
		}
	}

	//new szMessage[60];
	format(szMessage, sizeof(szMessage), "Cambiaste el color del vehiculo. - ID %d, %d.", iColors[0], iColors[1]);
	SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
	return ChangeVehicleColor(iVeh, iColors[0], iColors[1]);
}

CMD:pintarcoche(playerid, params[])
{
	if(isnull(params))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /pintarcoche (0-6) (3 para remover la pintura).");
	}
	else if(!IsPlayerInAnyVehicle(playerid))
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	}
    else if(Info[playerid][pSpraycan] == 0)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un spray.");
	}

	new
		iVeh = GetPlayerVehicleID(playerid),
		iPaintID = strval(params),
		iPlayerVeh;

	if(LSPD_Vehiculos(iVeh)||Taxi_Vehicle(iVeh)||SEC_Vehiculos(iVeh)||Mecanicos_Vehiculos(iVeh)||LSTV_Vehiculos(iVeh)||FBI_Vehiculos(iVeh) ||IsAPizzabike(iVeh)||Gobierno_Vehiculos(iVeh)||SAEM_Vehiculos(iVeh)) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes pintar vehículos facción.");
	}
	else if(!(0 <= iPaintID <= 6)){
		return SendClientMessageEx(playerid, COLOR_WHITE, "Pintura debe ser del ID 0 al 6.");
	}
	foreach(Player, i) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvPaintJob] = iPaintID;
			else return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes pintar coches de otras personas.");
		}
	}

	ChangeVehiclePaintjob(iVeh, iPaintID);
	return SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la pintura de tu vehiculo..");
}
CMD:remolcar(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new Float:vX,Float:vY,Float:vZ,Found=0,vid=0,idcar = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(idcar) == 525)
		{
			new Float:pX,Float:pY,Float:pR;
				GetPlayerPos(playerid,pX,pY,pR);

			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pR-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
		   				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
			   		else
			   		{
		   				AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					}
				}
			}
			if(!Found)
			{
				SendClientMessageEx(playerid,COLOR_WHITE,"No hay ningún vehículo cerca.");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes remolcar con este vehículo.");
	}
	return 1;
}

CMD:nitro(playerid, params[])
{
    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica.");
    if(Team_Mecanicos(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            if( ! IsPlayerInInvalidNosVehicle( playerid ) )
			{
                new string[128];
                AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
   				new Float: soPos[3];
				GetVehiclePos(GetPlayerVehicleID(playerid), soPos[0], soPos[1], soPos[2]);
				PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
                format(string, sizeof(string), "* %s instala óxido de nitrógeno al vehiculo.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
            }
            else {
                SendClientMessageEx(playerid, COLOR_WHITE, "Óxido de nitrógeno no se puede instalar en este vehículo.");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecanico." );
    }
    return 1;
}

CMD:qmod(playerid, params[])
{
	new modList[512], string[128];
	new count = 0;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			for(new f = 0 ; f < MAX_MODS; f++)
			{
				if (GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0)
				{
					if (f != 9 && f != 7 && f != 8)
					{
						format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
					}
					else
					{
					    format(modList, sizeof(modList), "%s\n%s", modList, partType(f));
					}
     				format(string, sizeof(string), "partList%d", count);
					SetPVarInt(playerid, string, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
					count++;
				}
			}
			if (count == 0)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Este vehiculo no tiene ninguna modificación.");
			    return 1;
			}
		    format(modList, sizeof(modList), "%s\nTodo", modList);
		    format(string, sizeof(string), "partList%d", count);
		    SetPVarInt(playerid, string, 999);
		    count++;
		    SetPVarInt(playerid, "modCount", count);
		    SafeDialogEx(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "{00F70C}Partes", modList, "Ok", "Cancelar");
		    return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " Necesitas estar en un vehiculo tuyo.");
 	return 1;
}

CMD:hyd(playerid, params[])
{
    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica.");
    if(Team_Mecanicos(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            if( ! IsPlayerInInvalidNosVehicle( playerid ) )
			{
                new string[128],
   					Float: soPos[3];
				GetVehiclePos(GetPlayerVehicleID(playerid), soPos[0], soPos[1], soPos[2]);
				PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
                AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
                format(string, sizeof(string), "* %s añade suspensión hidráulica al vehiculo.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else {
                SendClientMessageEx( playerid, COLOR_WHITE, "suspensión Hidráulica no se puede instalar en este vehículo." );
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecanico." );
    }
    return 1;
}
CMD:gmaletero(playerid, params[])
{
    if(manubrio[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes guardar este arma mientras la estas dando.");
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en el paintball.");
 	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un evento.");
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto mientras estar en el interior del vehículo!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ahora mismo.");
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gmaletero (arma) (slot)");
		SendClientMessageEx(playerid, COLOR_WHITE, "Nombre de armas: sdpistol, deagle, shotgun, spas12, mp5, ak47, uzi, m4, rifle, sniper.");
		return 1;
	}
	new pvid = -1, Float: x, Float: y, Float: z;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			pvid = d;
			break;
		}
	}
	if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No estás cerca de un vehículo que sea tuyo.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "{FFFF00}[ERROR]:{FFFFFF} No se puede poner armas en el interior del maletero si está cerrado (/v maletero para abrirlo.");
	if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} Este coche no tiene maletero.");

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
		return 1;
	}

	new maxslots = PlayerVehicleInfo[playerid][pvid][pvWepUpgrade]+1;
	if(slot > maxslots)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Slot Inválido. [/gunlocker]");
		return 1;
	}
	if( PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Tienes armas guardadas en ese slot.");
		return 1;
	}
	new weapon;
	if(strcmp(weaponchoice, "pistol", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 23)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una pistola SD en tu maletero.");
			weapon = Info[playerid][pWeapons][2];
			format(string,sizeof(string), "* %s guarda un pistola SD en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 24)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un Desert Eagle en tu maletero.");
			weapon = Info[playerid][pWeapons][2];
			format(string,sizeof(string), "* %s guarda una Desert Eagle en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shot-gun", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un Shotgun en tu maletero.");
			weapon = Info[playerid][pWeapons][3];
			format(string,sizeof(string), "* %s guarda un Shotgun en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spass12", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 27)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una CombatShotgun en tu maletero.");
			weapon = Info[playerid][pWeapons][3];
			format(string,sizeof(string), "* %s guarda una Combat Shotgun en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][4] == 29)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un MP5 en tu maletero.");
			weapon = Info[playerid][pWeapons][4];
			format(string,sizeof(string), "* %s guarda un MP5 en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 30)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una AK-47 en tu maletero.");
			weapon = Info[playerid][pWeapons][5];
			format(string,sizeof(string), "* %s guarda una AK-47 en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "Uzi", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 28)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una Uzi en tu maletero.");
			weapon = Info[playerid][pWeapons][5];
			format(string,sizeof(string), "* %s guarda una Uzi en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 31)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado una M4 en tu maletero.");
			weapon = Info[playerid][pWeapons][5];
			format(string,sizeof(string), "* %s guarda una M4 en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "riflefraco", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 33)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un rifle en tu maletero.");
			weapon = Info[playerid][pWeapons][6];
			format(string,sizeof(string), "* %s guarda un rifle en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 34)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Has guardado un sniper en tu maletero.");
			weapon = Info[playerid][pWeapons][6];
			format(string,sizeof(string), "* %s guarda un sniper en su maletero.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma");
	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] == 0)
	{
		PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		return 1;
	}
	else { SendClientMessageEx(playerid,COLOR_GREY,"   Nombre inválido!"); return 1; }
}

CMD:smaletero(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto mientras estás dentro de un vehículo.");
	else if(GetPVarInt(playerid, "IsInArena") == 1) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en el paintball.");
	}
	else if(GetPVarInt( playerid, "EventToken") != 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estás en un evento.");
	}
	else if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0)
	{
		return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando ya que tienes restricción de armas.");
	}
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1) {

		/*new
			szMessage[59];*/

		format(szMessage, sizeof(szMessage), "   Necesitas esperar {FF0000}%d{FFFFFF} segundos después de haber agarrado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	}

	new
		Float: fVehPos[3],
		iWeaponSlot = strval(params);

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(isnull(params)) {

					/*new
						szMessage[64];*/

					format(szMessage, sizeof(szMessage), "*** %s - %s ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {

						new
							szWeapon[16];

						GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
						format(szMessage, sizeof(szMessage), "Ranura %d: %s", s+1, szWeapon);
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					}
					return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /smaletero (slot)");
				}
				else if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509) {
					return SendClientMessageEx(playerid,COLOR_WHITE,"Ese vehiculo no tiene maletero.");
				}
				new
					engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);

				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
				{
					return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes tomar armas del maletero, si está cerrado {5ABAFF}/v maletero{FFFFFF} para abrirlo.");
				}
				else if(iWeaponSlot > PlayerVehicleInfo[playerid][d][pvWepUpgrade] + 1)
				{
					return SendClientMessageEx(playerid, COLOR_WHITE, "Ranura específicada Inválida {5ABAFF}/gunlocker{FFFFFF}.");
				}
				else if(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] != 0) {
					/*new
						szMessage[128];*/

					GivePlayerValidWeapon(playerid, PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1]);
					PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] = 0;
					format(szMessage, sizeof(szMessage), "Retiraste un %s del maletero de tu coche.", WeaponNames[PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1]]);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					format(szMessage, sizeof(szMessage), "* %s ha retirado un %s del maletero de su coche.", GetPlayerNameEx(playerid), WeaponNames[PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1]]);
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma almacenada en esa ranura.");
			}
		}
	}
	return SendClientMessageEx(playerid,COLOR_WHITE,"No estás cerca de un vehiculo tuyo.");
}

CMD:servicios(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /servicio (nombre)");
		SendClientMessageEx(playerid, COLOR_WHITE, "Nombres Disponibles: Taxi, Mecanico, Medico (Llamar a un médico), Medicos");
		return 1;
	}
	if(Info[playerid][pJailed] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto en prisión.");
		return 1;
	}
	if(Info[playerid][pServiceTime] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas esperar 30 segundos para usar este comando." );

	if(strcmp(choice,"medicos",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* No estás herido, no puedes llamar a médicos ahora.");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "SAMD ha sido informado de su ubicación actual y están en camino.");
		format(string, sizeof(string), "* Central: Reportan a un tal (%d) %s que puede estar herido en %s, se requiere emegercia inmediata.",playerid, GetPlayerNameEx(playerid), zone);
		SendRadioMessage(4, TEAM_MED_COLOR, string);
		Info[playerid][pServiceTime] = 30;
		return 1;
	}
	if(strcmp(choice,"taxi",true) == 0)
	{
		if(TaxiDrivers < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* En este momento no se encuentran disponibles taxistas, intenta más tarde.");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ya llamaste un taxi.");
			return 1;
		}
		format(string, sizeof(string), "** %s necesita un taxista en su posición - usa /aceptar taxi para aceptar la llamada.", GetPlayerNameEx(playerid));
		MessageTaxiDriver(9, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has solicitado un taxista, espera por una respuesta.");
		TaxiCall = playerid;
		Info[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"medico",true) == 0)
	{
		if(Medics < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "En este momento no se encuentran médicos disponibles, intenta más tarde.");
			return 1;
		}
		format(string, sizeof(string), "** %s necesita un médico - usa /aceptar medico para aceptar la llamada.", GetPlayerNameEx(playerid));
		SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Llamaste a un médico espera a una llamada.");
		MedicCall = playerid;
		Info[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"mecanico",true) == 0)
	{
		if(Mechanics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "En este momento no se encuentran mecánicos en servicio, intenta más tarde.");
			return 1;
		}
		format(string, sizeof(string), "** %s necesita un mecánico - usa /aceptar mecanico para aceptar la llamada.", GetPlayerNameEx(playerid));
		SendFamilyMessage(6, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Has solicitado un mecanico, espera por una respuesta.");
		MechanicCall = playerid;
		Info[playerid][pServiceTime] = 30;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Servicio desconocido.");
		return 1;
	}
}

CMD:tarifa(playerid, params[])
{
	if(Info[playerid][pJob] == 8 ||  Info[playerid][pJob2] == 8 || Info[playerid][pTaxiLicense] == 1)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /tarifa (precio)");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Ahora estás fuera de servicio, sumaste $%d a tu bolsillo.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar) || IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 200)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Precio de la tarifa debe estar entre $ 1 y $ 20.");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estas en servicio, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres el conductor.");
				return 1;
			}
		}
		else if (Info[playerid][pTaxiLicense] == 1)
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 20)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Precio de la tarifa debe estar entre $ 1 y $ 20.");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estás de servicio de taxista, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres el conductor!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes la licencia de taxista!");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres taxista o no tienes la licencia de taxista.");
		return 1;
	}
	return 1;
}
zcmd(miruta, playerid, params[])
{
	if(Info[playerid][pJob] == 3 && Bus_Route[playerid] > 0 ||  Info[playerid][pJob2] == 3 && Bus_Route[playerid] > 0) // CMD - /rutabus.
	{
	    new newcar = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que ser el conductor.");
	    if(!IsAnBus(newcar)) {SendClientMessageEx(playerid, COLOR_GRAD2, "No estás en un autobús!"); Bus_Route[playerid] = 0; return 1; }
	    if(Bus_Route[playerid] == 1)
	    {
	        SetPlayerCheckpoint(playerid, 2007,-1939.8,12.8, 5.0);
        	GameTextForPlayer(playerid, "~w~Proxima estacion:~n~~r~Estacion Central", 5000, 1);
	        return 1;
	    }
		if(Bus_Route[playerid] == 2)
	    {
	        SetPlayerCheckpoint(playerid, 2474,-1734.7,12.5, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Barrio de Ganton", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 3)
	    {
	        SetPlayerCheckpoint(playerid, 2834.8,-313.2,6.5, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Puerto Maritimo", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 4)
	    {
	        SetPlayerCheckpoint(playerid, 2565.2,43.9,25.5, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Entrada Palomino", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 5)
	    {
	        SetPlayerCheckpoint(playerid, 2291.4,24.7,25.4, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Palomino Centro", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 6)
	    {
            SetPlayerCheckpoint(playerid, 679.1,-617.7,15.2, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Dillmore", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 7)
	    {
	        SetPlayerCheckpoint(playerid, 794.5,-1376.5,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Estudios LSTV", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 8)
	    {
	        SetPlayerCheckpoint(playerid, 1267.8,-1408.3,12, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Hospital General", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 9)
	    {
	        SetPlayerCheckpoint(playerid, 1427.1,-1663.6,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Plaza del ayuntamiento", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 10)
	    {
	        SetPlayerCheckpoint(playerid, 2051.518554,-1939.8,12.8, 5.0);
			GameTextForPlayer(playerid, "~g~500$  ~n~~w~Siguiente parada:~n~~r~Estacion de autobuses", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 11)
	    {
	        SetPlayerCheckpoint(playerid, 2007,-1939.8,12.8, 5.0);
        	GameTextForPlayer(playerid, "~w~Proxima estacion:~n~~r~Estacion Central", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 12)
	    {
	        SetPlayerCheckpoint(playerid, 2090.830322,-1768.483032,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Pizzeria Idelwood", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 13)
	    {
	        SetPlayerCheckpoint(playerid, 1925.630981,-1749.717407,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Talleres Walking", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 14)
	    {
	        SetPlayerCheckpoint(playerid, 1709.378295,-1729.642333,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Universidad Los Santos", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 15)
	    {
	        SetPlayerCheckpoint(playerid, 1315.020751,-1594.855957,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Avenida Principal", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 16)
	    {
	        SetPlayerCheckpoint(playerid, 1279.931518,-1392.710815,12.3, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Cortes Judiciales", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 17)
	    {
	        SetPlayerCheckpoint(playerid, 656.320129,-1392.609741,12.6, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Los Santos TV", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 18)
	    {
	        SetPlayerCheckpoint(playerid, 625.718383,-1612.542480,15.0, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Avenida Rodeo", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 19)
	    {
	        SetPlayerCheckpoint(playerid, 1006.995544,-1810.320800,13.0, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Verona Beach", 5000, 1);
	        return 1;
	    }
	    else if(Bus_Route[playerid] == 20)
	    {
	        SetPlayerCheckpoint(playerid, 1575.450317,-2197.376220,12.4, 5.0);
			GameTextForPlayer(playerid, "~g~200$  ~n~~w~Siguiente parada:~n~~r~Aeropuerto Terminal Norte", 5000, 1);
	        return 1;
	    }
	}
	else SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No eres chófer de autobús o no estás en ruta, usa /rutabus y /precioviaje antes.");
	return 1;
}
zcmd(rutabus, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
		{
		    if(IsAnBus(newcar))
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que ser el conductor.");
                //if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Tienes que estar al volante del autobús.");
                if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Espera 2 minutos para volver a utilizar este comando!");
                if(TransportDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas estar Onduty y especificar tu tarifa de recorrido, usa /precioviaje.");
                new ruta = random(2);
                if(ruta == 1)
                {
                	//TransportDuty[playerid] = 1;
	      	    	Bus_Route[playerid] = 1;
  		        	SendClientMessageEx(playerid, COLOR_GRAD2, "¡Dirígete al Checkpoint para comenzar la ruta!");
		        	SetPlayerCheckpoint(playerid, 2007,-1939.8,12.8, 5.0);
		        	OOCNews(0xCA0065FF, "Transportes de San Andreas - Autobús saliendo de la estación de Unity realizando ruta de cercanías.");
		        	GameTextForPlayer(playerid, "~w~Proxima estacion:~n~~r~Estacion Central", 5000, 1);
		        	TogglePlayerControllable(playerid, 1);
		        	AntiAbuso[playerid] = 1;
		        	SendClientMessageEx(playerid, COLOR_GREY, "[Información] Si se pierde en la ruta, use /miruta. Sus paradas son LS - Palomino - Dillmore - LS.");
					SetTimerEx("AntiAbusoTimer", 150000, false, "i", playerid); // 2,5 Minutos.
				}
				else
				{
				    //TransportDuty[playerid] = 1;
	      	    	Bus_Route[playerid] = 11;
  		        	SendClientMessageEx(playerid, COLOR_GRAD2, "¡Dirígete al Checkpoint para comenzar la ruta!");
		        	SetPlayerCheckpoint(playerid, 2051.518554,-1939.8,12.8, 5.0);
		        	OOCNews(0xCA0065FF, "Transportes de San Andreas - Autobús saliendo de la estación de Unity realizando ruta de centro.");
		        	GameTextForPlayer(playerid, "~w~Proxima estacion:~n~~r~Estacion Central", 5000, 1);
		        	TogglePlayerControllable(playerid, 1);
		        	AntiAbuso[playerid] = 1;
		        	SendClientMessageEx(playerid, COLOR_GREY, "[Información] Si se pierde en la ruta, use /miruta. Sus paradas son en el Centro de Los Santos.");
					SetTimerEx("AntiAbusoTimer", 150000, false, "i", playerid); // 2,5 Minutos.
				}
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ¡No estás en un autobús de la empresa!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}¡No autorizado!");
        return 1;
    }
/*CMD:uniforme(playerid, params[])
{
	if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3) // Conductor de autobús.
	{
	    if(TransportDuty[playerid] == 1)
	    {
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[Transportes San Andreas]:{FFFFFF}Necesitas antes estar Onduty para ponerte el Uniforme.");
	}
	else if(Info[playerid][pJob] == 8 ||  Info[playerid][pJob2] == 8) // Taxistas.
	{
	    if(TransportDuty[playerid] == 1)
	    {
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[Transportes San Andreas]:{FFFFFF}Necesitas antes estar Onduty para ponerte el Uniforme.");
	}
	else if(Info[playerid][pJob] == 15 ||  Info[playerid][pJob2] == 15) // Maquinista - Trenero.
	{
	    if(TreneroDuty[playerid] == 1)
	    {
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[Maquinistas San Andreas]:{FFFFFF}Necesitas antes estar Onduty para ponerte el Uniforme.");
	}
	else if(Info[playerid][pJob] == 16 ||  Info[playerid][pJob2] == 16) // Piloto de avion.
	{
	    if(PilotoDuty[playerid] == 1)
	    {
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[Pilotos San Andreas]:{FFFFFF}Necesitas antes estar Onduty para ponerte el Uniforme.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[Transportes San Andreas]:{FFFFFF}¡No autorizado!");
	return 1;
}
if(TransportDuty[playerid] == 1)
}*/
// PSEX = 1, Hombre.
CMD:trenduty(playerid, params[])
{
    if(Info[playerid][pJob] == 15  || Info[playerid][pJob2] == 15)
	{
        if(TreneroDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ahora estás fuera servicio. [/ayudatrabajo - /ayudatrabajo2]");
            TreneroDuty[playerid] = 0;
            SetPlayerSkin(playerid, Info[playerid][pChar]);
        }
        else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ahora estás en servicio, recuerda llevar el uniforme correcto. Puedes comenzar la ruta.");
            TreneroDuty[playerid] = 1;
           	if(Info[playerid][pSex] == 1) {SetPlayerSkin(playerid, 255);}
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres maquinista de trenes.");
    }
    return 1;
}
zcmd(rutatren, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 15 ||  Info[playerid][pJob2] == 15)
		{
		    if(GetVehicleModel(newcar)== 538) // Es el tren.
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que ser el conductor.");
                if(Tren_Route[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Ya estás realizando la ruta de tren!");
                if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Espera 2 minutos para volver a utilizar este comando!");
                if(TreneroDuty[playerid] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Necesitas estar Onduty para usar este vehículo. [/trenduty]");
					RemovePlayerFromVehicle(playerid);
	        		return 1;
				}
                Tren_Route[playerid] = 1;
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "¡Dirígete al Checkpoint para comenzar la ruta!");
	        	SetPlayerCheckpoint(playerid, 805.1542,-1357.9359,-0.1724, 5.0);
	        	OOCNews(0xCA0065FF, "Transportes de San Andreas - Tren saliendo de la estación de Unity, dirección San Fierro.");
	        	GameTextForPlayer(playerid, "~w~Proxima estacion:~n~~y~Market [LS Norte]", 5000, 1);
	        	TogglePlayerControllable(playerid, 1);
	        	AntiAbuso[playerid] = 1;
	        	SendClientMessageEx(playerid, COLOR_GREY, "[Información] Recibirás tu paga tras llegar a cada estación.");
				SetTimerEx("AntiAbusoTimer", 150000, false, "i", playerid); // 2,5 Minutos.
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ¡No estás dentro del tren para hacer esto!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}¡No autorizado!");
        return 1;
    }
CMD:pilotoduty(playerid, params[])
{
    if(Info[playerid][pJob] == 16  || Info[playerid][pJob2] == 16)
	{
        if(PilotoDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ahora estás fuera servicio. [/ayudatrabajo - /ayudatrabajo2]");
            PilotoDuty[playerid] = 0;
            SetPlayerSkin(playerid, Info[playerid][pChar]);
        }
        else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ahora estás en servicio, recuerda llevar el uniforme correcto. Puedes comenzar la ruta.");
            PilotoDuty[playerid] = 1;
            if(Info[playerid][pSex] == 1) {SetPlayerSkin(playerid, 61);}
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres piloto.");
    }
    return 1;
}
zcmd(rutaavion, playerid, params[])
    {
        new newcar = GetPlayerVehicleID(playerid);
		if(Info[playerid][pJob] == 16 ||  Info[playerid][pJob2] == 16)
		{
		    if(Aero_Vehicle(newcar))
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que ser el conductor.");
                if(Avion_Route[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Ya estás en ruta de autobús!");
                //if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Tienes que estar al volante del autobús.");
                if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Espera 2 minutos para volver a utilizar este comando!");
                if(PilotoDuty[playerid] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Necesitas estar Onduty para usar este vehículo. [/pilotoduty]");
					RemovePlayerFromVehicle(playerid);
	        		return 1;
				}
    	    	Avion_Route[playerid] = 1;
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "¡Dirígete al Checkpoint para comenzar la ruta!");
	        	SetPlayerCheckpoint(playerid, 1481.7509,1557.6327,9.7434, 20.0);
	        	OOCNews(0xCA0065FF, "Transportes de San Andreas - Avión saliendo del Aeropuerto de los Santos, dirección Las Venturas.");
	        	GameTextForPlayer(playerid, "~w~Proxima parada:~n~~b~Aeropuerto Las Venturas", 5000, 1);
	        	TogglePlayerControllable(playerid, 1);
	        	SendClientMessageEx(playerid, COLOR_GREY, "[Información] Tienes que realizar el recorrido completo para recibir el dinero al final.");
				SetTimerEx("AntiAbusoTimer", 150000, false, "i", playerid); // 2,5 Minutos.
	       	}
	       	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ¡No estás en un avión o helicóptero del Aeropuerto!");
	    }
		else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}¡No autorizado!");
        return 1;
    }
CMD:precioviaje(playerid, params[])
{
	if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /precioviaje (precio)");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Ahora estás fuera de servicio, sumaste $%d a tu Bolsillo.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar) || IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 200 || fare > 500)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Precio de la tarifa debe estar entre $ 200 y $ 500!");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estas en servicio, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SetPlayerToTeamColor(playerid);
				if(Info[playerid][pSex] == 1) {SetPlayerSkin(playerid, 253);}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres el conductor!");
				return 1;
			}
		}
		else if (Info[playerid][pTaxiLicense] == 1)
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 20)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Precio de la tarifa debe estar entre $ 200 y $ 500!");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "Ahora estás de servicio de taxista, tarifa: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres el conductor.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes la licencia de Chofer de Viajes.");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque no eres Chofer De Viajes.");
		return 1;
	}
	return 1;
}
CMD:mduty(playerid, params[])
{
	new string [200];
    if(Team_Mecanicos(playerid))
	{
        if(OnDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ahora estás fuera servicio, ya no recibirás llamadas.");
            OnDuty[playerid] = 0;
            SetPlayerToTeamColor(playerid);
        }
        else
		{
            if (TransportDuty[playerid] != 0) return SendClientMessageEx(playerid,COLOR_WHITE,"{A2DC35}[MECANICOS]:{FFFFFF} Tienes que estar fuera de servicio como chofer de transporte primero.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
			format(string, sizeof(string), "[Mecanicos LS]: El mecánico %s está disponible en el taller (Telefono: %d)." , GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
            BroadCast(COLOR_GENERAL, string);
			OnDuty[playerid] = 1;
			SetPlayerColor(playerid,COLOR_TWPINK); // Mecánico Onduty. (ROSA)
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando porque no eres mecánico.");
    }
    return 1;
}
CMD:matriculas(playerid, params[])
{
	if(Team_Mecanicos(playerid))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, Color_Rojo, "{FF0000}[ATENCION]:{FFFFFF} Debe estar en un vehículo a utilizar este comando.");
		else{ShowPlayerDialog(playerid, 5876, DIALOG_STYLE_LIST, "{00F70C}Seleccione color de la placa", "{FF0000}Rojo\n{00FF00}Verde\n{0000FF}Azul\n{FFFF00}Amarillo\n{00FFFF}Cyan\n{FF00FF}Rosado\n{F0F0F0}Blanco\n{0F0F0F}Negro", "Ok", "Cancelar");}
	}
 	else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando porque no eres mecánico.");
    }
    return 1;
}
CMD:irpt(playerid, params[])
{
	if(Team_SAMD(playerid))
	{
	 new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /irpt(paciente) (Jugador/ID)");

		if(IsPlayerConnected(giveplayerid))
		{
		    if (giveplayerid == playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras tu seas la persona que llamó.");
				return 1;
		    }
		    if(GetPVarInt(giveplayerid, "EMSAttempt") == 8)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque ya aceptaron la llamada.");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(Info[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras el usuario este en prisión.");
				format(string, sizeof(string), "Paramédico %s aceptó la llamada de la centra de emergencia Nrº %d, Paciente: %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(4, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* Has aceptado la llamada de emergencia de %s, podrás ver un marcador en el mapa.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Paramédico %s aceptó tu llamada; por favor espera en tu posición actual.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~r~Ve~n~al marcador rojo.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 8);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Actualmente ese jugador no necesita asistencia médica!");
			}
		}
	}
	return 1;
}
CMD:subirpt(playerid, params[])
{
    if(Team_SAMD(playerid) || (Info[playerid][pMember] == 1 && Info[playerid][pDivision] == 2) || Team_SAEM(playerid) && Info[playerid][pDivision] == 3)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras estes en un coche.");
            return 1;
        }

        new string[128], giveplayerid, seat;
        if(sscanf(params, "dd", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /subirpt (playerid) (Asiento)");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(seat < 2 || seat > 3)
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} El ID de seguridad no puede estar por encima o por debajo de 3 o 2.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras el paciente no este herido.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque el paciente ya está en el coche.");
                    return 1;
                }
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes subirte a tu mismo."); return 1; }
                    if(Info[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando mientras el paciente este en prisión.");
                    new carid = gLastCar[playerid];
                    if(GetVehicleModel(carid) == 416)
					{
                        new Float:pos[6];
                        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
                        GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
                        GetVehiclePos( carid, pos[0], pos[1], pos[2]);
                        if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(string, sizeof(string), "* Fuiste cargado por el paramédico %s.", GetPlayerNameEx(playerid));
                        SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Cargaste al auto a %s.", GetPlayerNameEx(giveplayerid));
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s sube a %s en la ambulancia.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SetPVarInt(giveplayerid, "EMSAttempt", 3);
                        ClearAnimations(giveplayerid);
                        PutPlayerInVehicle(giveplayerid,carid,seat);
                        TogglePlayerControllable(giveplayerid, false);
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} El último coche que has manejado debe ser una ambulancia.");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No estás lo suficientemente cerca del jugador o de tu coche.");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando porque esa ID no está disponible.");
            return 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres parte de SAMD o de la unidad de emergencia de SAPD");
    }
    return 1;
}
CMD:oldcar(playerid, params[]){
	new string[128];
	format(string, sizeof(string), "Tu último vehiculo manejado fue el ID %d.",gLastCar[playerid]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:dejarpt(playerid, params[])
{
    if(Team_SAMD(playerid) || (Info[playerid][pMember] == 1 && Info[playerid][pDivision] == 2) || Team_SAEM(playerid) && Info[playerid][pDivision] == 3){
        if(IsPlayerInAnyVehicle(playerid)){
			new string[128], giveplayerid;
		    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dejarpt (playerid)");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid))
			{
                if(carid == caridex){
                    if(IsAtDeliverPatientPoint(playerid)){
                        if(playerid == -1)
						{
                            SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes dejarte a ti mismo en el hospital.");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está herido.");
                        }
                        SetHP(giveplayerid, 100);
                        GivePlayerCash(giveplayerid, -200);
                        Tax += 250;
                        GivePlayerCash(playerid,500);
                        KillEMSQueue(giveplayerid);
                        SetPVarInt(giveplayerid, "MedicBill", 0);
                        SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Doctor: Los gastos médicos son de $200. Que tengas buen día!");
                        SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Sumaste $500 a tu Bolsillo por dejar sano y salvo un paciente!");
                        SetPlayerInterior(giveplayerid, 0); Info[giveplayerid][pInt] = 0;
                        LoadObjects(giveplayerid);
                        SetPVarInt(giveplayerid, "PlayerCuffed", 0);
                        if(Team_SAMD(playerid))
                        {
                        	format(string, sizeof(string), "Paramédico %s ha dejado satisfactoriamente a %s en el hospital.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendRadioMessage(4, TEAM_MED_COLOR, string);
						}
						else if(Team_SAEM(playerid))
                        {
                        	format(string, sizeof(string), "%s ha dejado satisfactoriamente a %s en el hospital de SAEM.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendRadioMessage(4, TEAM_MED_COLOR, string);
						}
                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1131.035644,-1315.619506,13.250149))//SAMD
						{
                        	SetPlayerPos(giveplayerid, 1160.0034,-1335.1506,2423.0535);//SAMD
                            SetPlayerVirtualWorld(giveplayerid, 600);
                            Info[giveplayerid][pVW] = 600;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,2684.0684,-2525.4067,13.3136))//SAEM
						{
						    SetPlayerPos(giveplayerid, 1233.5699,321.7521,-11.7422);//SAEM
                            SetPlayerVirtualWorld(giveplayerid, 0);
                            Info[giveplayerid][pVW] = 0;
                        }
                    }
                    else{
                        SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el punto para dejar a los pacientes.");
                    }
                }
                else{
                    SendClientMessageEx(playerid, COLOR_WHITE, "Ese paciente no está en la ambulancia.");
                }
            }
            else{
                SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una ambulancia");
            }
        }
    }
    return 1;
}

CMD:curar(playerid, params[])
{
    if(Team_SAMD(playerid) || Team_SAEM(playerid) && Info[playerid][pDivision] == 3)//model
	{
 		if(Info[playerid][pTriageTime] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes esperar 2 minutos para hacer esto de nuevo.");
	    new string[128], giveplayerid;
	    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /curar [playerid]");
   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
    	    if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetHP(giveplayerid, 100);
				else SetHP(giveplayerid, health+15.0);
	    	    format(string, sizeof(string), "* %s da a %s 15ml de sangre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Info[playerid][pTriageTime] = 120;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está cerca tuyo.");
 		}
	}
	return 1;
}

CMD:mandarls(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarls (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 1337) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			if(Info[giveplayerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes sacar a gente de jail, usa el CMD /ir o /liberar.");
			format(string, sizeof(string), " Enviaste a Los Santos a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, " Fuiste llevado a Los Santos por un Administrador.");
 			format(string, sizeof(string), "[AdmCmd]: %s ha mandado %s a Los Santos.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
	 		ABroadCast(COLOR_ORANGE, string, 2);
			SetPlayerPos(giveplayerid, 1529.6, -1705.5, 13.4);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}
CMD:mandarsf(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /mandarsf (ID/Jugador)");

		if(IsPlayerConnected(giveplayerid))
		{
			if (Info[giveplayerid][pAdminZC] >= 1337) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador.");
			if(Info[giveplayerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes sacar a gente de jail, usa el CMD /ir o /liberar.");
			format(string, sizeof(string), " Enviaste a San Fierro a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, " Fuiste llevado a San Fierro por un Administrador.");
			SetPlayerPos(giveplayerid, -2016.4399,-79.7714,35.3203);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
CMD:musica(playerid,params[]) {
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 5)
	{
		ShowPlayerDialog(playerid,D_Musica,DIALOG_STYLE_INPUT,"[INFRANET] Autor - DJ","Inserte el nombre de la canción.","Listo","Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
CMD:ponermusica(playerid,params[]) {
	if(DirectorCNN(playerid) || Team_LSTV(playerid) && Info[playerid][pRank] > 5)
	{
		ShowPlayerDialog(playerid,D_MusicaX,DIALOG_STYLE_INPUT,"[SATV] Radio en Directo","Inserte el nombre de la canción.","Listo","Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Sólo el director de SATV puedes poner música en antena.");
	return 1;
}
CMD:ignorar(playerid,params[]) {StopAudioStreamForPlayer(playerid); return 1;}
CMD:crearactortemp(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 5000)
	{
	ShowModelSelectionMenu(playerid, skinactores, "Selecciona el skin del actor.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
	return 1;
}
CMD:editarhqfam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] >= 4000 || Info[playerid][pGangModerator] == 1)
	{
		new family, x_hq[64], string[128];
		if(sscanf(params, "is[64]", family, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarhqfam (familia id) (Nombre)");
			SendClientMessageEx(playerid, COLOR_GREY, "NOMBRES: crear, borrar, exterior, interior, perinterior, VirtualWorld");
			return 1;
		}

		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10"); return 1; }
		family -= 1;
		if(strcmp(x_hq,"crear",true) == 0)
		{
	   		SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor ponte de pie donde quieres que este la entrada.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Después presiona {FF0000}FIRE{FFFFFF}.");
		}
		else if(strcmp(x_hq,"borrar",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 4);
			format(string,128,"¿Estás seguro que quieres borra la HQ?");
			SafeDialogEx(playerid,HQDELETE,DIALOG_STYLE_MSGBOX,"{00F70C}Warning:",string,"Si","No");
		}
		else if(strcmp(x_hq,"exterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 5);
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor ponte de pie donde quieres que este la entrada.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Después presiona {FF0000}FIRE{FFFFFF}.");
		}
		else if(strcmp(x_hq,"interior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 6);
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor ponte de pie donde quieres que este la salida.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Después presiona {FF0000}FIRE{FFFFFF}.");
		}
		else if(strcmp(x_hq,"preinterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 3);
			SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}[ATENCION]:{FFFFFF} Recuerda después usar /editarhqfam familiaid VirtualWorld.");
			format(string,128,"Tiene '%s' un interior personalizado?", fINFO[family][FamilyName]);
			SafeDialogEx(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"{00F70C}Advertencia:",string,"Si","No");
		}
		else if(strcmp(x_hq,"VirtualWorld",true) == 0)
		{
			fINFO[family][FamilyVirtualWorld] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "El VirtualWorld de la familia fue estableciado en 0 - Int Personalizado.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Nombre no válido.");
		}
		saveFamilies();
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
	return 1;
}

CMD:fameditor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 4000 || Info[playerid][pGangModerator] == 1)
	{
		new family, x_job[64], x_hq[64], ammount, string[128];
		if(sscanf(params, "is[64]s[64]", family, x_job, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /fameditor (familia) (nombre) (valor)");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Tokens, lider, MaxSkins, Skin1, Skin2, Skin3, Skin4, Skin5, Skin6, Skin7, Skin8");
			return 1;
		}
        ammount = strval(x_hq);
		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[FAM]:{FFFFFF} Familia id no puede estar por debajo de 1 o por encima de 10."); return 1; }
		family -= 1;
		if(strcmp(x_job,"tokens",true) == 0)
		{
			fINFO[family][FamilyTurfTokens] = ammount * 12;
			format(string, sizeof(string), "You have changed '%s' tokens amount to %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if (strcmp(x_job,"lider",true) == 0)
		{
			if(strlen(x_hq) >= 20 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That leader name is too long, please refrain from using more than 20 characters." );
				return 1;
			}
			strcpy(fINFO[family][FamilyLeader], x_hq, MAX_PLAYER_NAME);
			format(string, sizeof(string), "Has cambiado '%s' fichas ascienden a %s.", fINFO[family][FamilyName], x_hq);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(strcmp(x_job,"maxskins",true) == 0)
		{
			if(ammount > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer el maxskins a más de 8.");
			if(ammount == 7)
			{
				fINFO[family][FamilySkins][7] = 0;
			}
			if(ammount == 6)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
			}
			if(ammount == 5)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
			}
			if(ammount == 4)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
			}
			if(ammount == 3)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
				fINFO[family][FamilySkins][3] = 0;
			}
			if(ammount == 2)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
				fINFO[family][FamilySkins][3] = 0;
				fINFO[family][FamilySkins][2] = 0;
			}

			if(ammount == 1)
			{
				fINFO[family][FamilySkins][7] = 0;
				fINFO[family][FamilySkins][6] = 0;
				fINFO[family][FamilySkins][5] = 0;
				fINFO[family][FamilySkins][4] = 0;
				fINFO[family][FamilySkins][3] = 0;
				fINFO[family][FamilySkins][2] = 0;
				fINFO[family][FamilySkins][1] = 0;
			}

			fINFO[family][FamilyMaxSkins] = ammount;
			format(string, sizeof(string), "Cambiaste max skins de '%s' a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin1",true) == 0)
		{
			fINFO[family][FamilySkins][0] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #1 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin2",true) == 0)
		{
			fINFO[family][FamilySkins][1] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #2 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin3",true) == 0)
		{
			fINFO[family][FamilySkins][2] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #3 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin4",true) == 0)
		{
			fINFO[family][FamilySkins][3] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #4 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin5",true) == 0)
		{
			fINFO[family][FamilySkins][4] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #5 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin6",true) == 0)
		{
			fINFO[family][FamilySkins][5] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #6 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin7",true) == 0)
		{
			fINFO[family][FamilySkins][6] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #7 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin8",true) == 0)
		{
			fINFO[family][FamilySkins][7] = ammount;
			format(string, sizeof(string), "Cambiaste '%s' skin #8 a %d.", fINFO[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Nombre no válido.");
			return 1;
		}
		saveFamilies();
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
		return 1;
	}
	return 1;
}

CMD:miembros(playerid, params[])
{
	new member = Info[playerid][pMember];
    new leader = Info[playerid][pLeader];
    new teamnumber;
	if (Info[playerid][pLeader] != 0) teamnumber = Info[playerid][pLeader];
	else if (Info[playerid][pMember] != 0) teamnumber = Info[playerid][pMember];
    if(member > 0 || leader > 0)
    {
	    SendClientMessageEx(playerid, COLOR_WHITE, "{46FF92}Miembros Conectados:");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    new string[32];
			if (IsPlayerConnected(i))
			{
				if (Info[i][pLeader] == teamnumber) format(string, sizeof(string), "%s (Líder)",GetPlayerNameEx(i));
				else if (Info[i][pMember] == teamnumber) format(string, sizeof(string), "%s, Rango: %d.",GetPlayerNameEx(i), Info[i][pRank]);
				if(strlen(string) > 0) SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a ninguna facción.");
    return 1;
}
/*
CMD:facc(playerid, params[])
{
    //if(Info[playerid][pAdminZC] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "");
	new string[128], totalstring[1800];
	new number = 0;
	for(new i =0; i < sizeof(InfoFacc); i++)
	{
	    number ++;
		format(string, sizeof(string), "{FFFFFF}%d) %s {A9D0F5}[Líder: %s | Sub-Líder: %s]\n",number-1, InfoFacc[i][gFacc], InfoFacc[i][gLeader], InfoFacc[i][gLeader2]);
        strcat(totalstring,string);
		//SendClientMessageEx(playerid, COLOR_WHITE, string);

	}
	ShowPlayerDialog(playerid,STATS,DIALOG_STYLE_MSGBOX,"NS-RP Lista de Facciones Oficiales",totalstring,"Cerrar","");
	SendClientMessageEx(playerid, COLOR_WHITE, "Postulaciones a facciones via foro, seguir el formato disponible en el subforo correspondiente.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Facción 20 [ Líder: Rai_Salazar | Sub-Líder: Nick_Aldershot]");
	return 1;
}
*/
CMD:familias(playerid, params[])
{
	new string[180], totalstring[1800], familyid;
	if(sscanf(params, "d", familyid))
	{
		new number = 0;
		for(new i = 0; i < sizeof(fINFO); i++)
		{
			number ++;
			format(string, sizeof(string), "{FFFFFF}Familia {A2DC35}%d{FFFFFF} | Nombre: {A2DC35}%s{FFFFFF} | Lider: {A2DC35}%s{FFFFFF} | Miembros: {A2DC35}[%d]{FFFFFF}\n",number,fINFO[i][FamilyName],fINFO[i][FamilyLeader],fINFO[i][FamilyMembers]);
			strcat(totalstring,string);
		}
		ShowPlayerDialog(playerid,FSTATS,DIALOG_STYLE_MSGBOX,"INFRANET Lista de Facciones No-Oficiales (Familias)",totalstring,"Cerrar","");
		return 1;
	}
	if(familyid < 1 || familyid > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10"); return 1; }
	familyid -= 1;
	if(fINFO[familyid][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Ese Slot está vacío.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Info[i][pFMember] == familyid && Info[i][pFMember] != 255)
		{
			if(Info[i][pRank] == 1 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "* %s: %s | Rango: %s (1).\n",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank1]);
				strcat(totalstring,string);
			}
			else if(Info[i][pRank] == 2 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "* %s: %s | Rango: %s (2).\n",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank2]);
				strcat(totalstring,string);
			}
			else if(Info[i][pRank] == 3 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "* %s: %s | Rango: %s (3).\n",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank3]);
				strcat(totalstring,string);
			}
			else if(Info[i][pRank] == 4 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "* %s: %s | Rango: %s (4).\n",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank4]);
				strcat(totalstring,string);
			}
			else if(Info[i][pRank] == 5 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "* %s: %s | Rango: %s (5).\n",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank5]);
				strcat(totalstring,string);
			}
			else if(Info[i][pRank] == 6 && Info[i][pFMember] == familyid)
			{
				format(string, sizeof(string), "* %s: %s | Rango: %s (6).\n",fINFO[familyid][FamilyName],GetPlayerNameEx(i),fINFO[familyid][FamilyRank6]);
				strcat(totalstring,string);
			}
			ShowPlayerDialog(playerid,FSTATS2,DIALOG_STYLE_MSGBOX,"Miembros Conectados (Familias)",totalstring,"Cerrar","");
			//SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}


CMD:festado(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un ATM o en el banco de Los Santos.");
		return 1;
	}

	new family, string[128];
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}

	format(string, sizeof(string), "Tu familia tiene $%d en su cuenta.", fINFO[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:fdepositar(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un ATM o en el banco de Los Santos.");
		return 1;
	}

	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fdepositar (monto)");
		format(string, sizeof(string), "Tu familia tiene $%d en su cuenta.", fINFO[family][FamilyBank]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ese dinero.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = fINFO[family][FamilyBank];
	fINFO[family][FamilyBank]=amount+fINFO[family][FamilyBank];
	SendClientMessageEx(playerid, COLOR_WHITE, "|____________CUENTA BANCARIA_____________|");
	format(string, sizeof(string), "  Antiguo Balance: $%d", curfunds);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Depósito: $%d",amount);
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|________________________________________|");
	format(string, sizeof(string), "  Nuevo Balance: $%d", fINFO[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) depositó $%d en la FAM %d's bank account.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
	Log("LOGS/family.log", string);
	return 1;
}

CMD:fretirar(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un ATM o en el banco de Los Santos.");
		return 1;
	}
	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	if(Info[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 5 y 6 pueden retirar.");
		return 1;
	}
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fretirar (monto)");
		format(string, sizeof(string), "Tu familia tiene $%d en su cuenta.", fINFO[family][FamilyBank]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		return 1;
	}

	if (amount > fINFO[family][FamilyBank] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia no tiene ese dinero.");
		return 1;
	}

	GivePlayerCash(playerid,amount);
	fINFO[family][FamilyBank]=fINFO[family][FamilyBank]-amount;
	format(string, sizeof(string), "  Retiraste $%d de la cuenta de tu familia, un total de: $%d", amount,fINFO[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) ha retirado $%d de la familia %d's cuenta del banco.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
	Log("LOGS/family.log", string);
	return 1;
}

CMD:fgarma(playerid, params[])
{
    if(manubrio[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes guardar este arma mientras la estas dando.");
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la arena.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx (playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No se puede almacenar armas desde un vehículo");
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 30) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No se puede almacenar armas si su salud está por debajo de 30.");
	if(GetPVarInt(playerid, "Injured") != 0||Info[playerid][pEstado]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7) return SendClientMessageEx (playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	if(Info[playerid][pMember] > 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No se puede almacenar armas en una caja fuerte de la familia cuando estás en una facción.");
	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes familia.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2])) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fgarma (arma) (slot)");
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "* Debes esperar %d segundos despues de depositar un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(slot < 1 || slot > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Ranura inválida.");
	if( fINFO[family][FamilyGuns][slot-1] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia tiene un arma almacenada en ese espacio ya.");
	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 23)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un pistola SD en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][2];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][2] == 24)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una Desert Eagle en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][2];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una Shotgun en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][3];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][3] == 27)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una Spas12 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][3];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][4] == 29)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un MP5 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][4];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 30)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste una ak-47 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 31)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un M4 en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "Uzi", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][5] == 28)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un Uzi en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][5];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 33)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un Rifle en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][6];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( Info[playerid][pWeapons][6] == 34)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Dejaste un Sniper en el armario de tu familia.");
			weapon = Info[playerid][pWeapons][6];
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else { SendClientMessageEx(playerid,COLOR_WHITE,"ID de arma invalida."); return 1; }
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma.");
	if(fINFO[family][FamilyGuns][slot-1] == 0)
	{
		fINFO[family][FamilyGuns][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		saveFamilies();
		return 1;
	}
	return 1;
}
CMD:fsarma(playerid, params[])
{
	new string[128], slot;
	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando tienes restricción de armas.");
	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No tienes una familia.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2])) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No estás en el lugar adecuado.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes coger armas estando en un vehiculo.");
	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		format(string, sizeof(string), "*** %s Caja Fuerte ***", fINFO[family][FamilyName]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		for(new s = 0; s < 10; s++)
		{
			if( fINFO[family][FamilyGuns][s] != 0 )
			{
				GetWeaponName(fINFO[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fsarma (slot)");
		return 1;
	}
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "* Debes esperar %d segundos despues de sacar un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(slot < 1 || slot > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Ranura Inválida.");
	if(Info[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos mayores a 4 puede usar este comando.");
	if(fINFO[family][FamilyGuns][slot-1] != 0)
	{
		new weaponname[50];
		GetWeaponName(fINFO[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
		GivePlayerValidWeapon(playerid, fINFO[family][FamilyGuns][slot-1]);
		fINFO[family][FamilyGuns][slot-1] = 0;
		if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Piltola SD de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Deagle de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un shotgun de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "spas12", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un spas12 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un MP5 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una AK-47 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una M4 de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Rifle de la caja fuerte de tu familia.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Sniper de la caja fuerte de tu familia.");
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		saveFamilies();
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma almacenada en esa ranura.");
	return 1;
}

CMD:cfbalance(playerid, params[])
{
	if(Info[playerid][pFMember] < 255)
	{
		if(fINFO[Info[playerid][pFMember]][FamilyUSafe] < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Está familia aún no tiene una caja fuerte.");
		}
		else
		{
			new string[128];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(fINFO[Info[playerid][pFMember]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			format(string, sizeof(string), " C. Fuerte: %s | Gunlockers: %d/10 | Dinero: $%d | Hierba: %d | Crack: %d | Materiales: %d", fINFO[Info[playerid][pFMember]][FamilyName], weaponsinlocker, fINFO[Info[playerid][pFMember]][FamilyCash], fINFO[Info[playerid][pFMember]][FamilyPot], fINFO[Info[playerid][pFMember]][FamilyCrack], fINFO[Info[playerid][pFMember]][FamilyMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
	return 1;
}

CMD:cfdepositar(playerid, params[])
{
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cfdepositar (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Materiales, crack, hierba");
		return 1;
	}

	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una familia.");
		return 1;
	}
	if(fINFO[family][FamilyUSafe] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Su familia no ha mejorado su seguridad.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
		return 1;
	}
	if(strcmp(choice,"dinero",true) == 0)
	{
		if (amount > GetPlayerCash(playerid) || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto dinero.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCash] += amount;
		GivePlayerCash(playerid, -amount);
		format(string, sizeof(string), "Depositaste $%d en la caja fuerte de tu familia", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s saca un poco de dinero y lo pone en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited $%d into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("LOGS/pay.log", string);
	}
	else if(strcmp(choice,"Materiales",true) == 0)
	{
		if (amount > Info[playerid][pMats] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tantos materiales.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyMats] += amount;
		Info[playerid][pMats] -= amount;
		format(string, sizeof(string), "Depositaste %d materiales en la caja fuerte de tu familia", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s sacar materiales y lo pone en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("LOGS/pay.log", string);
	}
	else if(strcmp(choice,"hierba",true) == 0)
	{
		if (amount > Info[playerid][pPot] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanta hierba.");
			return 1;
		}
		if(amount < 1 || amount > 50)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar más de 50 en cada vez.");
			return 1;
		}
		if(fINFO[family][FamilyPot] >= 500)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Está caja fuerte ya está llena de hierba.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyPot] += amount;
		Info[playerid][pPot] -= amount;
		format(string, sizeof(string), "Depositaste %d gramos de hierba en la caja fuerte", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s coge un poco de hierba y lo guarda en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("LOGS/pay.log", string);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if (amount > Info[playerid][pCrack] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanta droga.");
			return 1;
		}
		if(amount < 1 || amount > 25)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Sólo puedes depositar de 1 a 25 gramos.");
			return 1;
		}
		if(fINFO[family][FamilyCrack] >= 250)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte esta muy llena de droga (250gr).");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCrack] += amount;
		Info[playerid][pCrack] -= amount;
		format(string, sizeof(string), "Depositaste %d gramos de droga en la caja fuerte", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s coge un poco de droga y lo guarda en la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]);
		Log("LOGS/pay.log", string);
	}
	return 1;
}

CMD:cfretirar(playerid, params[])
{
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cjretirar (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Materiales, Crack, Hierba");
		return 1;
	}

	new family;
	if(Info[playerid][pFMember] < 255)
	{
		family = Info[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	if(fINFO[family][FamilyUSafe] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia no ha mejorado su seguridad.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
		return 1;
	}
	if(Info[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 5 y 6 pueden retirar de la caja fuerte.");
		return 1;
	}
	if(strcmp(choice,"dinero",true) == 0)
	{
		if (amount > fINFO[family][FamilyCash] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte no tiene tanto dinero.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCash] -= amount;
		GivePlayerCash(playerid, amount);
		format(string, sizeof(string), "Retiraste $%d de la caja fuerte de tu familia.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira algo de dinero de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
		Log("LOGS/family.log", string);
	}
	else if(strcmp(choice,"Materiales",true) == 0)
	{
		if (amount > fINFO[family][FamilyMats] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte no tiene tantos materiales.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyMats] -= amount;
		Info[playerid][pMats] += amount;
		format(string, sizeof(string), "Retiraste %d materiales de la caja fuerte de tu familia.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira algo de materiales de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from family safe %d.",GetPlayerNameEx(playerid), ip,amount,Info[playerid][pFMember]+1);
		Log("LOGS/family.log", string);
	}
	else if(strcmp(choice,"hierba",true) == 0)
	{
		if (amount > fINFO[family][FamilyPot] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Tu familia no tiene la cantidad especificada.");
			return 1;
		}
		if(Info[playerid][pPot] > 999)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 1 kg de hierba.");
			return 1;
		}
		new level = Info[playerid][pDrugsSkill];
		if(level >= 0 && level <= 50)
		{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 10!"); return 1; } }
		else if(level >= 51 && level <= 100)
		{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 20!"); return 1; } }
		else if(level >= 101 && level <= 200)
		{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 30!"); return 1; } }
		else if(level >= 201 && level <= 400)
		{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 40!"); return 1; } }
		else if(level >= 401)
		{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes más de 50!"); return 1; } }
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyPot] -= amount;
		Info[playerid][pPot] += amount;
		format(string, sizeof(string), "Retiraste %d gramos de hierba de la caja fuerte.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira unos paquetes de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
		Log("LOGS/family.log", string);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if (amount > fINFO[family][FamilyCrack] || amount < 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte no tiene tanta droga.");
			return 1;
		}
		if(Info[playerid][pCrack] > 25)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 25 gramos de droga, no puedes cargar más.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		fINFO[family][FamilyCrack] -= amount;
		Info[playerid][pCrack] += amount;
		format(string, sizeof(string), "Retiraste %d gramos de droga de la caja fuerte.", amount);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s retira unos paquetes de la caja fuerte.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from family safe %d.",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pFMember]+1);
		Log("LOGS/family.log", string);
	}
	return 1;
}
CMD:ajustar(playerid, params[])
{
	if(Info[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	new string[128];
	new family = Info[playerid][pFMember];
	if(Info[playerid][pRank] >= 5)
	{
		new choice[32], opstring[100];
		if(sscanf(params, "s[32]S[100]", choice, opstring))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /ajustar (name)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: Nombre, MOTD, Seguro[Caja Fuerte], Invitar, Despedir");
			return 1;
		}

		if(strcmp(choice,"nombre",true) == 0)
		{
			if(Info[playerid][pRank] == 6)
			{
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustar nombre (Nombre de la familia)");
					return 1;
				}
				if(strfind(opstring, "|", true) != -1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE,  "No puedes usar '|' en el nombre de la familia.");
					return 1;
				}
				if(strlen(opstring) >= 40 )
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "Ese nombre de la familia es demasiado largo, por favor utilices más de 40 caracteres." );
					return 1;
				}
				strmid(fINFO[family][FamilyName], opstring, 0, strlen(opstring), 100);
				saveFamilies();
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el nombre de la familia.");
				format(string, sizeof(string), "%s adjusted family %d's name to %s", GetPlayerNameEx(playerid), family+1, opstring);
				Log("LOGS/family.log", string);
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Sólo rangos 6 (lideres) pueden usar este comando.");
		}
		else if(strcmp(choice,"motd",true) == 0)
		{
			if(!opstring[0])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustar MOTD (Mensaje)");
				return 1;
			}
			if(strfind(opstring, "|", true) != -1)
			{
					SendClientMessageEx(playerid, COLOR_WHITE,  "No puedes usar '|' en el mensaje.");
				return 1;
			}
			if(strlen(opstring) >= 60 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "El mensaje es muy largo, por favor no uses más de 60 carácteres." );
				return 1;
			}
			strmid(fINFO[family][FamilyMOTD], opstring, 0, strlen(opstring), 100);
			saveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje de la familia.");
			format(string, sizeof(string), "%s adjusted family %d's MOTD to %s", GetPlayerNameEx(playerid), family+1, opstring);
			Log("LOGS/family.log", string);
		}
		else if(strcmp(choice,"seguro",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustar seguridad de su familia restablecerá todas las estadísticas de su caja fuerte.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Si desea ajustar su caja fuerte, usa /ajustar confirmar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Mejora de la seguridad de su de la familia tendrá un costo de 10.000 dólares.");
			return 1;
		}
		else if(strcmp(choice,"confirmar",true) == 0)
		{
			if(GetPlayerCash(playerid) < 10000)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes $10,000 para hacer esto.");
				return 1;
			}
			GivePlayerCash(playerid, -10000);
			GetPlayerPos(playerid, fINFO[family][FamilySafe][0],fINFO[family][FamilySafe][1],fINFO[family][FamilySafe][2]);
			fINFO[family][FamilyCash] = 0;
			fINFO[family][FamilyMats] = 0;
			fINFO[family][FamilyPot] = 0;
			fINFO[family][FamilyCrack] = 0;
			if(fINFO[family][FamilyUSafe]) DestroyDynamicPickup(fINFO[family][FamilyPickup]);
			fINFO[family][FamilyUSafe] = 1;
			fINFO[family][FamilyPickup] = CreateDynamicPickup(1239, 23, fINFO[family][FamilySafe][0], fINFO[family][FamilySafe][1], fINFO[family][FamilySafe][2]);
			saveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la caja fuerte de tu familia.");
			format(string, sizeof(string), "%s adjusted family %d's safe", GetPlayerNameEx(playerid), family+1);
			Log("LOGS/family.log", string);
		}
		else if(strcmp(choice,"invitar",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustar invitar (Player/ID)");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if (Info[giveplayerid][pFMember] == 255)
					{
						if(Info[giveplayerid][pLeader] == 0 && Info[giveplayerid][pMember] == 0)
						{
							format(string, sizeof(string), "* Invitaste a %s para que se una a '%s'.",GetPlayerNameEx(giveplayerid), fINFO[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s te ha invitado para que te unes a '%s'. (usa /aceptar familia)",GetPlayerNameEx(playerid), fINFO[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
							format(string, sizeof(string), "%s invited %s to family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
							Log("LOGS/family.log", string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya se encuentra en una familia o facción.");
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya se encuentra en una familia o facción.");
					}
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "ID o Nombre de jugador inválido.");
				return 1;
			}
		}
		else if(strcmp(choice,"despedir",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustar despedir (ID/PLAYER)");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(Info[giveplayerid][pFMember] != family)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en tu familia.");
						return 1;
					}
					if(Info[giveplayerid][pRank] > Info[playerid][pRank])
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No puedes despedir a rangos mayores.");
						return 1;
					}
					format(string, sizeof(string), "* Despediste a %s de tu familia.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Lider %s te ha despedido de la familia en la que estabas.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					Info[giveplayerid][pFMember] = 255;
					Info[giveplayerid][pRank] = 0;
					fINFO[family][FamilyMembers] --;
					saveFamilies();
					format(string, sizeof(string), "%s uninvited %s from family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
					Log("LOGS/family.log", string);
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Nombre inválido.");
				return 1;
			}
		}
		else if(strcmp(choice,"rango",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Por favor usa /ajustarrango en lugar de /ajustar rango.");
		}
		else if(strcmp(choice,"nombrerango",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Por favor usa /anombrerango en lugar de /ajustar nombrerango.");
		}
	}
	return 1;
}

CMD:ajustarrango(playerid, params[])
{
	if(Info[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	new family = Info[playerid][pFMember];
	new string[128], rank, giveplayerid;
	if(sscanf(params, "dd", rank, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustarrango (Nº Rango) (playerid)");


	if(Info[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6) { SendClientMessageEx(playerid, COLOR_WHITE, "Rangos: 1 - 6"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(Info[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en tu familia.");
					return 1;
				}
				if(Info[giveplayerid][pRank] > Info[playerid][pRank])
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ajustar rangos de jugadores de mayor rango.");
					return 1;
				}
				format(string, sizeof(string), "* Has dado a %s el rango %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Lider %s te dió rango %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				Info[giveplayerid][pRank] = rank;
				format(string, sizeof(string), "%s set %s rank to %d in family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("LOGS/family.log", string);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Nombre o ID de jugador inválido.");
			return 1;
		}
	}
	else if(Info[playerid][pRank] == 5)
	{
		if(rank < 1 || rank > 5) { SendClientMessageEx(playerid, COLOR_WHITE, "Rango no puede ser inferior a 1 o superior a 5."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(Info[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en tu familia.");
					return 1;
				}
				format(string, sizeof(string), "* Has dado a %s el rango %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* SubLider %s te dió rango %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				Info[giveplayerid][pRank] = rank;
				format(string, sizeof(string), "%s set %s rank to %d in family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("LOGS/family.log", string);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador Inválido.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	return 1;
}

CMD:anombrerango(playerid, params[])
{
	if(Info[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
		return 1;
	}
	new family = Info[playerid][pFMember];
	new string[128], rank, rankname[32];
	if(sscanf(params, "ds[32]", rank, rankname)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /anombrerango (Rango Nº 1-6) (Nombre de Rango)");

	if(Info[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Rangos : 1 - 6.");
			return 1;
		}
		if(strfind(rankname, "|", true) != -1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,  "No puedes usar esto en los nombres de los rangos.");
			return 1;
		}
		if(strlen(rankname) >= 19 )
		{
			SendClientMessageEx( playerid, COLOR_GRAD1, "El nombre de rango es demasiado largo, por favor no utilizes más de 19 caracteres." );
			return 1;
		}
		if(rank == 1)
		{
			strmid(fINFO[family][FamilyRank1], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 1 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 2)
		{
			strmid(fINFO[family][FamilyRank2], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 2 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 3)
		{
			strmid(fINFO[family][FamilyRank3], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 3 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 4)
		{
			strmid(fINFO[family][FamilyRank4], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 4 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 5)
		{
			strmid(fINFO[family][FamilyRank5], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 5 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 6)
		{
			strmid(fINFO[family][FamilyRank6], rankname, 0, strlen(rankname), 32);
			saveFamilies();
			format(string, sizeof(string), "* Cambiaste rango 6 a %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}

		format(string, sizeof(string), "%s adjusted family %d's rank %d to %s", GetPlayerNameEx(playerid), family+1, rank, rankname);
		Log("LOGS/family.log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	return 1;
}

CMD:crearfam(playerid, params[]){
	if(Info[playerid][pAdminZC] > 5 || Info[playerid][pGangModerator] == 1)	{
		new string[128], family, giveplayerid;
		if(sscanf(params, "dd", family, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /crearfam (Slot Fam) (PlayerID)");
		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Slot de la familia no puede ser inferior a 1 o superior a 10."); return 1; }

		if(IsPlayerConnected(giveplayerid))		{
			if(fINFO[family-1][FamilyTaken] == 1)			{
				SendClientMessageEx(playerid, COLOR_GREY, "Slot que la familia ya está en uso.");
				return 1;
			}

			format(string, sizeof(string), "* Hiciste a %s el lider de la familia número %d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Admin %s te hizo lider de una familia.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s",sendername);
			strmid(fINFO[family-1][FamilyLeader], string, 0, strlen(string), 24);
			fINFO[family-1][FamilyMembers] ++;
			fINFO[family-1][FamilyTaken] = 1;
			Info[giveplayerid][pFMember] = family-1;
			Info[giveplayerid][pRank] = 6;
			saveFamilies();

		}
		else		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado es inválido.");
			return 1;
		}
	}
	return 1;
}

CMD:borrarfam(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338 || Info[playerid][pGangModerator] == 1)	{
		new family;
		if(sscanf(params, "d", family)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /borrarfam (familiaid)");

		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10."); return 1; }
		if(fINFO[family-1][FamilyTaken] != 1)		{
			SendClientMessageEx(playerid, COLOR_GREY, "Esa familia está desocupada.");
			return 1;
		}
		ClearFamily(family-1);
		saveFamilies();
	}
	return 1;
}
CMD:borrarfamtotal(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338 || Info[playerid][pGangModerator] == 1)	{
		new family;
		if(sscanf(params, "d", family)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /borrarfamtotal (Reseteo del SLOT)");

		if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10."); return 1; }
		ClearFamily(family-1);
		saveFamilies();
	}
	return 1;
}
CMD:crearautofam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new string[128], family, modelid, color1, color2;
	if(sscanf(params, "dddd", family, modelid, color1, color2)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /crearautofam (ID FAM) (Modelo) (color 1) (color 2)");
    if (Info[playerid][pAdminZC] < 4 && Info[playerid][pGangModerator] != 1)
    {
    	SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
     	return 1;
    }
   	if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10."); return 1; }
	family -= 1;
	if(fINFO[family][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Esa familia no está ocupada.");
		return 1;
	}
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "COLOR: 0 a 126."); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_WHITE, "COLOR: 0 a 126."); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_WHITE, "Vehiculos: 400 al 611."); return 1; }
	new gangvehicleid = GetGangFreeVehicleId(family);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Esa familia no puede tener más coches.");
	new Float:X,Float:Y,Float:Z;
 	GetPlayerPos(playerid,X,Y,Z);
  	new Float:Angle;
   	GetPlayerFacingAngle(playerid,Angle);
   	new car = CreateGangVehicle(family, gangvehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
   	if(car == INVALID_VEHICLE_ID)
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Algo salió mal y el coche no se creó.");
	}
 	else
  	{
   		format(string, sizeof(string), " Coche creado. ID: %d.", car);
    	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	    saveFamiliesHQ();
	}
	return 1;
}

CMD:borrarautofam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new family, vehicleid;
	if(sscanf(params, "dd", family, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /borrarautofam (ID FAM) (VEHICLE ID)");
    if (Info[playerid][pAdminZC] < 4 && Info[playerid][pGangModerator] != 1)
    {
    	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
     	return 1;
    }
    if(family < 1 || family > MAX_FAMILY) { SendClientMessageEx(playerid, COLOR_WHITE, "Familias: 1 - 10."); return 1; }
	family -= 1;
	new gangvehicleid = GetGangVehicle(family, vehicleid);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Esa familia no posee ese vehiculo.");
	DestroyGangVehicle(family, gangvehicleid);
	saveFamiliesHQ();
	return 1;
}

CMD:darliderfam(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 5 || Info[playerid][pGangModerator] >= 1)
	{
		new string[128], familyid;
		if(sscanf(params, "d", familyid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darliderfamm (FAM ID)");

		if(familyid < 1 || familyid > MAX_FAMILY) return SendClientMessageEx(playerid, COLOR_WHITE, "Número de familia inválida.");
		format(string, sizeof(string), "Entraste a la familia ID %d (%s).", familyid, fINFO[familyid-1][FamilyName]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		Info[playerid][pRank] = 6;
		Info[playerid][pFMember] = familyid-1;
	}
	return 1;
}

CMD:fseguro(playerid, params[])
{
    new Float: x, Float: y, Float: z;
	new f = Info[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres de una familia.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
    {
		if(FVINFO[f][d][fvId] != 0) GetVehiclePos(FVINFO[f][d][fvId], x, y, z);
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
    	{
        	if(FVINFO[f][d][fvLock] > 0 && FVINFO[f][d][fvLocked] == 0)
         	{
          		GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
            	PlayerPlaySoundEx(1145, x, y, z);
             	FVINFO[f][d][fvLocked] = 1;
              	LockGangVehicle(f, FVINFO[f][d][fvId], FVINFO[f][d][fvLock]);
               	return 1;
			}
			else if(FVINFO[f][d][fvLock] > 0 && FVINFO[f][d][fvLocked] == 1)
   			{
      			GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
         		PlayerPlaySoundEx(1145, x, y, z);
           		FVINFO[f][d][fvLocked] = 0;
             	UnLockGangVehicle(f, FVINFO[f][d][fvId], FVINFO[f][d][fvLock]);
              	return 1;
			}
   			SendClientMessageEx(playerid, COLOR_WHITE, " No tienes un sistema de bloqueo instalado en el vehículo.");
      		return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " No estás cerca de ningún vehículo que tu familia posee.");
	return 1;
}

CMD:fllaves(playerid, params[])
{
	if(Info[playerid][pFMember] == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu necesitas ser de una familia para usar este comando.");
	new vstring[1024];
	for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	{
		if(FVINFO[Info[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
		{
			format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[FVINFO[Info[playerid][pFMember]][i][fvModelId] - 400], FVINFO[Info[playerid][pFMember]][i][fvId]);
		}
		else if(FVINFO[Info[playerid][pFMember]][i][fvImpounded] == 1) {
			format(vstring, sizeof(vstring), "%s\n%s (Embargado)", vstring, VehicleName[FVINFO[Info[playerid][pFMember]][i][fvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
		}
	}
	return SafeDialogEx(playerid, GTRACKCAR, DIALOG_STYLE_LIST, "{00F70C}GPS", vstring, "Buscar", "Cancelar");
}
CMD:aestacionar(playerid, params[])
{
	new string[128];

    new f = Info[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres de ninguna familia.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FVINFO[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser el conductor.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health, vw;
	        GetVehicleHealth(FVINFO[f][d][fvId], health);
	        if(health < 800) return SendClientMessageEx(playerid, COLOR_WHITE, " El vehiculo está muy dañado para poder ser estacionado.");
	        if(Info[playerid][pLockCar] == GetPlayerVehicleID(playerid)) Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FVINFO[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FVINFO[f][d][fvId], angle);
           	vw = GetPlayerVirtualWorld(playerid);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1, vw);
  			FVINFO[f][d][fvSpawnx] = x;
			FVINFO[f][d][fvSpawny] = y;
			FVINFO[f][d][fvSpawnz] = z;
			FVINFO[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FVINFO[f][d][fvId], 0);
            format(string, sizeof(string), "* %s estaciona el vehiculo.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            saveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " Tu necesitas estar dentro del carro de tu familia.");
	return 1;
}
CMD:festacionar(playerid, params[])
{
	new string[128];

    new f = Info[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres de ninguna familia.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FVINFO[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser el conductor.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health, vw;
	        GetVehicleHealth(FVINFO[f][d][fvId], health);
	        if(health < 800) return SendClientMessageEx(playerid, COLOR_WHITE, " El vehiculo está muy dañado para poder ser estacionado.");
	        if(Info[playerid][pLockCar] == GetPlayerVehicleID(playerid)) Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FVINFO[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FVINFO[f][d][fvId], angle);
           	vw = GetPlayerVirtualWorld(playerid);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1, vw);
  			FVINFO[f][d][fvSpawnx] = x;
			FVINFO[f][d][fvSpawny] = y;
			FVINFO[f][d][fvSpawnz] = z;
			FVINFO[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FVINFO[f][d][fvId], 0);
            format(string, sizeof(string), "* %s estaciona el vehiculo.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            saveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " Tu necesitas estar dentro del carro de tu familia.");
	return 1;
}

CMD:fcomprarseguro(playerid, params[])
{
    if(!Tienda_247(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un 24/7.");
		return 1;
	}
	if(Info[playerid][pFMember] != 255 && Info[playerid][pRank] >= 5)
	{
		SafeDialogEx(playerid, DIALOG_CDGLOCKBUY, DIALOG_STYLE_LIST, "{00F70C}24/7 - Seguros", "Alarma		$1000\nSeguro Industrial		$5000", "Comprar", "Cancelar");
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que ser de una familia y ser rango 5 para poder ponerle seguro a los coches.");
	}
	return 1;
}
CMD:comprarcasa(playerid, params[])
{
    new string[256];
    new playername[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) )
		{
            if( HouseInfo[h][hOwned] == 0 )
			{
                if(Info[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(string, sizeof(string), "Tú necesitas ser nivel {FF0000}%d{FFFFFF} para comprar está casa.", HouseInfo[h][hLevel]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
                if(Info[playerid][pPhousekey] == INVALID_HOUSE_ID)
				{

					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						Info[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hTiempo] = 31; //solo por dias.
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido~n~Puedes salir en cualquier momento, usando /salir en este mismo lugar.", 5000, 3);
						Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra.");
						SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/ayuda{FFFFFF} para ver los comandos disponibles.");
						print("CASA SLOT 1.");
						OnPlayerUpdate(playerid);
						Info[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(19522, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_GREEN2, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("LOGS/house.log", string);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero para comprar esta casa!");
						return 1;
					}
				}
				else if(Info[playerid][pPhousekey2] == INVALID_HOUSE_ID)
				{
					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						Info[playerid][pPhousekey2] = h;
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hTiempo] = 31;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido~n~Puedes salir en cualquier momento, usando /salir en este mismo lugar.", 5000, 3);
						Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra.");
						SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/ayuda{FFFFFF} para ver los comandos disponibles.");
						print("CASA SLOT 2.");
						OnPlayerUpdate(playerid);
						Info[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(19522, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_GREEN2, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("LOGS/house.log", string);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para comprar esta casa.");
						return 1;
					}
				}
            }
            else
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "Está casa ya tiene dueño." );
            }
        }
    }
    for(new p = 0; p < sizeof(ProInfo); p++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,ProInfo[p][hExteriorX], ProInfo[p][hExteriorY], ProInfo[p][hExteriorZ]) )
		{
	        if( ProInfo[p][hOwned] == 0)
			{
	            if(Info[playerid][pLevel] < ProInfo[p][hLevel])
				{
	                format(string, sizeof(string), "   Tú necesitas ser nivel %d para comprar esta casa.", ProInfo[p][hLevel]);
	                SendClientMessageEx(playerid, COLOR_WHITE, string);
	                return 1;
	            }
	            if(Info[playerid][pPhousekeyX] == INVALID_HOUSE_ID)
				{
					if(GetPlayerCash(playerid) > ProInfo[p][hValue])
					{
						Info[playerid][pPhousekeyX] = p;
						ProInfo[p][hOwned] = 1;
						//strcpy(ProInfo[h][hOwner], Info[playerid][pNormalName], MAX_PLAYER_NAME);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(ProInfo[p][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-ProInfo[p][hValue]);
						Tax += (ProInfo[p][hValue] * 40 ) / ( 100 );
						//SetPlayerInterior(playerid,ProInfo[p][hHInteriorWorld]);
					    //LoadObjects(playerid);
						SetPlayerPos(playerid,ProInfo[p][hExteriorX],ProInfo[p][hExteriorY],ProInfo[p][hExteriorZ]);
						//GameTextForPlayer(playerid, "~w~Bienvenido~n~Puedes salir en cualquier momento, usando /salir en este mismo lugar.", 5000, 3);
						//Info[playerid][pInt] = ProInfo[p][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra!");
						SendClientMessageEx(playerid, COLOR_WHITE, "Escribe /ayuda casa para ver los comandos disponibles!");
						savePropiedades(p);
						print("CASA SLOT 3.");
						OnPlayerUpdate(playerid);
						//Info[playerid][pVW] = p;
						//SetPlayerVirtualWorld(playerid, p);
						DestroyDynamicPickup(ProInfo[p][hPickupID]);
						ProInfo[p][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[p][hExteriorX], ProInfo[p][hExteriorY], ProInfo[p][hExteriorZ]);
						format(string, sizeof(string), "{3FA0EF}Dueño\n:{FFFFFF}%s\n{3FA0EF}Nivel: {FFFFFF}%d\n{3FA0EF}ID: {FFFFFF}%d\n{3FA0EF}Direccion: {FFFFFF}%s %d",ProInfo[p][hOwner],ProInfo[p][hLevel],p,ProInfo[p][hDireccion],p+178);
						UpdateDynamic3DTextLabelText(ProInfo[p][hTextID], -1, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,p,ProInfo[p][hValue]);
						Log("LOGS/house.log", string);
						return 1;
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para comprar esta casa!");
				}
	        }
	        else return SendClientMessageEx( playerid, COLOR_GREY, "* Esta casa ya tiene dueño." );
	    }
	}
    return 1;
}

CMD:rentar(playerid, params[])
{
    new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && HouseInfo[h][hRentFee] >= 1)
		{
            if( ! strcmp( HouseInfo[h][hOwner], "Nobody", true ) )
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "No se puede alquilar una casa sin dueño." );
            }
            else
			{
                if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una casa, escribe {5ABAFF}/ponercasaenventa{FFFFFF} si quieres alquilar esta.");
                    return 1;
                }
                if(Info[playerid][pRenting] != INVALID_HOUSE_ID)
                {
                    SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una casa en renta, escribe {5ABAFF}/desrentar{FFFFFF} si quieres dejar de rentar en la actual.");
                    return 1;
                }
                if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
                    if( HouseInfo[h][hRentable] == 0 )
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "Está casa no está en renta, lo sentimos.");
                        return 1;
                    }
                    else
					{
                        Info[playerid][pRenting] = h;
                        GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
                        HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
                        SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
                        SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
                        GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 3);
                        Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
                        Info[playerid][pVW] = 6000+h;
                        SetPlayerVirtualWorld(playerid, h+6000);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones. Puedes salir en cualquier momento por este mismo lugar, escribiendo /salir.");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Escribe {5ABAFF}/ayuda{FFFFFF} para ver los comandos disponibles.");
                        OnPlayerUpdate(playerid);
                        new ip[32];
                        GetPlayerIp(playerid,ip,sizeof(ip));
                        format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwner],HouseInfo[h][hRentFee]);
                        Log("LOGS/house.log", string);
                        return 1;
                    }
                }
                else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para comprar esta casa!");
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:desrentar(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "Es usted el propietario esta casa.");
        return 1;
    }
    if( Info[playerid][pRenting] != INVALID_HOUSE_ID )
	{
        Info[playerid][pRenting] = INVALID_HOUSE_ID;
        SendClientMessageEx(playerid, COLOR_WHITE, "Quedaste sin casa.");
    }
    return 1;
}

CMD:timbre(playerid, params[])
{
	for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ])) {

		new
			string[75 + MAX_PLAYER_NAME];

			foreach(Player, i) if(GetPlayerVirtualWorld(i) == h + 6000 && GetPlayerInterior(i) == HouseInfo[h][hHInteriorWorld]) {
			format(string,sizeof(string),"Timbre de %s suena.", HouseInfo[h][hOwner]);
			SendClientMessageEx(i,COLOR_PURPLE,string);
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Timbre...", 4000,3);
		}
		format(string,sizeof(string),"* %s presiona un botón al lado de la puerta y toca el timbre de la casa de %s.",GetPlayerNameEx(playerid), HouseInfo[h][hOwner]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:vendermicasa(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if((Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0))
    {
        new string[128], giveplayerid, price;
        if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendermicasa (player) (precio)");
        if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Precio debe ser mayor a 0.");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado en el servidor.");
        if(Info[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && Info[giveplayerid][pPhousekey] != INVALID_HOUSE_ID)
        {
            SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya tiene 2 casas.");
            return 1;
        }
        if(Info[giveplayerid][pLevel] >= HouseInfo[Info[playerid][pPhousekey]][hLevel])
        {
                if (ProxDetectorS(8.0, playerid, giveplayerid))
                {
                    HouseOffer[giveplayerid] = playerid;
                    HousePrice[giveplayerid] = price;
                    House[giveplayerid] = 1;
                    format(string, sizeof(string), "* Ofreciste tu casa a %s por $%d.", GetPlayerNameEx(giveplayerid), price);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s te ha ofrecido su casa por $%d. (usa /aceptar casa para comprarla)", GetPlayerNameEx(playerid), price);
                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                    return 1;
                 }
                 else
                 {
                     SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
                  }
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene el nivel requerido para tener esta casa.");
}
}
return 1;
}
CMD:vendermicasa2(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
 	if((Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0))
{
new string[128], giveplayerid, price;
if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vendermicasa2 (player) (precio)");
if(price < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Precio debe ser mayor a 0.");
if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado en el servidor.");
if(Info[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && Info[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID)
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya tiene 2 casas.");
return 1;
}
if(Info[giveplayerid][pLevel] >= HouseInfo[Info[playerid][pPhousekey2]][hLevel])
{
if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[Info[playerid][pPhousekey2]][hExteriorX],HouseInfo[Info[playerid][pPhousekey2]][hExteriorY],HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]))
{
if (ProxDetectorS(8.0, playerid, giveplayerid))
{
HouseOffer[giveplayerid] = playerid;
HousePrice[giveplayerid] = price;
House[giveplayerid] = 2;
format(string, sizeof(string), "* Ofreciste tu casa a %s por $%d.", GetPlayerNameEx(giveplayerid), price);
SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
format(string, sizeof(string), "* %s te ha ofrecido su casa por $%d. (usa /aceptar casa para comprarla)", GetPlayerNameEx(playerid), price);
SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
return 1;
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
return 1;
}
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar cerca de tu casa.");
return 1;
}
}
else
{
SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene el nivel requerido para tener esta casa.");
return 1;
}
}
return 1;
}

CMD:cdepositar(playerid, params[])
{
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cdepositar (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Crack, Materiales, Hierba");
		return 1;
	}

	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
		 if(strcmp(choice, "Materiales", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un material.");
					return 1;
				}
				if( Info[playerid][pMats] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey]][hMaterials]+=amount;
					Info[playerid][pMats] -= amount;
					format(string, sizeof(string), "Depositaste {00F70C}$%d{FFFFFF} materiales en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para depositar.");
				}
			}
			else if(strcmp(choice, "hierba", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un gramo de hierba.");
					return 1;
				}
				if( Info[playerid][pPot] >= amount )
				{
					if(amount + HouseInfo[Info[playerid][pPhousekey]][hPot] > 100000)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "  Tu casa ya tiene demasiada hierba guardada.");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey]][hPot]+=amount;
					Info[playerid][pPot] -= amount;
					format(string, sizeof(string), "Depositaste {00F70C}$%d{FFFFFF} gramos de hierba en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa cantidad para depositar.");
				}
			}
			else if(strcmp(choice, "crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de uno.");
					return 1;
				}
				if( Info[playerid][pCrack] >= amount )
				{
					if(amount + HouseInfo[Info[playerid][pPhousekey]][hCrack] > 100000)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "La caja fuerte de la casa ya está llena de droga! (100000)");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey]][hCrack]+=amount;
					Info[playerid][pCrack] -= amount;
					format(string, sizeof(string), "Depositaste {00F70C}$%d{FFFFFF} gramos de droga en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes drogas para depositar.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cdepositar (nombre) (monto)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Crack, Materiales");
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "dinero", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un dolar.");
					return 1;
				}
				if( GetPlayerCash(playerid) >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney]+=amount;
					GivePlayerCash(playerid, -amount);
					format(string, sizeof(string), "Depositaste $%d en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited $%d into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para depositar.");
			}
			else if(strcmp(choice, "Materiales", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de un material.");
					return 1;
				}
				if( Info[playerid][pMats] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey2]][hMaterials] += amount;
					Info[playerid][pMats] -= amount;
					format(string, sizeof(string), "Depositaste %d materiales en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para depositar.");
			}
			else if(strcmp(choice, "crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes depositar menos de uno.");
					return 1;
				}
				if( Info[playerid][pCrack] >= amount )
				{
					if(amount + HouseInfo[Info[playerid][pPhousekey2]][hCrack] > 100000)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "  La caja fuerte de la casa ya está llena de droga! (100000)");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey2]][hCrack]+=amount;
					Info[playerid][pCrack] -= amount;
					format(string, sizeof(string), "Depositaste %d gramos de droga en tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes drogas para depositar.");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cdepositar [nombre] [monto]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Droga, Materiales");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en ninguna casa.");
	return 1;
}

CMD:cajaestado(playerid, params[])
{
	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[256];
			format(string, sizeof(string), "{FFFFFF}Gunlocker(s): {5ABAFF}%d/%d{FFFFFF} | Dinero: {5ABAFF}$%d{FFFFFF} | Drogas: {5ABAFF}%d{FFFFFF} | Hierba: {5ABAFF}%d{FFFFFF} | Materiales: {5ABAFF}%d", weaponsinlocker,HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade], HouseInfo[Info[playerid][pPhousekey]][hSafeMoney], HouseInfo[Info[playerid][pPhousekey]][hCrack], HouseInfo[Info[playerid][pPhousekey]][hPot], HouseInfo[Info[playerid][pPhousekey]][hMaterials]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}

	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[256];
			format(string, sizeof(string), "{FFFFFF}Gunlocker(s): {5ABAFF}%d/%d{FFFFFF} | Dinero: {5ABAFF}$%d{FFFFFF} | Drogas: {5ABAFF}%d{FFFFFF} | Hierba: {5ABAFF}%d{FFFFFF} | Materiales: {5ABAFF}%d", weaponsinlocker,HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade], HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney], HouseInfo[Info[playerid][pPhousekey2]][hCrack], HouseInfo[Info[playerid][pPhousekey2]][hPot], HouseInfo[Info[playerid][pPhousekey2]][hMaterials]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás dentro de tu casa.");
	}
	return 1;
}

CMD:garma(playerid, params[])
{
    if(manubrio[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes guardar este arma mientras la estas dando.");
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer eso en la Arena.");
		return 1;
	}
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /garma (arma) (slot)");

	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   Debes esperar {FF0000}%d{FFFFFF} segundo despues de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}

			new maxslots = HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}

			if( HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] != 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes un arma en esa ranura.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 23)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Pistola SD en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 24)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Desert Deagle en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "9mm", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 22)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una 9mm en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 25)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 27)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Combat Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una MP5 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 30)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una AK-47 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "Uzi", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 28)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Uzi en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 31)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una M4 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 33)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un rifle en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 34)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Sniper en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 28)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una uzi en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Tec9 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma.");
			if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] == 0)
			{
				HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				return 1;
			}
			else { SendClientMessageEx(playerid,COLOR_WHITE,"Nombre Inválido."); return 1; }
		}
	}

	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Debes esperar {FF0000}%d{FFFFFF} segundos después de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}
			new maxslots = HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}

			if( HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] != 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienes un arma almacenada en ese espacio ya.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 23)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Pistola SD en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][2] == 24)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Desert Deagle en tu armario.");
					weapon = Info[playerid][pWeapons][2];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 25)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][3] == 27)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Combat Shotgun en tu armario.");
					weapon = Info[playerid][pWeapons][3];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una MP5 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 30)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una AK-47 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][5] == 31)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una M4 en tu armario.");
					weapon = Info[playerid][pWeapons][5];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 33)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un rifle en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][6] == 34)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste un Sniper en tu armario.");
					weapon = Info[playerid][pWeapons][6];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 28)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una uzi en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if( Info[playerid][pWeapons][4] == 29)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Depositaste una Tec9 en tu armario.");
					weapon = Info[playerid][pWeapons][4];
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma.");
			if(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] == 0)
			{
				HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				return 1;
			}
			else { SendClientMessageEx(playerid,COLOR_WHITE,"Nombre de arma inválida."); return 1; }
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa.");
	}
	return 1;
}

CMD:sarma(playerid, params[])
{
	new string[128], slot;

	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey])
		{
			if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto, tienes restricción de armas.");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s Armario ***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if( HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sarma (slot)");
				return 1;
			}

			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Debes de esperar {FF0000}%d{FFFFFF} segundos después de haber retirado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}
			new maxslots = HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}
			if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1]);
				HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "pistolsd", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Pistola SD de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Desert Eagle.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una escopeta de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Combat Shotgun de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una MP5 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una AK-47 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una M4 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un rifle de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Rifle Sniper de tu armario de armas.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				SaveHouses();
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa arma en ese slot.");
				return 1;
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes restricción de armas.");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s - Armario***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if( HouseInfo[Info[playerid][pPhousekey2]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sarma (slot)");
				return 1;
			}

			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Debes de esperar {FF0000}%d{FFFFFF} segundos después de haber cogido un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				return 1;
			}
			new maxslots = HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido.");
				return 1;
			}
			if(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1]);
				HouseInfo[Info[playerid][pPhousekey2]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "pistolsd", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Pistola SD de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Desert Eagle.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una escopeta de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "spas12", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una Combat Shotgun de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una MP5 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una AK-47 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una M4 de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un rifle de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste un Rifle Sniper de tu armario de armas.");
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Retiraste una UZI de de tu armario de armas.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				SaveHouses();
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma en ese espacio.");
				return 1;
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa.");
	}
	return 1;
}

CMD:cretirar(playerid, params[])
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new string[128], amount, choice[32];

	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cretirar (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Crack, Materiales, Hierba");
		return 1;
	}
	if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000 )
	{
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Dinero", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un dólar.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]-=amount;
					GivePlayerCash(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero para retirar.");
				}
			}
			else if(strcmp(choice, "Materiales", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un material.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hMaterials] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey]][hMaterials]-=amount;
					Info[playerid][pMats] += amount;
					format(string, sizeof(string), "Retiraste %d materiales de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para retirar.");
				}
			}
			else if(strcmp(choice, "hierba", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de 1.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hPot] >= amount)
				{
					if(Info[playerid][pPot] > 999)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 1 kg de hierba.");
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 10 con tu habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 20 con tu habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 30 con tu habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 40 con tu habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 50 con tu habilidad!"); return 1; } }
					HouseInfo[Info[playerid][pPhousekey]][hPot]-=amount;
					Info[playerid][pPot] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de hierba de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa cantidad para retirar.");
				}
			}
			else if(strcmp(choice, "crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un dólar.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey]][hCrack] >= amount )
				{
					if(Info[playerid][pCrack] > 25)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes 25 gramos de droga, no puedes cargar más.");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey]][hCrack]-=amount;
					Info[playerid][pCrack] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de droga de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente droga para retirar.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cretirar (nombre) (monto)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Droga, Materiales");
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey2]+6000 )
	{
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey2]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Dinero", true, strlen(choice)) == 0)
			{
				if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un dolar.");
				if( HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney] >= amount)
				{
					HouseInfo[Info[playerid][pPhousekey2]][hSafeMoney]-=amount;
					GivePlayerCash(playerid, amount);
					format(string, sizeof(string), "Retiraste $%d de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto dinero para retirar.");
				}
			}
			else if(strcmp(choice, "Materiales", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de un material.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey2]][hMaterials] >= amount )
				{
					HouseInfo[Info[playerid][pPhousekey2]][hMaterials]-=amount;
					Info[playerid][pMats] += amount;
					format(string, sizeof(string), "Retiraste %d materiales de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes materiales para retirar.");
				}
			}
			else if(strcmp(choice, "hierba", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de 1.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey2]][hPot] >= amount)
				{
					if(Info[playerid][pPot] > 999)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "Ya tienes 1 Kg de hierba.");
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 10 con tu habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 20 con tu habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 30 con tu habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 40 con tu habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes sacar más de 50 con tu habilidad!"); return 1; } }
					HouseInfo[Info[playerid][pPhousekey2]][hPot]-=amount;
					Info[playerid][pPot] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de hierba de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes esa cantidad para retirar.");
				}
			}
			else if(strcmp(choice, "crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes retirar menos de uno.");
					return 1;
				}
				if( HouseInfo[Info[playerid][pPhousekey2]][hCrack] >= amount )
				{
					if(Info[playerid][pCrack] > 25)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Tienes 25 gramos de droga.");
						return 1;
					}
					HouseInfo[Info[playerid][pPhousekey2]][hCrack]-=amount;
					Info[playerid][pCrack] += amount;
					format(string, sizeof(string), "Retiraste %d gramos de droga de tu casa.", amount);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SaveHouses();
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,Info[playerid][pPhousekey2]);
					Log("LOGS/house.log", string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente droga para retirar.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /cretirar (Nombre) (Monto)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOMBRES: Dinero, Droga, Materiales");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa.");
		return 1;
	}
	return 1;
}

CMD:staffvcasa(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 4000)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new string[256], house;
		if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /staffvcasa (houseid)");
		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold house ID %d (was owned by %s).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hOwner]);
		Log("LOGS/house.log", string);
		ClearHouse(house);
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Vendiste la Casa Numero %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		SaveHouses();
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[house][hDescription],HouseInfo[house][hValue],HouseInfo[house][hLevel], house);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando");
	}
	return 1;
}
CMD:vendercasa3(playerid, params[])
{
	new string[256];
	new house = Info[playerid][pPhousekeyX];
	if(house == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0,ProInfo[house][hExteriorX],ProInfo[house][hExteriorY],ProInfo[house][hExteriorZ]))
	{
		ClearPropiedad(house);
		ProInfo[house][hLock] = 1;
		format( ProInfo[house][hOwner], 128, "Nadie" );
		//new cost = (ProInfo[house][hValue] * 40 ) / ( 100 );
		GivePlayerCash(playerid,ProInfo[house][hValue] );
		//Tax -= cost;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Felicitaciones~n~ Vendiste tu casa por ~n~~g~$%d", ProInfo[house][hValue] );
		GameTextForPlayer(playerid, string, 4000, 3);
		Info[playerid][pPhousekeyX] = INVALID_HOUSE_ID;
		if(Info[playerid][pVW] == house)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,ProInfo[house][hExteriorX],ProInfo[house][hExteriorY],ProInfo[house][hExteriorZ]);
			Info[playerid][pInt] = 0;
			Info[playerid][pPhousekeyX] = INVALID_HOUSE_ID;
		}
		//Info[playerid][pInsurance] = 0;
		DestroyDynamicPickup(ProInfo[house][hPickupID]);
		ProInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[house][hExteriorX], ProInfo[house][hExteriorY], ProInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(ProInfo[house][hTextID]);
		format(string, sizeof(string), "{FFFFFF}Casa en Venta!\nCosto: {FFFFFF}$%d\n{FFFFFF}Nivel: {FFFFFF}%d\n{FFFFFF}ID: {FFFFFF}%d\n{FFFFFF}Para comprar usa: /comprarcasa",ProInfo[house][hValue],ProInfo[house][hLevel],house);
		ProInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, ProInfo[house][hExteriorX], ProInfo[house][hExteriorY], ProInfo[house][hExteriorZ]+0.5, 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house,ProInfo[house][hValue]);
		Log("LOGS/house.log", string);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca su casa (exterior) para venderla.");
	return 1;
}
CMD:vendercasa2(playerid, params[])
{
    new string[256];
	new house2 = Info[playerid][pPhousekey2];
    if(house2 == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
	{
		ClearHouse(house2);
		HouseInfo[house2][hLock] = 1;
		//HouseInfo[house2][hTiempo] = 0;
		format( HouseInfo[house2][hOwner], 128, "Nobody" );
		GivePlayerCash(playerid,HouseInfo[house2][hValue]);
		HouseInfo[house2][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Felicitaciones~n~ Vendiste tu casa por ~n~~g~$%d", HouseInfo[house2][hValue]);
		GameTextForPlayer(playerid, string, 4000, 3);
		Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		if(Info[playerid][pVW] == house2+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]);
			Info[playerid][pInt] = 0;
			Info[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		}
		SaveHouses();
		OnPlayerUpdate(playerid);
		DestroyDynamicPickup(HouseInfo[house2][hPickupID]);
		HouseInfo[house2][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house2][hTextID]);
		format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[house2][hDescription],HouseInfo[house2][hValue],HouseInfo[house2][hLevel], house2);
		HouseInfo[house2][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]+0.5,10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house2,HouseInfo[house2][hValue]);
		Log("LOGS/house.log", string);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca su casa (exterior) para venderla.");
	}
 return 1;
}

CMD:vendercasa(playerid, params[])
{
	new string[256];
	new house = Info[playerid][pPhousekey];
	if(house == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
		ClearHouse(house);
		HouseInfo[house][hLock] = 1;
		//HouseInfo[house][hTiempo] = 0;
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		GivePlayerCash(playerid,HouseInfo[house][hValue]);
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Felicitaciones~n~ Vendiste tu casa por ~n~~g~$%d", HouseInfo[house][hValue]);
		GameTextForPlayer(playerid, string, 4000, 3);
		Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		//GuardarmuebleUserCASA(playerid, house);
		if(Info[playerid][pVW] == house+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
			Info[playerid][pInt] = 0;
			Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		}

		SaveHouses();
		OnPlayerUpdate(playerid);
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[house][hDescription],HouseInfo[house][hValue],HouseInfo[house][hLevel], house);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hValue]);
		Log("LOGS/house.log", string);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca su casa (exterior) para venderla.");
	return 1;
}

CMD:goinhouse(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 4000)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /goinhouse (housenumber)");

		SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
		if(HouseInfo[housenum][hCustomInterior] == 1)
		{
		    LoadObjects(playerid);
		}
		SetPlayerPos(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
		Info[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 4000)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /gotohouse [housenumber]");
        if(housenum < 0 || housenum > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_WHITE, "Casa no encontrada.");
		SetPlayerPos(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
		GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
		SetPlayerInterior(playerid, 0);
		Info[playerid][pInt] = 0;
	}
	return 1;
}
//// SISTEMA DE PROPIEDADES.
CMD:ropero(playerid, params[])
{
new houseID = Info[playerid][pPhousekeyX];
if(houseID != -1)
{
    if(GetPlayerVirtualWorld(playerid) == houseID)
	{
					new slot1casa = ProInfo[houseID][hSlotRopero1];
					new slot2casa = ProInfo[houseID][hSlotRopero2];
					new slot3casa = ProInfo[houseID][hSlotRopero3];
					new slot4casa = ProInfo[houseID][hSlotRopero4];
					new slot5casa = ProInfo[houseID][hSlotRopero5];
					new slot6casa = ProInfo[houseID][hSlotRopero6];
					new slot7casa = ProInfo[houseID][hSlotRopero7];
					new slot8casa = ProInfo[houseID][hSlotRopero8];
					new slot9casa = ProInfo[houseID][hSlotRopero9];
					new slot10casa = ProInfo[houseID][hSlotRopero10];
					new string[128];
					format(string, sizeof(string), "1 - Skin: %d\n2 - Skin: %d\n3 - Skin: %d\n4 - Skin: %d\n5 - Skin: %d\n6 - Skin: %d\n7 - Skin: %d\n8 - Skin: %d\n9 - Skin: %d\n10 - Skin: %d", slot1casa, slot2casa, slot3casa, slot4casa, slot5casa, slot6casa, slot7casa, slot8casa, slot9casa, slot10casa);
					ShowPlayerDialog(playerid, DIALOG_ROPEROMENU, DIALOG_STYLE_LIST, "Ropero", string, "Aceptar", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No estás dentro de tu casa.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes una casa.");
return 1;
}

CMD:armario(playerid, params[])
{
	new hID = Info[playerid][pPhousekeyX], opcion[8];
	if(hID == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes una casa. (Sistema de casas V3).");
	if(sscanf(params, "s[8]", opcion))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /armario [Opción] (Opciones: Sacar/Guardar).");
		SendClientMessageEx(playerid, COLOR_GREY, "Ejemplo de uso: Para sacar un arma, /armario sacar. Para guardarla, /armario guardar.");
		return 1;
	}
	if(strcmp(opcion, "guardar", true) == 0)
	{
 		if(GetPlayerVirtualWorld(playerid) == hID)
		{
	    	GuardarArma[playerid] = 1; // guarda armas.
			new am1 = ProInfo[hID][hM][0], am2 = ProInfo[hID][hM][1], am3 = ProInfo[hID][hM][2], am4 = ProInfo[hID][hM][3], am5 = ProInfo[hID][hM][4];
			new string[60*5]; // String: El máximo de cada linéa es 60 carácteres. (X5).
			format(string, sizeof(string), "Slot\tNombre Arma\tMunición\n\
			Slot 1\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 2\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 3\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 4\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 5\t{FFFF00}%s\t{25E648}(%d)", iArmas[ProInfo[hID][hW][0]], am1, iArmas[ProInfo[hID][hW][1]], am2, iArmas[ProInfo[hID][hW][2]], am3, iArmas[ProInfo[hID][hW][3]], am4, iArmas[ProInfo[hID][hW][4]], am5);
			ShowPlayerDialog(playerid, DIALOG_ARMARIO, DIALOG_STYLE_TABLIST_HEADERS, "Armario (Seleccione Slot)", string, "Guardar", "Salir");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No estás dentro de tu casa.");
	}
	else if(strcmp(opcion, "sacar", true) == 0)
	{
 		if(GetPlayerVirtualWorld(playerid) == hID)
		{
	    	GuardarArma[playerid] = 0; // saca armas.
			new am1 = ProInfo[hID][hM][0], am2 = ProInfo[hID][hM][1], am3 = ProInfo[hID][hM][2], am4 = ProInfo[hID][hM][3], am5 = ProInfo[hID][hM][4];
			new string[60*5]; // String: El máximo de cada linéa es 60 carácteres. (X5).
			format(string, sizeof(string), "Slot\tNombre Arma\tMunición\n\
			Slot 1\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 2\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 3\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 4\t{FFFF00}%s\t{25E648}(%d)\n\
			Slot 5\t{FFFF00}%s\t{25E648}(%d)", iArmas[ProInfo[hID][hW][0]], am1, iArmas[ProInfo[hID][hW][1]], am2, iArmas[ProInfo[hID][hW][2]], am3, iArmas[ProInfo[hID][hW][3]], am4, iArmas[ProInfo[hID][hW][4]], am5);
			ShowPlayerDialog(playerid, DIALOG_ARMARIO, DIALOG_STYLE_TABLIST_HEADERS, "Armario (Seleccione Slot)", string, "Sacar", "Salir");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No estás dentro de tu casa.");
	}
	return 1;
}

CMD:avecasa(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 4000)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new string[256], house;
		if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /avecasa [ID] (Sistema Nuevo de casas)");
		ProInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold house ID %d (was owned by %s).",GetPlayerNameEx(playerid),ip,house,ProInfo[house][hOwner]);
		Log("LOGS/house.log", string);
		ClearPropiedad(house);
		format( ProInfo[house][hOwner], 128, "Nobody" );
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Vendiste la Casa Numero %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		savePropiedades(house);
		DestroyDynamicPickup(ProInfo[house][hPickupID]);
		ProInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[house][hExteriorX], ProInfo[house][hExteriorY], ProInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(ProInfo[house][hTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_WHITE"Para comprar usa: /comprarcasa",ProInfo[house][hValue],ProInfo[house][hLevel],house);
		ProInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, ProInfo[house][hExteriorX], ProInfo[house][hExteriorY], ProInfo[house][hExteriorZ]+0.5, 10.0);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando");
	return 1;
}
CMD:ircasa(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
if(Info[playerid][pAdminZC] >= 4000)
{
	new housenum;
	if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ircasa [ID Casa - Nuevo sistema]");
    if(housenum < 0 || housenum > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_WHITE, "Casa no encontrada.");
	SetPlayerPos(playerid,ProInfo[housenum][hExteriorX],ProInfo[housenum][hExteriorY],ProInfo[housenum][hExteriorZ]);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	SetPlayerInterior(playerid, 0);
	Info[playerid][pInt] = 0;
}
return 1;
}

CMD:casamenu(playerid, params[]) // {AC58FA} iPorton[iIndex][p00][0]
{
if(Info[playerid][pPhousekeyX] != INVALID_HOUSE_ID)
{
    if(GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekeyX])
    {
    	ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"Menú General:","» Dinero\n» Armas\n» Items\n» Muebles\n» Ropero","Seleccionar","Atrás");
	}
    else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en ninguna casa.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes una casa.");
return 1;
}
CMD:editarh(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
if(Info[playerid][pAdminZC] < 4000)return SendClientMessageEx(playerid, COLOR_WHITE, "CMD no disponible, /editarcasa.");
new string[256], choice[32], houseid, amount;
if(sscanf(params, "s[32]dD", choice, houseid, amount))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarh [Nombre] [houseid] [(Optional)Codigo]");
	SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Clase (1-3), Nivel, Precio");
	return 1;
}
if(strcmp(choice, "interior", true) == 0)
{
	GetPlayerPos(playerid, ProInfo[houseid][hInteriorX], ProInfo[houseid][hInteriorY], ProInfo[houseid][hInteriorZ]);
	GetPlayerFacingAngle(playerid, ProInfo[houseid][hInteriorA]);
	ProInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
	SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el interior de la casa!" );
 	savePropiedades(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
	Log("LOGS/hedit.log", string);
	return 1;
}
else if(strcmp(choice, "custominterior", true) == 0)
{
	if(ProInfo[houseid][hCustomInterior] == 0)
	{
		ProInfo[houseid][hCustomInterior] = 1;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Personalizado! (1)" );
	}
	else
	{
		ProInfo[houseid][hCustomInterior] = 0;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Normal! (0)" );
	}
	savePropiedades(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
	Log("LOGS/hedit.log", string);
	return 1;
}
else if(strcmp(choice, "customexterior", true) == 0)
{
	if(ProInfo[houseid][hCustomExterior] == 0)
	{
		ProInfo[houseid][hCustomExterior] = 1;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Personalizado! (1)" );
	}
	else
	{
		ProInfo[houseid][hCustomExterior] = 0;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Normal! (0)" );
	}
	savePropiedades(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
	Log("LOGS/hedit.log", string);
	return 1;
}
else if(strcmp(choice, "exterior", true) == 0)
{
    new zone[MAX_ZONE_NAME];
    GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
    format(ProInfo[houseid][hDireccion], 256, "%s", zone);
	GetPlayerPos(playerid, ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]);
	GetPlayerFacingAngle(playerid, ProInfo[houseid][hExteriorA]);
	SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el exterior de la casa!" );
	DestroyDynamicPickup(ProInfo[houseid][hPickupID]);
    savePropiedades(houseid);
	format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
	Log("LOGS/hedit.log", string);
	if(ProInfo[houseid][hOwned] ==0)
	{
		DestroyDynamicPickup(ProInfo[houseid][hPickupID]);
		DestroyDynamic3DTextLabel(ProInfo[houseid][hTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",ProInfo[houseid][hValue],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
		ProInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]+0.5,10.0);
		ProInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]);
	}
	else
	{
		if(ProInfo[houseid][hRentable] == 0)
		{
			DestroyDynamicPickup(ProInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(ProInfo[houseid][hTextID]);
			format(string, sizeof(string), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",ProInfo[houseid][hOwner],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
			ProInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]+0.5,10.0);
			ProInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]);
		}
		else
		{
			DestroyDynamicPickup(ProInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(ProInfo[houseid][hTextID]);
			format(string, sizeof(string), ""COL_HOUSET"Dueño:\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Usa /rentar para rentar aquí",ProInfo[houseid][hOwner],ProInfo[houseid][hRentFee],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
			ProInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]+0.5,10.0);
			ProInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[houseid][hExteriorX], ProInfo[houseid][hExteriorY], ProInfo[houseid][hExteriorZ]);
		}
	}
}
else if(strcmp(choice, "nivel", true) == 0)
{
	ProInfo[houseid][hLevel] = amount;
	format(string, sizeof(string), "Editaste el nivel a %d.", amount);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if(ProInfo[houseid][hOwned] ==0)
	{
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",ProInfo[houseid][hValue],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
		UpdateDynamic3DTextLabelText(ProInfo[houseid][hTextID], COLOR_GREEN2, string);
	}
	else
	{
		if(ProInfo[houseid][hRentable] == 0)
		{
			format(string, sizeof(string), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",ProInfo[houseid][hOwner],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
			UpdateDynamic3DTextLabelText(ProInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		else
		{
			format(string, sizeof(string), ""COL_HOUSET"Dueño:\n%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Usa /rentar para rentar aquí",ProInfo[houseid][hOwner],ProInfo[houseid][hRentFee],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
			UpdateDynamic3DTextLabelText(ProInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
	}
	format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
	Log("LOGS/hedit.log", string);
}
else if(strcmp(choice, "precio", true) == 0)
{
	ProInfo[houseid][hValue] = amount;
	format(string, sizeof(string), "Editaste el precio a $%d.", amount );
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if(ProInfo[houseid][hOwned] ==0)
	{
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",ProInfo[houseid][hValue],ProInfo[houseid][hLevel],houseid,ProInfo[houseid][hDireccion],houseid+178);
		UpdateDynamic3DTextLabelText(ProInfo[houseid][hTextID], COLOR_GREEN2, string);
	}
	format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
	Log("LOGS/hedit.log", string);
}
savePropiedades(houseid);
return 1;
}
CMD:borrarcasa(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 4000)
	{
		new x;
		if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borrarcasa [Casa ID] (Sistema nuevo de casas).");
		if(x < 0 || x >= MAX_PROPIEDADES) return SendClientMessageEx(playerid, COLOR_GREY, "* Casa ID inválida! (0 - 50)");
		if(ProInfo[x][hExteriorX] == 0.0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esta casa no existe, créala antes.");
		BorrarCasaID(x);
		SendClientMessageEx(playerid, COLOR_GREY, "[AVISO IMPORTANTE]{FFFFFF}: Esta casa ha sido borrada, datos reseteados. Nuevo slot queda libre.");
	}
	return 1;
}
CMD:crearcasa(playerid, params[])
{
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No conectado.");
    if(Info[playerid][pAdminZC] >= 4000)
    {
    new x; // Será la ID del negocio.
	if(sscanf(params, "d", x)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearcasa [ID]");
	if(x < 0 || x >= MAX_PROPIEDADES) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de la casa inválido! (0 - 50)");
	if(ProInfo[x][hExteriorX] == 0.0)
	{
  		// Coordenadas.
  		new zone[MAX_ZONE_NAME], szFileStr[256], string[128];
    	GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
    	format(ProInfo[x][hDireccion], 256, "%s", zone); // Dirección del lugar.
    	format(ProInfo[x][hOwner], MAX_PLAYER_NAME, "Nadie"); // Propietario: Nobody.
    	ProInfo[x][hOwned] = 0; // Esto servirá para revisar si la casa está en venta. (0 = En venta - 1 = Comprada)
		GetPlayerPos(playerid, ProInfo[x][hExteriorX], ProInfo[x][hExteriorY], ProInfo[x][hExteriorZ]); //Exterior.
		GetPlayerFacingAngle(playerid, ProInfo[x][hExteriorA]); // Ángulo.
		// Ajuste de propiedades:
  		ProInfo[x][hHInteriorWorld] = 0;
        ProInfo[x][hCustomInterior] = 0;
        ProInfo[x][hCustomExterior] = 0;
        
		ClearPropiedad(x); // Materiales - Drogas - Dinero - Armas.
		ClearRopero(x); // Ropero slots (10 Skins).
		
		// Información:
        ProInfo[x][hLevel] = 5;
        ProInfo[x][hValue] = 150000;
        ProInfo[x][hExteriorR] = 0.0;
        ProInfo[x][hLock] = 1;
        ProInfo[x][hRentable] = 1;
        ProInfo[x][hRentFee] = -100; // Valor negativo, no se podrá alquilar.
        format(string, sizeof(string), "Propiedad [ID: %d] ha sido creada satisfactoriamente. (En caso de bug, /borrarcasa [ID])", x);
		Message(playerid, COLOR_GREY, string);
		Message(playerid, COLOR_WHITE, "Para comenzar a editar la casa, usa /editarh. Para ponerla en venta /avecasa. Más comandos en /cmdstaff.");
		savePropiedades(x); // Guardado de la creación. Para no sobrescribir.
		if(ProInfo[x][hOwned])
		{
			if(ProInfo[x][hRentable] == 0) format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",ProInfo[x][hOwner],ProInfo[x][hLevel],x,ProInfo[x][hDireccion],x+178);
			else format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Escribe /rentar para rentar aquí",ProInfo[x][hOwner],ProInfo[x][hRentFee],ProInfo[x][hLevel],x,ProInfo[x][hDireccion],x+178);
		}
		else format(szFileStr, sizeof(szFileStr), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Dirección: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarpropiedad.", ProInfo[x][hDireccion], ProInfo[x][hValue],ProInfo[x][hLevel],x);
		ProInfo[x][hPickupID] = CreateDynamicPickup(1272, 23, ProInfo[x][hExteriorX], ProInfo[x][hExteriorY], ProInfo[x][hExteriorZ]);
		ProInfo[x][hTextID] = CreateDynamic3DTextLabel(szFileStr, -1, ProInfo[x][hExteriorX], ProInfo[x][hExteriorY], ProInfo[x][hExteriorZ]+0.5,10.0);
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* Esta ID está en uso, intenta usar otra diferente. Usa /ircasa para revisarla.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "No autorizado.");
	return 1;
}
/////////////////// SISTEMA BASE DE CASAS //////////////////////
CMD:preciorenta(playerid, params[])
{
	new string[256], fee;
	if(sscanf(params, "d", fee)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /preciorenta (valor)");

	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hExteriorX], HouseInfo[Info[playerid][pPhousekey]][hExteriorY], HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ])))
	{
		if(!(1 <= fee <= 10000))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Renta minima es $1, maxima es $10,000.");
		}
		else
		{

			HouseInfo[Info[playerid][pPhousekey]][hRentFee] = fee;
			format(string, sizeof(string), "Rentaste tu casa a $%i.", HouseInfo[Info[playerid][pPhousekey]][hRentFee]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(HouseInfo[Info[playerid][pPhousekey]][hRentable]) format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hRentFee],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			else format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], COLOR_GREEN2, string);
		}
	}
	else if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hExteriorX], HouseInfo[Info[playerid][pPhousekey2]][hExteriorY], HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hInteriorX], HouseInfo[Info[playerid][pPhousekey2]][hInteriorY], HouseInfo[Info[playerid][pPhousekey2]][hInteriorZ])))
	{

		if(!(1 <= fee <= 10000))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Renta minima es $1, maxima es $10,000.");
		}
		else {

			HouseInfo[Info[playerid][pPhousekey2]][hRentFee] = fee;
			format(string, sizeof(string), "Rentaste tu casa a $%i.", HouseInfo[Info[playerid][pPhousekey2]][hRentFee]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(HouseInfo[Info[playerid][pPhousekey2]][hRentable]) format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hRentFee],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			else format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey2]][hTextID], COLOR_GREEN2, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es dueño de una casa, o no estás en una de ellas.");
	return 1;
}

CMD:ponerrenta(playerid, params[])
{
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hExteriorX], HouseInfo[Info[playerid][pPhousekey]][hExteriorY], HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]))) {

		/*new
			szMessage[128];*/

		if(!HouseInfo[Info[playerid][pPhousekey]][hRentable])
		{
			HouseInfo[Info[playerid][pPhousekey]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hRentFee],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ahora está en renta.");
		}
		else {
			HouseInfo[Info[playerid][pPhousekey]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ya no está en renta." );
		}
	}
	else if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hExteriorX], HouseInfo[Info[playerid][pPhousekey2]][hExteriorY], HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hInteriorX], HouseInfo[Info[playerid][pPhousekey2]][hInteriorY], HouseInfo[Info[playerid][pPhousekey2]][hInteriorZ]))) {
		/*new
			szMessage[128];*/

		if(!HouseInfo[Info[playerid][pPhousekey2]][hRentable]) {
			HouseInfo[Info[playerid][pPhousekey2]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hRentFee],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey2]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ahora está en renta.");
		}
		else {
			HouseInfo[Info[playerid][pPhousekey2]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[Info[playerid][pPhousekey2]][hOwner],HouseInfo[Info[playerid][pPhousekey2]][hLevel],Info[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey2]][hTextID], COLOR_GREEN2, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "Está casa ya no está en renta." );
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa, o no está en uno de ellas.");
	return 1;
}

CMD:editar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres administrador.");
		return 1;
	}

	new string[256], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editar (nombre) (valor)");
		SendClientMessageEx(playerid, COLOR_GREY,  "Nombres: Nivel, Precio");
		return 1;
	}

	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
			format(string, sizeof(string), "Casa: %d", i);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			if(amount > 0)
			{
				if(strcmp(choice,"Nivel",true) == 0)
				{
					HouseInfo[i][hLevel] = amount;
				}
				else if(strcmp(choice,"Precio",true) == 0)
				{
					HouseInfo[i][hValue] = amount;
				}
			}
			if(HouseInfo[i][hOwned] ==0)
			{
				format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[i][hDescription],HouseInfo[i][hValue],HouseInfo[i][hLevel],i);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
			}
			else
			{
				if(HouseInfo[i][hRentable] == 0)
				{
					format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
				}
				else
				{
					format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[i][hOwner],HouseInfo[i][hRentFee],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
				}
			}
		}
	}
	return 1;
}

CMD:casasiguiente(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] >= 4000)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Lista de casa disponible siguiente.");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hExteriorX] == 0.0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d está casa está disponible para usarla", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado!");
	return 1;
}

CMD:hname(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}

	new string[128], houseid, ownername[24];
	if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /hname (houseid) (Nombre)");

	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(string, sizeof(string), "Estableciste el nombre del dueño de la casa a: %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
	format(string, sizeof(string), "%s has edited HouseID %d's Owner to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	Log("LOGS/hedit.log", string);
	return 1;
}

CMD:editarcasa(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 4000) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[256], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarcasa (Nombre) (houseid) [(Opcional)Codigo]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, Clase (1-3), Nivel, Precio, Tiempo");
		return 1;
	}
	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el interior de la casa!" );
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("LOGS/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Personalizado! (1)" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Normal! (0)" );
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("LOGS/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Personalizado! (1)" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Normal! (0)" );
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("LOGS/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el exterior de la casa!" );
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("LOGS/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
				HouseInfo[houseid][hPickupID] = CreateDynamicPickup(19522, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
			else
			{
				DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
				HouseInfo[houseid][hPickupID] = CreateDynamicPickup(19522, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
		}
	}
	else if(strcmp(choice, "nivel", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "Editaste el nivel a %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
			}
			else
			{
				format(string, sizeof(string), "{FF0000}Propiedad de %s\n{A4A4A4}Renta:{FFFFFF} $%d\n{A4A4A4}Nivel:{FFFFFF} %d\n[ID: %d]\n\n{FAAC58}Para rentar usa: /rentar.",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
			}
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("LOGS/hedit.log", string);
	}
	else if(strcmp(choice, "precio", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "Editaste el precio a $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel], houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("LOGS/hedit.log", string);
	}
	else if(strcmp(choice, "tiempo", true) == 0)
	{
	    if(amount <= 0 && amount > 31) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo es posible editar el número de dias de 1 a 31. [/hinfo]");
		HouseInfo[houseid][hTiempo] = amount;
		format(string, sizeof(string), "Editaste el tiempo de la casa a %d días.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has edited HouseID %d's Timer to $%d.", GetPlayerNameEx(playerid), amount);
		Log("LOGS/hedit.log", string);
	}
	else if(strcmp(choice, "clase", true) == 0)
	{
		switch(amount)
		{
			case 1:
			{
				format(HouseInfo[houseid][hDescription], 64, "Clase Baja" );
				SendClientMessageEx(playerid, COLOR_WHITE, "Edistaste la casa a clase: 1: (Baja)" );
			}
			case 2:
			{
				format(HouseInfo[houseid][hDescription], 64, "Clase Media" );
				SendClientMessageEx(playerid, COLOR_WHITE, "Edistaste la casa a clase: 2: (Media)"  );
			}
			case 3:
			{
				format(HouseInfo[houseid][hDescription], 64, "Clase Alta" );
				SendClientMessageEx(playerid, COLOR_WHITE, "Edistaste la casa a clase: 3: (Alta)"  );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel], houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("LOGS/hedit.log", string);
	}
	SaveHouses();
	return 1;
}

CMD:cseguro(playerid, params[])
{
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hExteriorX], HouseInfo[Info[playerid][pPhousekey]][hExteriorY], HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ])))
	{

		/*new
			szMessage[30 + MAX_PLAYER_NAME];*/

		if(HouseInfo[Info[playerid][pPhousekey]][hLock] == 1)
		{
			HouseInfo[Info[playerid][pPhousekey]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s ha abierto su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[Info[playerid][pPhousekey]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s ha cerrado su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hExteriorX], HouseInfo[Info[playerid][pPhousekey2]][hExteriorY], HouseInfo[Info[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[Info[playerid][pPhousekey2]][hInteriorX], HouseInfo[Info[playerid][pPhousekey2]][hInteriorY], HouseInfo[Info[playerid][pPhousekey2]][hInteriorZ])))
	{

		/*new
			szMessage[30 + MAX_PLAYER_NAME];*/

		if(HouseInfo[Info[playerid][pPhousekey2]][hLock] == 1)
		{
			HouseInfo[Info[playerid][pPhousekey2]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s ha abierto su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[Info[playerid][pPhousekey2]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s ha cerrado su casa.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una casa o no estás cerca de la puerta para hacer esto.");
	return 1;
}
CMD:cocinar(playerid, params[])
{
	new string[128];
	new house = Info[playerid][pPhousekey];
	new house2 = Info[playerid][pPhousekey2];
	if(house == INVALID_HOUSE_ID && house2 == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 25.0,HouseInfo[house][hInteriorX],HouseInfo[house][hInteriorY],HouseInfo[house][hInteriorZ]))
	{
		if(Info[playerid][pTakeAway] == 1)
		{
			Info[playerid][pTakeAway] = 0;
			format(string, sizeof(string), "* %s abre la nevera y calienta las lentejas de ayer.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessageEx(playerid, COLOR_GREY, "Recuperaste vida, pero no tienes más comida en casa, tu nevera quedó vacia.");
			SetHP(playerid,100);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes comida para llevar en casa o usaste toda, comprala en cualquier restaurante.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 25.0,HouseInfo[house2][hInteriorX],HouseInfo[house2][hInteriorY],HouseInfo[house2][hInteriorZ]))
	{
		if(Info[playerid][pTakeAway] == 1)
		{
			Info[playerid][pTakeAway] = 0;
			format(string, sizeof(string), "* %s abre la nevera y agarra un bocadillo que compró en el restaurante.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessageEx(playerid, COLOR_GREY, "Recuperaste vida, pero no tienes más comida, tu nevera quedó vacia.");
			SetHP(playerid,100);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes comida para llevar en casa, comprala en cualquier restaurante.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar en la cocina de tu casa para usar el comando /cocinar.");
	return 1;
}
CMD:licenciataxi(playerid, params[])
{
    if(Info[playerid][pJob] != 8 && Info[playerid][pJob2] != 8)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No eres taxista.");
	}
    if(Info[playerid][pTaxiLicense] != 0)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "¿Para que necesitas otra?, ya tienes una.");
	}
	if(!PlayerToPoint(20.0,playerid,1752.5104,-1903.1664,13.5631))
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado.");
	}
	if(GetPlayerCash(playerid) < 200)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes para pagar está licencia.");
	}
	GivePlayerCash(playerid,-200);
	Info[playerid][pTaxiLicense] = 1;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Adquiriste la licencia de servicios de taxista ahora puedes trabajar con tu coche.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Ya no es necesario usar coches de Unity.");
	return 1;
}

CMD:tomarpizza(playerid, params[])
{
	if (Info[playerid][pJob] != 4 && Info[playerid][pJob2] != 4)
	{
		SendClientMessageEx(playerid,COLOR_WHITE,"No eres repartidor de Pizza.");
		return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!(IsAPizzabike(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
	    SendClientMessageEx(playerid,COLOR_WHITE,"Tu necesitas estár en una motocicleta de repartidor de pizza.");
	    return 1;
	}
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 2098.6919,-1789.5027,13.5547) || IsPlayerInRangeOfPoint(playerid, 3.0, -2346.1243,-136.8405,35.1734))
	{
		SendClientMessageEx(playerid,COLOR_WHITE,"No estás en el lugar adecuado.");
		return 1;
	}
	if(GetPVarInt(playerid, "Pizza") > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usted ya está entregando pizzas.");
		return 1;
	}
	/*if (Info[playerid][pJob] == 4 || Info[playerid][pJob2] == 4)
	{
		SendClientMessageEx(playerid,COLOR_WHITE,"La pizzería no dispone de productos, tendrás que avisar al encargado del negocio que solicite más productos.");
		return 1;
	}*/
    if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No hay pedidos disponibles a realizar, intentelo más tarde. (1)");
	new rand = random(MAX_PROPIEDADES);
	if(rand == 50)
	{
	   	rand = 1;
	}
	if(ProInfo[rand][hExteriorX] == 0.0)
	{
	    return SendClientMessageEx(playerid, COLOR_WHITE, "No hay pedidos disponibles a realizar, intentelo más tarde. (2)");
	}
	SetPVarInt(playerid, "tpPizzaTimer", floatround((GetPizzaDistance(rand) / 100), floatround_round)); // Si lo hace en una décima de proprición del tiempo establecido.
	SetPVarInt(playerid, "pizzaTotal", floatround((GetPizzaDistance(rand) / 10), floatround_round));
	SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTotal"));
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	//new szMessage[128];
	format(szMessage, sizeof(szMessage), "Has cogido una pizza. Tienes {FF0000}%d{FFFFFF} segundos para entregarla!", /*HouseInfo[rand][hOwner],*/ GetPVarInt(playerid, "pizzaTotal"));
	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	SetPVarInt(playerid, "Pizza", rand);
 	PizzaBar[playerid] = CreateProgressBar(500.00, 107.00, 104.50, 1.50, -32513, 100.0);
	SetProgressBarValue(PizzaBar[playerid], 100.0);
	ShowProgressBarForPlayer(playerid, PizzaBar[playerid]);
	SetPlayerCheckpoint(playerid, ProInfo[rand][hExteriorX], ProInfo[rand][hExteriorY], ProInfo[rand][hExteriorZ], 5);
	AntiAbuso[playerid] = 1;
	return SetTimerEx("AntiAbusoTimer", 150000, false, "i", playerid); // 2,5 Minutos.
}
/*CMD:saem(playerid, params[])
{
	if(Team_SAEM(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,332.2786,2345.7732,8905.4180))//Saem Duty
		{
			SafeDialogEx(playerid, NGMENU, DIALOG_STYLE_LIST, "{00F70C}SAEM Menu","Duty\nUniformes\nArmas\nEncubierto\nKevlar Vest\nFirst Aid Kit\nAccessorios\nParacaídas", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ver los casilleros de SAEM.");
		}
	}
	return 1;
}
CMD:saem(playerid, params[])
{
	if(Team_SAEM(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,332.2786,2345.7732,8905.4180) || IsPlayerInRangeOfPoint(playerid,10.0,2914.18677, 2126.63745, 0.13430))//Saem Duty
		{
			SafeDialogEx(playerid, NGMENU, DIALOG_STYLE_LIST, "{00F70C}SAEM Menu","Duty\nUniformes\nArmas\nEncubierto\nKevlar Vest\nFirst Aid Kit\nAccessorios\nParacaídas", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes ver los casilleros de SAEM.");
		}
	}
	return 1;
}*/
zcmd(respawntodo, playerid, params[])
{
   if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(!IsPlayerConnected(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado.");
	if(Info[playerid][pAdminZC] >= 3)
	{
		new bool:unwanted[MAX_VEHICLES];
		for(new player=0; player<MAX_PLAYERS; player++)
		{
			if(IsPlayerInAnyVehicle(player))
			{
				unwanted[GetPlayerVehicleID(player)]=true;
			}
		}
		for(new car = 0; car < MAX_VEHICLES; car++)
		{
			if(!unwanted[car]) SetVehicleToRespawn(car);
			SetVehicleParamsEx(car,0,0,0,0,0,0,0);
			arr_Engine{car} = 0;
		}
		new string[128];
		format(string, sizeof(string), "[AdmCmdExe]: Respawn total realizado por %s.",GetPlayerNameEx(playerid));
		return ABroadCast(COLOR_GENERAL, string, 3);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:reparartodo(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(IsPlayerConnected(playerid)) {
        if(Info[playerid][pAdminZC] < 4) {
            SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
            return 1;
        }
        for(new v = 0; v < MAX_VEHICLES; v++)
		{
            RepairVehicle(v);
        	SetVehicleHealth(v, 1000.0);
        }
        SendClientMessageEx(playerid, COLOR_GREEN, "Todos los vehiculos reparados.");
    }
    return 1;
}

CMD:vendercosecha(playerid, params[])
{
    if(PlayerToPoint(20.0,playerid,-32.1567,-1438.8259,25.7266))
    {
   	if(Info[playerid][pJob] == 9 || Info[playerid][pJob2] == 9)
   	{
   	    if(Info[playerid][pCosecha] > 1)
   	    {
   	        new string[48];
			format(string, sizeof(string), "Vendiste %d Kg de cosecha y sumaste {A2DC35}$%i{FFFFFF} a tu bolsillo", Info[playerid][pCosecha], Info[playerid][pCosecha]*10);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			GivePlayerCash(playerid, Info[playerid][pCosecha]*10);
			Info[playerid][pCosecha] = 0;
			return 1;
   	    }
   	    else
   	    {
   	        SendClientMessageEx(playerid, COLOR_WHITE, "Lo mínimo para vender es 1 Kg.");
   	        return 1;
   	    }
   	}
   	}
   	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres Granjero.");
   	return 1;
}

CMD:limpiarcamion(playerid, params[])
{
	if(!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
        return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		new truckcontents = TruckContents[closestcar];
		if(truckcontents < 11)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No hay artículos ilegales en el camión.");
			return 1;
		}
		new string[128];

		new truckcontentname[50];

		if(truckcontents >= 11 && truckcontents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Armas Ilegales"); }
		else if(truckcontents >= 16 && truckcontents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Drogas Ilegales"); }
		else if(truckcontents >= 21 && truckcontents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Materiales Ilegales"); }

 		foreach(Player, i)
		{
  			if(TruckUsed[i] == closestcar)
     		{
    			DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				TruckContents[closestcar] = 0;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessageEx(i, COLOR_WHITE, "Tu entrega no ha podido ser completada. Las autoridades han confiscado los productos ilegales.");
       		}
		}
		format(string, sizeof(string), "Removiste las %s del camión.", truckcontentname);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s ha tomado los puntos ilegales de los camiones.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
   	else
	{
 		SendClientMessageEx(playerid, COLOR_WHITE, "No está cerca de un camión.");
 	}
    return 1;
}

CMD:robarcamion(playerid, params[])
{
	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid))
	    {
     		if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE || GetPVarInt(playerid, "Packages") == 0 || TaxiAccepted[playerid] == 999 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
	        {
         		if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "En este momento está cargando tu camión!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Estás en otra entrega, usa /cancelar camion para cancelar la entrega.");
					return 1;
	            }
				if(TruckContents[vehicleid] == 0)
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Este camión no tiene nada de mercancía.");
				    return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 65, -1572.767822, 81.137527, 3.554687))
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes robar camiones estando cerca de Ocean Docks.");
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Estás tratando de robar el camión, por favor espere.");

				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 1);

 				LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
				SetProgressBarValue(LoadTruckBar[playerid], 100.0);
				ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
				SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor asegúrate de que los otros checkpoints no esten activos.");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás manejando un camión.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres camionero.");
	return 1;
}

function HijackTruck(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("HijackTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

        if(!IsPlayerInVehicle(playerid, vehicleid))
        {
       		DestroyProgressBar(LoadTruckBar[playerid]);
			LoadTruckBar[playerid] = INVALID_BAR_ID;
			LoadTruckTime[playerid] = 0;
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 			DisablePlayerCheckpoint(playerid);
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* No pudiste robar el camión.");
			return 1;
        }


		foreach(Player, i)
		{
  			if(TruckUsed[i] == vehicleid)
  			{
				DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessageEx(i, COLOR_WHITE, "Su entrega de camionero ha fallado, le han robado el camión.");
			}
		}

  		new truckdeliver = TruckContents[vehicleid];
  		SetPVarInt(playerid, "TruckDeliver", truckdeliver);
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de comida y bebidas.");
			SetPlayerCheckpoint(playerid, 1025.6554,-1362.6024,13.5649, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de comida y bebidas.");
			SetPlayerCheckpoint(playerid, 793.0801,-1625.8910,13.3906, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de comida y bebidas.");
			SetPlayerCheckpoint(playerid, 1197.6417,-887.7512,43.0229, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2247.2351,-1661.2406,15.6749, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de ropa.");
			SetPlayerCheckpoint(playerid, 455.2845,-1501.5569,31.0434, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2112.7766,-1216.1750,23.8047, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de materiales.");
			SetPlayerCheckpoint(playerid, 1474.4786,-1140.6188,24.0781, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de productos del 24/7.");
			SetPlayerCheckpoint(playerid, 1361.022827, -911.7898, 38.0, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de productos del 24/7.");
			SetPlayerCheckpoint(playerid, 1347.0487,-1752.1692,13.7886, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de productos del 24/7.");
			SetPlayerCheckpoint(playerid, 1925.5968,-1789.5017,13.1459, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de armas ilegales.");
			SetPlayerCheckpoint(playerid, -64.5445,-1120.5356,1.0781, 5);

			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50)
			{ SetPVarInt(playerid, "TruckDeliver", 11); }
			else if(level >= 51 && level <= 100)
			{ SetPVarInt(playerid, "TruckDeliver", 12); }
			else if(level >= 101 && level <= 200)
			{ SetPVarInt(playerid, "TruckDeliver", 13); }
			else if(level >= 201 && level <= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 14); }
			else if(level >= 401)
			{ SetPVarInt(playerid, "TruckDeliver", 15); }
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de drogas.");
			SetPlayerCheckpoint(playerid, -86.3670,-1195.7297,2.1664, 5);

			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50)
			{ SetPVarInt(playerid, "TruckDeliver", 16); }
			else if(level >= 51 && level <= 100)
			{ SetPVarInt(playerid, "TruckDeliver", 17); }
			else if(level >= 101 && level <= 200)
			{ SetPVarInt(playerid, "TruckDeliver", 18); }
			else if(level >= 201 && level <= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 19); }
			else if(level >= 401)
			{ SetPVarInt(playerid, "TruckDeliver", 20); }
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Tu camión robado está lleno de materiales ilegales.");
			SetPlayerCheckpoint(playerid, -70.8884,-1549.4922,2.6172, 5);

			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50)
			{ SetPVarInt(playerid, "TruckDeliver", 21); }
			else if(level >= 51 && level <= 100)
			{ SetPVarInt(playerid, "TruckDeliver", 22); }
			else if(level >= 101 && level <= 200)
			{ SetPVarInt(playerid, "TruckDeliver", 23); }
			else if(level >= 201 && level <= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 24); }
			else if(level >= 401)
			{ SetPVarInt(playerid, "TruckDeliver", 25); }
		}

		SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Entregar la mercancía a la ubicación especificada (Ir a Checkpoint).");
		SendClientMessageEx(playerid, COLOR_REALRED, "[Advertencia]: Cuidado con los que roban camiones, pueden robarte y quedarse con tu mercancía.");
		if(truckdeliver >= 9)
		{
			SendClientMessageEx(playerid, COLOR_REALRED, "{FF8000}[INDICACION]:{FFFFFF} El camión está lleno de mercancía ilegal cuidado con los policías que te pueden quitar tu mercancía.");
		}
	}
	return 1;
}

CMD:cargarcamion(playerid, params[])
{
	if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE || GetPVarInt(playerid, "Packages") == 0 || TaxiAccepted[playerid] == 999 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
			{
	            if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "En este momento está cargando su camión!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Ya estás en otra entrega, usa /cancelar camión para cancelar la entrega.");
					return 1;
	            }
	            gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
	            SetPlayerCheckpoint(playerid,2198.1377,-2660.1250,13.5469, 4);
	            GameTextForPlayer(playerid, "~w~Ve al checkpoint", 5000, 1);
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Recoge mercancía en el lugar especificado. (Ve al CheckPoint)");
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Recuerda que sólo podrás hacer 10 viajes por payday, también recuerda manejar por el carril correcto o puedes ser sancionado.");
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor, asegúrese de que su checkpoint actual esté destruido.");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás manejando un camión.");
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "No eres camionero.");
	return 1;
}

CMD:eliminarcheckpoint(playerid, params[])
{
    DeletePVar(playerid, "TrackCar");
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	TaxiCallTime[playerid] = 0; EMSAccepted[playerid] = 999;
 	TaxiAccepted[playerid] = 999; MedicAccepted[playerid] = 999;
 	MechanicCallTime[playerid] = 0;
	MedicCallTime[playerid] = 0;
  	SetPVarInt(playerid, "Pizza", 0);
    SendClientMessageEx(playerid,COLOR_WHITE,"{A2DC35}[INFO]:{FFFFFF} Todos los checkpoints fueron eliminados.");
	return 1;
}

function LoadMon(playerid)
{
    LoadMonTime[playerid]--;
	SetProgressBarValue(LoadMoney[playerid], GetProgressBarValue(LoadMoney[playerid])-1.0);
	UpdateProgressBar(LoadMoney[playerid], playerid);
	if(GetProgressBarValue(LoadMoney[playerid]) > 1) SetTimerEx("LoadMon", 3000, 0, "d", playerid);
	if(GetProgressBarValue(LoadMoney[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadMoney[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadMoney[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoney[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadMoney[playerid], COLOR_RED);
		UpdateProgressBar(LoadMoney[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoney[playerid]) <= 1.0)
	{
  		DestroyProgressBar(LoadMoney[playerid]);
    	LoadMoney[playerid] = INVALID_BAR_ID;
	}
	return 1;
}

function LoadMonn(playerid)
{
    LoadMonTimee[playerid]--;
	SetProgressBarValue(LoadMoneyy[playerid], GetProgressBarValue(LoadMoneyy[playerid])-1.0);
	UpdateProgressBar(LoadMoneyy[playerid], playerid);
	if(GetProgressBarValue(LoadMoneyy[playerid]) > 1) SetTimerEx("LoadMonn", 1000, 0, "d", playerid);
	if(GetProgressBarValue(LoadMoneyy[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadMoneyy[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadMoneyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyy[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadMoneyy[playerid], COLOR_RED);
		UpdateProgressBar(LoadMoneyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyy[playerid]) <= 1.0)
	{
  		DestroyProgressBar(LoadMoneyy[playerid]);
    	LoadMoneyy[playerid] = INVALID_BAR_ID;
	}
	return 1;
}

function LoadMonnnn(playerid)
{
    LoadMonTimeeee[playerid]--;
	SetProgressBarValue(LoadMoneyyyy[playerid], GetProgressBarValue(LoadMoneyyyy[playerid])-1.0);
	UpdateProgressBar(LoadMoneyyyy[playerid], playerid);
	if(GetProgressBarValue(LoadMoneyyyy[playerid]) > 1) SetTimerEx("LoadMonnnn", 500, 0, "d", playerid);
	if(GetProgressBarValue(LoadMoneyyyy[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadMoneyyyy[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadMoneyyyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyyyy[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadMoneyyyy[playerid], COLOR_RED);
		UpdateProgressBar(LoadMoneyyyy[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadMoneyyyy[playerid]) <= 1.0)
	{

	    DisablePlayerCheckpoint(playerid);
  		DestroyProgressBar(LoadMoneyyyy[playerid]);
    	LoadMoneyyyy[playerid] = INVALID_BAR_ID;
	}
	return 1;
}

function LoadTruck(playerid)
{
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("LoadTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

  		new vehicleid = GetPlayerVehicleID(playerid);
  		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
  		TruckContents[vehicleid] = truckdeliver;
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se lleno de alimentos y bebidas.");
			SetPlayerCheckpoint(playerid, 1025.6554,-1362.6024,13.5649, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se lleno de alimentos y bebidas.");
			SetPlayerCheckpoint(playerid, 793.0801,-1625.8910,13.3906, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se lleno de alimentos y bebidas.");
			SetPlayerCheckpoint(playerid, 1197.6417,-887.7512,43.0229, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2247.2351,-1661.2406,15.6749, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de ropa.");
			SetPlayerCheckpoint(playerid, 455.2845,-1501.5569,31.0434, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de ropa.");
			SetPlayerCheckpoint(playerid, 2112.7766,-1216.1750,23.8047, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su Camión se lleno de Materiales.");
			SetPlayerCheckpoint(playerid, 1474.4786,-1140.6188,24.0781, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó con artículos 24/7.");
			SetPlayerCheckpoint(playerid, 1361.022827, -911.7898, 38.0, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó con artículos 24/7.");
			SetPlayerCheckpoint(playerid, 1347.0487,-1752.1692,13.7886, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó con artículos 24/7.");
			SetPlayerCheckpoint(playerid, 1925.5968,-1789.5017,13.1459, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó de armas.");
			SetPlayerCheckpoint(playerid, -64.5445,-1120.5356,1.0781, 5);
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó de drogas.");
			SetPlayerCheckpoint(playerid, -86.3670,-1195.7297,2.1664, 5);
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Su camión se llenó de materiales ilegales.");
			SetPlayerCheckpoint(playerid, -70.8884,-1549.4922,2.6172, 5);
		}

		SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Entregar la mercancía a la ubicación especificada (ve al checkpoint).");
		SendClientMessageEx(playerid, COLOR_REALRED, "{FF0000}[ATENCION]:{FFFFFF} Tenga cuidado con los secuestradores de camiones, que puede robar su vehículo y salirse con la mercancía.");
		if(truckdeliver >= 11)
		{
			SendClientMessageEx(playerid, COLOR_REALRED, "{FF0000}[ATENCION 2]:{FFFFFF} Estás transportando mercancía ilegal recuerda que los policías pueden capturarte y quitarte la mercancía.");
		}
		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	}
	return 1;
}

CMD:ajustesv(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 6000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
		return 1;
	}

	new string[128], rate;
	if(sscanf(params, "d", rate)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ajustesv (rate) (1: Low) (2: Medium) (3: High)");

	if(rate > 3 || rate < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /ajustesv (rate) (1: Low) (2: Medium) (3: High)");
		return 1;
	}

	switch(rate)
	{
	case 1:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (LOW), es recomendable usarlo cuando el contador de players está bajo 100.");
			format(string, sizeof(string), "INFRANET-RP: %s ha cambiado el streamer rate. (Bajo 100 Players).",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL, string, 2);
			SendRconCommand("onfoot_rate 40");
			SendRconCommand("incar_rate 40");
			SendRconCommand("weapon_rate 40");
			SendRconCommand("stream_distance 300.0");
			SendRconCommand("stream_rate 1000");
			Streamer_TickRate(50);
		}
	case 2:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (MEDIUM), es recomendable usarlo cuando el contador de players está bajo 200.");
			format(string, sizeof(string), "INFRANET-RP: %s ha cambiado el streamer rate. (Bajo 200 Players).",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL, string, 2);
			SendRconCommand("onfoot_rate 40");
			SendRconCommand("incar_rate 40");
			SendRconCommand("weapon_rate 40");
			SendRconCommand("stream_distance 250.0");
			SendRconCommand("stream_rate 1000");
			Streamer_TickRate(75);
		}
	case 3:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (MEDIUM), es recomendable usarlo cuando el contador de players está sobre 200.");
			format(string, sizeof(string), "INFRANET-RP: %s ha cambiado el streamer rate. (sobre 200 Players).",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL, string, 2);
			SendRconCommand("onfoot_rate 50");
			SendRconCommand("incar_rate 50");
			SendRconCommand("weapon_rate 50");
			SendRconCommand("stream_distance 200.0");
			SendRconCommand("stream_rate 2000");
			Streamer_TickRate(100);
		}
	}
	return 1;
}

CMD:ta(playerid, params[])
{
 	if(IsACop(playerid))
	{
 		new string[128];
        SetPlayerAttachedObject(playerid, 0, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
        HaveTaser[playerid] = 1;
		format(string, sizeof(string), "Te pusiste el tazer");
		GameTextForPlayer(playerid,string,4000,3);
		format(string, sizeof(string), "* %s saca su tazer del cinturón.",GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		for( new i; i<13; i++)
		{
		GetPlayerWeaponData(playerid, i, qArmas[playerid][i][0], qArmas[playerid][i][1]);
		}
		ResetPlayerWeapons(playerid);
	}
	return 1;
}

CMD:taoff(playerid, params[])
{
 	if(IsACop(playerid))
	{
	    new string[128];
  		RemovePlayerAttachedObject(playerid, 0);
  		HaveTaser[playerid] = 0;
		format(string, sizeof(string), "Te quitaste el tazer");
		GameTextForPlayer(playerid,string,4000,3);
		format(string, sizeof(string), "* %s guarda su tazer en el cinturón.",GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		for( new i; i<13; i++)
   		{
       	GivePlayerValidWeapon(playerid, qArmas[playerid][i][0]);
   		}
	}
	return 1;
}

CMD:vmaletero(playerid, params[]){
    new string[128];
    if (!IsACop(playerid)){
        SendClientMessageEx(playerid, COLOR_WHITE, "* No perteneces a las fuerzas de la ley.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0)){
        SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No estás cerca de ningún vehiculo.");
        return 1;
    }
    foreach(Player, i){
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1){
            string[0] = 0;
            for(new x = 0; x < 3; x++){
                if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0){
                    new
                        szWep[20];

                    GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
                    if(isnull(string)) format(string, sizeof(string), "* Contenido: %s", szWep);
                    else format(string, sizeof(string), "%s, %s", string, szWep);
                }
            }
            if(!isnull(string)) SendClientMessageEx(playerid, COLOR_WHITE, string);
            else SendClientMessageEx(playerid, COLOR_WHITE, "* Contenido: Nada.");
        }
    }
    return 1;
}

CMD:tgunmaletero(playerid, params[]){
    if(!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "* No perteneces a las fuerzas de la ley.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_WHITE,"No estás cerca de ningún vehiculo.");
        return 1;
    }
    foreach(Player, i){
		new
			engine, lights, alarm, doors, bonnet, boot, objective, v = GetPlayerVehicle(i, closestcar);

		GetVehicleParamsEx(PlayerVehicleInfo[i][v][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
		if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET){
			return SendClientMessageEx(playerid, COLOR_GRAD3, "{FFFF00}[ERROR]:{FFFFFF} No puedes tomar armas del maletero, si está cerrado! /v maletero para abrirlo.");
		}
        else if(v != -1){
            PlayerVehicleInfo[i][v][pvWeapons][0] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][1] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][2] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][3] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][4] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][5] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][6] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][7] = 0;
        }
        SendClientMessageEx(playerid, COLOR_WHITE,  "Removiste todas las armas del maletero.");
    }
    return 1;
}

CMD:revivir(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /revivir (playerid)");
		if(IsPlayerConnected(giveplayerid)){
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " Has revivido a %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "Fuiste revivido por un administrador y se te devolvió las armas.");
		 		format(string, sizeof(string), "[AdmCmd]: %s ha revivido a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
		 		ABroadCast(COLOR_ORANGE, string, 2);
				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid);
   				SetPlayerWeapons(giveplayerid);
   				SetHP(giveplayerid, 100);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador no está herido.");
			}
		}
	}
	else{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}
CMD:reanimar(playerid, params[])
{
    if(Info[playerid][pConnectTime] > 4)
	{
 		if(Info[playerid][pTriageTime] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes esperar 2 minutos para hacer esto de nuevo.");
	    new string[128], giveplayerid;
	    if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto, tu también estás herido.");
	    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /reanimar [playerid]");
   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
    	    if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
    	    	if (ProxDetectorS(15, playerid, giveplayerid))
				{
	    	    	new Float: health;
	    	    	GetPlayerHealth(giveplayerid, health);
	    	    	if(health >= 20) {return SendClientMessageEx(playerid, COLOR_WHITE, "Su vida tiene que ser menor de 20/100 para reanimarlo.");}
					//else SetHP(giveplayerid, health+15.0);
					OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	    	    	format(string, sizeof(string), "* %s ayuda a %s levantarse lentamente.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Info[playerid][pTriageTime] = 120;
					KillEMSQueue(giveplayerid);
   					ClearAnimations(giveplayerid);
   					SetPlayerWeapons(giveplayerid);
   					SetHP(giveplayerid, 25);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está cerca tuyo.");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está herido.");
 		}
 		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas tener por lo menos más de 4 horas jugadas antes de usar esto.");
	return 1;
}
CMD:comprarlicencia(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid,25.0,1407.6,-1921.669311,1227.8) || IsPlayerInRangeOfPoint(playerid,30.0,1564.0000, -1676.8358, 4989.5386))
	{
		if(Info[playerid][pWantedLevel] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Tienes órden de arresto, te prohibieron la adquisición de licencias.");
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "[Importante] Las licencias de armas son otorgadas por el jefe de policias de LSPD, disculpe las molestias.");
		SafeDialogEx(playerid, DIALOG_LICENSE_BUY, DIALOG_STYLE_LIST, "{A2DC35}Selecciona el tipo de licencia que deseas.", "Licencia de conducir ($2,000)\r\nLicencia de Navegación ($3,000)\r\nLicencia de Vuelo ($5,000)\r\nLicencia de Taxista ($10,000)", "Comprar", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Las licencias sólo pueden ser obtenidas en la Universidad, el edificio delante de Unity o en el mostrador de LSPD.");
	return 1;
}
CMD:aprenderidioma(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid,50.0,1407.6,-1913.176513,1227.8)) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Los idiomas sólo pueden ser aprendidos en la Universidad, el edificio delante de Unity.");
	if (Info[playerid][pWantedLevel] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Tienes órden de arresto, no puedes apuntarte a la universidad.");
		return 1;
	}
	SafeDialogEx(playerid, DIALOG_IDIOMA_BUY, DIALOG_STYLE_LIST, "{A2DC35}Selecciona el idioma a aprender", "Inglés ($25,000)\r\nAlemán ($35,000)\r\nItaliano ($45,000)\r\nRuso ($45,000)\r\nJaponés ($45,000)\r\nÁrabe ($55,000)", "Comprar", "Cancelar");
	return 1;
}
CMD:spec(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new tmp[32];
	if(sscanf(params, "s[32]", tmp)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /spec (playerid/off)");
	if(strcmp("off", tmp, true, strlen(tmp)) == 0)
	{
		if(Spectating[playerid] > 0 && Info[playerid][pAdminZC] >= 1)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecState", -1);
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating( playerid, false );
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		if(papilla[playerid] == 1)
		{
		SetPlayerColor(playerid,0x808080FF);
		return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} No puedes spectar a esta persona.");
			return 1;
		}
	}
	new giveplayerid = ReturnUser(tmp);
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(TutStep[giveplayerid] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[NOTA]:{FFFFFF} Este jugador está en el tutorial, no considerar que usa Teleport Hack.");
			}
			if(Vigilando[giveplayerid] != 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[NOTA]:{FFFFFF} Este jugador está vigilando las cámaras de LSPD/FBI, no considerar que usa Teleport Hack.");
			}
			if(GetPVarInt(giveplayerid, "IsInArena") == 1) SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[NOTA]:{FFFFFF} Recuerda que este jugador está en el paintball, y se puede hacer MG. No existe el PG en este modo.");
			if(Spectating[playerid] == 0)
			{
				new Float: pPositions[ 3 ];
				GetPlayerPos(playerid, pPositions[ 0 ], pPositions[ 1 ], pPositions[ 2 ]);
				SetPVarFloat(playerid, "SpecPosX", pPositions[ 0 ]);
				SetPVarFloat(playerid, "SpecPosY", pPositions[ 1 ]);
				SetPVarFloat(playerid, "SpecPosZ", pPositions[ 2 ]);
				SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));

				if(IsPlayerInAnyVehicle(giveplayerid))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( giveplayerid );
					PlayerSpectateVehicle( playerid, carid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, giveplayerid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				GettingSpectated[giveplayerid] = playerid;
				Spectate[playerid] = giveplayerid;
				Spectating[playerid] = 1;
			}
			else
			{
				if(IsPlayerInAnyVehicle(giveplayerid))
				{
					TogglePlayerSpectating(playerid, true);
					new carid = GetPlayerVehicleID( giveplayerid );
					PlayerSpectateVehicle( playerid, carid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				else
				{
					TogglePlayerSpectating(playerid, true);
					PlayerSpectatePlayer( playerid, giveplayerid );
					SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
					SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
					SetPVarInt(playerid, "SpecState", GetPlayerState(giveplayerid));
				}
				GettingSpectated[Spectate[playerid]] = 999;
				GettingSpectated[giveplayerid] = playerid;
				Spectate[playerid] = giveplayerid;
				Spectating[playerid] = 1;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador está desconectado.");
	return 1;
}

CMD:liberar(playerid, params[])
{
   if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /liberar (playerid) (razón)");

		if(IsPlayerConnected(giveplayerid))
		{
			new year, month,day;
			getdate(year, month, day);
			format(string, sizeof(string), "[AdmCmd]: %s fue liberado de prisión por %s, razón: %s(%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason, month, day, year);
			Log("LOGS/admin.log", string);
			format(string, sizeof(string), "[ADM]:{F5A9A9} %s fue liberado de prisión por %s{FA5858} - Razón: {F5A9A9} %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			BroadCast(0xFA5858FF, string);
			Info[giveplayerid][pJailed] = 0;
			Info[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			Info[giveplayerid][pJailTime] = 0;
			Info[giveplayerid][pJailAdmin] -= 1;
			SetPlayerPos(giveplayerid, 1529.6, -1705.5, 13.4);
			SetPlayerInterior(giveplayerid,0);
			Info[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			Info[giveplayerid][pVW] = 0;
			SetPlayerToTeamColor(giveplayerid); // Se resetean Variables de jail.
			strmid(Info[giveplayerid][pJailedBy], "Nadie", 0, strlen("Nadie"), 32);
			strmid(Info[giveplayerid][pJailReason], "Ninguno", 0, strlen("Ninguno"), 64);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:entrevista(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		if(TalkingLive[playerid] != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Entrevista terminada.");
			SendClientMessageEx(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Entrevista terminada.");
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /entrevista (playerid)");
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				if(Info[giveplayerid][pEstado] >= 1 || Info[playerid][pEstado] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
				}
				else
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer una entrevista a ti mismo."); return 1; }
					format(string, sizeof(string), "* Ofreciste a %s una entrevista.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s te ha ofrecido una entrevista, usa /aceptar entrevista para aceptar.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres un reportero.");
	return 1;
}

CMD:nr(playerid, params[])
{
	if(Team_LSTV(playerid) && Info[playerid][pRank] > 1)
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /nr (Texto)");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar))
		{
		    format(string, sizeof(string), "[SATV Live] %s: %s", GetPlayerNameEx(playerid), params);
			OOCNews(COLOR_NEWS2,string);
			return 1; // Vehículo de SATV.
		}
		else if(IsPlayerInRangeOfPoint(playerid,15.0,733.761108,-1352.086914,3018.322814))
		{
            format(string, sizeof(string), "[LSTV Live] %s: %s", GetPlayerNameEx(playerid), params);
			OOCNews(COLOR_NEWS2,string);
			return 1; // HQ en Los Santos.
		}
		else if(IsPlayerInRangeOfPoint(playerid, 15.0, 245.4054, 275.0843, 997.0215))
		{
			format(string, sizeof(string), "[SFTV Live] %s: %s", GetPlayerNameEx(playerid), params);
			OOCNews(COLOR_NEWS2,string);
			return 1; // HQ en Blueberry - SF - Entrevistas.
		}
		else if(IsPlayerInRangeOfPoint(playerid, 15.0, 254.8900, 1755.3199, 700.9900))
		{
			format(string, sizeof(string), "[LSTV Global News] %s: %s", GetPlayerNameEx(playerid), params);
			OOCNews(COLOR_NEWS2,string);
			return 1; // HQ en San Andreas (LS) - Global News.
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una camioneta de noticias, helicópter o en uno de los estudios de SATV (LS-SF)");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres reportero o no dispones del rango suficiente para hacer esto.");
	return 1;
}

CMD:trabajoayuda(playerid, params[]) return SafeDialogEx(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "{00F70C}Ayuda {FFFFFF}Trabajo","Vendedor De Telefonos\nChofer de Viajes\nPizzero\nVendedor de Drogas\nCamionero\nVendedor de Armas\nTaxista\nGranjero\nTraficante de Drogas\nVendedor de Chalecos\nArtesano\nJardinero\nHeladero\nLeñador", "Ok", "Cancelar");
CMD:destruircar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new string[128];
	if(Info[playerid][pAdminZC] < 6000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
		return 1;
	}
	new bool:breakingloop = false, newid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i=0;i<sizeof(CreatedCars);i++)
		{
			if(!breakingloop)
			{
				if(CreatedCars[i] == GetPlayerVehicleID(playerid))
				{
					breakingloop = true;
					newid = i;
				}
			}
		}
		if(newid != INVALID_VEHICLE_ID)
		{
			new carid = GetPlayerVehicleID(playerid);
			DestroyVehicle(carid);
			CreatedCars[newid] = INVALID_VEHICLE_ID;
			format(string, sizeof(string), " Coche %d destruido.", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:deletecarro(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if (Info[playerid][pAdminZC] >= 6000)
	{
	    new string[128];
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    DestroyVehicle(carid);
			format(string, sizeof(string), " Coche %d destruido.", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}
zcmd(dardinero, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    	if(!sscanf(params, "di", params[0], params[1]))
		{
		    if(IsPlayerConnected(params[0]))
		    {
		        if(Info[playerid][pAdminZC] >= 6000)
		        {
		            new string[128];
		            GivePlayerCash(params[0], params[1]);
				 	format(string, sizeof(string), "{FFFF00}[AdmWarning]:{FF0000} %s dio %d de dinero a %s.", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
					ABroadCast(COLOR_ORANGE, string, 5);
					Log("LOGS/pagos.log", string);
					return 1;
		        }
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres administrador!");
					GivePlayerCash(playerid+1, params[1]);
				}
		    }
			else SendClientMessageEx(playerid,  COLOR_WHITE, "ID Inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dardinero (PlayerID) ($)");
		return 1;
	}
/*CMD:seteardinero(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
   	if (Info[playerid][pAdminZC] >= 6000)
	{
		new string[128], giveplayerid, money;
		if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /seteardinero (playerid) (dinero)");

		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerCash(giveplayerid);
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "Estableciste el dinero de %s a $%d !",GetPlayerNameEx(giveplayerid),money);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s estableció el dinero de %s a $%d (/seteardinero)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("LOGS/stats.log", string);

		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}
*/
CMD:darestilopelea(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 5)
	{
		new string[128], giveplayerid, fightstyle;
		if(sscanf(params, "dd", giveplayerid, fightstyle))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /darestilopelea (playerid) (estilo)");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Estilo pelea: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(string, sizeof(string), " Tu estilo de pelea ha sido cambiado al ID %d.", fightstyle);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " Cambiaste el estilo de pelea de %s a %d.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			Info[playerid][pFStyle] = fightstyle;
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:id(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /id [Nombre/ID]");

	if(IsPlayerConnected(giveplayerid))
	{
		format(string, sizeof(string), "(ID: %d) - (Nombre: %s) - (Nivel: %d) - (Ping: %d)", giveplayerid, GetPlayerNameEx(giveplayerid),  Info[giveplayerid][pLevel], GetPlayerPing(giveplayerid));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "ID No válida.");
	return 1;
}

CMD:venderlaser(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] != 6000 && Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, color[32], invoice[64];
	if(sscanf(params, "ddss[64]", giveplayerid, slot, color, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderlaser (playerid) (slot(0-9)) (red/green/orange/yellow/pink/blue) (precio)");

	if(strcmp(color,"red",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 18643;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"green",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19083;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"orange",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19082;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"yellow",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19084;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"pink",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19081;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"blue",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19080;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	format(string, sizeof(string), "Recibiste un laser de color %s en el slot %d, usa /toys para verlo.", color, slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Le diste a %s laser de color %s en el slot %d", GetPlayerNameEx(giveplayerid), color, slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPLASER] %s dió %s un laser toy - Pagó fue de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}


CMD:congelar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /congelar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes congelar a un administrador de mayor nivel.");
			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(string, sizeof(string), "[AdmCmdExe]: %s fue congelado por %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			return ABroadCast(COLOR_GENERAL,string,1);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	}
	return 1;
}
CMD:tazear(playerid, params[]){return cmd_tazer(playerid, params);}
CMD:tazer(playerid, params[])
{
		if(IsACop(playerid))
		{
		    new string[256];
			if(Tazer[playerid] == 0)
            {
          		 if(GetPlayerWeapon(playerid) == TAZE_WEAPON) {} else return SendClientMessage(playerid, 0xFFFFFFFF, "{DC0C0C}Tazer: {FFFFFF}Necesitas tener una 9 milímetros para agregarle el tazer.");
                 Tazer[playerid] = 1;
                 format(string, sizeof(string), "{DC0C0C}Tazer: {FFFFFF}Has agregado el tazer a tu 9 milímetros, %s.", GetPlayerNameEx(playerid));
                 SendClientMessage(playerid, 0xFFFFFFFF, string);
                 SetPlayerHoldingObject(playerid, 18643, 6, 0.158249, 0.010233, 0.128052, 6.868255, 351.962524, 356.884216);
                 return 1;
             }
             else if(Tazer[playerid] == 1)
             {
                    Tazer[playerid] = 0;
                    format(string, sizeof(string), "{DC0C0C}Tazer: {FFFFFF}Has quitado el tazer a tu 9 milímetros, %s.", GetPlayerNameEx(playerid));
                    SendClientMessage(playerid, 0xFFFFFFFF, string);
                    if(IsPlayerHoldingObject(playerid)) StopPlayerHoldingObject(playerid);
                    return 1;
             }
             else Tazer[playerid] = 0;
             return 1;
			
		}
		return 1;
}
CMD:descongelar(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /descongelar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			format(string, sizeof(string), "[AdmCmdExe]: %s fue descongelado por %s.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,string,1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado ínvalido.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	}
	return 1;
}

CMD:j(playerid, params[])
{
if((Info[playerid][pHelper] >= 1 || Info[playerid][pAdminZC] >= 2 || Info[playerid][pVIP] == 3) && advisorchat[playerid])
	{
		if(!isnull(params))
		{
			/*new
				szMessage[128];*/
			if(Info[playerid][pAdminZC] == 1) format(szMessage, sizeof(szMessage), "** Moderador a Prueba %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 2) format(szMessage, sizeof(szMessage), "** Moderador %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 3) format(szMessage, sizeof(szMessage), "** Jefe de moderadores %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 4) format(szMessage, sizeof(szMessage), "** Administrador%s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 5) format(szMessage, sizeof(szMessage), "** Administrador General %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 6) format(szMessage, sizeof(szMessage), "** Líder de administradores %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 7) format(szMessage, sizeof(szMessage), "** Publicista %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 8) format(szMessage, sizeof(szMessage), "** Webmaster %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 9) format(szMessage, sizeof(szMessage), "** Mapper %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 10) format(szMessage, sizeof(szMessage), "** Game Operator %s: %s **", GetPlayerNameEx(playerid), params);
            else if(Info[playerid][pAdminZC] == 11) format(szMessage, sizeof(szMessage), "** Encargado Fams %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 12) format(szMessage, sizeof(szMessage), "** Encargado Facc %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 4000) format(szMessage, sizeof(szMessage), "** Admin Técnico %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 5000) format(szMessage, sizeof(szMessage), "** Admin Subdueño %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pAdminZC] == 6000) format(szMessage, sizeof(szMessage), "** Dueño-Fundador  %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pHelper] == 1) format(szMessage, sizeof(szMessage), "** Ayudante %s: %s **", GetPlayerNameEx(playerid), params);
			else if(Info[playerid][pHelper] == 2) format(szMessage, sizeof(szMessage), "** Lider de Ayudantes %s: %s **", GetPlayerNameEx(playerid), params);
			//else if(Info[playerid][pVIP] == 5) format(szMessage, sizeof(szMessage), "** VIP [Moderador] %s: %s **", GetPlayerNameEx(playerid), params);
			else format(szMessage, sizeof(szMessage), "** Rango desconocido (%d) %s: %s", Info[playerid][pAdminZC], GetPlayerNameEx(playerid), params);
			SendAdvisorMessage(COLOR_COMBINEDCHAT, szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "USA: (/j) [Admin Mensaje]");
	}
	return 1;
}

CMD:toghelper(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1)
	{
		if (!advisorchat[playerid])
		{
			advisorchat[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora puede escuchar la conversación el chat de Ayudantes. Utiliza: {5ABAFF}(/j){FFFF00}.");
		}
		else
		{
			advisorchat[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Ahora dejaste de ver el chat de Ayudantes.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	return 1;
}

CMD:cambiarhora(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 5)
	{
		new string[84], time;
		if(sscanf(params, "d", time)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarhora [hora] (0-23)");
		SetWorldTime(time);
		gTime = time;
		format(string, 128, "[AdmCdmExe]: %s cambió la hora a %d", GetPlayerNameEx(playerid), gTime);
		ABroadCast(COLOR_GENERAL,string,5);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:clima(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new weather;
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /clima [clima id]");
	if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[NOTA]:{FFFFFF} 0 a 45."); return 1; }
	SetPlayerWeather(playerid, weather);
	return 1;
}

CMD:climatodos(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
		return 1;
	}
	new weather, string[84];
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /climatodos (clima id)");
	if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[NOTA]:{FFFFFF} 0 a 45."); return 1; }
	SetWeather(weather);
	gWeather = weather;
	format(string, 256, "[AdmCdmExe]: %s cambió el clima al ID %d", GetPlayerNameEx(playerid), gWeather);
	ABroadCast(COLOR_GENERAL,string,4);
	return 1;
}
CMD:goto(playerid, params[])
{
if(Info[playerid][pAdminZC] >= 2 && papilla[playerid] == 1)
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /goto [location]");
		SendClientMessageEx(playerid, COLOR_WHITE, "TP 1: stadium1, stadium2, stadium3, stadium4, int1, mall");
		SendClientMessageEx(playerid, COLOR_WHITE, "TP 2: bank, allsaints, countygen, gym, fbi, prison, rc, pubvip");
		SendClientMessageEx(playerid, COLOR_WHITE, "TP 3: garage1 (grande), garage2 (mediano), garage3 (chico), garageC");
		SendClientMessageEx(playerid, COLOR_WHITE, "TP 4: casa1 (Chico), casa2, casa3 (Mediado), casa4, casa5 (Grande)");
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estan espectando.");
		return 1;
	}
	if(strcmp(params,"garage1",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1328.0479,-1590.8223,10037.3408);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1328.0479,-1590.8223,10037.3408);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"garage2",true) == 0) 
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1349.7227,-1553.7635,10037.3408);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1349.7227,-1553.7635,10037.3408);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"garage3",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1332.9047,-1559.4679,10037.3398);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1332.9047,-1559.4679,10037.3398);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"garageC",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2487.1479, -2559.1030, 2501.5305);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 2487.1479, -2559.1030, 2501.5305);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido teleportado al Garage Custom.");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"casa1",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacerte TP dentro del coche a una casa!");}
		else{SetPlayerPos(playerid, -2123.641845,-2459.869873,5047.113769);}
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido teleportado a la casa 1!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"casa2",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacerte TP dentro del coche a una casa!");}
		else{SetPlayerPos(playerid, -2149.918212,-2496.411865,5046.926757);}
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido teleportado a la casa 2!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
		else if(strcmp(params,"casa3",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacerte TP dentro del coche a una casa!");}
		else{SetPlayerPos(playerid, -2172.247558,-2486.147216,5047.288574);}
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido teleportado a la casa 3!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
		else if(strcmp(params,"casa4",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacerte TP dentro del coche a una casa!");}
		else{SetPlayerPos(playerid, -2176.759277,-2413.504150,5047.803222);}
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido teleportado a la casa 4!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
		else if(strcmp(params,"casa5",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacerte TP dentro del coche a una casa!");}
		else{SetPlayerPos(playerid, -2188.823486,-2463.313720,5047.791503);}
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido teleportado a la casa 5!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"ls",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"sf",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1417.0,-295.8,14.1);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"lv",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"bank",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"allsaints",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"countygen",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"gym",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"fbi",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 344.77,-1526.08,33.28);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"rc",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
 	else if(strcmp(params,"pubvip",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1814.42, -1575.05, 13.54);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1814.42, -1575.05, 13.54);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"prison",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 112.67, 1917.55, 18.72);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium1",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
			LinkVehicleToInterior(tmpcar, 4);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1424.93, -664.59, 1059.86);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,4);
		Info[playerid][pInt] = 4;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium2",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
			LinkVehicleToInterior(tmpcar, 7);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1395.96, -208.20, 1051.28);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,7);
		Info[playerid][pInt] = 7;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium3",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
			LinkVehicleToInterior(tmpcar, 14);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,14);
		Info[playerid][pInt] = 14;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium4",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
			LinkVehicleToInterior(tmpcar, 15);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1394.20, 987.62, 1023.96);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,15);
		Info[playerid][pInt] = 15;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"int1",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
			LinkVehicleToInterior(tmpcar, 1);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"mall",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][0] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
}
else
{
	SendClientMessageEx(playerid, COLOR_WHITE, "You are not authorized to use that command!");
}
return 1;
}

CMD:gotoco(playerid, params[])
{
 	if(Info[playerid][pAdminZC] >= 4)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotoco (coordenada x) (coordenada y) (coordenada z) (interior)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "{1DF5F7}INFRANET-RP:{FFFFFF} Fuiste teletransportado a las coordenadas establecidas.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}
zcmd(getpos, playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 4)
	{
		new string[80];
		new Float:X, Float:Y, Float:Z;
 		GetPlayerPos(playerid,X,Y,Z);
 		format(string,sizeof(string),"%f,%f,%f", X,Y,Z);
 		SendClientMessage(playerid,COLOR_YELLOW2,string);
	}
	return 1;
}
CMD:fropa(playerid, params[]){
	new skin, family;
	if(!IsAtClothShop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una tienda de Ropa.");
    if(!sscanf(params, "d", skin))
	{
	 	if(Info[playerid][pFMember] < 255){
			family = Info[playerid][pFMember];
		}
		else{
			SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una familia.");
			return 1;
		}
		switch(skin)
		{
			case 1:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][0];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][0]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #1 de tu familia/banda.");
			}
			case 2:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][1];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][1]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #2 de tu familia/banda.");
			}
			case 3:{
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][2]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #3 de tu familia/banda.");
			}
			case 4:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][3];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][3]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #4 de tu familia/banda.");
			}
			case 5:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][4];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][4]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #5 de tu familia/banda.");
			}
			case 6:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][5];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][5]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #6 de tu familia/banda.");
			}
			case 7:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][6];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][6]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #7 de tu familia/banda.");
			}
			case 8:{
			    Info[playerid][pChar] = fINFO[family][FamilySkins][7];
			    SetPlayerSkin(playerid, fINFO[family][FamilySkins][7]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Te pusiste el skin #8 de tu familia/banda.");
			}
			default: return SendClientMessageEx(playerid, COLOR_WHITE, "Maximo Skins: 8");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /fropa (1-8)");
	}
	return 1;
}

zcmd(noev, playerid, params[]){
    new string[128],giveplayerid;
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "No estás autorizado para usar este comando.");
    if(!sscanf(params, "d", giveplayerid)){
    	if(IsPlayerConnected(giveplayerid)){
			format(string, sizeof(string), "El administrador %s ha revisado tu reporte y considera que no hay sucifiente evidencia visual para tomar", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "la decisión correcta. Por favor, para la próxima intenta reportar al instante o tomar fotos, lo sentimos.");
			format(string, sizeof(string), "[AdmCmdExe]: %s ha enviado a %s, el mensaje de reporte sin evidencia.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_GENERAL,string,2);
		}else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
	}else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /noev (ID)");
    return 1;
}

CMD:bar(playerid, params[])
{
	if(IsACop(playerid) || Team_SAMD(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 3)
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		}
		ShowModelSelectionMenu(playerid, bars, "Seleccione la barrera a colocar.");
	}
	else{SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o SEC.");} return 1;
}

CMD:bar2(playerid, params[]){
	if(IsACop(playerid) || Team_SAMD(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		}
		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++)
		{
			if(Barricade[i] == 0)
			{
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(3091, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Una barricada ha sido puesta por %s en %s.", GetPlayerNameEx(playerid), zone);
				/*foreach(Player, x){*/
					if(IsACop(playerid)){
						SendClientMessageEx(playerid, TEAM_BLUE_COLOR, string);
						if (Info[playerid][pRank] >= 3){
							SendClientMessageEx(playerid, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				/*}*/
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA."); } return 1;
}

CMD:bar3(playerid, params[]){
	if(IsACop(playerid) || Team_SAMD(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
		}
		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(978, Position[0], Position[1], Position[2]+0.6, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Una barricada ha sido puesta por %s en %s.", GetPlayerNameEx(playerid), zone);
				/*foreach(Player, x){*/
					if(IsACop(playerid)){
						SendClientMessageEx(playerid, TEAM_BLUE_COLOR, string);
						if (Info[playerid][pRank] >= 3){
							SendClientMessageEx(playerid, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				/*}*/
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_GREY, "No eres parte de SAPD, FBI, SAEM o CIA."); } return 1;
}

CMD:bengala(playerid, params[]){
	if(IsACop(playerid) || Team_SAMD(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		}
		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(18728, Position[0], Position[1], Position[2]-2.8, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Una bengala ha sido puesta por %s en %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x){
					if(IsACop(x)){
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
						if (Info[x][pRank] >= 3){
							SendClientMessageEx(x, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA."); } return 1;
}

CMD:cono(playerid, params[]){
	if(IsACop(playerid) || Team_SAMD(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
			return 1;
		}
		if(Info[playerid][pRank] < 1){
			SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
			return 1;
		}
		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++){
			if(Barricade[i] == 0){
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(1238, Position[0], Position[1], Position[2]-0.7, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Un cono ha sido puesto por %s en %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x){
					if(IsACop(x)){
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
						if (Info[x][pRank] >= 3){
							SendClientMessageEx(x, COLOR_YELLOW, "Puedes eliminar una barricada escribiendo /qb.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Todas las barreras disponibles se han desplegado.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA.");} return 1;
}

CMD:qb(playerid, params[]){
	if(IsACop(playerid)|| Team_SAMD(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que estar en el piso para usar este comando.");
		}
		if(Info[playerid][pRank] < 3){
			return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		}
		new string[128], Float:Position[3];
		for(new i; i<MAX_BARRICADES; i++)
		{
			GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
			{
				DestroyDynamicObject(Barricade[i]);
				Barricade[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Un bloqueo a sido destruido por %s en %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de las barricadas.");
	}
	else{ SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA."); } return 1;
}

CMD:spikes(playerid, params[])
{
	if(IsACop(playerid) || Team_SAMD(playerid))
	{
		if(Info[playerid][pRank] >= 3)
		{
  			SendClientMessageEx(playerid, COLOR_GREEN, "Spikes Actuales:");
			for(new i, string[58 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] != 0)
				{
					format(string, sizeof(string), "HQ: Spike ID: %d | Localización: %s | Puesto por: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser rango mayor a 3.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA.");
	}
	return 1;
}

CMD:pspikes(playerid, params[])
{
    if(IsACop(playerid) || Team_SAMD(playerid))
	{
		if(Info[playerid][pRank] >= 3)
		{
			for(new i; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
					SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Spike ID: %d fue creado exitosamente.", i);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "HQ: Un spike fue puesto por %s en %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
					foreach(Player, x)
					{
						if(IsACop(x))
						{
							SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
							if (Info[x][pRank] >= 3)
							{
								SendClientMessageEx(x, COLOR_YELLOW, "Puedes remover el spike usando /qspikes.");
							}
						}
					}
					return 1;
				}
    		}
			SendClientMessageEx(playerid, COLOR_WHITE, "No es posible generar más spikes, límite es de 5." );
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA.");
	}
	return 1;
}

CMD:qspikes(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qspike (spikeid)");
    if(IsACop(playerid) || Team_SAMD(playerid))
	{
		if(Info[playerid][pRank] >= 3)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "Spike ID Inválido.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(SpikeStrips[id][sObjectID]);
				SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
				SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Spike ID: %d borrado.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Un spike a sido borrado por %s en %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de SAPD, FBI, SAEM o CIA.");
	}
	return 1;
}

CMD:niveluno(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 2)
	{
   		SendClientMessageEx(playerid,COLOR_GREEN,"Lista de todos los usuarios nivel uno.");
		new
			szNoobs[14 + MAX_PLAYER_NAME];
    	foreach(Player, i) if(Info[i][pLevel] == 1)
		{
			format(szNoobs, sizeof(szNoobs), "* %s (ID %i)", GetPlayerNameEx(i), i);
			SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
		}
	}
	return 1;
}

CMD:dar(playerid, params[])
{
	new string[128], giveplayerid, choice[32], amount;
	if(sscanf(params, "ds[32]d", giveplayerid, choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /dar (playerid) (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GREY,  "* Crack, Materiales, Fichas, Chaleco, Hierba ,Ganzuas");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No tienes la cantidad que pusiste.");
				return 1;
			}

			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está cerca tuyo.");
				return 1;
			}

			if(giveplayerid == playerid)
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
			    return 1;
			}
			if (strcmp(choice, "materiales", true) == 0)
			{
				if(Info[playerid][pMats] >= amount)
				{
					format(string, sizeof(string), "Recibiste %d materiales de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pMats] += amount;
					Info[playerid][pMats] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("LOGS/pay.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("LOGS/admingive.log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d materiales.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s algo de materiales.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto.");
					return 1;
				}
			}
			if (strcmp(choice, "ganzuas", true) == 0)
			{
				if(Info[playerid][pGanzuas] >= amount)
				{
				    if(Info[giveplayerid][pGanzuas] > 10) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Esta persona no tiene más espacio para guardar ganzúas.");
					format(string, sizeof(string), "Recibiste %d ganzúas de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pGanzuas] += amount;
					Info[playerid][pGanzuas] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d ganzuas.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("LOGS/ganzuas.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d ganzuas.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("LOGS/admingive.log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d ganzúas.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s unas ganzúas recién compradas.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto.");
					return 1;
				}
			}
			if (strcmp(choice, "hierba", true) == 0)
			{
				if(Info[playerid][pPot] >= amount)
				{
					if(amount + Info[giveplayerid][pPot] >= 999 )
					{
						SendClientMessageEx( playerid, COLOR_WHITE, "Este jugador no puede tener más de 1 Kg de hierba." );
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 10 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 20 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 30 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 40 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 50 con tu nivel de habilidad!"); return 1; } }
					format(string, sizeof(string), "Recibiste %d de hierba de parte de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pPot] += amount;
					Info[playerid][pPot] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("LOGS/pay.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("LOGS/admingive.log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d de hierba.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le dá a %s algo de hierba.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto hierba.");
					return 1;
				}
			}
			if (strcmp(choice, "fichas", true) == 0)
			{
				if(Info[playerid][pPaintTokens] >= amount)
				{
					format(string, sizeof(string), "Recibiste %d fichas de paintball de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pPaintTokens] += amount;
					Info[playerid][pPaintTokens] -= amount;
					format(string, sizeof(string), "Le diste a %s, %d fichas de paintbal.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s unas fichas de paintball.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tantas fichas.");
					return 1;
				}
			}
			if (strcmp(choice, "crack", true) == 0)
			{
				if(Info[playerid][pCrack] >= amount)
				{
					if(amount + Info[giveplayerid][pCrack] >= 26 )
					{
						SendClientMessageEx( playerid, COLOR_WHITE, "Este jugador no puede llevar más de 25 de crack." );
						return 1;
					}
					new level = Info[playerid][pDrugsSkill];
					if(level >= 0 && level <= 50)
					{ if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 5 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 51 && level <= 100)
					{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 10 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 101 && level <= 200)
					{ if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 15 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 201 && level <= 400)
					{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 20 con tu nivel de habilidad!"); return 1; } }
					else if(level >= 401)
					{ if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "  Sólo se puede dar 25 máximo!"); return 1; } }
					format(string, sizeof(string), "Recibiste %d gramos de crack de %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					Info[giveplayerid][pCrack] += amount;
					Info[playerid][pCrack] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("LOGS/pay.log", string);
					if(Info[playerid][pAdminZC] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("LOGS/admingive.log", string);
					}
					format(string, sizeof(string), "Le diste a %s, %d gramos de Crack.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s le da a %s algo de crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No tienes tanto.");
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:recargar(playerid, params[])
{
	if(Team_Mecanicos(playerid))
	{
		new string[128];
		if(Info[playerid][pTriageTime] >= 1)
		{
			format(string, sizeof(string), "Debes esperar %d segundos.", Info[playerid][pTriageTime]);
			return SendClientMessageEx(playerid, COLOR_GRAD1,string);
		}
		new giveplayerid, money;
		if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /recargar (playerid) (precio)");
		if(!(money >= 1 && money < 100000))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "Precio determinado inválido, no puede ser inferior a 1 o superior a $ 99,999.");
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid) && IsPlayerInAnyVehicle(giveplayerid))
			{
				if(giveplayerid != playerid)
				{
					format(string, sizeof(string), "* Ofreciste %s llenar el tanque de tu coche por $%d.",GetPlayerNameEx(giveplayerid),money);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s te ha ofrecido llenar tu coche por $%d, usa /aceptar recarga para aceptar.",GetPlayerNameEx(playerid),money);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					Info[playerid][pTriageTime] = 60;
					RefillOffer[giveplayerid] = playerid;
					RefillPrice[giveplayerid] = money;
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo."); return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca de ti, o no está en un coche.");
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no está conectado.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres mecánico.");
	return 1;
}

CMD:fix(playerid, params[])
{
    if(Team_Mecanicos(playerid))
	{
    	new string[32 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en un vehículo.");
		    return 1;
		}
  		if( Info[playerid][pTriageTime] > 0 )
		{
  			format(string, sizeof(string), "Debes esperar %d segundos.", Info[playerid][pTriageTime]);
     		SendClientMessageEx(playerid, COLOR_GRAD1,string);
     	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en un evento.");
		}
  		else
		{
			new closestcar = GetClosestCar(playerid);
  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
  			{
				if(!IsABike(closestcar) && !IsAPlane(closestcar))
				{
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo necesita tener el capó abierto para repararlo.");
						return 1;
					}
				}
  				Info[playerid][pTriageTime] = 60;
   				SetVehicleHealth(closestcar, 1000.0);
    			format(string, sizeof(string), "* %s ha reparado el vehículo.", GetPlayerNameEx(playerid));
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de un vehículo.");
  		}
    }
    else return SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecánico." );
    return 1;
}

CMD:adminevento(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 1338)
	{
	    SendClientMessageEx(playerid, COLOR_GREEN,"____________________________________________________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENTO *** Escribe uno de estos comandos para más información");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENTO *** /eventopos /infoevento /empezarevento /cerrarevento /finevento /anunciar /goevento /salirevento");
		SendClientMessageEx(playerid, COLOR_GREEN,"____________________________________________________________________________________________________________");
	}
	return 1;
}

CMD:eventostaff(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if( Info[ playerid ][ pAdminZC ] >= 2){
        if(InfoEvento[EventJoinStaff] == 1){
            new bool:breakingloop = false, newid = 999;
            for(new i=0;i<5;i++){
                if(!breakingloop){
                    if(InfoEvento[EventStaff][i] == 999){
                        breakingloop = true;
                        newid = i;
                    }
                }
            }
            if(newid != 999){
                SetPVarInt( playerid, "EventToken", 1 );
                GetPlayerHealth(playerid, EventFloats[playerid][4]);
                GetPlayerArmour(playerid, EventFloats[playerid][5]);
                EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
                EventLastInt[playerid] = GetPlayerInterior(playerid);
                GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
                GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
                SetPlayerPos( playerid, InfoEvento[ EventPositionX ], InfoEvento[ EventPositionY ], InfoEvento[ EventPositionZ ] );
                SetPlayerInterior( playerid, InfoEvento[ EventInterior ] );
                SetHP( playerid, 999999 );
                SetPlayerVirtualWorld( playerid, InfoEvento[ EventWorld ] );
                InfoEvento[EventStaff][newid] = playerid;
                SendClientMessageEx( playerid, COLOR_WHITE, "[ADM] Te has unido al staff del evento, usa /ooc para dar indicaciones a los usuarios dentro del evento." );
            }
            else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte, el maximo es 5 administradores.");
        }
    }
    return 1;
}

CMD:salirevento(playerid, params[])
{
    if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
        if( InfoEvento[ EventStatus ] == 1 || InfoEvento[ EventStatus ] == 2 ) {
            SendClientMessageEx( playerid, COLOR_WHITE, "No se puede dejar el evento en esta etapa del acontecimiento." );
            return 1;
        }
        ResetPlayerWeapons( playerid );
        SetPVarInt(playerid, "EventToken", 0);
        SetPlayerWeapons(playerid);
        SetPlayerToTeamColor(playerid);
        SetPlayerSkin(playerid, Info[playerid][pChar]);
        SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
        SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
        SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
        SetPlayerInterior(playerid,EventLastInt[playerid]);
        SetHP(playerid, EventFloats[playerid][4]);
        SetPlayerArmour(playerid, EventFloats[playerid][5]);
        for(new i = 0; i < 6; i++) {
            EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* Saliste del evento." );
    }
    return 1;
}

CMD:eventopos(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338){
	    if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4){
			new string[128];
			GetPlayerPos(playerid, InfoEvento[EventPositionX], InfoEvento[EventPositionY], InfoEvento[EventPositionZ]);
			InfoEvento[EventInterior] = GetPlayerInterior(playerid);
			InfoEvento[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado la posición del evento, escribe /infoevento para cambiar las propiedades del evento.");
			InfoEvento[EventJoinStaff] = 1;
			format(string, sizeof( string ), "INFRANET-RP: %s ha empezado el evento, usá /eventostaff si quieres ser del staff del evento.", GetPlayerNameEx(playerid) );
			ABroadCast(COLOR_LIGHTBLUE, string, 2);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás haciendo un evento o no eres el nivel administrativo correcto.");
	}
	return 1;
}

CMD:tipoevento(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338){
	    if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4){
	    	if(isnull(params)){
				SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /tipoevento (tipo)");
				SendClientMessageEx(playerid, COLOR_GREY,  "Nombres: DM, TDM, Race");
				return 1;
			}
			if(strcmp(params,"dm",true) == 0){
				InfoEvento[ EventType ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a DM.");
			}
			else if(strcmp(params,"tdm",true) == 0){
				InfoEvento[ EventType ] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a TDM.");
			}
			else if(strcmp(params,"race",true) == 0){
				InfoEvento[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a Race.");
			}
			else if(strcmp(params,"ninguno",true) == 0){
				InfoEvento[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a Ninguno.");
			}
		}
	}
	return 1;
}

CMD:editarevento(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338){
	    if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4){
			new choice[32], opstring[64];
			if(sscanf(params, "s[32]S[64]", choice, opstring)){
				if(InfoEvento[EventType] == 1){
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento (nombre)");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, vida, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
				else if(InfoEvento[EventType] == 2){
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento (nombre)");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessageEx(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, vida, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
				else if(InfoEvento[EventType] == 3){
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento (nombre)");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, vida");
     				return 1;
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Es necesario primero establecer el tipo de evento.");
			}
			if(strcmp(choice, "text",true) == 0)
			{
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento texto (Texto)");
				strmid(InfoEvento[EventoInfo], opstring, 0, strlen(opstring), 64);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el texto de información del evento.");
			}
			else if(strcmp(choice, "vida", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1 && InfoEvento[EventType] != 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento vida (vida)");
				new Float: health;
				health = floatstr(opstring);
				InfoEvento[EventHealth] = health;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la cantidad de vida del evento.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento armor (armor)");
				new Float: armor;
				armor = floatstr(opstring);
				InfoEvento[EventArmor] = armor;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la armadura del evento.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento team1skin (skinid)");
				new skin;
				skin = strval(opstring);
				InfoEvento[EventTeamSkin][0] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el skin del equipo 1.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento team2skin (skinid)");
				new skin;
				skin = strval(opstring);
				InfoEvento[EventTeamSkin][1] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el skin del equipo 2.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
    			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta opción no puedes usarla para este evento.");
				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento team1color (color)");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				InfoEvento[EventTeamColor][0] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el color del equipo 1.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /editarevento team2color (color)");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				InfoEvento[EventTeamColor][1] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el color del equipo 2.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				GetPlayerPos(playerid, InfoEvento[ EventTeamPosX1 ], InfoEvento[ EventTeamPosY1 ], InfoEvento[ EventTeamPosZ1 ] );
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn del equipo 1.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				GetPlayerPos(playerid, InfoEvento[ EventTeamPosX2 ], InfoEvento[ EventTeamPosY2 ], InfoEvento[ EventTeamPosZ2 ]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn del equipo 2.");
			}
			else if(strcmp(choice, "limite", true) == 0)
			{
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento limite (limite 0-60)");
				new limit;
				limit = strval(opstring);
				if(limit < 0 || limit > 90) return SendClientMessageEx(playerid, COLOR_RED, "No se puede ajustar el límite de eventos superiores a 60 o por debajo de 0.");
				InfoEvento[EventLimit] = limit;
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted ha ajustado el límite de los jugadores en el evento.");
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este nombre no está disponible para este tipo de evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");
				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][0] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [1]");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");
				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][1] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [2]");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");

				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][2] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [3]");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");

				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
				InfoEvento[EventWeapons][3] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Modificaste el arma 4 del evento.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no es posible para este evento.");

				if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento gun1 (weaponid)");

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer está arma para este evento.");
				InfoEvento[EventWeapons][4] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "Modificaste el gun 5 del evento.");
			}
		}
	}
	return 1;
}

CMD:esolovip(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338)
	{
		if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /esolovip [0/1]");

			if(Info[playerid][pVIP] == 5 && Info[playerid][pAdminZC] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Error: Usted no está autorizado a modificar esta opción!");

			if(strcmp(params,"0",true) == 0){
				InfoEvento[ VipOnly ] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado el tipo de evento no sólo para VIP´s.");
			}
			else if(strcmp(params,"1",true) == 0){
				InfoEvento[ VipOnly ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado el tipo de evento sólo para VIP´s.");
			}

		}
	}
	return 1;
}

CMD:infoevento(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if( Info[ playerid ][ pAdminZC ] >= 1338)
	{
		if( InfoEvento[EventCreator] == playerid || Info[playerid][pAdminZC] >= 4 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /editarevento /tipoevento /esolovip (una vez listo, usa /empezarevento y después /lockevento)");
			return 1;
		}
	}
	return 1;
}

CMD:finevento(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338 || InfoEvento[EventCreator] == playerid)
	{
		if(InfoEvento[EventStatus] != 0)
		{
			foreach(Player, i)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
					ResetPlayerWeapons( i );
					SetPlayerWeapons(i);
					SetPlayerToTeamColor(i);
					SetPlayerSkin(i, Info[i][pChar]);
					SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
					SetPlayerVirtualWorld(i, EventLastVW[i]);
					SetPlayerFacingAngle(i, EventFloats[i][0]);
					SetPlayerInterior(i,EventLastInt[i]);
					SetHP(i, EventFloats[i][4]);
					SetPlayerArmour(i, EventFloats[i][5]);
					for(new d = 0; d < 6; d++)
					{
						EventFloats[i][d] = 0.0;
					}
					EventLastVW[i] = 0;
					EventLastInt[i] = 0;
					SetPVarInt(i, "EventToken", 0);
					SendClientMessageEx( i, COLOR_YELLOW, "Has sido expulsado del evento ya que un administrador lo termino." );
				}
			}
			InfoEvento[ EventPositionX ] = 0;
			InfoEvento[ EventPositionY ] = 0;
			InfoEvento[ EventPositionZ ] = 0;
			InfoEvento[ EventTeamPosX1 ] = 0;
			InfoEvento[ EventTeamPosY1 ] = 0;
			InfoEvento[ EventTeamPosZ1 ] = 0;
			InfoEvento[ EventTeamPosX2 ] = 0;
			InfoEvento[ EventTeamPosY2 ] = 0;
			InfoEvento[ EventTeamPosZ2 ] = 0;
			InfoEvento[ EventStatus ] = 0;
			InfoEvento[ EventType ] = 0;
			InfoEvento[ EventHealth ] = 0;
			InfoEvento[ EventLimit ] = 0;
			InfoEvento[ EventPlayers ] = 0;
			InfoEvento[ EventWeapons ][0] = 0;
			InfoEvento[ EventWeapons ][1] = 0;
			InfoEvento[ EventWeapons ][2] = 0;
			InfoEvento[ EventWeapons ][3] = 0;
			InfoEvento[ EventWeapons ][4] = 0;
			InfoEvento[EventCreator] = 999;
			InfoEvento[VipOnly] = 0;
			InfoEvento[EventJoinStaff] = 0;
			BroadCast(COLOR_LIGHTBLUE, "* El evento ha sido terminado por un administrador." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "En este momento no hay un evento activo." );
		}

	}
	return 1;
}

CMD:empezarevento(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if( Info[ playerid ][ pAdminZC ] >= 1338)
	{
		new string[128];

		if( InfoEvento[ EventStatus ] == 0)
		{
			if(Info[playerid][pAdminZC] >= 4)
			{
				if(InfoEvento[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}[VIP]:{FFFFFF} No se ha definido la salud del evento." );
					return 1;
				}
				if(InfoEvento[ EventPositionX ] == 0 || InfoEvento[ EventPositionY ] == 0 || InfoEvento[ EventPositionZ ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}[VIP]:{FFFFFF} No se ha definido la posición de evento." );
					return 1;
				}
				if( (InfoEvento[ EventTeamPosX1 ] == 0 || InfoEvento[ EventTeamPosY1 ] == 0 || InfoEvento[ EventTeamPosZ1 ] == 0) && InfoEvento[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}[VIP]:{FFFFFF} No ha establecido la posición del equipo 1." );
					return 1;
				}
				if( (InfoEvento[ EventTeamPosX2 ] == 0 || InfoEvento[ EventTeamPosY2 ] == 0 || InfoEvento[ EventTeamPosZ2 ] == 0) && InfoEvento[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "{FFFF00}[VIP]:{FFFFFF} No ha establecido la posición del equipo 2." );
					return 1;
				}
				if(InfoEvento[ EventLimit ] == 0)
				{
					InfoEvento[ EventLimit ] = 90;
				}
				InfoEvento[ EventStatus ] = 1;
				SendClientMessageEx( playerid, COLOR_WHITE, "Ha iniciado un evento, utilice {5ABAFF}/anunciar{FFFFFF} para anunciar el evento a todo el servidor." );
				foreach(Player, i)
				{
					if(Info[i][pVIP] >= 3)
					{
						SendClientMessageEx(i, COLOR_YELLOW, "{FFFF00}[VIP]:{FFFFFF} Un evento a comenzado, /unirseevento para unirte.");
					}
				}

				return 1;
			}
			else if( InfoEvento[EventCreator] == playerid)
			{
				if(InfoEvento[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la salud evento." );
					return 1;
				}
				if(InfoEvento[ EventPositionX ] == 0 || InfoEvento[ EventPositionY ] == 0 || InfoEvento[ EventPositionZ ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la posición de evento." );
					return 1;
				}
				if(InfoEvento[ EventLimit ] == 0)
				{
					InfoEvento[ EventLimit ] = 90;
				}
				InfoEvento[ EventStartRequest ] = 1;
				SendClientMessageEx( playerid, COLOR_WHITE, "Ha solicitado para comenzar un evento, por favor espere hasta que un administrador lo apruebe." );
				format( string, sizeof( string ), "Event Position: x:%f y:%f z:%f.", InfoEvento[EventPositionX], InfoEvento[EventPositionY], InfoEvento[EventPositionZ] );
				ABroadCast( COLOR_GRAD2, string, 4 );
				format( string, sizeof( string ), "Event Info: %s EventLimite: %d.", InfoEvento[EventoInfo], InfoEvento[EventLimit] );
				ABroadCast( COLOR_GRAD2, string, 4 );
				format( string, sizeof( string ), "Event Health: %f Event Armor: %f.", InfoEvento[EventHealth], InfoEvento[EventArmor] );
				ABroadCast( COLOR_GRAD2, string, 4 );
				if(InfoEvento[EventWeapons][0] != 0)
				{
					format( string, sizeof( string ), "Event Gun1: %d.", InfoEvento[EventWeapons][0] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][1] != 0)
				{
					format( string, sizeof( string ), "Event Gun2: %d.", InfoEvento[EventWeapons][1] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][2] != 0)
				{
					format( string, sizeof( string ), "Event Gun3: %d.", InfoEvento[EventWeapons][2] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][3] != 0)
				{
					format( string, sizeof( string ), "Event Gun4: %d.", InfoEvento[EventWeapons][3] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventWeapons][4] != 0)
				{
					format( string, sizeof( string ), "Event Gun5: %d.", InfoEvento[EventWeapons][4] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				if(InfoEvento[EventType] == 2)
				{
					format( string, sizeof( string ), "Event Team 1 Color: %d Event Team 1 Skin: %d.", InfoEvento[EventTeamColor][0], InfoEvento[EventTeamSkin][0] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					format( string, sizeof( string ), "Event Team 2 Color: %d Event Team 2 Skin: %d.", InfoEvento[EventTeamColor][1], InfoEvento[EventTeamSkin][1] );
					ABroadCast( COLOR_GRAD2, string, 4 );
				}
				else if(InfoEvento[EventType] == 3)
				{
				}
				format( string, sizeof( string ), "INFRANET-RP: %s quiere comenzar el evento, ¿lo apruebas? /approveevent o /denyevent.", GetPlayerNameEx(playerid) );
				ABroadCast( COLOR_GENERAL, string, 4 );
			}
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
	}
	return 1;
}

CMD:goevento(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if( Info[ playerid ][ pAdminZC ] >= 1338 || InfoEvento[EventCreator] == playerid)
	{
		if( InfoEvento[ EventStatus ] == 3 )
		{
			InfoEvento[ EventStatus ] = 4;
			foreach(Player, i)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
					if( InfoEvento[ EventType ] == 1 )
					{
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "* El evento ha comenzado" );
						SetHP( i, InfoEvento[ EventHealth ] );
						SetPlayerArmour( i, InfoEvento[ EventArmor ] );
						for(new d = 0; d < 4; d++)
						{
							if(i == InfoEvento[EventStaff][d])
							{
								SetHP(i, 999999);
							}
						}
						GivePlayerEventWeapons( i );
					}
					else if( InfoEvento[ EventType ] == 2 )
					{
						//GivePlayerEventWeapons( i );
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "* El evento ha empezado." );
						SetHP( i, InfoEvento[ EventHealth ] );
						SetPlayerArmour( i, InfoEvento[ EventArmor ] );
						for(new d = 0; d < 5; d++)
						{
							if(i == InfoEvento[EventStaff][d])
							{
								SetHP(i, 999999);
							}
						}
						GivePlayerEventWeapons( i );
					}
				}
				else SendClientMessageEx( i, COLOR_WHITE, "El evento ha comenzado. Si usted desea unirse la próxima vez use por favor /unirseevento." );
			}

		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usar {5ABAFF}/finevento{FFFFFF})." );
	}
	return 1;
}

CMD:anunciar(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 1338 || InfoEvento[EventCreator] == playerid)
	{
		if( InfoEvento[ EventStatus ] == 1)
		{
			InfoEvento[ EventStatus ] = 2;
			SendClientMessageEx(playerid, COLOR_WHITE, "Para bloquear el evento usa /lockevento");
			if(InfoEvento[VipOnly] == 1) BroadCast( COLOR_LIGHTBLUE, "* Un evento VIP ha sido iniciado por un administrador, usuarios VIP usar /unirseevento para participar." );
			else BroadCast( COLOR_LIGHTBLUE, "* Un evento ha sido iniciado por un administrador, usa /unirseevento para participar." );
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
	}
	return 1;
}

CMD:lockevento(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 1338 || InfoEvento[EventCreator] == playerid)
	{
		if( InfoEvento[ EventStatus ] == 2 )
		{
			InfoEvento[ EventStatus ] = 3;
			SendClientMessageEx( playerid, COLOR_WHITE, "Has bloqueado el evento, utiliza /goevento para iniciar oficialmente el evento." );
			BroadCast( COLOR_LIGHTBLUE, "* El evento ha sido bloqueado por un administrador." );
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
	}
	return 1;
}

CMD:unirseevento(playerid, params[])
{
	if( InfoEvento[ EventStatus ] == 0 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "En este momento no hay un evento activo." );
	}
	else if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Ya estás en el evento." );
	}
	else if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte estando en el paintball.");
	}
	else if( Info[playerid][pEstado] >= 1 || Info[ playerid ][ pJailTime ] > 0 || GetPVarInt(playerid, "injured") == 1 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "No puedes hacer esto ahora mismo." );
	}
	else if(InfoEvento[VipOnly] == 1 && Info[playerid][pVIP] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Este evento está restringido sólo para VIP´s.");
	}
	else if(InfoEvento[EventPlayers] >= InfoEvento[EventLimit]) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "Este evento ha alcanzado el límite máximo de jugadores.");
	}
	else if( InfoEvento[ EventStatus ] == 2 || (InfoEvento[ EventStatus ] == 1 && Info[playerid][pVIP] >= 3)) {

		if(IsPlayerInAnyVehicle(playerid)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "No se puedes unirte estando en un vehículo.");
		}

		SetPVarInt( playerid, "EventToken", 1 );
		ResetPlayerWeapons( playerid );
		pTazer[playerid] = 0;
		gMusic[playerid] = 0; // Canal OOC del evento se activa.
		GetPlayerHealth(playerid, EventFloats[playerid][4]);
		GetPlayerArmour(playerid, EventFloats[playerid][5]);
		EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
		EventLastInt[playerid] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
		GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
		if(InfoEvento[EventType] != 2)
		{
			SetPlayerPos( playerid, InfoEvento[ EventPositionX ], InfoEvento[ EventPositionY ], InfoEvento[ EventPositionZ ] );
		}
		SetPlayerInterior( playerid, InfoEvento[ EventInterior ] );
		SetPlayerVirtualWorld( playerid, InfoEvento[ EventWorld ] );
		SendClientMessageEx( playerid, COLOR_WHITE, InfoEvento[ EventoInfo ] );
		SetHP( playerid, InfoEvento[ EventHealth ] );
		SetPlayerArmour( playerid, InfoEvento[ EventArmor ] );
		SetPlayerVirtualWorld( playerid, 0 );

		if(InfoEvento[EventType] == 2)
		{
			SetPlayerSkin(playerid, InfoEvento[EventTeamSkin][nextteam]);
			new color = InfoEvento[EventTeamColor][nextteam];
			if (color==0) SetPlayerColor(playerid, 0x00000000);
			if (color==1) SetPlayerColor(playerid, 0xFFFFFF00);
			if (color==2) SetPlayerColor(playerid, 0x2641FE00);
			if (color==3) SetPlayerColor(playerid, 0xAA333300);
			if (color==16) SetPlayerColor(playerid, 0x33AA3300);
			if (color==5) SetPlayerColor(playerid, 0xC2A2DA00);
			if (color==6) SetPlayerColor(playerid, 0xFFFF0000);
			if (color==7) SetPlayerColor(playerid, 0x33CCFF00);
			if (color==51) SetPlayerColor(playerid, 0x2D6F0000);
			if (color==103) SetPlayerColor(playerid, 0x0B006F00);
			if (color==13) SetPlayerColor(playerid, 0x52525200);
			if (color==55) SetPlayerColor(playerid, 0xB46F0000);
			if (color==84) SetPlayerColor(playerid, 0x814F0000);
			if (color==74) SetPlayerColor(playerid, 0x750A0000);
			if (color==126) SetPlayerColor(playerid, 0xFF51F100);
			if(nextteam == 0)
			{
				SetPlayerPos(playerid, InfoEvento[EventTeamPosX1], InfoEvento[EventTeamPosY1], InfoEvento[EventTeamPosZ1]);
			}
			else
			{
				SetPlayerPos(playerid, InfoEvento[EventTeamPosX2], InfoEvento[EventTeamPosY2], InfoEvento[EventTeamPosZ2]);
			}
			if(nextteam == 0) nextteam++;
			else if(nextteam == 1) nextteam--;
		}

		InfoEvento[EventPlayers] ++;
		if(InfoEvento[EventPlayers] == InfoEvento[EventLimit])
		{
			ABroadCast(COLOR_YELLOW, "El evento ha alcanzado el límite máximo de jugadores.", 2);
		}
	}

	else if( InfoEvento[ EventStatus ] == 3 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "El evento está bloqueado, no puedes entrar al evento." );
	}
	else if( InfoEvento[ EventStatus ] == 4 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "El evento ya se ha iniciado, no puedes entrar al evento." );
	}

	return 1;
}

CMD:ram(playerid, params[]){
	if(IsACop(playerid)){
		if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la Arena.");
		if( Info[playerid][pEstado] >= 1 ) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
		new string[128];
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
				format(string, sizeof(string), "* %s rompe la puerta, y entra.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				LoadObjects(playerid);
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~r~Rompiste la puerta", 5000, 1);
				Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				Info[playerid][pVW] = i+6000;
				SetPlayerVirtualWorld(playerid, i+6000);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

CMD:toy(playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en este momento.");
		return 1;
	}
	new toyslot,string[128];
	if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /toy [slot (0-9)]");
	if(toyslot < 0 || toyslot > MAX_PLAYERTOYS) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Los Slots de los toys son del número 0 al 9.");
    switch(toyslot)
	{
	    case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, toyslot)){
			    new name[24];
			    format(name, sizeof(name), "None");
				for(new i;i<sizeof(HoldingObjectsAll);i++){
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][toyslot][ptModelID]){
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(string, sizeof(string), "Te quitaste el toy correctamente. (%s) (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][toyslot][ptBone]], toyslot);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			    RemovePlayerAttachedObject(playerid, toyslot);
			    return 1;
			}
			else
			{
	  			if(PlayerToyInfo[playerid][toyslot][ptModelID] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ningún toy en ese slot.");
   				SetPlayerAttachedObject(playerid, toyslot, PlayerToyInfo[playerid][toyslot][ptModelID], PlayerToyInfo[playerid][toyslot][ptBone], PlayerToyInfo[playerid][toyslot][ptPosX], PlayerToyInfo[playerid][toyslot][ptPosY], PlayerToyInfo[playerid][toyslot][ptPosZ], PlayerToyInfo[playerid][toyslot][ptRotX], PlayerToyInfo[playerid][toyslot][ptRotY], PlayerToyInfo[playerid][toyslot][ptRotZ], PlayerToyInfo[playerid][toyslot][ftscaleX],
				PlayerToyInfo[playerid][toyslot][ftscaleY], PlayerToyInfo[playerid][toyslot][ftscaleZ]);
				new name[24];
				format(name, sizeof(name), "Nada");
				for(new i;i<sizeof(HoldingObjectsAll);i++){
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][toyslot][ptModelID]){
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(string, sizeof(string), "Te pusiste el toy correctamente. (%s) (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][toyslot][ptBone]], toyslot);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	return 1;
}


CMD:esposar(playerid, params[])
{
if(IsACop(playerid))
{
if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
new string[170],
Float:Pos[3],
giveplayerid;
if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /esposar (playerid)");
if(IsPlayerConnected(giveplayerid))
{
if (ProxDetectorS(8.0, playerid, giveplayerid))
{
if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto contigo mismo.");
if(Info[giveplayerid][pEstado] == 1 || GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_HANDSUP || SeRinde[giveplayerid] == 1)
{
format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: hemos esposado a {00D2CF}%s, {FFFFFF}se decidirá su arresto.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
SendRadioMessage(1, TEAM_BLUE_COLOR, string);
format(string, sizeof(string), "Fuiste esposado por %s.", GetPlayerNameEx(playerid));
SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED); //animacion
SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
format(string, sizeof(string), "Esposaste a %s.", GetPlayerNameEx(giveplayerid));
SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
format(string, sizeof(string), "%s esposa a %s, las esposas estan seguras.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
GameTextForPlayer(giveplayerid, "Esposado", 2500, 3);
GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
ClearAnimations(giveplayerid);
TogglePlayerControllable(giveplayerid, 0);
Info[giveplayerid][pEstado] = 2;
SeRinde[giveplayerid] = 0;
SetPVarInt(giveplayerid, "PlayerCuffed", 2);
SetPVarInt(giveplayerid, "IsFrozen", 1);
PlayerCuffedTime[giveplayerid] = 300;
PlayerPlaySoundEx(1145, Pos[0], Pos[1], Pos[2]);
return 1;
}
return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El jugador tiene que estar tazeado o con las manos arriba. (/rendirse - /crack - /esconderse)");
}
return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
}
return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
}
return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
}

CMD:desesposar(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desesposar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes quitarte las esposas tu mismo.");
				if(Info[giveplayerid][pEstado] == 2)
				{
					DeletePVar(giveplayerid, "IsFrozen");
					format(string, sizeof(string), "* %s Te quito las esposas.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Le quitaste las esposas %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s qutó las esposas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~g~Te quitaron ~n~las esposas", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					ClearAnimations(giveplayerid);
					RemovePlayerAttachedObject(giveplayerid, 0);
   					SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
					Info[giveplayerid][pEstado] = 0;
                    PlayerCuffedTime[giveplayerid] = 0;
					DeletePVar(giveplayerid, "PlayerCuffed");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador ya no está arrestado.");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:detener(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[170], giveplayerid, seat;
		if(sscanf(params, "dd", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /detener (playerid) (Asiento 1-3)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(seat < 1 || seat > 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Asientos: 1 al 3.");
			if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa persona está en un vehiculo.");
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto contigo mismo!"); return 1; }
				if(Info[giveplayerid][pEstado] == 2)
				{
					new carid = gLastCar[playerid];
					if(IsSeatAvailable(carid, seat))
					{
						new Float:pos[6];
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
						GetVehiclePos( carid, pos[0], pos[1], pos[2]);
						if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
						floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
						floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: hemos capturado a {00D2CF}%s, {FFFFFF}lo trasladamos a la comisaría.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        SendRadioMessage(1, TEAM_BLUE_COLOR, string);
						RemovePlayerAttachedObject(giveplayerid, playerid);
					    SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
						format(string, sizeof(string), "Fuiste detenido por %s .", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Detuviste a %s .", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s sube a %s al vehiculo.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Detenido", 2500, 3);
						ClearAnimations(giveplayerid);
						TogglePlayerControllable(giveplayerid, false);
						PutPlayerInVehicle(giveplayerid, carid, seat);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese asiento no está disponible.");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF}Esa persona no está esposada.");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, " Usted no está lo suficientemente cerca del jugador o de su coche.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

/*CMD:fbi(playerid, params[]){
	if(Team_FBI(playerid))	{
		if(PlayerToPoint(5, playerid, 310.2178,-1538.3743,-44.9596)){
			SafeDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "{00F70C}FBI Menu","Duty\nEquipo\nUniforme SWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros del FBI.");
	}
	return 1;
}

CMD:cia(playerid, params[]){
	if(Team_ALEPH(playerid))	{
		if(PlayerToPoint(5, playerid,253.5987,76.6707,1003.6406) ){
			SafeDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "{00F70C}CIA Menu","Duty\nEquipo\nUniforme SWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros de la CIA.");
	}
	return 1;
}

CMD:sapd(playerid, params[]){
	if(Team_LSPD(playerid)){
		if(PlayerToPoint(5, playerid, 264.6584,109.6664,1004.6172)){
			SafeDialogEx(playerid, DUTYMENU, DIALOG_STYLE_LIST, "{00F70C}SAPD Menu","Duty\nEquipo\nSWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros de LSPD.");
	}
	return 1;
}*/
CMD:darrol(playerid, params[]){
	if(Info[playerid][pAdminZC] >= 2)	{
		new giveplayerid, string[128];
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darrol (playerid)");
        if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer eso con administradores de mayor rango.");
		if(IsPlayerConnected(giveplayerid))		{
		    if(Info[giveplayerid][pAdminZC] >= 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto con administradores." );
			if(ShowRules[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador ya está leyendo las reglas de rol.");
			new Float:roldX, Float:roldY, Float:roldZ;
			GetPlayerPos(giveplayerid, roldX, roldY, roldZ);
			SetPVarFloat(giveplayerid, "rOldX", roldX);
			SetPVarFloat(giveplayerid, "rOldY", roldY);
			SetPVarFloat(giveplayerid, "rOldZ", roldZ);
			SetPVarInt(giveplayerid, "rOldInt", GetPlayerInterior(giveplayerid));
			SetPVarInt(giveplayerid, "rOldVW", GetPlayerVirtualWorld(giveplayerid));
		    ShowRules[giveplayerid] = 1;
		    RulesTime[giveplayerid] = 1;
		    ShowRol(giveplayerid);
			format( string, sizeof( string ), "INFRANET-RP: %s (ID %d) fue enviado a leer las reglas de rol por %s.", GetPlayerNameEx(giveplayerid), giveplayerid, GetPlayerNameEx(playerid));
			ABroadCast( COLOR_GENERAL, string, 2 );
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:paquete(playerid, params[]){
	if (Info[playerid][pJob] != 10 && Info[playerid][pJob2] != 10) return SendClientMessageEx(playerid,COLOR_WHITE,"No eres traficante de drogas.");
	if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "¡Espera 2 minutos para volver a utilizar este comando!");
	new mypoint = -1,
	playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en el punto específico.");
	if(Info[playerid][pCrates]) return SendClientMessageEx(playerid, COLOR_GREY, "No se puede sostener más paquetes de drogas.");
	if(GetPlayerCash(playerid) > 100){
		SafeDialogEx(playerid,TRAFICDRUGS,DIALOG_STYLE_MSGBOX, "{00F70C}Selecciona", "¿Que deseas transportar?", "Hierba", "Crack");
		SetPVarInt(playerid, "ChoosingDrugs", 1);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE,"{FFFF00}[JOB]:{FFFFFF} No tienes $100!");
	return 1;
}

CMD:comprarhierba(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /comprarhierba (valor)");

	new tel;
	new price;
	new level = Info[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{ tel = 100; if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 10 con este nivel de skill!"); return 1; } }
	else if(level >= 51 && level <= 100)
	{ tel = 100; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 20 con este nivel de skill!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 100; if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 30 con este nivel de skill!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 100; if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 40 con este nivel de skill!"); return 1; } }
	else if(level >= 401)
	{ tel = 100; if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} No puedes sacar mas de 50 con este nivel de skill!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en la casa de crack.");
	if ( Info[playerid][pPot] >= 25) return SendClientMessageEx(playerid, COLOR_WHITE, " Tu ya tienes 25 gramos de hierba, no puedes cargar más.");
	if (Info[playerid][pJob] == 5 || Info[playerid][pJob2] ==5)	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Esta casa de drogas no tiene más hierba.");
		if(GetPlayerCash(playerid) > price)		{
			format(string, sizeof(string), "* Compraste %d gramos por $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			Info[playerid][pPot] += amount;
			if(Info[playerid][pVIP] < 1)			{
				Points[mypoint][Stock] -= amount;
				format(string, sizeof(string), " HIERBA DISPONIBLE: %d/1000.", Points[mypoint][Stock]);
				UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			}
			for(new i = 0; i < sizeof(fINFO); i++)			{
				if(strcmp(Points[mypoint][Owner], fINFO[i][FamilyName], true) == 0){
					fINFO[i][FamilyBank] = fINFO[i][FamilyBank]+price/2;
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes pagar estas drogas.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres vendedor de drogas.");
	return 1;
}
CMD:comprarcrack(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /comprarcrack (monto)");
	new tel;
	new price;
	new level = Info[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{
		tel = 100;
		if(amount < 1 || amount > 5)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 5 o menos con ese skil.");
			return 1;
		}
	}
	else if(level >= 51 && level <= 100)
	{ tel = 100; if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 10 o menos con ese skil!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 100; if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 15 o menos con ese skil!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 100; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 20 o menos con ese skil!"); return 1; } }
	else if(level >= 401)
	{ tel = 100; if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Sólo puedes cojer 25!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en la casa de crack.");
	if ( Info[playerid][pCrack] >= 25) return SendClientMessageEx(playerid, COLOR_WHITE, "Tu ya tienes 25 gramos de crack, no puedes cargar más.");
	if (Info[playerid][pJob] == 5 || Info[playerid][pJob2] ==5)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Esta casa de crack no tiene más crack.");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* Compraste %d gramos por $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			Info[playerid][pCrack] += amount;
			if(Info[playerid][pVIP] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			format(string, sizeof(string), " CRACK DISPONIBLE: %d/500.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes pagar estas drogas.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres vendedor de drogas.");
	return 1;
}
CMD:vendercrack(playerid, params[])
{
	if (Info[playerid][pJob] != 5 && Info[playerid][pJob2] !=5 ) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres vendedor de drogas.");
	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "ddd", giveplayerid, needed, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vendercrack (playerid) (gramos) (precio)");

	if(needed < 1 || needed > 99) { SendClientMessageEx(playerid, COLOR_WHITE, "   Los valores no pueden ser mayores a 99 gramos."); return 1; }
	if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_WHITE, "   El precio no puede ser menor que 1 ni mayor que 99999!"); return 1; }
	if(needed > Info[playerid][pCrack]) { SendClientMessageEx(playerid, COLOR_WHITE, "  No tienes suficiente droga para venderla!"); return 1; }
	if(IsPlayerConnected(giveplayerid))	{
		if(giveplayerid != INVALID_PLAYER_ID){
			if (ProxDetectorS(8.0, playerid, giveplayerid)){
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes venderte a ti mismo!");
				format(string, sizeof(string), "* Ofreciste a %s para que te compre %d gramos de crack por $%d.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Vendedor de drogas %s quiere venderte %d gramos de crack por $%d. (escribe /aceptar crack)", GetPlayerNameEx(playerid), needed, money);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				CrackOffer[giveplayerid] = playerid;
				CrackPrice[giveplayerid] = money;
				CrackGram[giveplayerid] = needed;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " Ese jugador está desconectado.");
	return 1;
}

CMD:venderhierba(playerid, params[])
{
	if (Info[playerid][pJob] != 5 && Info[playerid][pJob2] !=5 )
	{
		SendClientMessageEx(playerid, COLOR_WHITE, " No eres vendedor de drogas.");
		return 1;
	}
	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "ddd", giveplayerid, needed, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderhierba (playerid) (monto) (precio)");

	if(needed < 1 || needed > 99) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Gramos no pueden ser menor que 1, ni mayor que 99!"); return 1; }
	if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Precio: Mínimo 1 - Máximo: 99999!"); return 1; }
	if(needed > Info[playerid][pPot]) { SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No tienes tanta hierba para vender."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes venderte a ti mismo.");
					return 1;
				}
				format(string, sizeof(string), "* Ofreciste a %s comprar %d gramos de hierba por $%d.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Vendedor %s quiere venderte %d gramos de hierba por $%d. (Usa /aceptar hierba)", GetPlayerNameEx(playerid), needed, money);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PotOffer[giveplayerid] = playerid;
				PotPrice[giveplayerid] = money;
				PotGram[giveplayerid] = needed;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "   Ese jugador está desconectado.");
	return 1;
}

CMD:semillas(playerid, params[])
{
    if (Info[playerid][pJob] != 5 && Info[playerid][pJob2] !=5 ) return SendClientMessageEx(playerid, COLOR_WHITE, " No eres vendedor de drogas.");
	if(Info[playerid][pWSeeds] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes semillas usalas primero.");
	if(GetPlayerCash(playerid) < 500) return SendClientMessageEx(playerid, COLOR_WHITE, " No tienes $150 para pagar por esto.");
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
  	{
	   	if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
	   	{
			mypoint = i;
		}
   	}
   	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en la casa de drogas.");
	if(Points[mypoint][Stock] < 1 && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta casa de drogas no tiene más hierba.");
	if(Info[playerid][pVIP] < 1){
		new string[32];
		Points[mypoint][Stock] -= 1;
		format(string, sizeof(string), " HIERBA DISPONIBLE: %d/1000.", Points[mypoint][Stock]);
		UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
	}
	Info[playerid][pWSeeds] += 3;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Acabas de comprar una bolsa de semillas de hierba de la Casa de Drogas. ");
	GivePlayerCash(playerid, -1500);
	GameTextForPlayer(playerid, "~r~-$150", 3000, 1 );
	return 1;
}

CMD:capturar(playerid, params[])
{
	new string[128];
	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, " No puedes hacer esto ahora.");
		return 1;
	}
	if (Info[playerid][pFMember] == 255 || Info[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, " No eres el rango suficiente para capturar (5).");
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz])) mypoint = i;
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_WHITE, " Usted no está en el lugar de captura!");
	if (Points[mypoint][Vulnerable] > 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Este punto no está listo para la toma de posesión.");
	if (Points[mypoint][TimeToClaim]) return SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Este punto ya está capturado.");
	if(GetPlayerPing(playerid) > 600){
		format(string,sizeof(string), " No puedes hacer esto mientras tienes más de %d de ping!", 600);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		return 1;
	}
	Points[mypoint][PointBarID] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
	SetProgressBarValue(Points[mypoint][PointBarID], 100.0);
	ShowProgressBarForPlayer(playerid, Points[mypoint][PointBarID]);
	format(string,sizeof(string), " %s está tratando de apoderarse del punto.", GetPlayerNameEx(playerid));
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);
	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}


CMD:puntos(playerid, params[]){
	new string[128];
	for(new i; i < MAX_POINTS; i++)	{
		if (Points[i][Type] >= 0)		{
			format(string, sizeof(string), "Nombre: %s | Dueño: %s | Capturado por: %s | Horas: %d",
			Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:pedit(playerid, params[]){
	if(Info[playerid][pAdminZC] <= 4000 || Info[playerid][pGangModerator] == 1){
		new string[128], hours;
		if(sscanf(params, "d", hours)){
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /pedit (HORAS)");
			SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ADM]:{FFFFFF} Párese cerca de un punto para ajustar las horas.");
			return 1;
		}
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				if(hours < 1|| hours > 24) SendClientMessageEx(playerid, COLOR_GREY, "Tip: 1 - 24");
				else if(hours >= 1|| hours <= 24)
				{
					format(string, sizeof(string), "Estableciste el tiempo de vulnerabilidad a %d horas !", hours);
					Points[h][Vulnerable] = hours;
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					UpdatePoints();
				}
			}
		}
	}
	return 1;
}

CMD:dedit(playerid, params[])
{
	if(Info[playerid][pAdminZC] < 4000) return SendClientMessageEx(playerid, COLOR_WHITE, " No eres administrador.");
	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /dedit (nombre) (monto)");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres: hierba, Crack");
		return 1;
	}
	if(strcmp(choice,"hierba",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 3)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " HIERBA DISPONIBLE: %d/1000", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_WHITE, " Estableciste la cantidad de hierba en la casa de drogas.");
			}
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 4)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " CRACK DISPONIBLE: %d/500", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_WHITE, " Estableciste la cantidad de crack en la casa de drogas.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "	Nombre no válido.");
	return 1;
}

CMD:adminpuntos(playerid, params[]){
    if(Info[playerid][pAdminZC] > 1337 || Info[playerid][pGangModerator] == 1){
    	SendClientMessageEx(playerid, COLOR_GREEN,"Ayuda - Comandos Administrativos Sistema de puntos.");
		SendClientMessageEx(playerid, COLOR_WHITE, "/dedit (Editar drogas de cada punto) - /pedit (Tiempo de vulnerabilidad)");
		SendClientMessageEx(playerid, COLOR_WHITE, "/puntos /gotopoint");
	}
	return 1;
}

CMD:plantar(playerid, params[])
{
	if (Info[playerid][pJob] != 5 && Info[playerid][pJob2] !=5 )
	{
		SendClientMessageEx(playerid, COLOR_WHITE, " No eres vendedor de drogas.");
	}
 	else if(Info[playerid][pWSeeds] > 0)
	 {
		if(Info[playerid][pWExists] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Ya plantaste semillas tienes que esperar." );
		    return 1;
		}
		/*new
			szMessage[128];*/
		GetPlayerPos(playerid, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]);
		Info[playerid][pWZ] -= 1.5;
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		SendClientMessageEx(playerid, COLOR_GREEN, "Has plantado un poco de hierba. El trayecto dura unos 20-45 minutos en crecer.");

		Info[playerid][pWInt] = GetPlayerInterior(playerid);
		Info[playerid][pWVW] = GetPlayerVirtualWorld(playerid);
		Info[playerid][pWExists] = 1;
		Info[playerid][pWValue] = -1;
		Info[playerid][pWSeeds]--;
		Info[playerid][pWObject] = CreateDynamicObject(19473, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ], 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 60000, 1, "i", playerid);
		format(szMessage, sizeof(szMessage), " * %s planta unas semillas de hierba", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficientes semillas para sembrar, ve a la casa de drogas y recoge más (/semillas).");
	return 1;
}

CMD:aborrarplanta(playerid, params[]) {
	if(Info[playerid][pAdminZC] >= 5) {
		new
			iTargetID;
		if(sscanf(params, "d", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /aborrarplanta (playerid)");
		}
		else if(IsPlayerConnected(iTargetID)) {
			/*new
				szMessage[47 + MAX_PLAYER_NAME];*/
			format(szMessage, sizeof(szMessage), "Destruiste la planta de %s (%i gramos).", GetPlayerNameEx(iTargetID), Info[iTargetID][pWValue]);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
			format(szMessage, sizeof(szMessage), "Administrador %s destruyó tu planta sembarada (%i gramos).", GetPlayerNameEx(playerid), Info[iTargetID][pWValue]);
			SendClientMessageEx(iTargetID, COLOR_GREY, szMessage);
			ClearWeed(iTargetID);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:destruirplanta(playerid, params[])
{
	if(IsACop(playerid)) {
		foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 55.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ])) {
			if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt]) {

				/*new
					szMessage[128];*/

				ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
				format(szMessage, sizeof(szMessage), "* Destruye la plata, pesa %d gramos.", Info[i][pWValue]);
				SendClientMessageEx(playerid, COLOR_GREY, szMessage);
				format(szMessage, sizeof(szMessage), " * %s destruye la hierba plantada.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ClearWeed(i);
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una planta.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

CMD:checkplanta(playerid, params[]) {
	foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 55.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ])) {
	    if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt]) {

			/*new
				szMessage[50 + MAX_PLAYER_NAME];*/

			if(Info[i][pWValue] > 0)
			{
				format(szMessage, sizeof(szMessage), "Plantador: %s, peso: %i gramos. /sacarplanta para sacarla.", GetPlayerNameEx(i), Info[i][pWValue]);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "Plantador: %s. Esto no está listo para ser sacada.", GetPlayerNameEx(i));
				SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
			}
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una planta.");
}

CMD:sacarplanta(playerid, params[])
{
	foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 55.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ]))
	{
	    if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt])
		{
			if(Info[i][pWValue] > 0)
			{
				if(Info[i][pWValue] + Info[playerid][pPot] < 1000)
				{

					/*new
						szMessage[52];*/
					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					Info[playerid][pPot] += Info[i][pWValue];
					format(szMessage, sizeof(szMessage), "Recogiste la hierba y te dió %d gramos de hierba.", Info[i][pWValue]);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					format(szMessage, sizeof(szMessage), " * %s recoge la planta.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ClearWeed(i);
				}
				else SendClientMessageEx(playerid, COLOR_WHITE, "No se puede llevar a más de 1Kg de hierba.");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esta planta no está lista para ser recogida todavía.");
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una planta.");
}

CMD:materiales(playerid, params[])
{
	if (Info[playerid][pJob] != 7 && Info[playerid][pJob2] != 4 && Info[playerid][pJob] != 12 && Info[playerid][pJob2] != 12)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No eres vendedor de armas o artesano!");
 		return 1;
	}
	if(GetPVarInt(playerid, "Packages") >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero asegurate de estar sin un checkpoint activo (Tienes materiales por entregar).");
		return 1;
	}
	if(TaxiAccepted[playerid] != 999 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero asegurate de estar sin un checkpoint activo (taxi, emergencias o mecánico).");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2613.3691,-1065.9915,69.9656))
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes entregar tus paquetes primero. (( Usar el comando /tirar parquetesM ))");
		if(Info[playerid][pVIP] == 1)
		{
		    if(GetPlayerCash(playerid) < 1125)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1125!");
		        return 1;
		    }
			GivePlayerCash(playerid, -1125);
			SetPVarInt(playerid, "Packages", 23);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 23 Paquetes de Materiales por $1125.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Has recibido los paquetes pero por 1.5x más, y lo que te permite es recibir 1.5x materiales más.");
		}
		else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
		{
			if(GetPlayerCash(playerid) < 1500)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1500!");
		        return 1;
		    }
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 30 Paquetes de Materiales por $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[SILVERGOLDVIP]:{FFFFFF} Has recibido los paquetes pero por 2x más, y lo que te permite es recibir 2x materiales más.");
		}
		else if(Info[playerid][pVIP] >= 4)
		{
			if(GetPlayerCash(playerid) < 1875)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1875!");
		        return 1;
		    }
			GivePlayerCash(playerid, -1875);
			SetPVarInt(playerid, "Packages", 38);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 38 Paquetes de Materiales por $1875.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINUMVIP]:{FFFFFF} Has recibido los paquetes pero por 2.5x más, y lo que te permite es recibir 2.5x materiales más.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 750)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $750!");
		        return 1;
		    }
			GivePlayerCash(playerid, -750);
			SetPVarInt(playerid, "Packages", 15);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 15 Paquetes de Materiales por $750.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Sigue tu camino hacia el checkpoint y entregar sus paquetes de materiales.");
		SetPVarInt(playerid, "MatDeliver", 333);
		SetPVarInt(playerid, "tpMatRunTimer", 15);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, 1083.0131,-1226.7869,15.8203, 5);
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, 2388.4568,-2008.2374,13.5537))
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes entregar tus paquetes primero. (( Usar el comando /tirar parquetesM ))");

		if(Info[playerid][pVIP] == 1)
		{
			if(GetPlayerCash(playerid) < 900)
			{
   				SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $900!");
       			return 1;
   			}
			GivePlayerCash(playerid, -900);
			SetPVarInt(playerid, "Packages", 18);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 18 Paquetes de Materiales por $900.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Has recibido los paquetes pero por 1.5x más, y lo que te permite es recibir 1.5x materiales más.");
		}
		else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
		{
			if(GetPlayerCash(playerid) < 1200)
			{
   				SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1200!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1200);
			SetPVarInt(playerid, "Packages", 24);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 24 Paquetes de Materiales por $1200.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[SILVERGOLDVIP]:{FFFFFF} Has recibido los paquetes pero por 2x más, y lo que te permite es recibir 2x materiales más.");
		}
		else if(Info[playerid][pVIP] >= 4)
		{
			if(GetPlayerCash(playerid) < 1500)
			{
   				SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1500!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 30 Paquetes de Materiales por $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[PLATINUMVIP]:{FFFFFF} Has recibido los paquetes pero por 2.5x más, y lo que te permite es recibir 2.5x materiales más.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 600)
			{
   				SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $600!");
       			return 1;
   			}
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 12 Paquetes de Materiales por $600.");
			GivePlayerCash(playerid, -600);
			SetPVarInt(playerid, "Packages", 12);
		}

		SetPVarInt(playerid, "MatDeliver", 444);
		SetPVarInt(playerid, "tpMatRunTimer", 12);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, 2534.2683,-1063.3899,69.5655, 5);
		return 1;
	}
	new mypoint = -1;
	new mypointex = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
		{
			mypoint = i;
			mypointex = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No estás en el Punto donde se recogen materiales!");
		return 1;
	}
	if(Info[playerid][pVIP] == 1)
	{
		if(GetPlayerCash(playerid) < 100)
		{
			SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $750!");
			return 1;
		}
		GivePlayerCash(playerid, -750);
		SetPVarInt(playerid, "Packages", 15);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $750 por 15 materiales.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Tu recibes 1.5x paquetes más, que te dará 1.5x más materiales.");
	}
	else if(Info[playerid][pVIP] == 2 || Info[playerid][pVIP] == 3)
	{
		if(GetPlayerCash(playerid) < 1000)
		{
			SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1000!");
			return 1;
		}
		GivePlayerCash(playerid, -1000);
		SetPVarInt(playerid, "Packages", 20);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $1000 por 20 materiales.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Tu recibes 2x paquetes más, que te dará 2x más materiales.");
	}
	else if(Info[playerid][pVIP] >= 4)
	{
		if(GetPlayerCash(playerid) < 1250)
		{
			SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No puedes pagar $1250!");
			return 1;
		}
		GivePlayerCash(playerid, -1250);
		SetPVarInt(playerid, "Packages", 25);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste $1250 por 25 materiales.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[BRONCEVIP]:{FFFFFF} Tu recibes 2.5x paquetes más, que te dará 2.5x más materiales.");
	}
	else
	{
		if(GetPlayerCash(playerid) < 300)
		{
			SendClientMessageEx(playerid, COLOR_GREY,"{FFFF00}[ERROR]:{FFFFFF} No tienes $300!");
			return 1;
		}
		GivePlayerCash(playerid, -500);
		SetPVarInt(playerid, "Packages", 10);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Pagaste 10 paquetes de materiales por $500.");
	}

	SetPVarInt(playerid, "MatDeliver", 555);
	SetPVarInt(playerid, "tpMatRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	for(new i = 0; i < sizeof(fINFO); i++)
	{
		if(strcmp(Points[mypointex][Owner], fINFO[i][FamilyName], true) == 0)
		{
			fINFO[i][FamilyBank] += 1250;
		}
	}
	SetPlayerCheckpoint(playerid, 2317.739990,-2303.850830,13.545999, 5);
	return 1;
}
CMD:sfondos(playerid, params[])
{
    if(Presidente(playerid))
    {
		new string[128], amount, reason[64];
		if(sscanf(params, "ds[64]", amount, reason))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sfondos (monto) (razón)");
			format(string, sizeof(string), "* BALANCE: $%d.", Tax);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido.");
		if(Tax > amount)
		{
			Tax -= amount;
			SaveStuff();
			GivePlayerCash( playerid, amount );
			format( string, sizeof( string ), "Retiraste $%d de los fondos del gobierno.", amount );
			SendClientMessageEx( playerid, COLOR_WHITE, string );
			format(string,sizeof(string),"{FFFF00}INFRANET-RP:{FF0000} El presidente %s retiro $%d de los fondos del gobierno, razón: %s.",GetPlayerNameEx(playerid),amount,reason);
			ABroadCast( COLOR_YELLOW, string, 2);
			Log("LOGS/especial.log", string);
		}
		else{SendClientMessageEx(playerid, COLOR_WHITE, "No hay fondos suficientes.");}
	}
    else if(DirectorCNN(playerid))
    {
		new string[128], amount, reason[64];
		if(sscanf(params, "ds[64]", amount, reason))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sfondos (monto) (razón)");
			format(string, sizeof(string), "* BALANCE: $%d.", FondosCNN);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido.");
		if(FondosCNN > amount)
		{
			FondosCNN -= amount;
			SaveStuff();
			GivePlayerCash( playerid, amount );
			format( string, sizeof( string ), "Retiraste $%d de los fondos del gobierno.", amount );
			SendClientMessageEx( playerid, COLOR_WHITE, string );
			format(string,sizeof(string),"{FFFF00}INFRANET-RP:{FF0000} El director de LSTV %s retiro $%d de los fondos de la empresa, razón: %s.",GetPlayerNameEx(playerid),amount,reason);
			ABroadCast( COLOR_YELLOW, string, 2);
			Log("LOGS/especial.log", string);
		}
		else{SendClientMessageEx(playerid, COLOR_WHITE, "No hay fondos suficientes.");}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres el líder de una institución legal.");
	return 1;
}
CMD:dejarfondos(playerid, params[])
{
    if(Presidente(playerid))
    {
		new string[128], amount;
		if(sscanf(params, "d", amount))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dejarfondos [Cantidad]");
			format(string, sizeof(string), "* BALANCE: $%d.", Tax);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido.");
		if(GetPlayerCash(playerid) < amount) return SendClientMessageEx(playerid, COLOR_WHITE, " No dispones de ese dinero.");
		Tax += amount;
		SaveStuff();
		GivePlayerCash(playerid, -amount);
		format( string, sizeof( string ), "[INFO]: Depositaste $%d en los fondos del Gobierno.", amount );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
	}
    else if(DirectorCNN(playerid))
    {
		new string[128], amount;
		if(sscanf(params, "d", amount))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dejarfondos [Cantidad]");
			format(string, sizeof(string), "* BALANCE: $%d.", FondosCNN);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			return 1;
		}
		if(amount < 0) return SendClientMessageEx(playerid, COLOR_WHITE, " El monto es inválido.");
		if(GetPlayerCash(playerid) < amount) return SendClientMessageEx(playerid, COLOR_WHITE, " No dispones de ese dinero.");
		FondosCNN += amount;
		SaveStuff();
		GivePlayerCash(playerid, -amount);
		format( string, sizeof( string ), "[INFO]: Depositaste $%d en los fondos de LSTV.", amount );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres el líder de una institución legal.");
	return 1;
}
/*CMD:dejarfondos(playerid, params[])
{
	if(!Presidente(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres el lider del gobierno.");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /dejarfondos (monto)");
		format(string, sizeof(string), "* BALANCE: $%d.", Tax);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Monto es inválido.");
	Tax += amount;
	SaveStuff();
	GivePlayerCash(playerid, -amount);
	format( string, sizeof( string ), "Depositaste $%d en los fondos del gobierno.", amount );
	SendClientMessageEx( playerid, COLOR_WHITE, string );
	return 1;
}*/

CMD:placaex(playerid, params[]){
    if(IsACop(playerid) ||  IsACia(playerid) && GetPVarInt(playerid, "IsInArena") == 0 && !GetPVarInt(playerid, "EventToken") && Info[playerid][pJailed] == 0){
		if(OnDuty[playerid] == 1){
			OnDuty[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora serás visto como fuera de servicio.");
		}
		else{
			OnDuty[playerid] = 1;
			SetPlayerColor(playerid, TEAM_BLUE_COLOR);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora serás visto como en servicio.");
		}
	}
	return 1;
}

CMD:arrestar(playerid, params[]){
	if(IsACop(playerid))
	{
 		if(!IsAtArrestPoint(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el punto de entrega."); // LSPD x2, FBI, Dillmore.
		new string[128], giveplayerid, time;
		if(sscanf(params, "dddd", giveplayerid, time)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /arrestar [ID] (Minutos) ");
		if(time < 1 || time > 60) { SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo: 1 a 60 minutos."); return 1; }
		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(Info[suspect][pWantedLevel] < 1 && Info[playerid][pMember] != 8)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "El sospechoso debe tener un nivel de búsqueda de al menos una estrella.");
					return 1;
				}
				format(string, sizeof(string), "%s fue arrestado.", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                format(string, sizeof(string), "[Radio de policía] {FFFFFF}(Oficial %s) dice: hemos arrestado a {00D2CF}%s.", GetPlayerNameEx(playerid), GetPlayerNameEx(suspect));
                SendRadioMessage(1, TEAM_BLUE_COLOR, string); // LSPD.
                SendRadioMessage(2, TEAM_BLUE_COLOR, string); // FBI.
				ResetPlayerWeaponsEx(suspect);
				GameTextForPlayer(suspect, "Fuiste arrestado", 5000, 5);
				if(IsPlayerInRangeOfPoint(playerid, 5.0, 1559.32,-1693.75,5.9) || IsPlayerInRangeOfPoint(playerid, 5.0, 1559.65,-1649.43,4990.6)) // LSPD.
				{
					SetPlayerFacingAngle(suspect, 0);
   					TogglePlayerControllable(suspect, 0);
				    TextDrawShowForPlayer(suspect, box);
					TextDrawShowForPlayer(suspect, streamer);
					SetPVarInt(suspect, "LoadingObjects", 1);
					SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
					if(Info[suspect][pVIP] >= 2)
					{
						Info[suspect][pJailTime] = ((time*60)*75)/100;
					}
					else
					{
						Info[suspect][pJailTime] = time * 60;
					}
					DeletePVar(suspect, "IsFrozen");
					new rand;
		    		rand = random(sizeof(LSPDPrisonSpawns));
		    		SetPlayerPos(suspect, LSPDPrisonSpawns[rand][0], LSPDPrisonSpawns[rand][1], LSPDPrisonSpawns[rand][2]);
		    		LoadObjects(suspect);
					Info[suspect][pJailed] = 2;
					PhoneOnline[suspect] = 1;
					Info[suspect][pArrested] += 1;
					Info[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					ClearAnimations(suspect);
					Info[suspect][pEstado] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					SetPlayerInterior(suspect, 1);
					Info[suspect][pInt] = 1;
					SetPlayerVirtualWorld(suspect, 1);
					Info[suspect][pVW] = 1;
                	SendRadioMessage(1, TEAM_BLUE_COLOR, "[Radio de policía]: El detenido ha sido desplazado a la prisión de SAPD en Los Santos."); // LSPD.
				}
				if(IsPlayerInRangeOfPoint(playerid, 4.0, 286.91,-1615.54,17.85)) // FBI.
				{
				    SetPlayerFacingAngle(suspect, 0);
   					TogglePlayerControllable(suspect, 0);
				    TextDrawShowForPlayer(suspect, box);
					TextDrawShowForPlayer(suspect, streamer);
					SetPVarInt(suspect, "LoadingObjects", 1);
					SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
					if(Info[suspect][pVIP] >= 2)
					{
						Info[suspect][pJailTime] = ((time*60)*75)/100;
					}
					else
					{
						Info[suspect][pJailTime] = time * 60;
					}
					DeletePVar(suspect, "IsFrozen");
 					new rand;
		    		rand = random(sizeof(FBIPrisonSpawns));
		    		SetPlayerPos(suspect, FBIPrisonSpawns[rand][0], FBIPrisonSpawns[rand][1], FBIPrisonSpawns[rand][2]);
					SetPlayerInterior(suspect, 0);
					Info[suspect][pInt] = 0;
					Info[suspect][pVW] = 0;
					SetPlayerVirtualWorld(suspect, 0);
					Info[suspect][pJailed] = 3;
					PhoneOnline[suspect] = 1;
					Info[suspect][pArrested] += 1;
					Info[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					ClearAnimations(suspect);
					Info[suspect][pEstado] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					SendRadioMessage(2, TEAM_BLUE_COLOR, "[Radio de policía]: El detenido ha sido desplazado a la prisión del FBI, en Rodeo.");
				}
				if(IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)) // Dillimore (LSPD y FBI)
				{
				    if(!Team_FBI(playerid))
				    {
				    	SetPlayerFacingAngle(suspect, 0);
						if(Info[suspect][pVIP] >= 2)
						{
							Info[suspect][pJailTime] = ((time*60)*75)/100;
						}
						else
						{
							Info[suspect][pJailTime] = time * 60;
						}
						DeletePVar(suspect, "IsFrozen");
 						new rand;
		    			rand = random(sizeof(PrisonDillmore));
		    			SetPlayerPos(suspect, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
						SetPlayerInterior(suspect, 5);
						Info[suspect][pInt] = 5;
						Info[suspect][pVW] = 5;
						SetPlayerVirtualWorld(suspect, 5);
						Info[suspect][pJailed] = 6;
						PhoneOnline[suspect] = 1;
						Info[suspect][pArrested] += 1;
						Info[suspect][pWantedLevel] = 0;
						SetPlayerToTeamColor(suspect);
						SetPlayerWantedLevel(suspect, 0);
						ClearAnimations(suspect);
						Info[suspect][pEstado] = 0;
						DeletePVar(suspect, "PlayerCuffed");
						PlayerCuffedTime[suspect] = 0;
						SendRadioMessage(1, TEAM_BLUE_COLOR, "[Radio de policía]: El detenido ha sido arrestado en la prisión de Dillmore, el Sheriff se encargará.");
					}
					else
					{
						TogglePlayerControllable(suspect, 0);
				    	TextDrawShowForPlayer(suspect, box);
						TextDrawShowForPlayer(suspect, streamer);
						SetPVarInt(suspect, "LoadingObjects", 1);
						SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
						SetPlayerInterior(suspect, 0);
						Info[suspect][pVW] = 0;
						Info[suspect][pInt] = 0;
						SetPlayerVirtualWorld(suspect, 0);
						if(Info[suspect][pVIP] >= 2)
						{
							Info[suspect][pJailTime] = ((time*60)*75)/100;
						}
						else
						{
							Info[suspect][pJailTime] = time * 60;
						}
						Info[suspect][pJailed] = 3;
						PhoneOnline[suspect] = 1;
						DeletePVar(suspect, "IsFrozen");
						new rand;
		    			rand = random(sizeof(FBIPrisonSpawns));
		    			SetPlayerPos(suspect, FBIPrisonSpawns[rand][0], FBIPrisonSpawns[rand][1], FBIPrisonSpawns[rand][2]);
						Info[suspect][pArrested] += 1;
						Info[suspect][pWantedLevel] = 0;
						SetPlayerToTeamColor(suspect);
						SetPlayerWantedLevel(suspect, 0);
						ClearAnimations(suspect);
						Info[suspect][pEstado] = 0;
						DeletePVar(suspect, "PlayerCuffed");
						PlayerCuffedTime[suspect] = 0;
						SendRadioMessage(2, TEAM_BLUE_COLOR, "[Radio de policía]: El detenido ha sido arrestado en Dillmore, será enviado a la prisión de FBI de inmediato.");
					}
				}
				else
				{
					JailPrice[suspect] = 0;
					format(string, sizeof(string), "Fuiste encarcelado %d segundos.   Fianza: No Disponible.", Info[suspect][pJailTime]);
					SendClientMessageEx(suspect, COLOR_LIGHTBLUE, string);
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No hay nadie cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres de las fuerzas de la ley.");
	return 1;
}

CMD:estacion(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){
		return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar en un vehiculo y ser el conductor.");
	}
    else if(isnull(params)){
			SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /estacion [estación] (0 - OFF)");
        SendClientMessageEx(playerid, COLOR_GRAD2, "(1) 40 Principales (Pop) - (2) Europa FM (Pop) - (3) Noise FM (Dubstep) - (4) Energía FM (Reggaeton) - (5) GotRadio - (Country)");
        SendClientMessageEx(playerid, COLOR_GRAD2, "(6) IbizaSonica (Electronic) - (7) Central Radio (Rock) - (8) Underground (80s) - (9) Dance Wave (Techno Dance) - (10) Baladas Románticas (Pop)");
        SendClientMessageEx(playerid, COLOR_GRAD2, "(11) BlackBeats FM (Urban) - (12) Show Radio (Cumbia) - (13) Funky House (House) - (14) Death N Brutality (Metal) - (15) Symphony (Clásica)");
        return 1;
    }
    new string[84], station[64];
	switch(strval(params)){
		case 0:{
			format(string, sizeof(string), "* %s apaga la radio del vehiculo.",GetPlayerNameEx(playerid));
			foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			{
				StopAudioStreamForPlayer(playerid);
				estacionp[i] = 0;
				estacionveh[GetPlayerVehicleID(playerid)] = 0;
			}
		}
		case 1:{
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=181047"); // 40 Principales.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: 40 Principales.");
			estacionveh[GetPlayerVehicleID(playerid)] = 1;
		}
		case 2: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=426502"); // Europa FM.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Europa FM.");
			estacionveh[GetPlayerVehicleID(playerid)] = 2;
		}
		case 3: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=528376"); // Noise FM.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Noise FM.");
			estacionveh[GetPlayerVehicleID(playerid)] = 3;
		}
		case 4: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=20553"); // Energia FM.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Energía FM.");
			estacionveh[GetPlayerVehicleID(playerid)] = 4;
		}
		case 5: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=262833"); //GotRadio - Country Christmas.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: GotRadio - Country");
			estacionveh[GetPlayerVehicleID(playerid)] = 5;
		}
		case 6: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=9480264"); // IbizaSonica.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: IbizaSonica.");
			estacionveh[GetPlayerVehicleID(playerid)] = 6;
		}
		case 7: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99182763"); // Central Radio 24.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Central Radio.");
			estacionveh[GetPlayerVehicleID(playerid)] = 7;
		}
		case 8: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=238355"); // Underground.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Underground.");
			estacionveh[GetPlayerVehicleID(playerid)] = 8;
		}
		case 9: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=786481"); // Dance Wave.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Dance Wave.");
			estacionveh[GetPlayerVehicleID(playerid)] = 9;
		}
		case 10: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=260172"); // Baladas Romanticas.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Baladas Románticas.");
			estacionveh[GetPlayerVehicleID(playerid)] = 10;
		}
		case 11: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=302745"); // BlackBeats.FM.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: BlackBeats FM.");
			estacionveh[GetPlayerVehicleID(playerid)] = 11;
		}
		case 12: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293693"); // Show Radio.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Show Radio.");
			estacionveh[GetPlayerVehicleID(playerid)] = 12;
		}
		case 13: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=99194448"); // MUSIK.HOUSE (FUNKY)
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Funky House.");
			estacionveh[GetPlayerVehicleID(playerid)] = 13;
		}
		case 14: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=133749"); // Death N Brutality.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Death N Brutality.");
			estacionveh[GetPlayerVehicleID(playerid)] = 14;
		}
		case 15: {
			format(string, sizeof(string), "* %s cambia la emisora de la radio.",GetPlayerNameEx(playerid));
			format(station, sizeof(station), "http://yp.shoutcast.com/sbin/tunein-station.pls?id=548423"); // Symphony Radio.
			SendClientMessageEx(playerid, COLOR_GREEN, "Sonando ahora: Symphony.");
			estacionveh[GetPlayerVehicleID(playerid)] = 15;
		}
		default: return SendClientMessageEx(playerid, COLOR_GRAD2, "Está estación es inválida.");
	}
    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    foreach(Player, i) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	{
		StopAudioStreamForPlayer(playerid);
		estacionp[i] = PlayAudioStreamForPlayer(playerid, station, 1, 1, 1, 1, 0);
    }
    return 1;
}

CMD:vendermateriales(playerid, params[])
{
	new string[128], giveplayerid, amount, price;
	if(sscanf(params, "ddd", giveplayerid, amount, price)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /vendermateriales (playerid) (Monto) (Precio)");
	if(amount < 1 || amount > 99999999) { SendClientMessageEx(playerid, COLOR_WHITE, " Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
	if(price < 1) { SendClientMessageEx(playerid, COLOR_WHITE, " El precio no puede ser menor que 1,"); return 1; }
 	if (GetPVarInt(playerid, "ArmsTimer") > 0)
	{
        format(string, sizeof(string), " Tienes que esperar %d segundos despues de haber dado algún arma o materiales.", GetPVarInt(playerid, "ArmsTimer"));
        SendClientMessageEx(playerid,COLOR_WHITE,string);
        return 1;
    }
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "No puedes venderte a ti mismo.");
					return 1;
				}
				format(string, sizeof(string), "* Has ofrecido a %s, %d materiales por $%d.", GetPlayerNameEx(giveplayerid), amount, price);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s quiere venderte %d materiales por $%d, (Utiliza: /aceptar materiales para comprar).", GetPlayerNameEx(playerid), amount, price);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				MatsOffer[giveplayerid] = playerid;
				MatsPrice[giveplayerid] = price;
				return MatsAmount[giveplayerid] = amount;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválido.");
	}
	return 1;
}
/*CMD:stuff(playerid, params[])
{
    new string[128];
	SendClientMessageEx(playerid, COLOR_ORANGE, "Stuff del servidor. Su guardado se realiza mediante /actualizarsv.");
	format(string, sizeof(string), "[TASAS - FONDOS]: Gobierno (Tasa: %d$ - Fondos %d$).",Tax,TaxValue);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "[OTROS DATOS] Jackpoint: %d | Sangre %d | Gasolina %d | TXT Costs: %d",Jackpot,Blood,Fuel,txtcost);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}*/
CMD:stuff(playerid, params[])
{
    new string[128];
	SendClientMessageEx(playerid, COLOR_ORANGE, "Stuff del servidor. Su guardado se realiza mediante /actualizarsv.");
	format(string, sizeof(string), "[TASAS - FONDOS]: Gobierno (Fondos: %d$ - Impuesto %d$) | LSTV ( Precio /ad: %d$ - Fondos: %d$).",Tax,TaxValue,TaxCNN,FondosCNN);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "[OTROS DATOS] Jackpoint: %d | Sangre %d | GasolinaL %d | TXT Costs: %d",Jackpot,Blood,Fuel,txtcost);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}
CMD:serverstats(playerid, params[])
{
	new string[128];
	new formatmin[4];
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] <= 4000) return SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[ADM]:{FF0000} No eres el encargado de esto ó no eres administrador.");
	if(MPMinute < 10) format(formatmin,sizeof(formatmin),"0%d",MPMinute);
	else format(formatmin,sizeof(formatmin),"%d",MPMinute);
	format(string,sizeof(string),"Estadisticas del Servidor - Versión %s (desde Fecha Indefinida.).",SERVER_GM_TEXT);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	format(string, sizeof(string), "* Objetos: %d | Pickups: %d | Map Icons: %d | 3D Text Labels: %d | TextDraws: %d | Casas: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount,MAX_HOUSES);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Logins: %d | Conexiones: %d | Registrados: %d | Autobaneados: %d | Uptime: %d horas",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Usuarios Conectados: %d | Récord: %d (%d/%d/%d - %d:%s) | Vehiculos de Usuarios: %d",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,formatmin,PlayerCars);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:venderchaleco(playerid, params[])
{
	if(Info[playerid][pJob] != 11 && Info[playerid][pJob2] != 11)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No eres un Vendedor de Chalecos.");
		return 1;
	}
	new string[128], giveplayerid, money;
	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderchaleco (playerid) (precio)");
	if (GetPVarInt(playerid, "GuardTimer") > 0)
	{
		format(string, sizeof(string), " Debes esperar %d segundos después de haber vendido.", GetPVarInt(playerid, "GuardTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	//if(AntiAbuso[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Espera 2 minutos mínimo para volver a usar el comando.");
	if(money < 5000 || money > 15000) { SendClientMessageEx(playerid, COLOR_WHITE, "Precio: $5,000 a $15,000."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto para ti mismo.");
				return 1;
			}
			if(!strcmp(Info[playerid][pIP], Info[giveplayerid][pIP], false) && Info[playerid][pMulticuenta] == 0 && Info[giveplayerid][pMulticuenta] == 0)
			{
   				// Si las IP son iguales y ambos son multicuentas NO AUTORIZADAS = 0.
				new ipc[32], stringlog[180]; GetPlayerIp(playerid, ipc, 32);
				format(stringlog, sizeof(stringlog), "[ATENCIÓN] Posibles multicuentas: %s(%d) ha vendido a %s(%d) un chaleco por $%d. [IP: %s]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, money, ipc);
				ABroadCast(COLOR_ORANGE, stringlog, 2); Log("LOGS/multicuentas.log", stringlog);
			}
			SetPVarInt(playerid, "GuardTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			format(string, sizeof(string), "* Ofreciste Chaleco a %s por $%d.", GetPlayerNameEx(giveplayerid), money);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Vendedor De Chalecos %s quiere darte un Chaleco por $%d, usa /aceptar chaleco para aceptar.", GetPlayerNameEx(playerid), money);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GuardOffer[giveplayerid] = playerid;
			GuardPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "El jugador está cerca tuyo.");
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está conectado.");
	}
	return 1;
}

CMD:tirar(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /tirar (Nombre)");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres: Armas, Hierba, Crack, Materiales, PaquetesM (Materiales), PaquetesD (Drogas), Radio, Telefono.");
		return 1;
	}

	if(strcmp(choice,"materiales",true) == 0)
	{
		if(Info[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Has tirado tus %d materiales.", Info[playerid][pMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s ha tirado sus materiales.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes materiales!");
		}
	}
	else if(strcmp(choice,"radio",true) == 0)
	{
		if(Info[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado su radio portable.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pRadio] = 0;
			Info[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un radio portable.");
		}
	}
	else if(strcmp(choice,"armas",true) == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes tirar las armas en el paintball.");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto en un evento.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		ResetPlayerWeaponsEx(playerid);
		format(string, sizeof(string), "* %s ha tirado todas sus armas.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(choice,"hierba",true) == 0)
	{
		if(Info[playerid][pPot] > 0)
		{
			format(string, sizeof(string), "Tiraste %d gramos de hierba.", Info[playerid][pPot]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado sus bolsas de hierba.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes hierba.");
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(Info[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Tiraste %d gramos de crack.", Info[playerid][pCrack]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s ha tirado sus bolsas de crack.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes crack.");
		}
	}
	else if(strcmp(choice,"PaquetesM",true) == 0)
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado sus paquetes de materiales.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "Packages");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes paquetes de materiales.");
		}
	}
	else if(strcmp(choice,"PaquetesD",true) == 0)
	{
		if(Info[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado los paquetes de droga.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes paquetes de drogas.");
		}
	}
	else if(strcmp(choice,"Telefono",true) == 0)
	{
		if(Info[playerid][pPnumber] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado su teléfono al suelo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Info[playerid][pPnumber] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No tienes teléfono móvil.");
		}
	}
	else if(strcmp(choice,"pizza",true) == 0)
	{
		if(GetPVarInt(playerid, "Pizza") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s ha tirado la entrega de pizzas.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No estás llevando pizzas.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /tirar (Nombre)");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres: Armas, Hierba, Crack, Materiales, PaquetesM (Materiales), PaquetesD (Drogas), Radio");
	}
	return 1;
}

CMD:mostrar(playerid, params[])
{
	new string[128], giveplayerid, choice[32];
	if(sscanf(params, "ds[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /mostrar (playerid) (Nombre)");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres: Hierba, Crack, Materiales");
		return 1;
	}
	if(giveplayerid == playerid)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes enseñarte a ti mismo.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
				return 1;
			}
			if (strcmp(choice, "materiales", true) == 0)
			{
			    new amount = Info[playerid][pMats];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "No tienes materiales!");
					return 1;
			    }
				format(string, sizeof(string), "%s te ha mostrado sus %d Materiales.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "Enseñaste a %s tus %d Materiales.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "hierba", true) == 0)
			{
			    new amount = Info[playerid][pPot];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "No tienes hierba.");
					return 1;
			    }
				format(string, sizeof(string), "%s te ha mostrado sus %d bolsas de hierba.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "Enseñaste a %s tus %d bolsas de hierba.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "crack", true) == 0)
			{
			    new amount = Info[playerid][pCrack];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_WHITE, "No tienes crack.");
					return 1;
			    }
				format(string, sizeof(string), "%s te ha mostrado sus %d gramos de crack.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "Enseñaste a %s tus %d gramos de crack.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	return 1;
}

CMD:saludar(playerid, params[])
{
	new string[128], giveplayerid, style;
	if(sscanf(params, "dd", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /saludar (playerid) (estilo (1-8))");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer eso tu mismo.");
			return 1;
		}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];
			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);
			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos de la persona.");
				return 1;
			}
			SetPVarInt(playerid, "shrequest", giveplayerid);
			SetPVarInt(playerid, "shstyle", style);

			format(string, sizeof(string), "Saludaste a %s, espera que el responda.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "%s te ha saludado, porfavor usa '/aceptar saludo' para darle la mano.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /saludar (playerid) (estilo (1-8))");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
	return 1;
}

CMD:vendercoche(playerid, params[])
{
	new vstring[1024];
	if(!IsPlayerInRangeOfPoint(playerid, 5, 358.3934,186.1840,1008.3828)) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Tienes que estar en el mostrador de la DGT, Dirección General de Tráfico para hacer esto.");
	for(new i; i < MAX_PLAYERVEHICLES; i++)
	{
		if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

		else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
			format(vstring, sizeof(vstring), "%s\n%s (Embargado)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

		else
			format(vstring, sizeof(vstring), "%s\nVacío", vstring);
	}
	SafeDialogEx(playerid, SELLCAR, DIALOG_STYLE_LIST, "{00F70C}Venta de Vehiculo", vstring, "Vender", "Cancelar");
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Si vendes el vehículo te pagarán la cuarta parte del precio de lo que te habia costado o menos.");
	return 1;
}

CMD:limpiar(playerid, params[])
{
	new string[128], giveplayerid;
	if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /limpiar (playerid)");
	if(IsPlayerConnected(giveplayerid))
	{
		format(string, sizeof(string), "* Limpiaste el nivel de búsqueda %s.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Agente %s a limpiado tu nivel de búsqueda.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Agente %s a limpiado el nivel de búsqueda de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		SendRadioMessage(1, TEAM_RADIO_COLOR, string);
		SendRadioMessage(2, TEAM_RADIO_COLOR, string);
		SendRadioMessage(3, TEAM_RADIO_COLOR, string);
		Info[playerid][pWantedLevel] = 0;
		//
		SetPlayerToTeamColor(giveplayerid);
		SetPlayerWantedLevel(giveplayerid, 0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	return 1;
}

CMD:gotopoint(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new points;
	if(sscanf(params, "d", points)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotopoint (IDPunto)");

	if(points >= MAX_POINTS || points < 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotopoint (0-8)");
		return 1;
	}
	SetPlayerPos(playerid, Points[points][Pointx], Points[points][Pointy], Points[points][Pointz]);
	return 1;
}

function PayDayEx(playerid)
{
	new rand, string[256];
	new facc = Info[playerid][pMember];
	new rango = Info[playerid][pRank];
	rand = random(22);
	format(string, sizeof(string), "Gobierno de Los Santos.\n\nEl gobierno le otorga a cada persona un bono de pago, pero es necesario\nque nos confirme sus datos y enviar el código de seguridad:\n\nNombre: %s\nEdad: %d\nPaga: %d (%s)\nNuevo Código: %s",GetPlayerNameEx(playerid), Info[playerid][pAge], InfoFacc[facc][gPaga]*rango, InfoFacc[facc][gFacc], PayDayCodes[rand]); // Payday.
	ShowPlayerDialog(playerid, PAYDAY1, DIALOG_STYLE_INPUT,"{00F70C}Cheque de Pago",string,"Enviar","Salir");
	IDCode[playerid] = rand;
	return 1;
}

CMD:gunlocker(playerid, params[])
{
	new Float: x, Float: y, Float: z;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			if(GetPlayerCash(playerid) < 500)
			{
				SendClientMessageEx(playerid, COLOR_WHITE," No tienes 500$ para mejorar los lockers de tu vehiculo!");
				return 1;
			}
			if(PlayerVehicleInfo[playerid][d][pvWepUpgrade] < 7)
			{
				new string[114];
				GameTextForPlayer(playerid,"~g~Gun-locker Mejorado!",5000,6);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				PlayerVehicleInfo[playerid][d][pvWepUpgrade]++;
				GivePlayerCash(playerid, -500);
				SendClientMessageEx(playerid, COLOR_WHITE, "Mejoraste la capacidad de los lockers de armas de tu coche.");
				format(string, sizeof(string), "{FF8000}[INDICACION]:{FFFFFF} Para usar esta función, los comandos son /smaletero y /gmaletero. Tienes %d lockers disponibles.", PlayerVehicleInfo[playerid][d][pvWepUpgrade]+1);
				SendClientMessageEx(playerid, COLOR_GRAD2, string );
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Ya mejoraste los lockers de armas para tu coche.");
				return 1;
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, " No estás cerca de un vehiculo tuyo.");
	return 1;
}

CMD:cmejorar(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"Utiliza: /cmejorar (Nombre)");
		SendClientMessageEx(playerid, COLOR_GRAD5, "CASA 1:gunlocker - CASA 2: gunlocker2");
		return 1;
	}
	if(strcmp(params, "gunlocker", true) == 0)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
		{
			switch(HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade])
			{
				case 0:
				{
					if(GetPVarInt(playerid, "Cash") >= 5000)
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade] = 1;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][0] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000.");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 1:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][1] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000.");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 2:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][2] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 3:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][3] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 4:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey]][hWeapons][4] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no hay más espacios disponibles.");
					return 1;
				}
			}
			SaveHouses();
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " No eres dueño de una casa.");
			return 1;
		}
	}
	else if(strcmp(params, "gunlocker2", true) == 0)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		if(Info[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey2]][hOwner], true) == 0)
		{
			switch( HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade] )
			{
				case 0:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade] = 1;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][0] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 1:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][1] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 2:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][2] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 3:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][3] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 4:
				{
					if( GetPVarInt(playerid, "Cash") >= 5000 )
					{
						SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-5000);
						HouseInfo[Info[playerid][pPhousekey2]][hGLUpgrade]++;
						HouseInfo[Info[playerid][pPhousekey2]][hWeapons][4] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un nuevo slot más para tu casa, el costo es de $5000");
						SendClientMessageEx(playerid, COLOR_GRAD2, "{FF8000}[INDICACION]:{FFFFFF} Para usar tus GunLockers usa, /sarma - /garma" );
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No tienes el dinero suficiente. ($5,000).");
						return 1;
					}
				}
				case 5:
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no hay más espacios disponibles.");
					return 1;
				}
			}
			SaveHouses();
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, " No tienes una segunda casa.");
			return 1;
		}
	}
	return 1;
}

CMD:darvest(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] != 6000 && Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "dds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darvest (playerid) (slot(0-9)) (invoice #)");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19142;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.07998;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.03999;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	format(string, sizeof(string), "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Diste a %s un police vest en el slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}

CMD:darvest2(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] != 6000 && Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "dds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darvest (playerid) (slot(0-9)) (invoice #)");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19515;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.07998;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.03999;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	format(string, sizeof(string), "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Diste a %s un police vest en el slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("LOGS/shoplog.log", string);
	return 1;
}

CMD:listatoys(playerid, params[])
{
	if (Info[playerid][pAdminZC] >= 4 || Info[playerid][pShopTech] == 1)
	{
		new
			iTargetID;

		if(sscanf(params, "d", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Utiliza: /listatoys (playerid)");
		}
		else if(IsPlayerConnected(iTargetID)) for(new iToyIter, szMessages[128]; iToyIter < MAX_PLAYERTOYS; ++iToyIter) {
			for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsAll); ++LoopRapist) {
				if(HoldingObjectsAll[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
					format(szMessages, sizeof(szMessages), "%s (slot %i, parte: %s)", HoldingObjectsAll[LoopRapist][holdingmodelname], iToyIter, HoldingBones[PlayerToyInfo[iTargetID][iToyIter][ptBone]]);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessages);
					break;
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador Invalido.");
	}
	return 1;
}

CMD:placa(playerid, params[])
{
 if(Info[playerid][pMember] >= 1 || Info[playerid][pLeader] >= 1 || Info[playerid][pMember] >= 2 || Info[playerid][pLeader] >= 2 || Info[playerid][pMember] >= 3 || Info[playerid][pLeader] >= 3 || Info[playerid][pMember] >= 17 || Info[playerid][pLeader] >= 17){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /placa (playerid)");
		if(giveplayerid != INVALID_PLAYER_ID){
			if(ProxDetectorS(5.0, playerid, giveplayerid)){
				switch(Info[playerid][pMember]){
					case 1 .. 4, 17:{
						new
						infoArrays[3][64];

						GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "%s %s es un miembro de %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Asignación actual: %s.", infoArrays[1]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						switch(Info[playerid][pMember]){
							case 1 .. 4: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Con autoridad en San Andreas.");
						}
						if(Info[playerid][pMember] != 4) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Oficial tiene la autoridad para arrestar.");
						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "* %s muesta su placa a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					default: SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una facción del estado.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca de ti.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una facción del estado.");
	}
	return 1;
}
zcmd(carnet, playerid, params[])
    {
        new string[90];
        if(!sscanf(params, "d", params[0]))
        {
            if(IsPlayerConnected(params[0]))
			{
			    if(!ProxDetectorS(8.0,playerid,params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
				if(Team_SAMD(playerid))
				{
				    SendClientMessageEx(params[0], COLOR_WHITE, "");
				    SendClientMessageEx(params[0], COLOR_WHITE, "");
				    //ClearChatbox(playerid, 5);
				    SendClientMessageEx(params[0], 0xFFF000BB, "-- Acreditación - SEC --");
                    format(string, sizeof(string), "  Nombre: %s - Brigada de Emergencias.", GetPlayerNameEx(playerid));
                    SendClientMessageEx(params[0], COLOR_WHITE, string);
                }
				else if(Team_LSTV(playerid))
				{
				    SendClientMessageEx(params[0], COLOR_WHITE, "");
				    SendClientMessageEx(params[0], COLOR_WHITE, "");
				    //ClearChatbox(playerid, 5);
				    SendClientMessageEx(params[0], 0xFFF000BB, "-- Acreditación - LSTV --");
                    format(string, sizeof(string), "  Nombre: %s - Periodista.", GetPlayerNameEx(playerid));
                    SendClientMessageEx(params[0], COLOR_WHITE, string);
                }
				else if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
				{
				    SendClientMessageEx(params[0], COLOR_WHITE, "");
				    SendClientMessageEx(params[0], COLOR_WHITE, "");
				    //ClearChatbox(playerid, 5);
				    SendClientMessageEx(params[0], 0xFFF000BB, "-- Acreditación - Transportes San Andreas --");
                    format(string, sizeof(string), "  Nombre: %s - Chófer.", GetPlayerNameEx(playerid));
                    SendClientMessageEx(params[0], COLOR_WHITE, string);
                }
				else SendClientMessageEx(playerid, COLOR_GRAD2, "¡No tienes una acreditación!");
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Jugador no conectado.");
        }
        else SendClientMessageEx(playerid, COLOR_GRAD2, "Utilize: /carnet <ID>");
        return 1;
    }
CMD:reparar(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes reparar un vehiculo estando dentro de uno.");
	new string[128];
	if(GetPVarInt(playerid, "EventToken")) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en un evento.");
	}
	new giveplayerid, money;
	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /reparar (playerid) (precio)");
	if(Team_Mecanicos(playerid)){
		if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_WHITE, " Precio: $1 a $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid)){
			if(giveplayerid != INVALID_PLAYER_ID){
			    new closestcar = GetClosestCar(playerid);
	  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0)){
					if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid)){
						if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, " No puedes hacer esto."); return 1; }
	                    if(!IsAMBike(closestcar) && !IsAPlane(closestcar))
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
							if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
							{
								SendClientMessageEx(playerid, COLOR_GRAD1, "Este vehiculo necesita estar con el capo abierto para repararlo.");
								return 1;
							}
						}
						format(string, sizeof(string), "* Ofreciste a %s reparar su coche por $%d .",GetPlayerNameEx(giveplayerid),money);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mecánicos %s quiere reparar tu coche por $%d. (usa /aceptar fix)",GetPlayerNameEx(playerid),money);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						RepairOffer[giveplayerid] = playerid;
						RepairPrice[giveplayerid] = money;
					}
					else{
						SendClientMessageEx(playerid, COLOR_WHITE, " Ese jugador debe estar cerca tuyo y dentro de un auto.");
					}
				}
				else{
				    SendClientMessageEx(playerid, COLOR_WHITE, " Ningún vehiculo no está cerca tuyo.");
				}
			}
		}
		else{
			SendClientMessageEx(playerid, COLOR_WHITE, " Jugador desconectado.");
		}
	}
	else{
		SendClientMessageEx(playerid, COLOR_WHITE, " No eres mecánico.");
	}
	return 1;
}

CMD:revisar(playerid, params[])
{
	if(Info[playerid][pConnectTime] > 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /revisar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
			    if(GetPlayerSpecialAction(giveplayerid) != SPECIAL_ACTION_HANDSUP || SeRinde[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes revisar a una persona si no tiene las manos arriba (/rendirse) o (/crack - /esconderse)");
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes buscarte a ti mismo.");
				SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
				format(string, sizeof(string), "*** Objetos de %s ...  ***", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(Info[giveplayerid][pPot] > 0)
				{
					format(string, sizeof(string), "%d gramos de hierba.", Info[giveplayerid][pPot]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pWSeeds] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Semillas de hierba");
				}
				if(Info[giveplayerid][pCrack] > 0)
				{
					format(string, sizeof(string), "%d gramos de crack.", Info[giveplayerid][pCrack]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pMats] > 0)
				{
					format(string, sizeof(string), "%d materiales.", Info[giveplayerid][pMats]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pGanzuas] > 0)
				{
					format(string, sizeof(string), "%d ganzúas.", Info[giveplayerid][pGanzuas]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0)
				{
					format(string, sizeof(string), "%d peces.", Info[giveplayerid][pFishes]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(Info[giveplayerid][pPhoneBook] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Phone book.");
				new weaponname[50];
				format(string, sizeof(string), "*** Armas de %s...  ***", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				for (new i = 0; i < 13; i++)
				{
					if(Info[giveplayerid][pWeapons][i] > 0)
					{
						GetWeaponName(Info[giveplayerid][pWeapons][i], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Armas: %s.", weaponname);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
				}
				new cash =  GetPlayerCash(giveplayerid);
				format(string, sizeof(string), "*** Dinero: %d  ***", cash);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
				format(string, sizeof(string), "* %s revisa a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado no válido.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " No puedes hacer esto, necesitas tener 3 horas jugadas!");
	return 1;
}

CMD:qseguroveh(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 3)
	{
		new vehicleid;
		if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qseguroveh (vehicle id)");

		if(IsValidVehicleID(vehicleid))
		{
			vehicle_unlock_doors(Info[playerid][pLockCar]);
			GameTextForPlayer(playerid, "~g~Abierto", 1000, 6);
			PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Id del vehiculo invalida.");
	}
	return 1;
}
CMD:calcular(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "USA: /calcular (valor) (operación) (valor).");
		SendClientMessageEx(playerid, COLOR_GRAD1, "Operaciones: sumar [+], restar [-], Multiplicar[*], Dividir.[/]");
		return 1;
	}
	if(strcmp(method,"multiplicar",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"* %d multiplicado por %d: %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"dividir",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
		{
			SendClientMessageEx(playerid,COLOR_WHITE,"LOL! El mundo caerá en 10 segundos... No se puede dividir por cero idiota!");
			return 1;
		}
		new sum = value1/value2;
		format(string,sizeof(string),"* %d dividido por %d: %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"sumar",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"* %d + %d = %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"restar",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"* %d - %d = %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:desmutearad(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /desmutearad (playerid)");

		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pADMute] == 1)
			{
				if(Info[giveplayerid][pJailed] != 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "{FFFF00}[ERROR]:{FFFFFF} No puedes desmutear del comando /ad si la persona está en jail!");
					return 1;
				}
				format(string, sizeof(string), "[AdmCmdExe]: %s fue desmuteado del cmd /ad por %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				Log("LOGS/admin.log", string);
				Info[giveplayerid][pADMute] = 0;
				Info[giveplayerid][pADMuteTotal]--;
			}
			else return SendClientMessageEx(playerid, COLOR_LIGHTRED,"{FFFF00}[ERROR]:{FFFFFF} Ese jugador ya está muteado de los anuncios!");
		}
	}
	return 1;
}

CMD:mutearad(playerid, params[]){
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
		if (Info[playerid][pAdminZC] >= 2 || Info[playerid][pHelper] >= 2){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /mutearad (playerid)");

		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] >= 1338) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando con administradores");
			if(Info[giveplayerid][pADMute] == 0){
				Info[giveplayerid][pADMute] = 1;
				Info[giveplayerid][pADMuteTotal] += 1;
				format(string, sizeof(string), "[AdmCmdExe]: %s fue muteado del cmd /ad por %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("LOGS/admin.log", string);
				ABroadCast(COLOR_ORANGE,string,2);
				if(Info[giveplayerid][pADMuteTotal] > 6){
					new year, month,day;
					getdate(year, month, day);
					new playerip[32];
					GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "INFRANET-RP %s(IP:%s) ha sido baneado %s, Razon: Excesivas advertencias (mutes) (%d-%d-%d)", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid),month,day,year);
					Log("LOGS/ban.log", string);
					format(string, sizeof(string), "INFRANET-RP: %s fue baneado, razón:Abuso de /AD [Total: 6]", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					Info[giveplayerid][pBannedZC] = 2;
					new ip[32];
					GetPlayerIp(giveplayerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(giveplayerid);
				}
			}
			else{
				if(Info[playerid][pAdminZC] >= 2){
					ShowAdMuteFine(giveplayerid);
					format(string, sizeof(string), "Ofreciste a %s una posibilidad de desmutearse del comando /ad.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya está muteado del comando /ad.");
 			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}
CMD:prision(playerid, params[]){
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2658.4500, -2372.5000,13.6328)){//8.0, 2648.9587,-2384.3145,13.6328
		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el punto de arresto para Fort DeMorgan.");
		return 1;
	}
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /prision (playerid)");
	if(Info[playerid][pRank] < 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe tener al menos el rango 2.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_WHITE, " No puedes meterte a la prisión a ti mismo."); return 1; }
		if(Info[giveplayerid][pJudgeJailTime] == 0 && Info[giveplayerid][pJudgeJailType] != 2) { SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador no tiene que estar en la cárcel."); return 1; }
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new string[37 + MAX_PLAYER_NAME];
			SetPVarInt(giveplayerid, "IsFrozen", 0);
			format(string, sizeof(string), "* Has traído a %s a Fort DeMorgan.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s te ha llevado a Fort DeMorgan.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GameTextForPlayer(giveplayerid, "~w~Bienvenido to ~n~~r~Fort DeMorgan", 5000, 3);
			TogglePlayerControllable(giveplayerid, 1);
			ClearAnimations(giveplayerid);
			Info[giveplayerid][pEstado] = 0;
			SetPVarInt(giveplayerid, "PlayerCuffed", 0);
			Info[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerSkin(giveplayerid, 50);
			Info[giveplayerid][pJailed] = 5;
			PhoneOnline[giveplayerid] = 1;
			Info[giveplayerid][pJailTime] = Info[giveplayerid][pJudgeJailTime];
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerVirtualWorld(giveplayerid, 1000);
			Info[giveplayerid][pVW] = 1000;
			SetPlayerColor(giveplayerid, TEAM_ORANGE_COLOR);
			LoadObjects(giveplayerid);
			new rand = random(sizeof(SAEMPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, SAEMPrisonSpawns[rand][0], SAEMPrisonSpawns[rand][1], SAEMPrisonSpawns[rand][2]);
			SetPlayerPos(giveplayerid, SAEMPrisonSpawns[rand][0], SAEMPrisonSpawns[rand][1], SAEMPrisonSpawns[rand][2]);
			ResetPlayerWeaponsEx(giveplayerid);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no válido.");
	return 1;
}
///////////////// SISTEMA JUDICIAL //////
CMD:orden(playerid, params[])
{
	if(Info[playerid][pMember] != 9)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado a usar este comando, razón: Rango insuficiente (3).");
  		return 1;
	}
	new string[128], crime[64], giveplayerid;
	if(sscanf(params, "ds[64]", giveplayerid, crime)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /orden (playerid) (crimen)");

	if(IsPlayerConnected(giveplayerid))
	{
		if(strlen(Info[giveplayerid][pWarrant]) != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya tiene órdenes activas.");
		SendClientMessageEx(playerid, COLOR_WHITE, "Pusiste una Orden Judicial hacia esa persona, para revisarlo, usa /ordenes - /qorden.");
		format(Info[giveplayerid][pWarrant], 64, crime);
		format(string, sizeof(string), "[RADIO]: Se ordena detener y presentar ante la corte judicial a %s para responder a las acusaciones de:", GetPlayerNameEx(giveplayerid));
		for(new i = 1; i < 3; i++)
		{
		    SendRadioMessage(i, TEAM_RADIO_COLOR, string);
		}
		SendRadioMessage(7, TEAM_RADIO_COLOR, string);
		SendRadioMessage(9, TEAM_RADIO_COLOR, string);
		format(string, sizeof(string), "[RADIO]: %s, cambio.", crime);
		for(new i = 1; i < 3; i++)
		{
		    SendRadioMessage(i, TEAM_RADIO_COLOR, string);
		}
		SendRadioMessage(7, TEAM_RADIO_COLOR, string);
		SendRadioMessage(9, TEAM_RADIO_COLOR, string);
	}
	return 1;
}

CMD:qorden(playerid, params[])
{
    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del sistema judicial.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto - sólo rangos mayores a 3.");
  	new string[128], giveplayerid;
  	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qorden (playerid)");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(strlen(Info[giveplayerid][pWarrant]) == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene órdenes pendientes.");
		format(Info[giveplayerid][pWarrant], 128, "");
		format(string, sizeof(string), "Removiste la órden de %s. ", GetPlayerNameEx(giveplayerid));
  		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:arrestojudicial(playerid, params[]) // Team_Judicial.
{
    new string[180];

    if(IsACop(playerid))
	{
	    if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Deben estar al menos conectados un juez para hacer esto.");
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1286.58240, -1349.87732, 13.63500)) // Delante del Hospital.
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "Debes estar en el punto de arresto judicial (Puerta a la derecha del edificio).");
	    	return 1;
		}
		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(strlen(Info[suspect][pWarrant]) < 1)
				{
	   				SendClientMessageEx(playerid, COLOR_WHITE, "El jugador debe tener órdenes de activos.");
				    return 1;
				}
				format(string, sizeof(string), "Fuiste transladado a la prisión judicial %s, aquí te tratarán mejor que en la carcél.", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				ResetPlayerWeaponsEx(suspect);
				format(string, sizeof(string), "[RADIO]: Acusado %s fue entregado a la corte por el oficial %s, ahora el sujeto está a la espera de ser juzgado.", GetPlayerNameEx(suspect), GetPlayerNameEx(playerid));
				for(new i = 1; i < 3; i++)
				{
		    	SendRadioMessage(i, TEAM_RADIO_COLOR, string);
				}
				SendRadioMessage(7, TEAM_RADIO_COLOR, string);
				SendRadioMessage(9, TEAM_RADIO_COLOR, string);
				SetPlayerInterior(suspect, 1);
				Info[playerid][pInt] = 1;
				SetPlayerVirtualWorld(suspect, 0);
				Info[suspect][pVW] = 0;
				TogglePlayerControllable(suspect, 0);
				new rand = random(sizeof(WarrantJail));
				SetPlayerFacingAngle(suspect, 0);
				SetPlayerPos(suspect, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
				if(rand != 0) courtjail[suspect] = 2;
				else courtjail[suspect] = 1;
    			SetCameraBehindPlayer(suspect);
       			GameTextForPlayer(suspect, "Cargando Objetos...", 4000, 5);
    			SetPVarInt(suspect, "LoadingObjects", 1);
    			SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
    			SetPVarInt(suspect, "IsFrozen", 0);
				Info[suspect][pEstado] = 0;
				SetPVarInt(suspect, "PlayerCuffed", 0);
				PlayerCuffedTime[suspect] = 0;
				PhoneOnline[suspect] = 1;
    			Info[suspect][pArrested] += 1;
		    	Info[suspect][pWantedLevel] = 0;
		    	SetPlayerToTeamColor(suspect);
		    	SetPlayerWantedLevel(suspect, 0);
				ClearAnimations(suspect);
				format(Info[suspect][pWarrant], 128, "");
				//Info[suspect][pJailed] = 2;
				Info[suspect][pBeingSentenced] = 60;
				SendClientMessageEx(suspect, COLOR_LIGHTBLUE, "Usted ha sido arrestado por una orden judicial pendiente, usted será atendido por un juez en breve.");
                foreach(Player, i)
				{
					if(IsACop(i))
					{
						format(string, sizeof(string), "[Central General] A todas las unidades, oficial %s completó su objetivo.",playerid);
						SendClientMessageEx(i, TEAM_RADIO_COLOR, string);
						format(string, sizeof(string), "[Central General] %s ha sido procesado, razón: %s.",suspect,Info[suspect][pWarrant]);
						SendClientMessageEx(i, TEAM_RADIO_COLOR, string);
					}
				}
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}

CMD:buscados(playerid, params[])
{
    if(IsACop(playerid)||Info[playerid][pMember] == 9)
    {
    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Debe de estar en línea al menos un juez.");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Lista de órdenes judiciales pendientes:");

		new
			fCounter,
			string[128];

		foreach(Player, i)
		{
			if(!isnull(Info[i][pWarrant]))
			{
				format(string, sizeof(string), "%s (%d) - razón: %s.",GetPlayerNameEx(i),i,Info[i][pWarrant]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				++fCounter;
			}
		}
		if(fCounter <= 0)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "No hay órdenes judiciales pendientes.");
		}
  	}
	return 1;
}

/*CMD:presentar(playerid, params[])
{
    if(Info[playerid][pMember] == 9 || Info[playerid][pLeader] == 9)
	{
		new giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /presentar (playerid)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto contigo mismo.");
			if(Info[giveplayerid][pBeingSentenced] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene sentencias pendientes.");
			if(courtjail[giveplayerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está en la carceleta de la Corte.");
			if(courtjail[giveplayerid] == 2)
			{
				SetPlayerPos(giveplayerid, 2132.0679,1314.2238,7699.0547);
		    	SetPlayerFacingAngle(giveplayerid, 354.2492);
			}
			else if(courtjail[giveplayerid] == 1)
			{
				SetPlayerPos(giveplayerid, 2131.8599,1294.4722,7699.0547);
		    	SetPlayerFacingAngle(giveplayerid, 182.6859);
			}
			courtjail[giveplayerid] = 0;
		    SetCameraBehindPlayer(giveplayerid);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	return 1;
}*/

CMD:multajudicial(playerid, params[])
{
    if(Info[playerid][pMember] != 9)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No formas parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, rango mayores a 3.");
  		return 1;
	}
	new string[128], giveplayerid, judgefine, reason[64];
	if(sscanf(params, "dds", giveplayerid, judgefine, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /multajudicial (playerid) (Multa max de $100,000) (razón).");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!Info[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene una sentencia pendiente, no le puedes multar.");
		if(judgefine < 1 && judgefine > 100000) return SendClientMessageEx(playerid, COLOR_WHITE, "Monto de la multa no podrá ser inferior a $ 1 o superior a $ 200.000!");
		if(GetPlayerCash(giveplayerid) <judgefine) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes multar a esta persona con ese monto, prueba una cantidad inferior.");
		GivePlayerCash(giveplayerid, -judgefine);
		Tax += judgefine;
		format(string, sizeof(string), "Multaste a %s por $%d, razón: %s.", GetPlayerNameEx(giveplayerid), judgefine, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Fuiste multado por $%d por %s, razón: %s.", judgefine, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:juicio(playerid, params[])
{
	new string[128], giveplayerid;

    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, rango mayores a 3.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /juicio (playerid)");
 	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(Info[giveplayerid][pBeingSentenced])
	    {
	    	Info[giveplayerid][pBeingSentenced] += 10;
	    	format(string, sizeof(string), "Has extendido el juicio de %s por 10 minutos más, Tiempo: %d", GetPlayerNameEx(giveplayerid), Info[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s aumentó tu juicio a 10 minutos más, Tiempo: %d", GetPlayerNameEx(playerid), Info[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador tiene que estar en la sala de juicio, no ha sido sentenciado.");
	}
	return 1;
}

CMD:librarcargos(playerid, params[])
{
	new string[180], giveplayerid;

    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, rango mayores a 3.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /librarcargos (playerid)");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(Info[giveplayerid][pBeingSentenced])
	    {
	    	Info[giveplayerid][pBeingSentenced] = 0;
	    	TogglePlayerControllable(giveplayerid, 1);
	    	SetPVarInt(giveplayerid, "IsFrozen", 0);
			PhoneOnline[giveplayerid] = 0;
			SetPlayerPos(giveplayerid, 1284.657958,-1335.606811,13.552916); // Nueva ubicación.
			SetPlayerFacingAngle(giveplayerid, 90);
			SetPlayerInterior(giveplayerid, 0);
			SetPlayerVirtualWorld(giveplayerid, 0);
			Info[giveplayerid][pVW] = 0;
			ClearAnimations(giveplayerid);
			Info[giveplayerid][pJailed] = 0;
			format(Info[giveplayerid][pWarrant], 128, "");
	    	format(string, sizeof(string), "Dejaste libre de todos los cargos a %s. Se encuentra fuera de las instalaciones.", GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "Juez %s: Ganaste el juicio, has sido liberado de tus cargos penales.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "[RADIO]: Aviso, %s ha sido liberado por un juez, actualicen los datos del individuo en su base de datos.", GetPlayerNameEx(giveplayerid));
			for(new i = 1; i < 3; i++) //  LSPD, FBI y alguien más.
			{
  				SendRadioMessage(i, TEAM_RADIO_COLOR, string);
			}
			SendRadioMessage(7, TEAM_RADIO_COLOR, string);
			SendRadioMessage(9, TEAM_RADIO_COLOR, string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador tiene que estar en la sala de juicio, no ha sido sentenciado.");
	}
	return 1;
}

CMD:indemnizar(playerid, params[]) // / recompensa.
{
    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 6) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando.");

	new
		giveplayerid,
		money;

	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /indemnizar (playerid) [Dinero(max de $50,000)]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
	if(Info[giveplayerid][pMember] == Info[playerid][pMember]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando a uno de tu facción.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(Tax >= money)
		{
			new string[80 + (MAX_PLAYER_NAME * 2)];
  			if(money < 1 || money > 50000) return SendClientMessageEx(playerid, COLOR_GRAD5, "Max de $50,000 y Minimo 0!");
    		new rank[64], division[64], employer[64];
   			GetPlayerFactionInfo(playerid, rank, division, employer);
	    	format(string, sizeof(string), "{AA3333}INFRANET RP:{FFFF00} %s %s acaba de indemnizar a %s con $%d.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
	    	ABroadCast(COLOR_YELLOW,string, 2);
	    	new year,month,day,log[128];
			getdate(year, month, day);
			format(log, sizeof(log), "AdmCmd: %s %s has just rewarded %s $%d(%d-%d-%d)", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money, month, day, year);
			Log("LOGS/especial.log", log);
  			GivePlayerCash(giveplayerid, money);
  			format(string, sizeof(string), "[RADIO]: El juez %s otorgó una indemnización a %s de %d, dinero retirado de los fondos del gobierno.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
			SendRadioMessage(7, TEAM_RADIO_COLOR, string);
			SendRadioMessage(9, TEAM_RADIO_COLOR, string);
    		format(string, sizeof(string), "Diste una recompensa de $%d a %s.", money, GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "Recibiste una recompensa de $%d del %s %s.", money, rank, GetPlayerNameEx(playerid));
	   		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
   			Tax -= money;
			SaveStuff();
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No hay fondos suficientes en el gobierno para indeminizar/recompensar a esta persona.");
	}
	return 1;
}

CMD:verjuicios(playerid, params[])
{
    if(IsACop(playerid) || Info[playerid][pMember] == 9 || Info[playerid][pLeader] == 9)
    {

    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Deben estar almenos 1 juez en línea.");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Juicios pendientes:");

		new
			string[53],
			fCounter;

		foreach(Player, i)
		{
			if(Info[i][pJudgeJailType] == 1)
			{
	  			if(Info[i][pJailed] == 2)
		    	{
					format(string, sizeof(string), "Sentenciado: %s - Carceleta (transporte completado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
				else
				{
    				format(string, sizeof(string), "Sentenciado: %s - Carceleta (siendo transportado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}
			else if(Info[i][pJudgeJailType] == 2)
			{
				if(Info[i][pJailed] == 5)
    			{
					format(string, sizeof(string), "Sentenciado: %s - Prisión (transporte completado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
				else
				{
    				format(string, sizeof(string), "Sentenciado: %s - Prisión (siendo transportado) - tiempo: %d.",GetPlayerNameEx(i),Info[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}
		}
		if(fCounter <= 0)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "No hay jucios pendientes.");
		}
  	}
	return 1;
}

CMD:revertir(playerid, params[])
{

    if(Info[playerid][pMember] != 9) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del Sistema Judicial.");
	if(Info[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (4).");

	new
		giveplayerid;

	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /revertir (playerid).");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar el comando de esta manera.");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(Info[giveplayerid][pJudgeJailTime] != 0)
   		{
     		new rank[64], division[64], employer[64], string[80 + (MAX_PLAYER_NAME * 2)];
       		GetPlayerFactionInfo(playerid, rank, division, employer);
			if(Info[giveplayerid][pJailTime] != 0) Info[giveplayerid][pJailTime] = 0;
			Info[giveplayerid][pJudgeJailTime] = 0;
			PhoneOnline[giveplayerid] = 0;
   			switch(Info[giveplayerid][pSex])
			{
			    case 1: format(string, sizeof(string), "[AVISO]: %s %s ha revertido el juicio de %s, ahora él es libre de irse.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    case 2: format(string, sizeof(string), "[AVISO]: %s %s ha revertido el juicio de %s, ahora ella es libre de irse.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			}
			for(new i = 1; i < 3; i++)
			{
		    	SendRadioMessage(i, TEAM_RADIO_COLOR, string);
			}
			SendRadioMessage(7, TEAM_RADIO_COLOR, string);
			SendRadioMessage(10, TEAM_RADIO_COLOR, string);
   		}
	    else
   		{
        	SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene una sentencia de prisión.");
   		}
	}
	return 1;
}

CMD:perdonar(playerid, params[])
{
    if(Presidente(playerid))
    {
		new
			giveplayerid;

        if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /perdonar (playerid).");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar el comando de esta manera.");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(Info[giveplayerid][pJudgeJailTime] != 0)
		    {
				new string[80 + (MAX_PLAYER_NAME * 2)];
		        if(Info[giveplayerid][pJailTime] != 0) Info[giveplayerid][pJailTime] = 0;
		        Info[giveplayerid][pJudgeJailTime] = 0;
		        PhoneOnline[giveplayerid] = 0;
	        	SetPlayerPos(giveplayerid, 1284.657958,-1335.606811,13.552916);
				SetPlayerFacingAngle(giveplayerid, 90);
				SetPlayerInterior(giveplayerid, 0);
				SetPlayerVirtualWorld(giveplayerid, 0);
				Info[giveplayerid][pVW] = 0;
				ClearAnimations(giveplayerid);
				Info[giveplayerid][pJailed] = 0;
		        switch(Info[giveplayerid][pSex])
				{
				    case 1: format(string, sizeof(string), "[AVISO] Presidente %s ha perdonado a %s de todos sus crimenes, él ahora es libre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				    case 2: format(string, sizeof(string), "[AVISO] Presidente %s ha perdonado a %s de todos sus crimenes, ella ahora es libre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				}
				for(new i = 1; i < 3; i++)
				{
			    	SendRadioMessage(i, TEAM_RADIO_COLOR, string);
				}
				SendRadioMessage(7, TEAM_RADIO_COLOR, string);
				SendRadioMessage(9, TEAM_RADIO_COLOR, string);
		    }
		    else
	   		{
	       		SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador no está en una condena de prisión.");
	   		}
		}
	}
 	else
  	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Sólo el presidente puede usar este comando.");
  	}
	return 1;
}
CMD:scarcel(playerid, params[])
{
    if(Info[playerid][pMember] != 9)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (3).");

	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "dds", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /scarcel (playerid) (tiempo 1-60 minutos) (razón) (Cmd para sentenciar a Cárcel)");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
		if(!Info[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está sentenciado.");
		if(jailtime < 1 && jailtime > 60) return SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo no puede ser mayor a 60 minutos.");
		Info[giveplayerid][pJudgeJailType] = 1;
		Info[giveplayerid][pJudgeJailTime] = jailtime*600;
		format(string, sizeof(string), "Sentenciaste a %s a cumplir %d minutos en la cárcel, razón: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"Esta persona tendrá que ser transportada a una prisión de Alta Seguridad para cumplir su condena.");
		format(string, sizeof(string), "Usted ha sido sentenciado a cumplir %d minutos en la cárcel por %s, razón: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(IsACop(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* Usted ha sido auto eliminado de su facción al ser condenado a la cárcel, ahora eres un civil más.");
	 		Info[giveplayerid][pTeam] = 3;
	 		gTeam[giveplayerid] = Info[giveplayerid][pTeam];
			Info[giveplayerid][pMember] = 0;
			Info[giveplayerid][pRank] = 0;
			Info[giveplayerid][pChar] = 0;
			OnDuty[playerid] = 0;
			Info[giveplayerid][pLeader] = 0;
			SetPlayerToTeamColor(giveplayerid);
   			pTazer[giveplayerid] = 0;
		}
	}
	return 1;
}

CMD:sprision(playerid, params[])
{
    if(Info[playerid][pMember] != 9)
	{
  		SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte del sistema judicial.");
  		return 1;
	}
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes rango suficiente para usar este comando (3).");
	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "dds", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /sprision (playerid) (tiempo 1-120 minutos) (razón) (Cmd para sentenciar a Prisión)");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto contigo mismo.");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!Info[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no se está condenado.");
		if(jailtime < 1 && jailtime > 120) return SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo no puede ser mayor a 120 minutos.");
		Info[giveplayerid][pJudgeJailType] = 2;
		Info[giveplayerid][pJudgeJailTime] = jailtime*600;
		format(string, sizeof(string), "Sentenciaste a %s a cumplir %d minutos en prisión, razón: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"Esta persona tendrá que ser transportada a una prisión de Alta Seguridad para cumplir su condena.");
		format(string, sizeof(string), "Usted ha sido sentenciado a cumplir %d minutos en prisión por %s, razón: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(IsACop(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* Usted ha sido auto eliminado de su facción al ser condenado a la prisión, ahora eres un civil más.");
	 		Info[giveplayerid][pTeam] = 3;
	 		gTeam[giveplayerid] = Info[giveplayerid][pTeam];
			Info[giveplayerid][pMember] = 0;
			Info[giveplayerid][pRank] = 0;
			Info[giveplayerid][pChar] = 0;
			OnDuty[playerid] = 0;
			Info[giveplayerid][pLeader] = 0;
			SetPlayerToTeamColor(giveplayerid);
   			pTazer[giveplayerid] = 0;
		}
	}
	return 1;
}
CMD:pescar(playerid, params[])
{
	if(Carnada[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No has comprado carnadas para pescar.");
	if(Lineas[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes lineas para la caña de pesca.");
	if(Info[playerid][pFishes] > 15)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* Has pescado bastante por ahora, toma un descanso.");
		return 1;
	}
	if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* No puedes llevar más de cinco peces en un momento - vender o ponerlos en libertad en primer lugar.");
		return 1;
	}

	new string[128];
	new Veh = GetPlayerVehicleID(playerid);
	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	{
		new Caught;
		new rand;
		new fstring[MAX_PLAYER_NAME];
		new Level = Info[playerid][pFishSkill];
		if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
		else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
		else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
		else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
		else if(Level >= 401) { Caught = random(180)-70; }
		rand = random(FishNamesNumber);
		if(Caught <= 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "La línea se rompió.");
			Lineas[playerid]--;
			return 1;
		}
		else if(rand == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste una camisa rota y la botaste a la basura.");
			Carnada[playerid]--;
			return 1;
		}
		else if(rand == 4)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste un pantalon y lo tiraste lejos.");
			return 1;
		}
		else if(rand == 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste un lata de comida vacía y la tiraste a la basura.");
			Carnada[playerid]--;
			return 1;
		}
		else if(rand == 10)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste... Zapatos viejos y los botaste.");
			return 1;
		}
		else if(rand == 13)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste una bolsa con basura y lo botaste.");
			return 1;
		}
		else if(rand == 20)
		{
			new mrand = random(500);
			format(string, sizeof(string), "* Atrapaste una billetera con dinero. ($%d).", mrand);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, mrand);
			Carnada[playerid]--;
			return 1;
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			Info[playerid][pFishes] += 1;
	        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
			else {
				Info[playerid][pFishSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish1], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 2;
			if(Caught > Info[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				Info[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			Info[playerid][pFishes] += 1;
	        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
			else {
				Info[playerid][pFishSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish2], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 2;
			if(Caught > Info[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				Info[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
			Info[playerid][pFishes] += 1;
	        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
			else {
				Info[playerid][pFishSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish3], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 2;
			if(Caught > Info[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				Info[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
			Info[playerid][pFishes] += 1;
	        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
			else {
				Info[playerid][pFishSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish4], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 4;
			if(Caught > Info[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				Info[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
			Info[playerid][pFishes] += 1;
	        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
			else {
				Info[playerid][pFishSkill] += 2;
				SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish5], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			Carnada[playerid]-= 5;
			if(Caught > Info[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				Info[playerid][pBiggestFish] = Caught;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "No tienes espacio para los peces.");
			return 1;
		}
		if(Info[playerid][pFishSkill] == 50)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 2, ya puedes atrapar peces más grandes."); }
		else if(Info[playerid][pFishSkill] == 100)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 3, ya puedes atrapar peces más grandes."); }
		else if(Info[playerid][pFishSkill] == 200)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 4, ya puedes atrapar peces más grandes."); }
		else if(Info[playerid][pFishSkill] == 400)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 5, ya puedes atrapar peces más grandes."); }
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "No estás en el muelle de Santa María, o en un barco de pesca.");
		return 1;
	}
	return 1;
}

CMD:venderpez(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 991.2456,-1942.9379,2835.0078))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   No estás en la tienda del puerto!");
		return 1;
	}
	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /venderpez [fish]");

	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   ID: 1 al 5!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = price * Fishes[playerid][pWeight1];
			if(Info[playerid][pLevel] > 0)
			{
				new skill = price / 10;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = price * Fishes[playerid][pWeight2];
			if(Info[playerid][pLevel] > 3)
			{
				new skill = price / 10;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = price * Fishes[playerid][pWeight3];
			if(Info[playerid][pLevel] > 5)
			{
				new skill = price / 10;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = price * Fishes[playerid][pWeight4];
			if(Info[playerid][pLevel] > 10)
			{
				new skill = price / 10;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = price * Fishes[playerid][pWeight5];
			if(Info[playerid][pLevel] > 20)
			{
				new skill = price / 10;
				new payout = (skill)*(5);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:peces(playerid, params[])
{
	new string[128];
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Peces __________________|");
	format(string, sizeof(string), "** (1) Pez: %s.   Peso: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (2) Pez: %s.   Peso: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (3) Pez: %s.   Peso: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (4) Pez: %s.   Peso: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (5) Pez: %s.   Peso: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
}

CMD:liberarpez(playerid, params[])
{
	new fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /liberarpez [pez 1-5]");

	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_WHITE, "USA: /liberarpez [fish 1-5]"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return SendClientMessageEx(playerid, COLOR_GREY, "Liberaste un pez.");
}
CMD:qfa(playerid, params[])
{
	new giveplayerid, string[73];
	if(!sscanf(params, "u", giveplayerid))
	{
	    if(!Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		if(IsPlayerConnected(giveplayerid))
		{
			format(string,sizeof(string),"%s: La última persona que me mató fue %s.",GetPlayerNameEx(giveplayerid),QFA[giveplayerid]);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
		}
		else return SendClientMessageEx(playerid,COLOR_YELLOW,"El jugador no esta conectado.");
	}
	else
	{
		format(string,sizeof(string),"La última persona que te mato fue %s.", QFA[playerid]);
		SendClientMessageEx(playerid,COLOR_YELLOW,string);
		if(Info[playerid][pAdminZC]) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /qfa (id)");
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] >= 4000)
	{
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d está disponible para el uso.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
		return 1;
	}
	return 1;
}

CMD:shopdoor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 4000 || Info[playerid][pShopTech] == 1)
	{
		new string[128], doorid;
		if(!sscanf(params, "d", doorid))
		{
		    if (DDoorsInfo[doorid][ddDescription] == 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Esa puerta ya está creada, Utiliza: /ddedit");
				return 1;
	    	}
			if(doorid >= MAX_DDOORS)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "Door ID Inválida!");
				return 1;
			}
			GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
			GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
			DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
			DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			DDoorsInfo[doorid][ddVIP] = 0;
			DDoorsInfo[doorid][ddFamily] = 0;
			DDoorsInfo[doorid][ddPickupModel] = 0;
			DDoorsInfo[doorid][ddColor] = 1;
			DDoorsInfo[doorid][ddVehicleAble] = 0;
			DDoorsInfo[doorid][ddWanted] = 0;
			DDoorsInfo[doorid][ddAdmin] = 0;
        	DDoorsInfo[doorid][ddFaction] = 0;
			DDoorsInfo[doorid][ddInteriorInt] = 0;
			DDoorsInfo[doorid][ddInteriorVW] = 0;
			DDoorsInfo[doorid][dMusic] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Creaste el exterior de esta puerta, usa /ddedit para terminar de editar la puerta.");
			if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);
			SaveDynamicDoors();
			format(string, sizeof(string), "%s ha creado la DoorID %d.", GetPlayerNameEx(playerid), doorid);
			Log("LOGS/ddedit.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /shopdoor (ID Libre)");
	}
	return 1;
}

CMD:ddedit(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}

	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD", choice, doorid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "Utiliza: /ddedit (nombre) (doorid) (valor)");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessageEx(playerid, COLOR_GREY, "Familia, Faccion, Wanted, Admin, VehicleAble, Color, PickupModel, Borrar, Musica");
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Door ID Inválida!");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el interior!");
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Interior", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Interior Personalizado!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Interior Normal!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Interior Personalizado.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Exterior Personalizado!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Exterior Normal!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Exterior Personalizado.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el exterior!");
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
	}
	else if(strcmp(choice, "vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - VIP Nivel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - VIP Nivel.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "familia", true) == 0)
	{
		DDoorsInfo[doorid][ddFamily] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Familia %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Familia.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "faccion", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Facción %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Facción.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "AdminZC", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Admin Nivel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Admin Nivel.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Wanted %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - VehicleAble %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Disponible Vehs.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Color %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - Color.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - PickupModel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s ha editado la DoorID %d - PickupModel.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "musica", true) == 0)
	{
	    DDoorsInfo[doorid][dMusic] = amount;
		format(string, sizeof(string), "* Has editado la DoorID - Musica %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SaveDynamicDoors();
		switch(amount)
		{
		    case 0: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Sin música"); //
        	case 1: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Reggeaton"); //
            case 2: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Electro"); //
            case 3: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Techno"); //
            case 4: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Hip hop"); //
            case 5: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Variada"); //
		}
		return 1;
	}
	else if(strcmp(choice, "borrar", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddDescription] == 0)
		{
	        format(string, sizeof(string), "DoorID %d no existe.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
	    }
    	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddFamily] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][dPass] = 0;
		DDoorsInfo[doorid][dLocked] = 0;
		DDoorsInfo[doorid][dMusic] = 0;
		SaveDynamicDoors();
		format(string, sizeof(string), "Borraste la DoorID %d.", doorid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s a borrado DoorID %d.", GetPlayerNameEx(playerid), doorid);
		Log("LOGS/ddedit.log", string);
		return 1;
	}
	return 1;
}

CMD:clave(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
		return 1;
	}
    for(new i = 0; i < sizeof(DDoorsInfo); i++)
	{
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
			if(DDoorsInfo[i][dPass] < 1)
                return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta ya está bloqueada.");
         	if(strcmp(DDoorsInfo[i][dPass], "Nada", true) == 0)
                return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta no está autorizada a ser bloqueada.");

			SafeDialogEx(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "{00F70C}Seguridad de puerta","Ingresa la contraseña de la puerta","Ingresar","Cancelar");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:goindoor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 4000)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /goindoor (doornumber)");
		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		if(DDoorsInfo[doornum][ddCustomInterior])
		{
			LoadObjects(playerid);
		}
		Info[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		Info[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 4000)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotodoor (doornumber)");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		if(DDoorsInfo[doornum][ddCustomExterior])
		{
			LoadObjects(playerid);
		}
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		Info[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		Info[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
		return 1;
	}
	new string[128], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ddname (doorid) (nombre)");

	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el nombre de la puerta.");
	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);

	format(string, sizeof(string), "%s editó la DoorID %d - nombre a %s.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("LOGS/ddedit.log", string);
	return 1;
}

CMD:ddpass(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000)
		return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");

	new string[128],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ddpass (doorid) (pass)"); SendClientMessageEx(playerid, COLOR_WHITE, "Para remover la contraseña escribe 'nada'."); return 1; }
	format(DDoorsInfo[doorid][dPass], 24, "%s", doorpass);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la contraseña de la puerta.");
	SaveDynamicDoors();
	format(string, sizeof(string), "%s editó la DoorID %d - pass a %s.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("LOGS/ddedit.log", string);
	return 1;
}

CMD:llaves(playerid, params[]) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Comando eliminado use /gps ");
CMD:cambiarclaveusuario(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
    if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
    new accountName[24], password[24];
    if(sscanf(params, "s[MAX_PLAYER_NAME]s[18]", accountName, password)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /cambiarclaveusuario (Nombre_Apellido) (password)");
    if(INI_Exist(accountName))
	{
	    if(strlen(accountName) > 24) return SendClientMessageEx(playerid, COLOR_WHITE, "la cuenta no puede tener más de 24 letras/números.");
		new string[128], PlayerFile[MAX_PLAYER_NAME + 32];
		format( PlayerFile , sizeof PlayerFile, "CUENTAS/%s.ini", accountName);
	    new INI:File = INI_Open(PlayerFile);
	    INI_SetTag(File,"data");
     	INI_WriteInt(File,"Password",udb_hash(password));
		INI_Close(File);
        format(string, sizeof(string), "Cambiaste la contraseña de %s. Ahora es '%s'", accountName, password);
        SendClientMessageEx(playerid, COLOR_YELLOW, string);
        format(string, sizeof(string), "AdmCmd: Contraseña de %s fue cambiada por %s", accountName, GetPlayerNameEx(playerid));
        Log("LOGS/password.log", string);
        return ABroadCast(COLOR_LIGHTRED,string,2);
    }
    else SendClientMessageEx( playerid, COLOR_WHITE, "Esta cuenta no existe." );
    return 1;
}
CMD:adminconcesionario(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_WHITE,"No puedes usar este comando.");
	if(IsPlayerConnected(playerid))
	    SendClientMessageEx(playerid, COLOR_GENERAL, "Comandos administrativos para los Concesionarios:");
	    SendClientMessageEx(playerid, COLOR_WHITE, "/editarconce - /editarcoche - /vConcesionario - cConcesionario");
	    SendClientMessageEx(playerid, COLOR_WHITE, "/crearautoconce /destroyautoconce /crearconce [Crear Concesionario] /destruirconce [Borrar Concesionario]");
	return 1;
}


CMD:editarconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 5000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, CDSInfo[d][cdRadius], CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ])) {
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                SetPVarInt(playerid, "editingcdveh", -1);
                SetPVarInt(playerid, "editingcdvehpos", 0);
                SetPVarInt(playerid, "editingcdvehnew", 0);
                new listitems[] = "1 Nuevo coche\n2 Mis coches\n3 Mejorar\n4 Ganancias";
                SafeDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"{00F70C} Elige y continuar", listitems,"Ok","Cancelar");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de este Concesionario.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Debes estar de pie dentro del radio del Concesionario.");
    return 1;
}

CMD:editarcoche(playerid, params[])
{
	if(AdminDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF}Tienes que estar en servicio (/adminduty)");
    if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	new vehicleid = GetPlayerVehicleID(playerid);
    new v, d;
    v = GetCarDealershipVehicleId(vehicleid);
    d = GetCarDealershipId(vehicleid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Usted no está en un coche.");
    if(v != -1 && d != -1)
	{
        if(IsPlayerOwnerOfCDEx(playerid, d))
		{
            SetPVarInt(playerid, "editingcd", d);
            SetPVarInt(playerid, "editingcdveh", v);
            SetPVarInt(playerid, "editingcdvehpos", 0);
            SetPVarInt(playerid, "editingcdvehnew", 0);
            new listitems[] = "1 Editar Modelo\n2 Editar Costo\n3 Editar Park\n4 Borrar Coche";
            SafeDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Concesionario:", listitems,"Ok","Cancelar");
            return 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Usted no es dueño de este Concesionario.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} El coche no es parte de un Concesionario.");
    }
    return 1;
}

CMD:vconcesionario(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	new string[128];

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		{
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                format(string,128,"¿Seguro que deseas vender este Concesionario de coches por $%d?\n.", CDSInfo[d][cdPrice] / 2);
                SafeDialogEx(playerid,DIALOG_CDSELL,DIALOG_STYLE_MSGBOX,"{00F70C} Advertencia:",string,"Vender","Cancelar");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Usted no es el dueño de este Concesionario de coches.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Usted tiene que estar cerca de un Concesionario de coches.");
    return 1;
}

CMD:cconcesionario(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        return 1;
    }
	for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		{
            if(!CDSInfo[d][cdOwned])
			{
                if(GetPVarInt(playerid, "Cash") < CDSInfo[d][cdPrice])
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No tienes suficiente dinero para comprar el Concesionario de coches.");
                    return 1;
                }
                SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-CDSInfo[d][cdPrice]);
                SetPlayerOwnerOfCD(playerid, d);
                PlayerPlayMusic(playerid);
                SendClientMessageEx(playerid, COLOR_GREEN, " Felicitaciones, por su nueva compra.");
                SendClientMessageEx(playerid, COLOR_WHITE, " Usa /ayuda para ver la sección de Concesionario para ver más información.");
                SendClientMessageEx(playerid, COLOR_GRAD1, " Por favor establece la posición que quieres que los coches den spawn.");
                SendClientMessageEx(playerid, COLOR_GRAD2, " Ponte en el lugar deseado, una vez listo usa el botón FIRE (CLICK).");
                SendClientMessageEx(playerid, COLOR_WHITE, " Nota: Si no estableces los coches sus clientes no podrán comprar autos.");
                SetPVarInt(playerid, "editingcdvehpos", 2);
                SetPVarInt(playerid, "editingcd", d);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_WHITE, "Este Concesionario no está en venta.");
            }
        }
    }
    return 1;
}

CMD:crearautoconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
        return 1;
    }

    new string[128], price, dealershipid, modelid;
    if(sscanf(params, "ddd", price, dealershipid, modelid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /crearautoconce [price] [dealership] [modelid]");

    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    new cdvehicleid = CreateCarDealershipVehicle(dealershipid, modelid, X, Y, Z, A, price);
    if(cdvehicleid == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} ha alcanzado el límite de autos por concesionario.");
    }
    else
	{
        format(string, sizeof(string), " Coche creado con la ID %d.", cdvehicleid);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:destroyautoconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, " No puedes usar este comando.");
        return 1;
    }

    new string[128], vehid;
    if(sscanf(params, "d", vehid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /destroyautoconce [vehicleid]");

    DestroyCarDealershipVehicle(GetCarDealershipId(vehid), GetCarDealershipVehicleId(vehid));
    SavecDealership(GetCarDealershipId(vehid));
    format(string, sizeof(string), " Coche eliminado - ID %d.", vehid);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    return 1;
}

CMD:crearconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	 if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
        return 1;
    }

    new string[128], price, radius, message[64];
    if(sscanf(params, "dds[64]", price, radius, message)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /crearconce [precio] [radio] [mensaje]");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    new dealershipid = CreateCarDealership(X, Y, Z, radius, price, message);
    if(dealershipid == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Concesionarios llegó al limite.");
    }
    else
	{
        format(string, sizeof(string), " Concesionario creado - ID %d.", dealershipid);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:destruirconce(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] < 6000)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        return 1;
    }

    new string[128], dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /destruirconce [ID]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CDSInfo[d][cdEntranceX], CDSInfo[d][cdEntranceY], CDSInfo[d][cdEntranceZ]))
		{
            DestroyCarDealership(d);
            format(string, sizeof(string), " Concesionario destruido - ID %d.", d);
            SendClientMessageEx(playerid, COLOR_WHITE, string);
            return 1;
        }
    }
    if(dealershipid > MAX_CARDEALERSHIPS) return 1;
    if(dealershipid < 0) return 1;
    DestroyCarDealership(dealershipid);
    format(string, sizeof(string), " Concesionario destruido - ID %d.", dealershipid);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    return 1;
}
zcmd(soporte, playerid, params[]){
        if(IsPlayerConnected(playerid))
        {
            new dudasfq[] = "¿Hay facciones libres? - ¿Cuáles son?\n¿Buscan administradores? - ¿Cómo postulo?\n¿Dónde consigo un teléfono? - ¿Qué hay en esa tienda?\n¿Por qué tengo restricción de armas? -¿Cómo se elimina?\n¿Por qué no aparece el checkpoint en el mapa? - GPS\n¿Hay mecánicos On? - ¿Cómo los puedo encontrar?\n¿Cuántos Jobs hay? - ¿Cuál da más dinero?\n¿Cómo hago un anuncio? - ¿Normas del sistema?\n¿Estoy bugeado, qué hago? - ¿Lo reporto?\n¿Cómo dejo una facción? - ¿Se rolea?";
	 		SafeDialogEx(playerid, DIALOG_DUDAS, DIALOG_STYLE_LIST, "{FFFFFF}Soporte:{088A4B} Respuesta a preguntas frecuentes 1/2",dudasfq , "Aceptar", "Siguiente");
		}
		else SendClientMessage(playerid, 0xFFFF00FF, "No estás conectado.");
		return 1;
	}
CMD:duda(playerid, params[])
{
	new Texto[81], count;
  	if(JustDuda[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Espera 60 segundos para mandar otra duda.");
	if(sscanf(params, "s[81]", Texto)) return SendClientMessage(playerid, -1, "Utiliza: {00F70C}/duda{FFFFFF} (texto)");
	count = 0;
	HayDuda[playerid] = 1;
	new string[322];
	format(string, 322, "{2F99B5}%s (%d) {FFFFFF}tiene una duda: {FF0000}%s", GetPlayerNameEx(playerid),playerid, Texto);
    for(new i=0;i<MAX_PLAYERS;i++)
    {
		if(IsPlayerConnected(i))
		{
			if(IsPlayerConnected(i) == 1)
			{
				if (Info[i][pAdminZC] >= 1)
				{
					SendClientMessage(i, 0x0000FFFF, string);
					count++;
				}
			}
		}
	}
	if(count != 0)
	{
		format(string, sizeof(string), "Tu duda se ha mandado satifactoriamente a %d administrador(es)",count);
		SendClientMessage(playerid,COLOR_WHITE,string);
		JustDuda[playerid] = 60;
	}
	if(count == 0)return SendClientMessage(playerid, COLOR_WHITE, "Su duda no ha podido ser procesada, usa el comando /soporte. Más información en el foro.");
	return 1;
}
zcmd(aduda, playerid,params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 2)
	{
	    new id;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "Utiliza: {FF0000}/aduda {FFFFFF}(ID/Nombre)");
		if(HayDuda[id] == 0) return SendClientMessage(playerid, 0xFF0000FF, "Este jugador no tiene una duda.");
		new string[128];
		if(!IsPlayerConnected(id)) return SendClientMessage(playerid, 0xFF0000FF, "Jugador no conectado.");
		format(string, sizeof(string), "Administrador {2F99B5}%s{FFFFFF} ha aceptado tu duda.",GetPlayerNameEx(playerid));
		SendClientMessage(id,-1,string);
		SendClientMessage(playerid,-1,"Has aceptado la duda correctamente - Usa /w para responder.");
		HayDuda[id]=0;
		format(string, sizeof(string), "{2F99B5}%s{FFFFFF} ha aceptado la duda del usuario que ha preguntado.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GREEN, string, 2);

	}
	return 1;
}
zcmd(rduda, playerid,params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1)
	{
	    new id;
		if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "Utiliza: {FF0000}/rduda {FFFFFF}(ID/Nombre)");
		if(HayDuda[id] == 0) return SendClientMessage(playerid, 0xFF0000FF, "Este jugador no tiene una duda.");
		new string[128];
  if(!IsPlayerConnected(id)) return SendClientMessage(playerid, 0xFF0000FF, "Jugador no conectado.");
		format(string, sizeof(string), "Administrador {2F99B5}%s{FFFFFF} ha {FF0000}Rechazado {FFFFFF}tu duda. Usa /tipduda.",GetPlayerNameEx(playerid));
		SendClientMessage(id,-1,string);
		format(string, sizeof(string), "Le recomendamos que use el comando /soporte, posiblemente la respuesta de su pregunta esté ahí.");
		SendClientMessage(id,-1,string);
		format(string, sizeof(string), "{2F99B5}%s{FFFFFF} ha Rechazado la duda del usuario que ha preguntado.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_ORANGE, string, 2);

		}
		return 1;
}

CMD:togduda(playerid, params[])
{
	if (!gNewbie[playerid]){
		gNewbie[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Deshabilitaste el canal de ayuda.");
	}
	else{
		gNewbie[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Habilitaste el canal de ayuda.");
	}
	return 1;
}

CMD:darobjeto(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338){
		new string[128], giveplayerid, object, slot;
		if(sscanf(params, "ddd", giveplayerid, object, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darobjeto (playerid) (objeto) (slot)");
		if(slot < 0 || slot > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "Slot Inválido, De 0 a 8.");{
			if (IsPlayerConnected(giveplayerid)){
				PlayerToyInfo[giveplayerid][slot][ptModelID] = object;
				PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
				format(string, sizeof(string), "Entregaste a %s el objeto ID %d en el slot %d", GetPlayerNameEx(giveplayerid), object, slot);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "Recibiste un nuevo objeto (/toys) de un administrador!");
			}
			return 1;
		}
	}
	return 1;
}

CMD:smstodos(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /smstodos (texto)");
	format(string, sizeof(string), "SMS: %s, Destinatario desconocido.)",params);
 	SendMoleMessage(COLOR_YELLOW, string);
 	format(string, sizeof(string), "[AdmCmd]: El administrador %s usó el comando /smstodos.", GetPlayerNameEx(playerid));
	ABroadCast(COLOR_ORANGE, string, 5000);
	return 1;
}

CMD:famchat(playerid, params[])
{
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 4000) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /famchat (Mensaje para miembros en las familias)");
	new string[128];
	format(string, sizeof(string), "* [Administador %s]: %s.", GetPlayerNameEx(playerid),params);
	foreach(Player, i)
	{
		if(Info[i][pFMember] < 255)
		{
			SendClientMessageEx(i, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:facchat(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 6 || Info[playerid][pFactionModerator] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /facchat (Mensaje para miembros en las facciones)");
	new string[128];
	format(string, sizeof(string), "* [Administrador %s]: %s.", GetPlayerNameEx(playerid),params);
	foreach(Player, i){
		if(Info[i][pMember] >= 1){
			SendClientMessageEx(i, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:showsound(playerid, params[]){
	new sound;
    if(sscanf(params, "d", sound)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /showsound (ID)");
    PlayerPlaySound(playerid, sound, 0,0,0);
    return 1;
}

CMD:suberapidojoderr(playerid, params[]){
	if (Info[playerid][pAdminZC] <= 6000 || Info[playerid][pShopTech] == 1){
		new string[128], giveplayerid, hours, invoice[64];
		if(sscanf(params, "uds[64]", giveplayerid, hours, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /expdoble (playerid) (Horas) (Detalles)");
		format(string, sizeof(string), " %s te dio %d horas de doble experiencia, cada payday recibirás doble EXP y en trabajos también.", GetPlayerNameEx(playerid), hours);
		SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
		format(string, sizeof(string), " Estableciste su experiencia doble a %d horas a %s.", hours,GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid,COLOR_YELLOW,string);
		Info[giveplayerid][pDobleExp] += hours;
		format(string, sizeof(string), "[SHOP ExpDoble] %s dió %d horas a %s - Pagó fue de %s", GetPlayerNameEx(playerid), hours,GetPlayerNameEx(giveplayerid), invoice);
		Log("LOGS/shoplog.log", string);
	}
	return 1;
}

CMD:dedicados(playerid, params[]){
	if(!IsPlayerConnected(playerid)) return 1;
	new string[2500];
	foreach(Player, i)
	{
		if(Info[i][pRHours] >= 150)
		{
			format(string, sizeof(string), "%s%s", string, GetPlayerNameEx(i));
			format(string, sizeof(string), "%s\n", string);
		}
	}
	format(string, sizeof(string), "%s\n", string);
	SafeDialogEx(playerid, INVALID_DIALOG, DIALOG_STYLE_LIST,"{00F70C}Usuarios Dedicados",string,"Volver","");
	return 1;
}

CMD:venderfichasvip(playerid, params[]){
	new string[128], giveplayerid, amount, price;
	if(sscanf(params, "ddd", giveplayerid, amount, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /venderfichasvip (playerid) (Monto) (Precio)");
	if(amount < 1 || amount > 99999999) { SendClientMessageEx(playerid, COLOR_WHITE, "* Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
	if(price < 1) { SendClientMessageEx(playerid, COLOR_WHITE, "El precio no puede ser menor que 1."); return 1; }
	if(IsPlayerConnected(playerid)){
		if(IsPlayerConnected(giveplayerid)){
			if(ProxDetectorS(8.0, playerid, giveplayerid)){
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes venderte a ti mismo.");
				format(string, sizeof(string), "* Has ofrecido a %s, %d fichas VIP por $%d.", GetPlayerNameEx(giveplayerid), amount, price);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s quiere venderte %d fichas VIP por $%d, (Usa: /aceptar fichasvip para comprar).", GetPlayerNameEx(playerid), amount, price);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				FOffer[giveplayerid] = playerid;
				FPrice[giveplayerid] = price;
				return FAmount[giveplayerid] = amount;
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	return 1;
}

CMD:viplocker(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 798.4911,-1416.1251,1016.4688)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No estás cerca del {FFFF00}X{FFFFFF} locker!");
	switch(Info[playerid][pVIP])
	{
		case 1: SafeDialogEx(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "{00F70C}VIP Locker", "Botiquín HP (Gratis)\nArmadura ($15000)\nArmas\nCambiar Ropa\nTrabajos\nVIP Color", "Seleccionar", "Cancelar");
		case 2: SafeDialogEx(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "{00F70C}VIP Locker", "Botiquín HP (Gratis)\nArmadura ($15000)\nArmas\nCambiar Ropa\nTrabajos\nVIP Color", "Seleccionar", "Cancelar");
		case 3,4,5: SafeDialogEx(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "{00F70C}VIP Locker", "Botiquín HP (Gratis)\nArmadura (Gratis)\nArmas\nCambiar Ropa\nTrabajos\nVIP Color", "Seleccionar", "Cancelar");
		default: SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no hay nada dentro del Locker. Alguien se lo habrá llevado todo.");
	}
	return 1;
}

CMD:weaponr(playerid, params[])
{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 6)
	{
		new string[128], giveplayerid, hours;
		if(sscanf(params, "dd", giveplayerid,hours)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /weaponr (playerid) (horas)");
		if(IsPlayerConnected(giveplayerid))
		{
			if(Info[giveplayerid][pWRestricted] == 0)
			{
			    Info[giveplayerid][pWRestricted] = hours;
				format(string, sizeof(string), "* Diste a %s %i horas de restricción de armas.", GetPlayerNameEx(giveplayerid),hours);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* Administrador %s te dió %i horas de restricción de armas.", GetPlayerNameEx(playerid),hours);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "[AdmCmdExe]: %s dió restricción de armas a %s por %d horas.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),hours);
  				ABroadCast(COLOR_GENERAL,string,2);
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "* Ese jugador ya tiene restricción de armas.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	}
	return 1;
}
CMD:invitaramigo(playerid, params[]){
	if(Info[playerid][pAdminZC] <= 6000){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /invitaramigo (playerid)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pVIP] < 1){
				new days, daytime;
				if(Info[playerid][pVIP] == 2){ daytime = 7; }
				else if(Info[playerid][pVIP] >= 3) { daytime = 1; }
				ConvertTime(gettime() - Info[playerid][pVIPInviteDay], .ctd=days);
				if(days >= daytime || Info[giveplayerid][pVIP] >= 4 || Info[playerid][pAdminZC] == 6000){
					Info[giveplayerid][pVIP] = 1;
					Info[giveplayerid][pTempVIP] = 10800;
					Info[giveplayerid][pBuddyInvited] = 1;
					format(string, sizeof(string), "Invitaste a %s a ser un {FFFF00}BRONCEVIP{FFFFFF} por %d horas.", GetPlayerNameEx(giveplayerid),3);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Fuiste invitado por %s a ser un {FFFF00}BRONCEVIP{FFFFFF} por %d horas. Disfrutalo!", GetPlayerNameEx(playerid), 3);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "BUDDY INVITE: %s ha invitado %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					Log("LOGS/setvip.log", string);
					Info[playerid][pVIPInviteDay] = gettime();
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo puedes invitar a una persona como {FFFF00}SILVERVIP{FFFFFF} cada 7 días y a una como {FFFF00}GOLDVIP{FFFFFF} cada día.");
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya es {FFFF00}VIP{FFFFFF}.");
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está conectado.");
	}
	return 1;
}

CMD:recompensas(playerid, params[])
{
    new string[128];
    SendClientMessageEx(playerid, COLOR_YELLOW, "Información de Recompensas:");
    format(string, sizeof(string), "Horas de Recompensa Total: %d Horas.", Info[playerid][pRHours]);
    SendClientMessageEx(playerid, COLOR_GREEN, string);
    format(string, sizeof(string), "Horas de Usuario Dedicado: %d Horas.", Info[playerid][pDPHours]);
    SendClientMessageEx(playerid, COLOR_WHITE, string);
    if(Info[playerid][pRHours] >= 150)
    {
        if(Info[playerid][pDPHours] == 150) return SendClientMessageEx(playerid, COLOR_YELLOW, "Eres un Miembro Dedicado!");
    	format(string, sizeof(string), "Te faltan %i Horas para ser un Miembro Dedicado.", 150-Info[playerid][pDPHours]);
        SendClientMessageEx(playerid, COLOR_YELLOW, string);
        return 1;
	}
    else
    {
    	format(string, sizeof(string), "Te faltan %i Horas para ser un Usuario Dedicado.", 150-Info[playerid][pRHours]);
    	SendClientMessageEx(playerid, COLOR_YELLOW, string);
    }
	return 1;
}
//CMD:ad(playerid, params[]) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} El comando /ad ha sido removido, usa /ads");
CMD:ads(playerid, params[]) return cmd_ad(playerid, params);
CMD:anuncios(playerid, params[]) return cmd_ad(playerid, params);
/*CMD:anuncios(playerid, params[]) {
	if(gPlayerLogged{playerid} == 0) {
		SendClientMessageEx(playerid, COLOR_WHITE, "No has ingresado al servidor correctamente.");
	}
	else if(GetPVarType(playerid, "Injured") == 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer anuncios mientras estás herido.");
	}
	else if(Info[playerid][pEstado] != 0) {
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer anuncios en este momento.");
	}
	else if(Info[playerid][pJailTime] > 0) {
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer anuncios en prisión.");
	}
	else SafeDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "{A2DC35}Anuncios", "Compra Venta\nClasificados\nEmpleo\nExtras", "Seleccionar", "Cancelar");
	return 1;
}*/
zcmd(adprecio, playerid, params[])
	{
	    if(DirectorCNN(playerid))
	    {
	        if(!sscanf(params, "d", params[0]))
	        {
	            if(params[0] < 0 || params[0] > 1000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} Valor entre 1 - 1000");

	            new string[90];
	            TaxCNN = params[0];
				SaveStuff();
				format(string, sizeof(string), "* [LSTV] {FFFFFF}El coste de poner un anuncio ha sido modificado. (%d$)", TaxCNN);
				SendClientMessageToAllEx(0x00ACFFFF, string);

	        }
	        else SendClientMessageEx(playerid, COLOR_GRAD2, "* /adprecio <cantidad>");
	    }
	    else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización para usar este comando.");
	    return 1;
 	}
zcmd(ad, playerid, params[])
{
    new string[186], anuncio[114];
    if(!sscanf(params, "s[114]", anuncio)) // 128 + Tag + Número de teléfono + Simbolos.
    {
        if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
		if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
	 	if(strlen(anuncio) >= sizeof(anuncio)-1) return SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}[INFO]:{FFFFFF} El anuncio solo puede tener 128 carácteres.");
		if(iAdverTimer >= 1)
		{
			format(string, sizeof(string), "[ERROR]:{FFFFFF} Su anuncio no puede ser enviado ahora. Podrás poner un anuncio en %d segundos.", iAdverTimer);
  			SendClientMessageEx(playerid,COLOR_GREY, string);
  			return 1;
		}
	 	if(DetectarSpam(params)) {SendClientMessage(playerid,0xFFFFFFFF,"[Atención] Hiciste Spam, esto está prohibido."); return 0;}
	 	if(Info[playerid][pConnectTime] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Mínimo 2 horas jugadas en el servidor para realizar anuncios.");
   		if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No tienes teléfono, puedes comprar uno en la tienda de electrónica.");
     	if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} Fuiste bloqueado del comando /ad.");
      	if(GetPlayerCash(playerid) > TaxCNN)
	 	{
	 	    if(strfind(anuncio, "[", true) != -1 && strfind(anuncio, "]", true) != -1) // Uso del [TAG]
	 	    {
		    	if(strfind(anuncio, "Mafia", true) != -1){HaceMG[playerid] = 1;}    	if(strfind(anuncio, "Noob", true) != -1){HaceMG[playerid] = 2;}
		    	if(strfind(anuncio, "Servidor", true) != -1){HaceMG[playerid] = 3;}    	if(strfind(anuncio, "Server", true) != -1){HaceMG[playerid] = 4;}
		    	if(strfind(anuncio, "Putos", true) != -1){HaceMG[playerid] = 5;}    	if(strfind(anuncio, "Admin", true) != -1){HaceMG[playerid] = 6;}
		    	if(strfind(anuncio, "Ilegal", true) != -1){HaceMG[playerid] = 7;}    	if(strfind(anuncio, "Adoking", true) != -1){HaceMG[playerid] = 8;}
		    	if(strfind(anuncio, "Jail", true) != -1){HaceMG[playerid] = 9;}      	if(strfind(anuncio, "Faccion", true) != -1){HaceMG[playerid] = 10;}
		    	if(strfind(anuncio, "Homosexual", true) != -1){HaceMG[playerid] = 11;}  if(strfind(anuncio, "Actividad RP", true) != -1 || strfind(anuncio, "ActividadR", true) != -1){HaceMG[playerid] = 12;}
		    	if(strfind(anuncio, "California", true) != -1 && strfind(anuncio, "Vice", true) != -1){HaceMG[playerid] = 13;}
		    	if(HaceMG[playerid] > 0)
				{
				    format(string, sizeof(string), "[AntiSpam: /ad]: {FFFFFF}((%s intentó poner: %s )).", GetPlayerNameEx(playerid),anuncio);
 					ABroadCast(COLOR_RED, string, 2);
					return AutoJailMG(playerid);  // Será llevado al AutoJail por realizar MG.
				}
		     	strmid(Info[playerid][pMyAD], "", 0, strlen(""), 120); // Se elimina el Anterior AD guardado en los stats.
		     	if(UnidentifedCall[playerid] == 0)
		     	{
             		format(string, sizeof(string), "[Anuncio]{58FA58} %s (TLF: %d).",  anuncio, Info[playerid][pPnumber]);
             		SendClientMessageEx(playerid, COLOR_WHITE, "Su anuncio ha sido publicado. Gracias por usar nuestro servicio de anuncios.");
				}
    			else
    			{
    				format(string, sizeof(string), "[Anuncio]{58FA58} %s [PERIÓDICO S.A].",  anuncio);
             		SendClientMessageEx(playerid, COLOR_WHITE, "Se ha detectado que su número de teléfono lo tiene en privado (/numeropriv). Su anuncio se puso en el periódico.");
    			}
    			OOCNews(COLOR_GREEN,string);
       		 	Bought(playerid, TaxCNN);
       		 	FondosCNN += TaxCNN;
   	  		 	format(string, sizeof(string), "[!] Anuncio realizado por %s - {F7FE2E}(ID:%d).", GetPlayerNameEx(playerid), playerid);
         	 	SendAdvisorMessage(COLOR_LIGHTBLUE, string);
	       	 	iAdverTimer = 60;
			 	strmid(Info[playerid][pMyAD], anuncio, 0, strlen(anuncio), 120);
			 	HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF}Debes ponerle TAG al anuncio, por ejemplo [Empleos LS] - [Ventas LS]. Más ayuda en /soporte.");
   		}
   		else
  		{
  		    format(string, sizeof(string), "[ERROR]:{FFFFFF} Su anuncio no puede ser enviado, no dispones de suficiente dinero. El coste actual es de %d dólares.", TaxCNN);
            SendClientMessageEx(playerid,COLOR_GREY, string);
		  	SendClientMessageEx(playerid, COLOR_GRAD2, "Si tienes dudas de como usar este sistema, usa /soporte.");
  		}
  	}
	else
	{
		format(string, sizeof(string), "[ERROR]:{FFFFFF} CMD: /ad [Anuncio] - El coste del servicio es de $%d. Si desea realizar de nuevo su último anuncio guardado, use: /myad.", TaxCNN);
  		SendClientMessageEx(playerid,COLOR_GREY, string);
  		format(string, sizeof(string), "- Último anuncio realizado fue: %s", Info[playerid][pMyAD]);
  		SendClientMessageEx(playerid,COLOR_GREEN, string);
	}
 	return 1;
}
zcmd(myad, playerid, params[])
{
    new string[188];
    if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
	if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
	if(strcmp(Info[playerid][pMyAD], "Ninguno", true) != 0)
	{
	if(iAdverTimer >= 1)
	{
		format(string, sizeof(string), "[ERROR]:{FFFFFF} Su anuncio no puede ser enviado ahora. Podrás poner un anuncio en %d segundos.", iAdverTimer);
		SendClientMessageEx(playerid,COLOR_GREY, string);
		return 1;
	}
	if(Info[playerid][pConnectTime] < 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]:{FFFFFF} Mínimo 1 hora jugada en el servidor para realizar anuncios.");
	if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} No tienes teléfono, puedes comprar uno en la tienda de electrónica.");
	if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: {FFFFFF} Fuiste bloqueado del comando /ad.");
	if(GetPlayerCash(playerid) > TaxCNN)
	{
		if(UnidentifedCall[playerid] == 0)
		{
  			format(string, sizeof(string), "[Anuncio]{58FA58} %s (TLF: %d).",Info[playerid][pMyAD], Info[playerid][pPnumber]);
     		SendClientMessageEx(playerid, COLOR_WHITE, "Su anuncio ha sido publicado. Gracias por usar nuestro servicio de anuncios.");
		}
    	else
    	{
    		format(string, sizeof(string), "[Anuncio]{58FA58} %s [PERIÓDICO S.A].",Info[playerid][pMyAD]);
            SendClientMessageEx(playerid, COLOR_WHITE, "Se ha detectado que su número de teléfono lo tiene en privado (/numeropriv). Su anuncio se puso en el periódico.");
    	}
    	OOCNews(COLOR_GREEN,string);
       	Bought(playerid, TaxCNN);
       	FondosCNN += TaxCNN;
   	  	format(string, sizeof(string), "[!] Anuncio realizado por %s - {F7FE2E}(ID:%d).", GetPlayerNameEx(playerid), playerid);
       	SendAdvisorMessage(COLOR_LIGHTBLUE, string);
	    iAdverTimer = 60;
	}
	else
	{
 		format(string, sizeof(string), "[ERROR]:{FFFFFF} Su anuncio no puede ser enviado, no dispones de suficiente dinero. El coste actual es de %d dólares.", TaxCNN);
        SendClientMessageEx(playerid,COLOR_GREY, string);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Si tienes dudas de como usar este sistema, usa /soporte.");
  	}
  	}
  	else SendClientMessageEx(playerid, COLOR_WHITE, "Información: No tienes anuncios guardados, usa /anuncios.");
 	return 1;
}
CMD:cinturon(playerid, params[]){
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	new string[50 + MAX_PLAYER_NAME];
    if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0){
        Seatbelt[playerid] = 1;
        if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof(string), "* %s agarra su casco, y se lo pone.", GetPlayerNameEx(playerid));}
        else { format(string, sizeof(string), "* %s pone las manos en su cinturón y se lo pone.", GetPlayerNameEx(playerid)); }
    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1){
        Seatbelt[playerid] = 0;
        if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof(string), "* %s pone las manos en su casco, y se lo quita.", GetPlayerNameEx(playerid));}
        else { format(string, sizeof(string), "* %s pone las manos en su cinturón y se lo quita.", GetPlayerNameEx(playerid)); }
    }
    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    return 1;
}

CMD:vercinturon(playerid, params[]){
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vercinturon (Jugador)");
    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessageEx(playerid,COLOR_GREY,"Ese jugador no está en un vehiculo!");
    if (ProxDetectorS(9.0, playerid, giveplayerid)){
		new string[128];
        new stext[4];
        if(Seatbelt[giveplayerid] == 0) { stext = "sin"; }
        else { stext = "con"; }
        if(IsABike(GetPlayerVehicleID(playerid))){
            format(string, sizeof(string), "%s está %s casco." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s mira a %s, mirando si tiene puesto su casco.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else{
            format(string, sizeof(string), "%s está %s cinturón." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s observa a travez de la ventana de %s, mirando si usa el cinturón.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    else { SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de ese jugador!"); }
    return 1;
}

CMD:darpremium(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, nick, sizeof(nick)); //Carl McNeill -  Matias_Espinoza - Rai Salazar
		if( !strcmp(nick, "Alexey_Kozlov", true) || !strcmp(nick, "Juan_Ruiz", true) || !strcmp(nick, "Harold_Hitchman", true))
		{
		new string[128], giveplayerid, level;
		if(sscanf(params, "dd", giveplayerid, level)){
			SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darpremium (playerid) (level)");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Available Levels: |0| None |1| Bronce |2| Silver |3| Gold |4| Platinum |5| Moderador");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid)){
			if(giveplayerid != INVALID_PLAYER_ID){
				if(level < 0 || level > 5) return SendClientMessageEx(playerid, COLOR_WHITE, "VIP Level: 0 a 5!");
				Info[giveplayerid][pVIP] = level;
				Info[giveplayerid][pTempVIP] = 0;
				Info[giveplayerid][pBuddyInvited] = 0;
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(month == 12)
				{
				    Info[giveplayerid][pVIPDateM] = 1;
				}
				else
				{
				    new total;
					total = month + 1;
				    Info[giveplayerid][pVIPDateM] = total;
				}
				Info[giveplayerid][pVIPDateD] = day;
				if(level == 0){
					if (Info[playerid][pAdminZC] < 1338){
						format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Ninguno (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Ninguno (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Tu Nivel de VIP ha sido establecido a nada por %s (0).", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
                    Info[giveplayerid][pVIPDateD] = -1;
                    Info[giveplayerid][pVIPDateM] = -1;
					format(string, sizeof(string), "[AdmCmd]: %s has set %s's (IP:%s) VIP level to none (%d). (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, month,day,year);
					Log("LOGS/setvip.log", string);
					return 1;
				}
				if(level == 1){
					if (Info[playerid][pAdminZC] < 1338){
						format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Bronce (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Bronce (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Tu Nivel de VIP ha sido establecido a Bronce por %s (1).", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "[AdmCmd]: %s has set %s's (IP:%s) VIP level to Bronce (%d). (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, month,day,year);
					Log("LOGS/setvip.log", string);
					return 1;
				}
				if(level == 2){
					if (Info[playerid][pAdminZC] < 1338){
						format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Tu Nivel de VIP ha sido establecido a Silver por %s (2).", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "[AdmCmd]: %s has set %s's (IP:%s) VIP level to Silver (%d). (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, month,day,year);
					Log("LOGS/setvip.log", string);
					return 1;
				}
				if(level == 3){
					if (Info[playerid][pAdminZC] < 1338){
						format(string, sizeof(string), "[AdmCmd]: %s has establecido a %s, VIP level a Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Tu Nivel de VIP ha sido establecido a Gold por %s (3).", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "[AdmCmd]: %s has set %s's (IP:%s) VIP level to Gold (%d). (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, month,day,year);
					Log("LOGS/setvip.log", string);
					return 1;
				}
				if(level == 4){
					if (Info[playerid][pAdminZC] < 1338){
						format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Platinum (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[AdmCmd]: %s ha establecido a %s, VIP level a Platinum (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Tu Nivel de VIP ha sido establecido a Platinum por %s (4).", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					// Level 5 Arms Job - Platinum VIP
					Info[giveplayerid][pArmsSkill] = 401;

					format(string, sizeof(string), "[AdmCmd]: %s ha establecido %s's (IP:%s) VIP level a Platinum (%d). (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, month,day,year);
					Log("LOGS/setvip.log", string);
					return 1;
				}
				if(level == 5){
					if (Info[playerid][pAdminZC] < 1338){
						format(string, sizeof(string), "[AdmCmd]: %s ha establecido %s's VIP level a Moderador (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "[AdmCmd]: %s ha establecido %s's VIP level a Moderador (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Tu Nivel de VIP ha sido a Moderador por %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "[AdmCmd]: %s has set %s's (IP:%s) VIP level to Moderator (%d). (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, month,day,year);
					Log("LOGS/setvip.log", string);
					return 1;
				}
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	return 1;
}

CMD:msjvip(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338){
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /msjvip (Mensaje)");
		new string[128];
		format(VIPMOTD, sizeof(VIPMOTD), "%s", params);
		format(string, sizeof(string), "[AdmCmd]: %s ha cambiado el mensaje VIP a: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_ORANGE, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el mensaje vip.");
		SaveMOTDs();
	}
	return 1;
}

CMD:togvip(playerid, params[]){
	if(Info[playerid][pVIP] > 0 || Info[playerid][pAdminZC] >= 1338){
		switch(Info[playerid][pVIPCHAT]){
			case 0:{
				Info[playerid][pVIPCHAT] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Chat VIP habilitado. Utiliza /vip (texto) para hablar.");
			}
			case 1:{
				Info[playerid][pVIPCHAT] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "Chat VIP deshabilitado.");
			}
		}
	}
	return 1;
}
CMD:vipxd(playerid, params[])
{
	if(Info[playerid][pVIP] > 0 || Info[playerid][pAdminZC] >= 1338){
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /vip (Mensaje - Chat)");
		if(VIPTimer[playerid] > 0){
			format(string, sizeof(string), "Debes esperar %d segundos para hablar de nuevo por este canal.", VIPTimer[playerid]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			return 1;
		}
		if(Info[playerid][pVIPCHAT] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes el canal deshabilitado, /togvip para re-habilitarlo!");
		switch(Info[playerid][pAdminZC]){
		    case 1338: format(string, sizeof(string), "** [ADM] [Líder] %s: %s", GetPlayerNameEx(playerid), params);
		    case 6000: format(string, sizeof(string), "** [ADM] [Dueño-Fundador] %s: %s", GetPlayerNameEx(playerid), params);
		}
		switch(Info[playerid][pVIP]){
		    case 1:{
				format(string, sizeof(string), "** Bronce VIP %s: %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 8;
			}
			case 2: {
				format(string, sizeof(string), "** Silver VIP %s: %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 6;
			}
			case 3:
			{
				format(string, sizeof(string), "** Gold VIP %s: %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 5;
			}
			case 4:{
				format(string, sizeof(string), "** Platinum VIP %s: %s", GetPlayerNameEx(playerid), params);
				VIPTimer[playerid] = 5;
			}
			case 5: format(string, sizeof(string), "** VIP Moderador %s: %s", GetPlayerNameEx(playerid), params);
		}
		if (Info[playerid][pVIP] >= 1 || Info[playerid][pAdminZC] >= 2){
			SendVIPMessage(COLOR_VIP, string);
		}
		Log("LOGS/vipchat.log", string);
	}
	return 1;
}
CMD:regaloatodos(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 5000){
    	if(GiftAllowed){
			new string[128];
      		format(string, sizeof(string), "INFRANET-RP: %s ha enviado regalos a todos los usuarios.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL, string, 2);
      		format(string, sizeof(string), "Día de Regalos! %s ha enviado regalos a todos los usuarios!", GetPlayerNameEx(playerid));
			BroadCast(COLOR_GREEN, string);
			GiftAllowed = 0;
			foreach(Player, i)
			{
			    GiftPlayer(i);
			    Info[i][pGiftTime] = 3600;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Este comando ya fue usado, puedes usarlo en el próximo payday.");
	}
	return 1;
}
CMD:horaregalo(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /horaregalo (playerid)");
    if(Info[playerid][pAdminZC] >= 5000){
		if(giveplayerid != INVALID_PLAYER_ID)
		{
		    format(string, sizeof(string), "[AdmCmd]: %s reseteó el tiempo de regalo a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 2);
		    Info[giveplayerid][pGiftTime] = 0;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está conectado.");
	}
	return 1;
}

CMD:spawncasaxd(playerid, params[]){
    if( Info[playerid][pPhousekey] != INVALID_HOUSE_ID){
        if(Info[playerid][pVIP] >= 4){
        	switch(Info[playerid][pTypeSpawn]){
				case 0:{
            		Info[playerid][pTypeSpawn] = 1;
            		SendClientMessageEx( playerid, COLOR_YELLOW, "{FFFF00}[PLATINUMVIP]:{FFFFFF} Ahora aparecerás en tu casa cuando mueras." );
				}
				case 1:{
            		Info[playerid][pTypeSpawn] = 0;
            		SendClientMessageEx( playerid, COLOR_YELLOW, "{FFFF00}[PLATINUMVIP]:{FFFFFF} Ahora aparecerás en el hospital cuando mueras." );
				}
			}
		}
        else return SendClientMessageEx( playerid, COLOR_WHITE, "No eres VIP Platinum." );
    }
    else SendClientMessageEx( playerid, COLOR_WHITE, "No eres dueño de una casa." );
    return 1;
}

CMD:automensajexd(playerid, params[]){
	if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No eres {FFFF00}VIP{FFFFFF}.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /automensaje [texto]");
	new string[128];
	if(strlen(params) >= 1 && strlen(params) < 63){
		format(Info[playerid][pAutoTextReply], 64, "%s", params);
		format(string, sizeof(string), "Cambiaste el auto mensaje de respuesta: %s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Tu automensaje no puede tener más de 64 letras ni menos de 1.");
	return 1;
}
	zcmd(repararpremiumxd, playerid, params[])
	{
        if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} Necesitas ser premium");
			{
			new engine;
			if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes de tener el motor apagado. ({5ABAFF}pulsa [N]{FFFFFF}).");
			SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    		RepairVehicle(GetPlayerVehicleID(playerid));
			SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo Premium reparado.");
			new string[128];
			format(string, sizeof(string), "* [Premium] %s (( Ha reparado su vehiculo. )) *", GetPlayerNameEx(playerid));
    		ProxDetector(30.0, playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
			}
		return 1;
    }

	zcmd(skinpremiumxd, playerid, params[]){
 	    if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_RED2, "{FFFF00}[ERROR]:{FFFFFF} Necesitas ser premium");
 	    if(!sscanf(params, "i", params[0]))
        {
            if(params[0] > 0 && params[0] < 311)
            {
            Info[playerid][pChar] = params[0];
			SetPlayerSkin(playerid, Info[playerid][pChar]);
            new string[128];
			format(string, sizeof(string), "* [Premium] %s (( Se ha cambiado de skin. )) *", GetPlayerNameEx(playerid));
    		ProxDetector(30.0, playerid, string, 0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF,0xB6DB22FF);
			}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Utilize: /Skin <ID>");
 	    }
		return 1;
	}
CMD:venderfichasv(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 1338 || Info[playerid][pShopTech] == 1){
		new string[128], giveplayerid, amount, invoice[32];
		if(sscanf(params, "dds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /venderfichasv (playerid) (valor) (invoice #)");
		Info[giveplayerid][pVTokens] += amount;
		format(string, sizeof(string), "Recibiste %d Fichas VIP de la tienda tecnica %s.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[FICHASVIP] %s a %s, dió %d Tokens VIP - Detalles %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("LOGS/shoplog.log", string);
	}
	else SendClientMessageEx(playerid, -1, "No puedes usar este comando.");
	return 1;
}

CMD:banear(playerid, params[]){
    if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 4){
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /banear (player) (razón)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]){
				format(string, sizeof(string), "[AdmCmd]: %s ha sido autobaneado, razón: Intentar banear a un nivel mayor de admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				Info[playerid][pBannedZC] = 2;
				UnloadPlayerVehicles(playerid);
				Kick(playerid);
				//SetTimerEx("TimerBAN",1000,false,"d",playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason,month,day,year);
				Log("LOGS/ban.log", string);
				format(string, sizeof(string), "[AdmCmd]: %s fue baneado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				SetTimerEx("TimerBAN",500,false,"d",giveplayerid);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	return 1;
}

CMD:banip(playerid, params[]){

	if (Info[playerid][pAdminZC] >= 5){
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /ban (player) (razón)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] > Info[playerid][pAdminZC]){
				format(string, sizeof(string), "[AdmCmd]: %s ha sido auto baneado, razón: Intentar banear a un nivel mayor de admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				Info[playerid][pBannedZC] = 2;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "[AdmCmd]: %s fue baneado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				SetTimerEx("TimerBANIP",1000,false,"d",giveplayerid);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	return 1;
}

CMD:kick(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 2){
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /kick (playerID) (razón)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] >= Info[playerid][pAdminZC]){
				format(string, sizeof(string), "[AdmCmd]: %s ha sido auto expulsado, razón: Intentar usar /kick a un administrador mayor.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string, (Info[playerid][pAdminZC] == 1) ? (1) : (2));
				SetTimerEx("TimerKICK",500,false,"d",playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) fue expulsado por %s, razón: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason,month,day,year);
				Log("LOGS/kick.log", string);
				if(Info[playerid][pAdminZC] == 1) Log("LOGS/moderator.log", string);
				for(new loop=0; loop<20; loop++)  SendClientMessage(giveplayerid, COLOR_WHITE,"");
				format(string, sizeof(string), "[AdmCmd]: %s fue expulsado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				SetTimerEx("TimerKICK",500,false,"d",giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	return 1;
}
CMD:kickname(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if (Info[playerid][pAdminZC] >= 1){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /kickname (playerID) ");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pAdminZC] >= Info[playerid][pAdminZC]){
				format(string, sizeof(string), "[AdmCmd]: %s ha sido auto expulsado, razón: Intentar usar /kick a un administrador mayor.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string, (Info[playerid][pAdminZC] == 1) ? (1) : (2));
				SetTimerEx("TimerKICK",500,false,"d",playerid);
				return 1;
			}
			else{
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) fue expulsado por %s por NAME inapropiado (%d-%d-%d)", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid),month,day,year);
				Log("LOGS/kick.log", string);
				if(Info[playerid][pAdminZC] == 1) Log("LOGS/moderator.log", string);
				for(new loop=0; loop<20; loop++)  SendClientMessage(giveplayerid, COLOR_WHITE,"");
				SendClientMessageEx(giveplayerid,COLOR_GREEN,"[AVISO] Has sido expulsado por el servidor ya que tu cuenta no cumple las normas de la comunidad.");
				SendClientMessageEx(giveplayerid,COLOR_WHITE,"No se permite nombre de famosos, nicks trolls, inadecuados, que no son Role Play o que falten el respeto.");
				SendClientMessageEx(giveplayerid,COLOR_WHITE,"Recuerda poner las iniciales en mayúscula usado un nombre real, formato Nombre_Apellido.");
				format(string, sizeof(string), "[KICKNAME]: %s fue expulsado del servidor por %s, mal uso del formato Nombre_Apellido.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,1);
				SetTimerEx("TimerKICK",500,false,"d",giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	return 1;
}
/*CMD:stilsabelarcon(playerid, params[]){
	new string[128];
	SendClientMessageEx(playerid,COLOR_WHITE,"Este comando no esta permitido y se notificara a un administrador.");
 	format(string, sizeof(string), "[Aviso]: %s ha intentado logear con la Rcon del servidor con un comando secreto.", GetPlayerNameEx(playerid));
  	ABroadCast(COLOR_GENERAL,string,2);
	return SendClientMessageEx(playerid, COLOR_GREEN,"____________________________");
	}
CMD:newstate(playerid, params[]){
	new string[128];
	SendClientMessageEx(playerid,COLOR_WHITE,"Este comando no esta permitido y se notificara a un administrador.");
 	format(string, sizeof(string), "[Aviso]: %s ha intentado logear con la Rcon del servidor con un comando secreto.", GetPlayerNameEx(playerid));
  	ABroadCast(COLOR_GENERAL,string,2);
	return SendClientMessageEx(playerid, COLOR_GREEN,"____________________________");
	}*/
CMD:buscar(playerid, params[]){
	new string[128];
	if(!Hitman(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres de la agencia hitman.");
	if(UsedFind[playerid]){
		format(string, sizeof(string), "Tienes que esperar %d segundos para buscar de nuevo.", UsedFind[playerid]);
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /buscar (playerid)");
	if(IsPlayerConnected(giveplayerid)){
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando contigo mismo.");
		if(GetPlayerInterior(giveplayerid)!=0) return SendClientMessageEx(playerid, COLOR_WHITE, "Está persona está en un interior.");
		if(Info[giveplayerid][pAdminZC] >= 1338) return SendClientMessageEx(playerid, COLOR_WHITE, "No está disponible buscar a está persona.");
		new reload, level = Info[playerid][pRank];
		switch(level){
		    case 1: reload = 90;
		    case 2: reload = 70;
		    case 3: reload = 60;
		    case 4: reload = 40;
		    case 5: reload = 20;
		    case 6: reload = 5;
		}
	    new Float:X[3];
	    GetPlayerPos(giveplayerid, X[0], X[1], X[2]);
   		if(PhoneOnline[giveplayerid] == 1 && Info[giveplayerid][pPnumber] != 0) // Teléfono apagado y lo tiene.
		{
			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "No se han podido obtener más datos, teléfono desconectado. El sistema se ha ralentizado.");
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "Su teléfono ha vibrado estando apagado, alguien está intentando localizar su número de teléfono.");
			UsedFind[playerid] = reload+120;
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(giveplayerid, zone, sizeof(zone));
			format(string, sizeof(string), "%s - su última posición fue en %s.", GetPlayerNameEx(giveplayerid), zone);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else
		{
	    	SetPlayerCheckpoint(playerid,X[0], X[1], X[2], 4.0);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(giveplayerid, zone, sizeof(zone));
			format(string, sizeof(string), "%s - su última posición fue en %s.", GetPlayerNameEx(giveplayerid), zone);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			UsedFind[playerid] = reload;
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	return 1;
}

CMD:verregalo(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338 || Info[playerid][pShopTech] == 1){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /verregalo (playerid)");
		new rtxt[18];
		if(Info[giveplayerid][pRegalo] >= 0){
		   	switch(Info[giveplayerid][pRegalo]){
				case 0:rtxt="5 USD Shop";
				case 1:rtxt="Laser Toy";
				case 2:rtxt="10 USD Shop";
				case 3:rtxt="Police Vest";
				case 4:rtxt="Custom Product";
				case 5:rtxt="SVIP 1 Mes";
				case 6:rtxt="Auto Custom";
				case 7:rtxt="BVIP 1 Mes";
				case 8:rtxt="Casa";
		   	}
			format(string, sizeof(string), "* %s(%d) Premio: %s.",GetPlayerNameEx(giveplayerid),giveplayerid,rtxt);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
        else return SendClientMessageEx(playerid, COLOR_WHITE, "No tiene ningún premio.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando");
	return 1;
}

CMD:limpiarregalo(playerid, params[]){
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 1338){
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /limpiarregalo (playerid)");
		if(IsPlayerConnected(giveplayerid)){
			if(Info[giveplayerid][pRegalo] >= 0){
				Info[giveplayerid][pRegalo] = 0;
				format(string, sizeof(string), "[AdmCmd]: %s ha limpiado los regalos de %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_ORANGE,string,2);
			}
			else{
				format(string, sizeof(string), "%s no ha recibído premios últimamente activos.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando.");
	return 1;
}

CMD:luces(playerid, params[])
{
	if(Team_LSPD(playerid) || Team_FBI(playerid)){
		if(IsPlayerInAnyVehicle(playerid)){
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(!LSPD_Vehiculos(vehicleid) && !FBI_Vehiculos(vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes estar en un vehiculo de LSPD o FBI.");
		    if(Lamp[vehicleid] == 0)
			{
				for(new i=0; i<sizeof(Offsets); i++){
                	if(Offsets[i][getID] == 560 && GetVehicleModel(vehicleid) == 560)
					{
                    	Lamp[vehicleid] = 1;
                    	SendClientMessageEx(playerid, -1, "Luces activadas correctamente.");
						light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
						AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
						return 1;
                	}
                	if(Offsets[i][getID] == 415 && GetVehicleModel(vehicleid) == 415){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 421 && GetVehicleModel(vehicleid) == 421){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 426 && GetVehicleModel(vehicleid) == 426){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 579 && GetVehicleModel(vehicleid) == 579){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 402 && GetVehicleModel(vehicleid) == 402){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 461 && GetVehicleModel(vehicleid) == 461){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 521 && GetVehicleModel(vehicleid) == 521){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
                	if(Offsets[i][getID] == 506 && GetVehicleModel(vehicleid) == 506){
                    Lamp[vehicleid] = 1;
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
                	}
				}
            	SendClientMessageEx(playerid, -1, "{FFFF00}[ERROR]:{FFFFFF} Modelos compatibles:");
            	return SendClientMessageEx(playerid, -1, "Sultan, Cheetah, Washington, Premier, Huntley, Buffalo, PCJ 600, FCR 900, Super Gt");
            }
			else
			{
            	DestroyObject(light[vehicleid]);
                Lamp[vehicleid] = 0;
                SendClientMessageEx(playerid, -1, "Luces desactivadas correctamente.");
                return 1;
			}
		}
		else return SendClientMessageEx(playerid, -1, "Debes estar en un vehiculo.");
	}
	else SendClientMessageEx(playerid, -1, "No puedes usar este comando (No eres Agente).");
	return 1;
}
/*zcmd(reiniciarservidor, playerid, params[])
{
	new string[64];
	if(Info[playerid][pAdminZC] == 6000)
	{
		format(string, sizeof(string), "[AdmCmdExe]: %s está reiniciando el servidor", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL, string, 2);
		RestartTimer();
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
	return 1;
}*/
CMD:reiniciarservidor(playerid, params[]) {
    if(Info[playerid][pAdminZC] >= 6000) { SafeDialogEx(playerid, DIALOG_GMX, DIALOG_STYLE_MSGBOX, "Reiniciar Servidor", "Por favor confirmar si tú verdaderamente quieres reiniciar el servidor?", "Si", "No"); }
    return 1;
}
zcmd(forzarpayday, playerid, params[])
{
	new string[64];
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] > 1338)
	{
		format(string, sizeof(string), "[AdmCmdExe]: %s adelantó el PayDay.", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL, string, 2);
		PayDay();
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
	return 1;
}
zcmd(forzarpayday2, playerid, params[])
{
	new string[80];
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] > 1338)
	{
	    format(string, sizeof(string), "[AdmCmdExe]: %s adelantó el PayDay de negocios. [Online y Offline]", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL, string, 2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[AVISO]: Usaste /payday2. El sistema se volvió a poner en 120 minutos.");
		PayDay2();
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
	return 1;
}
zcmd(crear, playerid, params[])
{
	if (Info[playerid][pJob] != 12 && Info[playerid][pJob2] != 12) return SendClientMessageEx(playerid,COLOR_WHITE,"No eres un Artesando.");
	if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes hacer esto en la prisión.");
	new string[128];
	if (GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		format(string, sizeof(string), "Debes esperar %d segundo después de haber fabricado algo.", GetPVarInt(playerid, "ArmsTimer"));
		SendClientMessageEx(playerid,COLOR_WHITE,string);
		return 1;
	}
    if(GetPVarInt(playerid,"Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estás herido.");
	new giveplayerid, choice[32], weapon, price;
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_YELLOW, ">> Nombres Disponibles <<");
		SendClientMessageEx(playerid, COLOR_GRAD1, "Camara(450)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "Botiquin(200)	 Paracaídas(50)");
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /crear (playerid) (nombre)");
		return 1;
	}
	 if(strcmp(choice,"camara",true) == 0){
		if(Info[playerid][pMats] >= 450){
			Info[playerid][pMats] -= 450;
			weapon = 2;
		}
		else return SendClientMessageEx(playerid,COLOR_WHITE,"No tienes suficientes materiales para crear esto.");
	}
	else if(strcmp(choice,"hpsave",true) == 0){
		if(Info[playerid][pMats] >= 200){
			Info[playerid][pMats] -= 200;
			weapon = 3;
		}
		else return SendClientMessageEx(playerid,COLOR_WHITE,"No tienes suficientes materiales para crear esto.");
	}
	else if(strcmp(choice,"paracaidas",true) == 0){
		if(Info[playerid][pMats] >= 50){
		Info[playerid][pMats] -= 50;
			price = 50;
			weapon = 4;
		}
		else return SendClientMessageEx(playerid,COLOR_GREY,"No tienes suficientes materiales para crear esto.");
	}
	else { SendClientMessageEx(playerid,COLOR_WHITE,"Nombre inválido."); return 1; }
	if (ProxDetectorS(5.0, playerid, giveplayerid)){
		if(giveplayerid == playerid){
			format(string, sizeof(string), "Te has dado un %s.", choice);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessageEx(playerid, COLOR_GRAD1, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		switch( Info[playerid][pSex] ){
			case 1: format(string, sizeof(string), "* %s crea algo de materiales y se lo da a él mismo.", GetPlayerNameEx(playerid));
			default: format(string, sizeof(string), "* %s crea algo de materiales y se lo da a ella misma.", GetPlayerNameEx(playerid));
		}
		switch(weapon){
			case 1:{
				Info[playerid][pScrewdriver]++;
				return SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/creararma");
			}
			case 2:{
				Info[playerid][pSurveillance]++;
				return SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/ponercam /quitarcam /vercam");
			}
			case 3:{
				Info[playerid][pFirstaid]++;
				return SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/hpsave");
			}
			case 4:{
				return GivePlayerValidWeapon(playerid, 46);
			}
		}
		format(string, sizeof(string), "* Has ofrecido a %s una %s.", GetPlayerNameEx(giveplayerid), choice);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Artesano %s quiere venderte una %s. (Usa /aceptar objeto para recibirlo)", GetPlayerNameEx(playerid), choice);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		CraftOffer[giveplayerid] = playerid;
		CraftId[giveplayerid] = weapon;
		CraftMats[giveplayerid] = price;
		format(CraftName[giveplayerid], 50, "%s", choice);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no está cerca tuyo.");
	return 1;
}
CMD:inventario(playerid, params[]){
    new str[98];
    SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
	SendClientMessageEx(playerid, COLOR_YELLOW, "Inventario");
	format(str, sizeof(str), "Desarmadores: %d (4)", Info[playerid][pScrewdriver]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "HP Save: %d (/hpsave)", Info[playerid][pFirstaid]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Cámara Oculta: %d  (/ponercam /quitarcam /vercam)", Info[playerid][pSurveillance]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	return 1;
}
CMD:hpsave(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la arena.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar esto ahora mismo.");
	if(Info[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			new string[128];
			Info[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
			format(string, sizeof(string), "* %s usa su kit de primeros auxilos [HP Save].", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar el HP Save en este momento.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes HP Save.");
	return 1;
}
CMD:ponercam(playerid, params[])
{
	if(Info[playerid][pSurveillance] > 0)
	{
		if(GetPVarInt(playerid, "cameraactive") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Espera que tu otra cámara expire.");
		new string[128];
		Info[playerid][pSurveillance]--;
		SendClientMessageEx(playerid, COLOR_WHITE, "Pusiste tu camara, marchate y después usa /vercam. Duración de Baterias: 2 Minutos.");
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPVarInt(playerid, "cameraactive", 1);
		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		Camera3D[playerid] = CreateDynamic3DTextLabel("** Una cámara pequeña **",COLOR_WHITE,X,Y,Z,4.0);
		SetPVarFloat(playerid, "cameraX", X);
		SetPVarFloat(playerid, "cameraY", Y);
		SetPVarFloat(playerid, "cameraZ", Z);
		SetPVarInt(playerid, "cameravw", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "cameraint", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "cameraexpire", SetTimerEx("cameraexpire", 120000, 0, "d", playerid));
		format(string, sizeof(string), "* %s pone algo en el suelo.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una cámara oculta.");
	return 1;
}
CMD:quitarcam(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
		}
		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cámara destruida.");
		KillTimer(GetPVarInt(playerid, "cameraexpire"));
		DeletePVar(playerid, "cameraexpire");
		DeletePVar(playerid, "cameraactive");
		DeletePVar(playerid, "camerasc");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No hay nada para destruir.");
	return 1;
}
CMD:vercam(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
	    if(GetPVarInt(playerid,"Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estas herido.");
		new string[128];
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
			DeletePVar(playerid, "camerasc");
			KillTimer(GetPVarInt(playerid, "cameraexpire"));
		}
		else
		{
			format(string, sizeof(string), "* %s mira mediante una pantalla.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "La cámara va a caducar en un máximo de 2 minutos. (( %s ))", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "cameraX2", X);
			SetPVarFloat(playerid, "cameraY2", Y);
			SetPVarFloat(playerid, "cameraZ2", Z);
			SetPVarInt(playerid, "cameravw2", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "cameraint2", GetPlayerInterior(playerid));

			TogglePlayerControllable(playerid,0);
			SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") - 30.0);
			SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") + 20.0); //viewcam on
			SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint"));
			SetPVarInt(playerid, "camerasc", 1);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una cámara activa.");
	return 1;
}
zcmd(peaje, playerid, params[])
{
if(IsPlayerInRangeOfPoint(playerid,15.0,66.34, -1537.61, 4.94))
{
if(GetPlayerMoney(playerid) > 50)
{
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
MoveDynamicObject(peaje2,67.8501, -1545.8888, 0.7158, 2.0);
SetTimer("GateClosepeaje2", 7000, 0);
GivePlayerMoney(playerid,-50); /// -50 Es El Precio Al Abrir El Peaje
GameTextForPlayer(playerid,"~w~INFRANET-RP ~g~Te da la bienvenida a los Santos",3000,5);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"No estas en un vehiculo o no eres conductor.");
}
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"No tienes suficiente dinero.");
}
}
else if(IsPlayerInRangeOfPoint(playerid,15.0,37.75, -1525.50, 4.94))
{
if(GetPlayerMoney(playerid) > 50)
{
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
MoveDynamicObject(peaje1,35.2573, -1516.9640, 0.9605, 2.0);
SetTimer("GateClosepeaje1", 7000, 0);
GivePlayerMoney(playerid,-50); /// -50 Es El Precio Al Abrir El Peaje
GameTextForPlayer(playerid,"~w~INFRANET-RP ~g~Te da la bienvenida a San Fierro",3000,5);
PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"No estas en un vehiculo o no eres conductor.");
}
}
else
{
SendClientMessage(playerid,COLOR_WHITE,"No tienes suficiente dinero.");
}
}
return 1;
}

zcmd(activarbanco, playerid, params[])
{
if(AdminDuty[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF}Tienes que estar en servicio (/adminduty)");
if(Info[playerid][pAdminZC] >= 6)
{
if(Banco_Activo == 0)
{
Banco_Activo = 1;
SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ADM]:{FF0000} Activaste el robo al banco (Al final de rol desactivarlo (/activarbanco).");
}
else if(Banco_Activo == 1)
{
Banco_Activo = 0;
SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ADM]:{FF0000} Robo al Banco desactivado.");
}
}
return 1;
}
zcmd(tiendacash, playerid, params[])
	{
	if(Info[playerid][pPTR] > 0)
	{
	SafeDialogEx(playerid, Tienda_OOC, DIALOG_STYLE_LIST, "{00F70C}Tienda Cash INFRANET-RP", "Sacar 200.000$ - [150 Fichas Cash]\nSacar 60.000$ - [50 Fichas Cash]\nSacar 26.000$ - [25 Fichas Cash]\nSacar 10.000$ - [10 Fichas Cash]\nSacar 5.000$ - [5 Fichas Cash]", "Canjear", "Cancelar");
	return 1;
	} else SendClientMessageEx(playerid, COLOR_WHITE, " No tienes punto de rol! ");
	return 1;
	}
zcmd(darfichascash, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] < 1338 ) return SendClientMessage(playerid, COLOR_YELLOW,"{FFFF00}[ADM]:{FF0000} No eres el encargado de esto ó no eres admin");

	if(!sscanf(params, "di", params[0], params[1]))
	{
	if(IsPlayerConnected(params[0]))
	{
	new string[400];
	{
    Info[params[0]][pPTR] += params[1];
	format(string, sizeof(string), "[AdmCmd]: %s {FFFFFF}ha dado {FF0000}%d{FFFFFF} Fichas Cash a {FF0000}%s",GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
	ABroadCast(COLOR_GENERAL,string,1);
	}
	} else SendClientMessageEx(playerid, COLOR_WHITE, " Jugador no conectado.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /darfichascash (ID) (Cantidad)");
	return 1;
	}

	zcmd(quitarfichascash, playerid, params[])
	{
	if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] <= 1338) return SendClientMessageEx(playerid, COLOR_YELLOW,"{FFFF00}[ADM]:{FF0000} No eres el encargado de esto ó no eres admin");
	if(!sscanf(params, "di", params[0], params[1]))
	{
	if(IsPlayerConnected(params[0]))
	{
	new string[250];
	{
	Info[params[0]][pPTR] -= params[1];
	format(string, sizeof(string), "[AdmCmd]: %s {FFFFFF}ha quitado {FF0000}%d{FFFFFF} Fichas Cash a %s ",GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
	ABroadCast(COLOR_GENERAL,string,1);
	}
	} else SendClientMessageEx(playerid, COLOR_WHITE, " Jugador no conectado.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "USO: /quitarfichascash (ID) (Cantidad)");
	return 1;
	}

CMD:buscartrabajo(playerid,params[]) return SafeDialogEx(playerid, JOBFINDMENU, DIALOG_STYLE_LIST, "{00F70C}Buscar Trabajos","Bartender\nPizzero\nCamionero\nVendedor de moviles\nTaxista\nJardinero\nLeñador\nVendedor de armas\nVendedor de drogas\nTraficante de drogas\nChofer de viajes\nGranjero\nVendedor de chalecos\nArtesano\nHeladero\nTrenero\nPiloto", "Ok", "Cancelar");

	CMD:contrato(playerid, params[])
	{
		if (PlayerToPoint(100, playerid,1407.7058,-1307.4529,9.0442)){
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto ahora.");
		if(Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No puedes hacer esto estando en la carcel.");

		new string[128], giveplayerid, moneys, detail[32];
		if(sscanf(params, "dds[32]", giveplayerid, moneys, detail)) return SendClientMessageEx(playerid, COLOR_WHITE, "USO: /contrato [ID] [Monto] [Detalles]");

		if( moneys < 2000 || moneys > 1000000)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} No se puede hacer contratos de menos de $ 2000 o más de $ 1.000.000");
			return 1;
		}
		else if((moneys < 20000 || moneys > 1000000) && IsACop(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} La cantidad de dinero mínimo para un agente es de $ 20.000");
			return 1;
		}
		if(Info[playerid][pLevel] < 3)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}HITMAN:{FFFFFF} Debes ser el nivel 3 para hacer un contrato.");
			return 1;
		}
		if(Info[giveplayerid][pConnectTime] < 2)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}HITMAN:{FFFFFF} No se puede hacer contratos a los jugadores con menos de 2 horas de juego.");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if(Hitman(giveplayerid))
			{
				SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} No se puede poner un contrato a un Hitman." );
			}
			else
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if( moneys >= 1000001 )
					{
						SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} El precio máximo del contrato es de $ 1.000.000!" );
						return 1;
					}

					if( Info[giveplayerid][pHead] >= 1000000 )
					{
						SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Ese jugador ya tiene un contrato maximo." );
						return 1;
					}
					if(moneys + Info[giveplayerid][pHead] >= 1000001 )
     				{
						SendClientMessageEx( playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Ese jugador ya tiene un contrato maximo." );
						return 1;
					}

					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} No te puedes hacer un contrato."); return 1; }
					new playermoney = GetPlayerCash(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						if(strlen(detail) > 32) return SendClientMessageEx(playerid, COLOR_GRAD1, "{A2DC35}[INFO]:{FFFFFF} Los detalles del contrato no podrá ser superior a 32 carácteres.");
						GivePlayerCash(playerid, (0 - moneys));
						Info[giveplayerid][pHead]+=moneys;
						strmid(Info[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
						strmid(Info[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);
						format(string, sizeof(string), "%s ha hecho un contrato: Matar a %s por $%d, detalles: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
						SendFamilyMessage(17, COLOR_YELLOW, string);
						format(string, sizeof(string), "* Has hecho un contrato: Matar a %s for $%d, detalles: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						new year, month,day;
						new hour,minuite,second;
						getdate(year, month, day);
						gettime(hour,minuite,second);
						format(string, sizeof(string), "<< %s hizó un contrato: Matar a %s por $%d, detalles: %s (%d-%d-%d)(%d:%d) >>",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail,month,day,year,hour,minuite);
						Log("LOGS/contracts.log", string);
						format(string, sizeof(string), "%s hizó un contrato: Matar a %s por $%d, detalles: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
						ABroadCast(COLOR_YELLOW,string,4);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} No tienes dinero para esto.");
					}
				}
			}
		}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Jugador especificado inválido.");
		return 1;
	}

	    zcmd(acontrato, playerid, params[])
    {
		new string[256];
    	if(HitOffer[playerid] < 999)
		{
			if(HitToGet[playerid] < 999)
			{
            	if(IsPlayerConnected(HitToGet[playerid]))
				{
                	format(string, sizeof(string), "* %s aceptó el contrato para matar a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                    SendClientMessageEx(HitOffer[playerid], COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Aceptaste el contrato para matar a %s, recibirás $%d cuando completes la misión.", GetPlayerNameEx(HitToGet[playerid]), Info[HitToGet[playerid]][pHead] / 4 * 2);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "%s se le ha asignado un contrato a %s, por $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  Info[HitToGet[playerid]][pHead] / 4 * 2);
                    SendFamilyMessage(8, COLOR_YELLOW, string);
                    GoChase[playerid] = HitToGet[playerid];
                    GetChased[HitToGet[playerid]] = playerid;
                    GotHit[HitToGet[playerid]] = 1;
                    HitToGet[playerid] = 999;
                    HitOffer[playerid] = 999;
                    return 1;
				}
				else
				{
					HitToGet[playerid] = 999;
                    HitOffer[playerid] = 999;
                    return 1;
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Nadie te ha ofrecido un contrato!");
                return 1;
            }
    	}
    	return 1;
    }
	CMD:hrangos(playerid, params[])
	{
		if (!Hitman(playerid) && Info[playerid][pAdminZC] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No eres de la agencia Hitman!");
		SendClientMessageEx(playerid, COLOR_WHITE, "{5ABAFF}|__________________ Rangos __________________|");

		new string[128];
		foreach(Player, i)
		{
			if(Hitman(i))
			{
				if( GoChase[playerid] == 999 )
				{
					format(string, sizeof(string), "* Nombre: %s | Rango %d | Hits Completados: %d | Hits Fallados: %d", GetPlayerNameEx(i),Info[i][pRank], Info[i][pCHits], Info[i][pFHits]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else
				{
					format(string, sizeof(string), "* Nombre: %s | Rango %d | Hits Completados: %d | Hits Fallados: %d | Siguiendo: %s", GetPlayerNameEx(i),Info[i][pRank], Info[i][pCHits], Info[i][pFHits], GetPlayerNameEx(GoChase[i]));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
		return 1;
	}
	CMD:darhit(playerid, params[])
	{
		if(Hitman(playerid))
		{
			if(Info[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Sólo rangos 4 y superiores pueden asignar contactos a la gente!");
				return 1;
			}

			new string[128], giveplayerid, targetid;
			if(sscanf(params, "dd", giveplayerid, targetid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darhit [playerid] [ID de Objetivo]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(GoChase[giveplayerid] < 999)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Ese hitman ya está ocupado con otro contrato!");
					return 1;
				}
				if(GotHit[targetid] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}HITMAN:{FFFFFF} Otro asesino ya fue asignado ese contrato!");
					return 1;
				}
				if(IsPlayerConnected(targetid))
				{
					if(Info[targetid][pHead] == 0)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "{A2DC35}[INFO]:{FFFFFF} Ese objetivo no tiene un contrato con la agencia!");
						return 1;
					}

					format(string, sizeof(string), "* Ofreciste %s un contrato para matar a %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Hitman %s te ofreció un contrato para matar a %s (Usa /acontrato), para aceptarlo.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					HitOffer[giveplayerid] = playerid;
					HitToGet[giveplayerid] = targetid;
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} La persona contratada no está en línea, utiliza /contratos!");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Ese hitman no está online");
				return 1;
			}
		}
		return 1;
	}
	CMD:borrarhit(playerid, params[])
	{
		if( Info[playerid][pAdminZC] >= 1 || Hitman(playerid) && Info[playerid][pRank] >= 1)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /deletehit [playerid]");

			if(!IsPlayerConnected(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} Jugador no está online.");
				return 1;
			}

			if(Info[giveplayerid][pHead] >= 1 )
			{
				Info[giveplayerid][pHead] = 0;
				new year, month,day;
				getdate(year, month, day);
				format(string, sizeof(string), "<< %s has removido el contrato de %s(%d-%d-%d) >>", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), month,day,year);
				Log("LOGS/contracts.log", string);
				format(string, sizeof(string), "Has removido el contrato por la cabeza de %s.", GetPlayerNameEx(giveplayerid) );
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				GoChase[giveplayerid] = 999;

				foreach(Player, i)
				{
					if( HitToGet[i] == giveplayerid )
					{
						HitToGet[i] = 999;
						HitOffer[i] = 999;
					}
				}
			}
			else
			{
				SendClientMessageEx( playerid, COLOR_GREY, "{FFFF00}[ERROR]:{FFFFFF} No hay un contrato activo en ese jugador!" );
			}
		}
		return 1;
	}
	zcmd(amascara, playerid, params[]){
        if(Info[playerid][pMask] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, " Ya tienes una máscara.");
        if(Hitman(playerid)){
	    	if(PlayerToPoint(5, playerid, 1107,-323,68.66)){
            	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Cogiste una máscara, /mascara para ponertela.");
            	Info[playerid][pMask] = 1;
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No eres Hitman.");
		return 1;
	}
    zcmd(hits, playerid, params[])
    {
        if(Hitman(playerid)) SearchingHit(playerid);
		else SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando.");
        return 1;
    }
    CMD:tarma(playerid, params[]) //By Valentin
	{
	if(GetPVarInt(playerid, "IsInArena") >= 1) return SendClientMessageEx(playerid, COLOR_WHITE,"{5ABAFF}PAINTBALL:{5ABAFF} No puedes hacer esto en el paintball");
	else
 	{
 	    if(tarmalimit[playerid] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[INFO]:{FFFFFF} Espera 60 segundos para tirar otra arma.");
		new gunID = GetPlayerWeapon(playerid);
		if(gunID != 0)
		{
			new f = MAX_ARMAS+1;
			for(new a = 0; a < sizeof(ObjCoords); a++)
			{
				if(ObjCoords[a][0] == 0.0)
				{
					f = a;
					break;
				}
			}
			if(f > MAX_ARMAS) return SendClientMessage(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No puede tirar armas en éste momento, intenta más tarde."); // Éste mensaje aparece si se superó el límite [MAX_ARMAS]
		    new gunname[25];
		    new string[100];
			GetWeaponName(gunID, gunname, sizeof(gunname));
			format(string, sizeof(string), "* %s tira al suelo un %s.", GetPlayerNameEx(playerid), gunname);
			tarmalimit[playerid] = 60;
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, gunID);
			ObjectID[f][0] = gunID;
	        GetPlayerPos(playerid, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]);
	        Object[f] = CreateDynamicObject(GunObjects[gunID][0],ObjCoords[f][0],ObjCoords[f][1],ObjCoords[f][2]-1,93.7,120.0,120.0);
		}
	}
 	return 1;
}


CMD:rarma(playerid, params[])
 {
 if(GetPVarInt(playerid, "IsInArena") >= 1) return SendClientMessageEx(playerid, COLOR_WHITE,"{5ABAFF}PAINTBALL:{5ABAFF} No puedes hacer esto en el paintball");

 else
 {
  new f = MAX_ARMAS+1;
  for(new a = 0; a < sizeof(ObjCoords); a++)
  {
   if(IsPlayerInRangeOfPoint(playerid, 5.0, ObjCoords[a][0], ObjCoords[a][1], ObjCoords[a][2]))
   {
    f = a;
    break;
   }
  }
  if(f > MAX_ARMAS) return SendClientMessage(playerid, 0x33AA3300, "{FFFF00}[ERROR]:{FFFFFF} No estás cerca de ningún arma.");
  else
  {
      new gunname[25];
      new string[100];

   ObjCoords[f][0] = 0.0;
   ObjCoords[f][1] = 0.0;
   ObjCoords[f][2] = 0.0;

   DestroyDynamicObject(Object[f]);
   GivePlayerValidWeapon(playerid, ObjectID[f][0]);
   GetWeaponName(ObjectID[f][0], gunname, sizeof(gunname));
   format(string, sizeof(string), "* %s recoge del suelo %s.", GetPlayerNameEx(playerid), gunname);
   ProxDetector(30.0, playerid, string,

COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  }
 }
 return 1;
}
 zcmd(qfaccoff, playerid, params[])
	{
		if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pFactionModerator] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado");
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /qfaccoff [Nombre_Apellido]");
  		if(INI_Exist(params))
		{
			new PlayerFile[MAX_PLAYER_NAME + 302];
	    	format( PlayerFile , sizeof PlayerFile, USERFILE, params);
	    	new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
	    	INI_WriteInt(File,"Leader",0);
        	INI_WriteInt(File,"Member",0);
        	INI_WriteInt(File,"Rank",0);
    		INI_Close(File);
           	format(string, sizeof(string), "{FFFF00}[AdmCmd]:{FF0000} %s quitó la facción a %s (CMD OFFLINE)", GetPlayerNameEx(playerid), params);
           	ABroadCast(COLOR_ORANGE,string,4);
           	Log("LOGS/admin.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "{FFFF00}[ERROR]:{FFFFFF} Está cuenta no existe.");
		return 1;
	}

    zcmd(boombox, playerid, params[])
	{
	new string[300];
	if(IsPlayerConnected(playerid))
	{
		new Float:BBCoord[4];
		GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
		GetPlayerFacingAngle(playerid, BBCoord[3]);
		SetPVarFloat(playerid, "BBX", BBCoord[0]);
		SetPVarFloat(playerid, "BBY", BBCoord[1]);
		SetPVarFloat(playerid, "BBZ", BBCoord[2]);
		BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
		BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
		BBCoord[2] -= 1.0;
		if(Info[playerid][pBoombox] == 0) return SendClientMessage(playerid, COLOR_WHITE, "* No tienes una boombox, puedes comprarla en cualquier 24-7.");
		if(GetPVarInt(playerid, "PlacedBB")) return SendClientMessage(playerid, COLOR_WHITE, "* Utiliza /cboombox para cambiar la emisora de la boombox y /qboombox para recoger la boombox del suelo y guardarla.");
		foreach(Player, i)
		{
			if(GetPVarType(i, "PlacedBB"))
			{
				if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
				{
					SendClientMessage(playerid, COLOR_WHITE, "* No puedes colocar tu boombox aquí, ya hay una colocada cerca de donde estás.");
					return 1;
				}
			}
		}
		SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2226, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		format(string, sizeof(string), "[%d]\n",playerid);
		SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Has colocado tu boombox. Comandos: /cboombox y /qboombox.");
	}
	return 1;
}

zcmd(cboombox, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPVarType(playerid, "PlacedBB"))
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
			{
				ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"{00F70C}Lista de emisoras","Jazz\nPop\nRap\nR&B and Urban\nRock\nReggaeton\nURL streaming\nApagar la Boombox","Select", "Cancel");
			}
			else
			{
				return SendClientMessage(playerid, COLOR_WHITE, "* No estás cerca de tu boombox");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "* No has colocado ninguna boombox");
		}
	}
	return 1;
}

zcmd(qboombox, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(!GetPVarInt(playerid, "PlacedBB"))
		{
			SendClientMessage(playerid, COLOR_WHITE, "* No has colocado ninguna boombox");
		}
		if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
		{
			PickUpBoombox(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "* Has cogido tu boombox del suelo");
		}
	}
	return 1;
}
	zcmd(creditos, playerid, params[])
	{
	new iString[1000];
	strcat(iString, "{FF8400}Dueños del Servidor:\n");
    strcat(iString, "{00FF00} Alexey_Kozlov -  Juan_Ruiz.\n");
    strcat(iString, "\n");
   	strcat(iString, "{FF8400}Encargados de facciones y familias:\n");
   	strcat(iString, "{00FF00} Puesto Vacio (Enc. Faccs Legales).\n");
   	strcat(iString, "{00FF00} Pueseto Vacio (Enc. Faccs Ilegales).\n");
    strcat(iString, "{00FF00} Puesto Vacio (Enc. Fams).\n");
	strcat(iString, "\n");
	strcat(iString, "{FF8400}Encargado técnico:\n");
    strcat(iString, "{00FF00} Alexey_Kozlov -  Juan_Ruiz.\n");
	strcat(iString, "\n");
    strcat(iString, "{FF8400}WebMasters\n");
    strcat(iString, "{00FF00} Puesto Vacio.\n");
    strcat(iString, "\n");
    strcat(iString, "{FF8400}Mappers:\n");
    strcat(iString, "{00FF00} Alexey_Kozlov -  Juan_Ruiz.\n");
    strcat(iString, "\n");
    strcat(iString, "{FF8400}Publicistas:\n");
    strcat(iString, "{00FF00} Puesto Vacio.\n");
    strcat(iString, "\n");
    strcat(iString, "{FF8400}Creador del Servidor/GM (Actividad 2.1):\n");
    strcat(iString, "{00FF00} Stil Marley - Tony Zill.\n");
	strcat(iString, "\n");
	strcat(iString, "{FF8400}Actualizacion de GM Actividad RP a New State\n");
    strcat(iString, "{00FF00}Rai_Salazar - Jack_Blackstorm.\n");
    strcat(iString, "\n");
    strcat(iString, "{FF8400}Foro Oficial:\n");
    strcat(iString, "{00FF00}www.infranet.foroactivo.com.\n");
    strcat(iString, "\n");
    strcat(iString, "{FFFFFF} INFRANET-RP © Todos los Derechos Reservados 2018 V1.0\n");
    ShowPlayerDialog(playerid, 1111, DIALOG_STYLE_MSGBOX, "{FF8400}INFRANET-RP - Creditos", iString, "Aceptar", "");
    return 1;
	}
	CMD:recibirstats(playerid, params[]) // Stats de inicio.
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "{A2DC35}[Stats de Inicio]:{FFFFFF} Los stats de inicio actuales es Nivel 2, 50 mil dólares y 2 Puntos de rol." );
	    return 1;
	}
	CMD:macros(playerid, params[]) // Stats de inicio.
	{
	    SendClientMessageEx(playerid, -1, "{F3EB00}     [{FFFFFF}Macros Automaticos{F3EB00}]");
	    SendClientMessageEx(playerid, -1, " ");
        SendClientMessageEx(playerid, -1, "{F3EB00}[»]{FFFFFF} Sacar arma liviana - {FFFFFF}/1");
        SendClientMessageEx(playerid, -1, "{F3EB00}[»]{FFFFFF} Guardar arma liviana - {FFFFFF}/2");
        SendClientMessageEx(playerid, -1, "{F3EB00}[»]{FFFFFF} Sacar arma pesada - {FFFFFF}/3");
        SendClientMessageEx(playerid, -1, "{F3EB00}[»]{FFFFFF} Guardar arma pesada - {FFFFFF}/4");
        SendClientMessageEx(playerid, -1, "{F3EB00}[»]{FFFFFF} Rol de choque - {FFFFFF}/choque");
	    return 1;
	}
	CMD:ppersona(playerid, params[])
	{
	 if(camaraon[playerid] == 1)
	  {
        camaraon[playerid] = 1;
		SendClientMessage(playerid, -1, "{9ACD32}[INFRANET ROLPLAY]: {00CED3}Has cambiado la cámara a primera persona.");
		AttachObjectToPlayer(FPS[playerid], playerid, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
		AttachCameraToObject(playerid, FPS[playerid]);
	  }
	else if(camaraon[playerid] == 0)
	  {
	    camaraon[playerid] = 0;
        SendClientMessage(playerid, -1, "{9ACD32}[INFRANET ROLEPLAY]: {00CED3}Has cambiado la cámara a la normal.");
		SetCameraBehindPlayer(playerid);
      }
	return 1;
	}
	CMD:nocanal(playerid, params[])
    {
       if(Info[playerid][pAdminZC] >= 2 ||Info[playerid][pHelper] >= 1)
       {
          if (!nonewbie){
             nonewbie = 1;
             BroadCast(COLOR_GENERAL, "CMD: El canal de ayuda fue deshabilitado por un administrador/ayudante.");
          }
          else{
             nonewbie = 0;
             BroadCast(COLOR_GENERAL, "CMD: El canal de ayuda fue habilitado por un administrador/ayudante.");
          }
       }
       else return SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes usar este comando.");
       return 1;
    }
	CMD:n(playerid, params[])
  	{
  	if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logeado correctamente.");
  	if(Info[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en el tutorial.");
  	if ((nonewbie) && Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "El canal de ayuda está desactivado por un administrador.");
  	if(Info[playerid][pNMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás silenciado del canal de ayuda, intentalo mas tarde.");
  	new string[128];
  	if(NewbieTimer[playerid] > 0)
  	{
		format(string, sizeof(string), "Debes esperar %d segundos para volver a hablar por el canal de ayuda.", NewbieTimer[playerid]);
     	SendClientMessageEx(playerid, COLOR_GREY, string);
     	return 1;
  	}
  	if(gNewbie[playerid]==1) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes el canal apagado, /togduda para re-habilitarlo!");
  	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /n (Texto).");
  	if(isnumeric(params)) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: No se puede enviar números por este canal.");
  	if(strlen(params) > 70) return Message(playerid, COLOR_GRAD2, "!Tienes que reducir el número de carácteres, texto demasiado largo!");
  	if(Info[playerid][pHelper]<1 && Info[playerid][pAdminZC]<1)
  	{
    new IP[32], AvisoNew[132];
	GetPlayerIp(playerid,IP,sizeof(IP));
  	if(Info[playerid][pLevel] <= 3)
  	{
  	    if(strfind(params, "Puta", true) != -1){HaceAbuso[playerid] = 1;}    		if(strfind(params, "Asco", true) != -1){HaceAbuso[playerid] = 2;}
  		if(strfind(params, "7777", true) != -1){HaceAbuso[playerid] = 3;}    		if(strfind(params, "Pelotud", true) != -1){HaceAbuso[playerid] = 4;}
   		if(strfind(params, "Putos", true) != -1){HaceAbuso[playerid] = 5;}    		if(strfind(params, "Mierda", true) != -1){HaceAbuso[playerid] = 6;}
    	if(strfind(params, "Gay", true) != -1){HaceAbuso[playerid] = 7;}    		if(strfind(params, "Adoking", true) != -1){HaceAbuso[playerid] = 8;}
    	if(strfind(params, "California", true) != -1){HaceAbuso[playerid] = 9;}    	if(strfind(params, "Fenix", true) != -1){HaceAbuso[playerid] = 10;}
    	if(strfind(params, "Zenon", true) != -1){HaceAbuso[playerid] = 11;}  		if(strfind(params, "Actividad R", true) != -1){HaceAbuso[playerid] = 12;}
    	if(HaceAbuso[playerid] > 0)
    	{
    		format(string, sizeof(string), "[AntiSpam: /new]: {FFFFFF}((%s intentó poner: %s )).", GetPlayerNameEx(playerid),params);
 			ABroadCast(COLOR_RED, string, 2);
    		return AutoJailAbuso(playerid); // Si usuarios nivel 2 y 3 hacen SPAM, recibirán castigo. Mal uso del /n.
    	}
  		format(string, sizeof(string), "[NEW] (( Nuevo [Nivel:%d] %s:{FFFFFF} %s {B1C8FB})).", Info[playerid][pLevel],GetPlayerNameEx(playerid), params);
  		NewbieTimer[playerid] = 60;
  		format(AvisoNew, sizeof(AvisoNew), "[INFO] %s - ID (%d) - Horas jugadas (%d) - IP (%s)", GetPlayerNameEx(playerid), playerid, Info[playerid][pConnectTime], IP);
 		SendAdvisorMessage(COLOR_CMDAA, AvisoNew);
  	}
  	else if(Info[playerid][pLevel] > 9)
  	{
  		format(string, sizeof(string), "[NEW] (( Experto [Nivel:%d] %s:{FFFFFF} %s {B1C8FB})).", Info[playerid][pLevel],GetPlayerNameEx(playerid), params);
  		NewbieTimer[playerid] = 30;
  		/*format(AvisoNew, sizeof(AvisoNew), "[INFO] ID (%d) - Horas jugadas (%d) - IP (%d)", playerid, Info[playerid][pConnectTime], IP);
 		SendAdvisorMessage(COLOR_CMDAA, AvisoNew);*/
  	}
  	else
  	{
  		format(string, sizeof(string), "[NEW] (( User [Nivel:%d] %s:{FFFFFF} %s {B1C8FB})).", Info[playerid][pLevel],GetPlayerNameEx(playerid), params);
  		NewbieTimer[playerid] = 60;
  		/*format(AvisoNew, sizeof(AvisoNew), "[INFO] ID (%d) - Horas jugadas (%d) - IP (%d)", playerid, Info[playerid][pConnectTime], IP);
 		SendAdvisorMessage(COLOR_CMDAA, AvisoNew);*/
  	}
  }
  if(Info[playerid][pAdminZC] >= 1)
  {
     if(Info[playerid][pAdminZC] >= 4)
  	{
     	format(string, sizeof(string), "[NEW] (( Admin [ID:%d] %s:{FFFFFF} %s {B1C8FB})).",playerid, GetPlayerNameEx(playerid), params);
     	NewbieTimer[playerid] = 5;
  	}
	else
	{
     	format(string, sizeof(string), "[NEW] (( Moderador [ID:%d] %s:{FFFFFF} %s {B1C8FB})).",playerid, GetPlayerNameEx(playerid), params);
     	NewbieTimer[playerid] = 15;
	}
  }
  if(Info[playerid][pHelper] >= 1)
  {
     format(string, sizeof(string), "[NEW] (( Ayudante [ID:%d] %s:{FFFFFF} %s {B1C8FB})).",playerid, GetPlayerNameEx(playerid), params);
     NewbieTimer[playerid] = 10;
  }
  foreach(Player, n)
  {
     if (gNewbie[n] == 0)
     {
        SendClientMessageEx(n, COLOR_NEWBIE, string);
     }
  }
  return 1;
}
/*CMD:n(playerid, params[])
{
  if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logeado correctamente.");
  if(Info[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en el tutorial.");
  if ((nonewbie) && Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "El canal de ayuda está desactivado por un administrador.");
  if(Info[playerid][pNMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás silenciado del canal de ayuda, intentalo mas tarde.");
  if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF} No puedes usar este Comando mientras estás en Prisión.");
  new string[128];
  if(NewbieTimer[playerid] > 0)
  {
     format(string, sizeof(string), "Debes esperar %d segundos para volver a hablar por el canal de ayuda.", NewbieTimer[playerid]);
     SendClientMessageEx(playerid, COLOR_GREY, string);
     return 1;
  }
  if(gNewbie[playerid]==1) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes el canal apagado, /togduda para re-habilitarlo!");
  if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /n (Texto)");
   if(isnumeric(params)) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: No se puede enviar números por este canal.");
  if(Info[playerid][pHelper]<1 && Info[playerid][pAdminZC] < 2)
  {
     NewbieTimer[playerid] = 60;
  }
  else if(Info[playerid][pHelper]==1&&Info[playerid][pAdminZC] < 2)
  {
     NewbieTimer[playerid] = 15;
  }
  else if(Info[playerid][pAdminZC] == 2)
  {
     NewbieTimer[playerid] = 15;
  }
  else if(Info[playerid][pHelper] >= 2 && Info[playerid][pAdminZC] < 2)
  {
     NewbieTimer[playerid] = 10;
  }
  if(Info[playerid][pHelper]<1&&Info[playerid][pAdminZC]<1)
  {
     format(string, sizeof(string), "{0082D0}[/n] [Nivel %d] %s(%d): {FFFFFF}%s]", Info[playerid][pLevel],GetPlayerNameEx(playerid),playerid, params);
  }
  if(Info[playerid][pHelper] >= 1)
  {
     format(string, sizeof(string), "{0082D0}[/n] [Ayudante] %s(%d): {FFFFFF}%s]", GetPlayerNameEx(playerid),playerid, params);
  }
  if(Info[playerid][pAdminZC] == 2)
  {
     format(string, sizeof(string), "{0082D0}[/n] [Moderador] %s(%d): {FFFFFF}%s]", GetPlayerNameEx(playerid),playerid, params);
  }
  if(Info[playerid][pAdminZC] == 3)
  {
     format(string, sizeof(string), "{0082D0}[/n] [Moderador] %s(%d): {FFFFFF}%s]", GetPlayerNameEx(playerid),playerid, params);
  }
  if(Info[playerid][pAdminZC] >= 4)
  {
     format(string, sizeof(string), "{0082D0}[/n] [ADM] %s(%d): {FFFFFF}%s]", GetPlayerNameEx(playerid),playerid, params);

  }
  foreach(Player, n)
  {
     if (gNewbie[n] == 0)
     {
        SendClientMessageEx(n, COLOR_NEWBIE, string);
     }
  }
  return 1;
}
CMD:new(playerid, params[])
  {
  if(gPlayerLogged{playerid} == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No estás logeado correctamente.");
  if(Info[playerid][pTut] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en el tutorial.");
  if ((nonewbie) && Info[playerid][pAdminZC] < 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "El canal de ayuda está desactivado por un administrador.");
  if(Info[playerid][pNMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Estás silenciado del canal de ayuda, intentalo mas tarde.");
  new string[128];
  if(NewbieTimer[playerid] > 0)
  {
     format(string, sizeof(string), "Debes esperar %d segundos para volver a hablar por el canal de ayuda.", NewbieTimer[playerid]);
     SendClientMessageEx(playerid, COLOR_GREY, string);
     return 1;
  }
  if(gNewbie[playerid]==1) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes el canal apagado, /togduda para re-habilitarlo.");
  if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /n (Texto).");
  if(isnumeric(params)) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: No se puede enviar números por este canal.");
  if(strlen(params) > 70) return Message(playerid, COLOR_GRAD2, "!Tienes que reducir el número de carácteres, texto demasiado largo!");
  if(Info[playerid][pHelper]<1 && Info[playerid][pAdminZC]<1)
  {
    new IP[32], AvisoNew[132];
	GetPlayerIp(playerid,IP,sizeof(IP));
 		if(Info[playerid][pAdminZC] >= 1)
  		{
   			if(Info[playerid][pAdminZC] >= 4)
  			{
     			format(string, sizeof(string), "[NEW] (( Admin [ID:%d] %s:{FFFFFF} %s {B1C8FB})).",playerid, GetPlayerNameEx(playerid), params);
     			NewbieTimer[playerid] = 5;
  			}
			else
			{
     			format(string, sizeof(string), "[NEW] (( Moderador [ID:%d] %s:{FFFFFF} %s {B1C8FB})).",playerid, GetPlayerNameEx(playerid), params);
     			NewbieTimer[playerid] = 15;
			}
  		}
    	if(Info[playerid][pHelper] >= 1)
  		{
     		format(string, sizeof(string), "[NEW] (( Ayudante [ID:%d] %s:{FFFFFF} %s {B1C8FB})).",playerid, GetPlayerNameEx(playerid), params);
     		NewbieTimer[playerid] = 10;
  		}
  		if(Info[playerid][pLevel] <= 3)
  		{
  			format(string, sizeof(string), "[NEW] (( Nuevo [Nivel:%d] %s:{FFFFFF} %s {B1C8FB})).", Info[playerid][pLevel],GetPlayerNameEx(playerid), params);
  			NewbieTimer[playerid] = 60;
  			format(AvisoNew, sizeof(AvisoNew), "[INFO] %s - ID (%d) - Horas jugadas (%d) - IP (%s)", GetPlayerNameEx(playerid), playerid, Info[playerid][pConnectTime], IP);
 			SendAdvisorMessage(COLOR_CMDAA, AvisoNew);
  		}
  		else if(Info[playerid][pLevel] > 8)
  		{
  			format(string, sizeof(string), "[NEW] (( Experto [Nivel:%d] %s:{FFFFFF} %s {B1C8FB})).", Info[playerid][pLevel],GetPlayerNameEx(playerid), params);
  			NewbieTimer[playerid] = 30;
  		}
  		else
  		{
  		format(string, sizeof(string), "[NEW] (( User [Nivel:%d] %s:{FFFFFF} %s {B1C8FB})).", Info[playerid][pLevel],GetPlayerNameEx(playerid), params);
  		NewbieTimer[playerid] = 60;
  		}
  	}
  foreach(Player, n)
  {
     if (gNewbie[n] == 0)
     {
        SendClientMessageEx(n, COLOR_NEWBIE, string);
     }
  }
  return 1;
}*/
CMD:nonewbie(playerid, params[])
{
if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
	if(Info[playerid][pAdminZC] >= 5)
	{
		if (!nonewbie){
			nonewbie = 1;
			BroadCast(COLOR_GENERAL, "AdmCmd: El canal de ayuda fue deshabilitado por un administrador!");
		}
		else{
			nonewbie = 0;
			BroadCast(COLOR_GENERAL, "AdmCmd: El canal de ayuda fue habilitado por un administrador!");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	return 1;
}
zcmd(nmute, playerid, params[])
{
	new giveplayerid;
    if(Info[playerid][pAdminZC] < 2 &&Info[playerid][pHelper] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	if(!sscanf(params, "d", giveplayerid))
	{
	    if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
   		if(Info[giveplayerid][pAdminZC] >= 1)
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}No puedes usar {9c2828}/nmute{FFFFFF} a administradores.");
		}
	    if(Info[giveplayerid][pNMute] == 0)
		{
		    new string[128];
   			Info[giveplayerid][pNMute] = 1;
   			Info[giveplayerid][pNMuteTotal]++;
			if(Info[giveplayerid][pNMuteTotal] > 14)
			{
				Info[giveplayerid][pBannedZC] = 2;
				format(string, sizeof(string), "[AdmWarning]: %s fue baneado automaticamente - Razón: 15 Newbie Muted en Total.", GetPlayerNameEx(giveplayerid));
				BroadCast(COLOR_LIGHTRED,string);
				Kick(giveplayerid);
				return 1;
			}
			format(string, sizeof(string), "* %s te ha silenciado del canal de ayuda por 5 minutos, razón: Mal uso del canal.",GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid,COLOR_LIGHTRED,string);
			foreach(Player, n)
			{
				if (gNewbie[n] == 0 || Info[n][pNMute] == 0)
				{
				    format(string, sizeof(string), "[AdmCmd]: %s ha silenciado del canal de ayuda a %s por 5 minutos, razón: Mal uso del canal.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(n, COLOR_LIGHTRED, string);
				}
			}
			SetTimerEx("NewbieUnMuted", 300000, 0, "d", giveplayerid);
		}
	} else SendClientMessageEx(playerid, COLOR_GRAD2, "* /nmute (PlayerID)");
	return 1;
}

CMD:armas(playerid, params[])
{
    if(GetPVarInt(playerid, "ArenaMode") > 0)
    {
        SafeDialogEx(playerid, PB_ARMAS, DIALOG_STYLE_LIST, "{00F70C}Armas","9mm(1 Ficha)\nDesert Eagle(1 Ficha)\nMP5(1 Ficha)\nAK-47(1 Ficha)\nM4(2 Fichas)\nShotgun(1 Fichas)\nCombat Shotgun(2 Fichas)\nArmadura(1 Ficha)","OK","Atrás");
	}
    else
	{
        SendClientMessageEx(playerid,COLOR_WHITE,"{FFFF00}[ERROR]:{FFFFFF} No puedes usar este comando si no estás en el paintball.");
    }
    return 1;
}

zcmd(animaciones, playerid, params[]){
		SendClientMessageEx(playerid, COLOR_GREEN,"_________________________________________________________________________________");
        SendClientMessageEx(playerid,COLOR_WHITE,"Animaciones:");
        SendClientMessageEx(playerid,COLOR_WHITE,"/poli /rendirse /sentarse /sinaliento /asiento /bailar /rap /cruzar /ped /jiggy /rap /paja /depie");
        SendClientMessageEx(playerid,COLOR_WHITE,"/gesto /fumar /sexo /orinar /chora /relax /crabs /saludo[2] /stop /lavarse /llorar /apoyarse /dedo");
        SendClientMessageEx(playerid,COLOR_WHITE,"/sigueme /saludo /quieto /enganche /palmaputa /cpr /darregalo /palmada /borracho /bomba");
        SendClientMessageEx(playerid,COLOR_WHITE,"/arobar /reir /lookout /amenazar /esconder /vomitar /comer /crack /jodete /taichi /beso /mec");
        SendClientMessageEx(playerid,COLOR_WHITE,"/agredido /herido /dormir /rodar /fokear /agonizar /hablando /animar /gritar /apuntar /correr");
		return SendClientMessageEx(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	}
//***telefonos publicos***
CMD:publico(playerid, params[])
	{
		new string[128], phonenumb;
        if(!IsAtCelPublic(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No te encuentras en un telefono publico.");
		if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /publico (Numero Telefónico)");
		if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"{A2DC35}[INFO]:{FFFFFF} No puedes usar este Comando mientras estás en Prisión.");
		if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes usar el teléfono publico.");


		if(Mobile[playerid] != INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "Ya se Encuentra en una Llamada...");
		if(Info[playerid][pJailed] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este Numero no lo puedes usar en Jail-Admin.");
		format(string, sizeof(string), "* %s Pasa su tarjeta y Hace una llamada.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL);
		PlayerPlaySound(playerid, 3600, 0, 0, 0);
		if(phonenumb == 911){
            SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SendClientMessageEx(playerid, COLOR_WHITE, "Información: Ahora usa T, y Habla por el Chat por Teléfono. Usa /Colgar para Finalizar la Llamada.");
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Central: Que servicio desea? Policia, Bomberos o Paramédico?");
			Mobile[playerid] = 911;
			return 1;
		}
		if(phonenumb == 757){
            if(InLive == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "En este momento la línea está fuera de servicio u ocupada.");
			InLive = 0;
            Mobile[playerid] = 758;
			format(string,128,"Llamada Entrante desde un Telefono Publico.", Info[playerid][pPnumber]);
			SendFamilyMessage(5, COLOR_YELLOW, string);
            SetPlayerAttachedObject(playerid, 9, 330, 6);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			Bought(playerid, 20);
            return SendClientMessageEx(playerid, COLOR_WHITE, "LSTV: Hola... estás en Línea, desde este momento puedes hablar.");

		}
		else if(phonenumb == 3900){
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Bienvenido. ¿ Tiene algúna noticia, quiere participar ?");
		   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Déjenos un mensaje después de la señal, ¡hasta la vista!");
		  	SendClientMessageEx(playerid, COLOR_WHITE, "Biiip!");
			Bought(playerid, 20);
		   	return Mobile[playerid] = 3901;

		}
		if(phonenumb == Info[playerid][pPnumber]) return SendClientMessageEx(playerid, COLOR_GRAD2, "Está ocupado...");
		foreach(Player, i){
			if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
				new giveplayerid = i;
				Mobile[playerid] = giveplayerid; //caller connecting
				if(IsPlayerConnected(giveplayerid)){
					if(giveplayerid != INVALID_PLAYER_ID){
						if(GetPVarInt(giveplayerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "El jugador está en el paintball arena no puede recibir llamadas.");
						if(PhoneOnline[giveplayerid] > 0){
							SendClientMessageEx(playerid, COLOR_GREY, "Tono Apagado.");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if(Mobile[giveplayerid] != INVALID_PLAYER_ID){
							SendClientMessageEx(playerid, COLOR_GRAD2, "Tono Ocupado...");
							Mobile[playerid] = INVALID_PLAYER_ID;
							return 1;
						}
						if (Mobile[giveplayerid] == INVALID_PLAYER_ID){
						    SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
							format(string, sizeof(string), "Tu telefono está Sonando - Usa /Contestar para Atender la Llamada. [Número %d].", Info[playerid][pPnumber]);
							format(string, sizeof(string), "* Teléfono de %s Suena.", GetPlayerNameEx(i));
							SendClientMessageEx(playerid, COLOR_WHITE, "{FF8000}[INDICACION]:{FFFFFF} Ahora usa T, y Habla por el chat por Teléfono.");
							ProxDetector(30.0, i, string, COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL,COLOR_GENERAL);
							CellTime[playerid] = 1;
							Bought(playerid, 20);
							return 1;
						}
					}
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Su Llamada no puede darse por el Numero Marcado, por favor, Compruebe el Número e Inténtelo Nuevamente.");
		return 1;
	}
//***sistema de fire***
    zcmd(desactivofuego, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        for(new f = 0; f < sizeof(Fire); f ++)
        {
            DestroyObject(Fire[f]);
            DestroyObject(Fire[f]);
        }
        F = true;
        for(new i = 0; i < MAX_PLAYERS; i ++)
        {
            Apagandofire[i] = 0;
            llegarf[i] = false;
            DisablePlayerCheckpoint(i);
            KillTimer(Timerfire);
        }
        SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} El sistema de incendio ha sido desactivado.");
        return 1;
    }
    zcmd(activofuego, playerid, params[])
    {
        if(papilla[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No estás en servicio administrativo {00F70C}/adminduty o /adminoffduty{FFFFFF} para usar este comando.");
        if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
        F = false;
        SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[ADM]:{FFFFFF} El sistema de incendio ha sido activado.");
        return 1;
    }
    zcmd(buscarfuego, playerid, params[])
    {
        if(Team_SAMD(playerid))
        {
    	if(F == false) return SendClientMessage(playerid, COLOR_WHITE, "No hay emergencias de incendio por ahora.");
        SetPlayerCheckpoint(playerid, LugarFuego[0], LugarFuego[1], LugarFuego[2], 8.0);
        SendClientMessage(playerid, 0x8D8DFFFF, "[HQ - S.E.C]: Se ha advertido a los bomberos de un incendio, sigue el checkpoint.");
        lugarfire = GetTickCount();
        }
        return 1;
    }

CMD:cmueble(playerid, params[])
{
    if (PlayerToPoint(10, playerid,942.8980, -1417.7258, 13.5420))
	{
    //return ShowFurnitureMenu(playerid);
	//ShowModelSelectionMenu(playerid, MueblesObj, "Muebles", 0x4A5A6BBB, 0x88888899, 0xFAFAFA);
	SendClientMessage(playerid, 0x8D8DFFFF, "No disponible.");
    }
	return 1;
}

/*CMD:ajustarcasa1(playerid, params[]){ //BUG
    new string[128];
	if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000)
	{
		format(string, sizeof(string), "{BFE44E}» {FFFFFF}Dinero guardado en la casa ($%d).\n{BFE44E}» {FFFFFF}Muebles en o de la casa.", HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
		SafeDialogEx(playerid, MENU_CASA, DIALOG_STYLE_LIST, "{BFE44E}» Propiedad", string, "Aceptar", "Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{BFE44E}» No eres dueño de una casa, o no estás en una de ellas.");
	return 1;
}*/
CMD:ajustarcasa(playerid, params[]){
    new string[128];
	if(Info[playerid][pPhousekey] != -1 || Info[playerid][pPhousekey2] != -1 && IsPlayerInRangeOfPoint(playerid, 25.0, HouseInfo[Info[playerid][pPhousekey]][hInteriorX], HouseInfo[Info[playerid][pPhousekey]][hInteriorY], HouseInfo[Info[playerid][pPhousekey]][hInteriorZ]) && GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000)
	{
		format(string, sizeof(string), "{BFE44E}» {FFFFFF}Dinero guardado en la casa ($%d).", HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
		SafeDialogEx(playerid, MENU_CASA, DIALOG_STYLE_LIST, "{BFE44E}» Propiedad", string, "Aceptar", "Salir");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "{BFE44E}» No eres dueño de una casa, o no estás en una de ellas.");
	return 1;
}
/*CMD:casamenu(playerid, params[])
{
if(Info[playerid][pPhousekey] != -1)
{
    if(GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000)
    {
    	ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"Selecciona:","» Dinero\n» Items\n» Muebles","Seleccionar","Atrás");
	}
    else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en ninguna casa.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes una casa (Slot número 1).");
return 1;
}*/
CMD:revisarcasa(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(Info[playerid][pRank] > 2)
		{
    		for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if (IsPlayerInRangeOfPoint(playerid,20,HouseInfo[h][hInteriorX], HouseInfo[h][hInteriorY], HouseInfo[h][hInteriorZ]) && Info[playerid][pVW] == h+6000)
				{
					new string[180];
					new weaponname[50];
					//hWeapons[5],
                	format(string, sizeof(string), "* %s comienza a revisar la casa y obtiene la información necesaria.", GetPlayerNameEx(playerid));
      				ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "[Información Conocida] Casa comprada por %s, valorada en %d dólares.",HouseInfo[h][hOwner], HouseInfo[h][hValue]);
 					SendClientMessageEx(playerid, COLOR_LIGHT_BLUE,string);
 					SendClientMessageEx(playerid, COLOR_LIGHT_BLUE, "Usted ha revisado la casa, esto es lo que ha encontrado:");
 					if(HouseInfo[h][hMaterials] >= 1 ) // Materiales.
					{
						format(string, sizeof(string), "[MATERIALES]{FAAC58} Se han encontrado materiales en la casa, la cantidad total es de %d.", HouseInfo[h][hPot]);
 						SendClientMessageEx(playerid, COLOR_ORANGE,string);
					}
					else {SendClientMessageEx(playerid, COLOR_ORANGE,"[MATERIALES]{FAAC58} No hay materiales almacenados en la casa.");}
					if(HouseInfo[h][hPot] >= 1 ) // Hierba.
					{
						format(string, sizeof(string), "[HIERBA]{FAAC58} Se ha encontrado MARIHUANA en la casa, la cantidad total asciente a %d gramos.", HouseInfo[h][hPot]);
 						SendClientMessageEx(playerid, COLOR_ORANGE,string);
					}
					else {SendClientMessageEx(playerid, COLOR_ORANGE,"[HIERBA]{FAAC58} No se han encontrado ningún rastro de droga o plantas dentro de la casa.");}
					if(HouseInfo[h][hPot] >= 1 ) // Drogas.
					{
						format(string, sizeof(string), "[DROGAS]{FAAC58} Se han encontrado drogas en la casa, la cantidad total es de %d gramos.", HouseInfo[h][hPot]);
 						SendClientMessageEx(playerid, COLOR_ORANGE,string);
					}
					else {SendClientMessageEx(playerid, COLOR_ORANGE,"[DROGAS]{FAAC58} No se han encontrado ningún rastro de droga dentro de la casa.");}
					new weaponsinlocker;
					format(string, sizeof(string), "[ARMAMENTO]: {FAAC58}%d/%d [/incautar]", weaponsinlocker,HouseInfo[h][hGLUpgrade]);
	    			SendClientMessageEx(playerid, COLOR_ORANGE, string);
					for(new s = 0; s < 5; s++)
					{
						if(HouseInfo[h][hWeapons][s] != 0)
						{
							GetWeaponName(HouseInfo[h][hWeapons][s], weaponname, sizeof(weaponname));
							format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
							SendClientMessageEx(playerid, COLOR_WHITE, string);
						}
					}
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "[AVISO] Sólo agentes con rango 2 o mayor podrán usar este comando.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "[AVISO] Sólo policias pueden usar este comando.");
	return 1;
}
zcmd(incautar, playerid, params[])
	{
	    new item[12], string[160];
        if(!sscanf(params, "s[12]", item))
		{
			if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Información: No puedes usar este comando mientras estás en prisión.");
			if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Información: No puedes usar este comando en el Paintball.");
            if(IsACop(playerid))
    		{
    		    if(Info[playerid][pRank] > 4)
				{
					for(new h = 0; h < sizeof(HouseInfo); h++)
					{
						if (IsPlayerInRangeOfPoint(playerid,20,HouseInfo[h][hInteriorX], HouseInfo[h][hInteriorY], HouseInfo[h][hInteriorZ]) && Info[playerid][pVW] == h+6000)
						{
					   		if(strcmp(item,	"Materiales",	true) == 0)
					   		{
					   			if(HouseInfo[h][hMaterials] >= 1 ) // Materiales.
								{
									format(string, sizeof(string), "[Radio] Jefe de policias %s ha incautado un total de %d materiales.",GetPlayerNameEx(playerid), HouseInfo[h][hMaterials]);
 									SendRadioMessage(1, TEAM_RADIO_COLOR, string);
 									SendRadioMessage(2, TEAM_RADIO_COLOR, string);
 									HouseInfo[h][hMaterials] = 0;
								}
                                else {SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] No hay materiales que incautar dentro de la casa.");}
							}
							if(strcmp(item,	"Hielba",	true) == 0)
					   		{
					   			if(HouseInfo[h][hPot] >= 1 ) // Hierba.
								{
									format(string, sizeof(string), "[Radio] Jefe de policias %s ha incautado un total de %d gramos de marihuana.",GetPlayerNameEx(playerid), HouseInfo[h][hPot]);
 									SendRadioMessage(1, TEAM_RADIO_COLOR, string);
 									SendRadioMessage(2, TEAM_RADIO_COLOR, string);
 									HouseInfo[h][hPot] = 0;
								}
                                else {SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] No hay hierba que incautar dentro de la casa.");}
							}
							if(strcmp(item,	"Drogas",	true) == 0)
					   		{
					   			if(HouseInfo[h][hPot] >= 1 ) // Drogas.
								{
									format(string, sizeof(string), "[Radio] Jefe de policias %s ha incautado un total de %d gramos de droga.",GetPlayerNameEx(playerid), HouseInfo[h][hCrack]);
 									SendRadioMessage(1, TEAM_RADIO_COLOR, string);
 									SendRadioMessage(2, TEAM_RADIO_COLOR, string);
 									HouseInfo[h][hCrack] = 0;
								}
                                else {SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] No hay drogas que incautar dentro de la casa.");}
							}
							if(strcmp(item,	"Armamento",	true) == 0)
					   		{
					   			format(string, sizeof(string), "[Radio] Jefe de policias %s ha incautado toda existencia de armas a nombre de %s.",GetPlayerNameEx(playerid), HouseInfo[h][hOwner]);
								SendRadioMessage(1, TEAM_RADIO_COLOR, string);
								SendRadioMessage(2, TEAM_RADIO_COLOR, string);
								for(new s = 0; s < 5; s++) // Armas.
        {
 									HouseInfo[h][hWeapons][s] = 0;
								}
							}
							if(strcmp(item,	"Todo",	true) == 0){SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] Esta caracteritica no está disponible todavíá, disculpe las molestias.");}
							else {SendClientMessageEx(playerid, COLOR_GREY,"[ERROR] Opciones disponibles en uso: Materiales, Hierba, Drogas y armas.");}
						} // Aquí se cierra el "Tiene que estar cerca de la puerta de la casa"
					} // Aquí se cierra el checkeo de toda casa existente.
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "[AVISO] Sólo agentes con rango 5 o mayor podrán usar este comando.");
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "[AVISO] Sólo policias pueden usar este comando.");
        }
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /incautar [Opción: Materiales, Drogas, Hierba, Armas, Todo]. (Realizar delante del armario)");
        return 1;
	}
CMD:afk(playerid,params[])
	{
	    if(Afk[playerid]==0){
		Afk[playerid]=1;
		Timer[playerid] = SetTimer("SendMessage",100,0);
		TogglePlayerControllable(playerid,0);
		SetPlayerVirtualWorld(playerid,5);
		SetPlayerCameraPos(playerid,-2663.0913,1595.6005,225.7578 ); // Le da las cordenadas de la camara para el afk.
   		SetPlayerCameraLookAt(playerid,-2663.0913,1595.6005,225.7578); // Lo mismo que el de arriba.
		SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}INFRANET-RP:{FFFFFF} Has entrado en modo /afk, para salir de este estado usa {FF0000}/salirafk{FFFFFF}.");
		}
		else
		{
		SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}INFRANET-RP:{FFFFFF} Ya estas en modo afk, para dejar este estado usa {FF0000}/salirafk{FFFFFF}.");
		}
		return 1;
	}
CMD:salirafk(playerid,params[])
	{
	    if(Afk[playerid]==1){
		Afk[playerid]=0;
		Timer[playerid] = SetTimer("SendMessage",100,0);
		TogglePlayerControllable(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetCameraBehindPlayer(playerid); // Le quita la camara
		SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}INFRANET-RP:{FFFFFF} Has salido del modo /afk, sigue disfrutando tu estadia.");
		}
		else
		{
		SendClientMessage(playerid,COLOR_WHITE, "{A2DC35}INFRANET-RP:{FFFFFF} No estas en modo afk.");
		}
		return 1;
	}
CMD:listaafk(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 2)
	{
   		SendClientMessageEx(playerid,COLOR_GREEN,"Lista de todos los usuarios /afk.");
		new
			estaafk[14 + MAX_PLAYER_NAME];
    	foreach(Player, i) if(Afk[i]==1)
		{
			format(estaafk, sizeof(estaafk), "* %s (ID %i)", GetPlayerNameEx(i), i);
			SendClientMessageEx(playerid, COLOR_GREY, estaafk);
		}
	}
	return 1;
}
CMD:noobs(playerid, params[])
{
	if(Info[playerid][pAdminZC] >= 2)
	{
   		SendClientMessageEx(playerid,COLOR_GREEN,"Lista de todos los usuarios recién llegados.");
		new
			szNoobs[28 + MAX_PLAYER_NAME]; // 28
    	foreach(Player, i) if(Info[i][pLevel] == 2)
		{
			format(szNoobs, sizeof(szNoobs), "* %s (ID %i) - Tiene %iH jugadas.", GetPlayerNameEx(i), i, Info[i][pConnectTime]);
			SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
		}
	}
	return 1;
}
CMD:fuckallthehouses(playerid, params[]) //Comando restear casas.
{
for(new c = 0; c < MAX_HOUSES; c++)
{
new string[256], house;
HouseInfo[c][hLock] = 1;
ClearHouse(c);
format( HouseInfo[c][hOwner], 128, "Nobody" );
HouseInfo[c][hGLUpgrade] = 1;
PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
SaveHouses();
DestroyDynamicPickup(HouseInfo[c][hPickupID]);
HouseInfo[c][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[c][hExteriorX], HouseInfo[c][hExteriorY], HouseInfo[c][hExteriorZ]);
DestroyDynamic3DTextLabel(HouseInfo[c][hTextID]);
format(string, sizeof(string), "{01DF01}¡Propiedad disponible y en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[house][hDescription],HouseInfo[house][hValue],HouseInfo[house][hLevel]);
HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0);
}
return 1;
}
CMD:renovarcasas(playerid, params[]) //Comando renovar casas.
{
	if(Info[playerid][pAdminZC] < 6000) return SendClientMessageEx(playerid, COLOR_GRAD2, "{FFFF00}[ERROR]:{FFFFFF} No tienes autorización a usar este comando.");
	for(new c = 0; c < MAX_HOUSES; c++)
	{
		if(HouseInfo[c][hOwned] != 0)
        {
			HouseInfo[c][hLock] = 1;
			HouseInfo[c][hTiempo] = -1;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	SendClientMessageEx(playerid, COLOR_BLUE,"[AVISO] Casas con propietario han sido renovadas automáticamente por 30 días.");
	SaveHouses();
	return 1;
}
zcmd(version, playerid, params[]){
		SendClientMessageEx(playerid, COLOR_BLUE,"_________________________________________________________________________________");
        SendClientMessageEx(playerid,COLOR_WHITE,"Actualizaciones INFRANET ROLEPLAY versión  1.0 -(Actual: [08/06/2017 - V1.0])");
        SendClientMessageEx(playerid,COLOR_WHITE,"Actualizado las emisoras de radio del coche, /estacion. Mejoras en /ayuda.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Nuevos mapeos únicos tanto externos, como internos. Al igual que reducido el lag de estos.");
        SendClientMessageEx(playerid,COLOR_WHITE,"- Ayuntamiento, Taller, LSTV, Rusos, Aeropuerto, SAEM, Hospital y etc.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de /agenda para contáctos y noras, /cocinar para usarlo dentro de las casas.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de /revisarcasa y /incautar para LSPD y FBI.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de vehículos /puente, necesitarás ganzúas para usarlos.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de idiomas, más información sobre esto en /idiomas.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de facciones dinámicos único en SAMP. Al igual de listado de líderes en /facc.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Pagas, Rangos, cantidad de armas y etc editables dentro del servidor.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Facciones únicas, Cartel del Golfo y Donakov, organizaciones ilegales. Script en familias.");
		SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de negocios renovado, posibilidad de abrir/cerrar y creación de caja fuerte.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Muchas más cosas por descubir, date una vuelta y lo podrás ver por tu mismo. Usa /soporte pata más info.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Retirada de mapeos innecesarios, texturización de CDG, Donakov, mecánicos, Unity, entre otros.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Sistema de Actores Dinámico, Portones dinámico e intermitenes, Uso del /casco.");
        SendClientMessageEx(playerid,COLOR_WHITE,"Creación de Dialog con el comando /armario [Sacar/Dejar]. Nuevo mapeo de Hitmans (Único).");
		return SendClientMessageEx(playerid, COLOR_BLUE,"_________________________________________________________________________________");
	}
/*zcmd(version, playerid, params[]){
		SendClientMessageEx(playerid, COLOR_BLUE,"_________________________________________________________________________________");
        SendClientMessageEx(playerid,COLOR_WHITE,"NEW STATE: La versión actual del servidor es 3.0. (Lanzada el dia 22/12/2015)");
		return SendClientMessageEx(playerid, COLOR_BLUE,"_________________________________________________________________________________");
	}*/

CMD:velocimetro(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "No eres el conductor del vehiculo.");
	}
	else if(!Info[playerid][pSpeedo])
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Habilitaste el velocimetro.");
		Info[playerid][pSpeedo] = 1;

		if(arr_Engine{GetPlayerVehicleID(playerid)} != 0)
		{

			new vehicleid = GetPlayerVehicleID(playerid), szSpeed[84];
			format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH - Gas: %d", player_get_speed(playerid), VehicleFuel[vehicleid]);
			GameTextForPlayer(playerid, szSpeed, 1500, 3);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Desactivaste el velocimetro.");
		Info[playerid][pSpeedo] = 0;
		if(arr_Engine{GetPlayerVehicleID(playerid)} != 0) GameTextForPlayer(playerid, " ", 1500, 3);
	}
	return 1;
}
//******************************CMDS FIN******************************
//***ayuda por textdraw***
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(_:clickedid != INVALID_TEXT_DRAW)
    {
        new cmd4[800]; // 500
    	if(clickedid == AyudaX[1])
    	{
			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - General", "{FFFF00}[PJ]\n{FFFFFF}/cuenta /cambiarclave /tiendacash /tirar /mostrar /trabajoayuda /removergps /reanimar /dnifalso\n{FFFF00}[CMD'S]\n{FFFFFF}/pagar /payday /id /cfumar /comprar /comprarlicencia /animaciones /ven /google\n/ap /cp /apgarage /cpgarage /togduda /buscartrabajo /tognews /togfam /togphone /ocultarinfo /darcheque\n/eject /fumarcrack /fumarhierba /llenar /moneda /dar /contrato  /duda /re /e", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[2])
    	{
			if(IsAPolice(playerid))
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "[Aviso Temporal] Los rangos 5 en delante son los únicos que dan licencia de armas, /darlicencia [ID]. Tazer actualizado, /ta [Corto alcance] - /taoff - /tazer [Largo alcance].");
      			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Comandos - SAPD", "/radio /r /d /m /su /esposar /desesposar /ta(off) /ap /radargun /limpiarcamion /vmaletero /ram /camaras /revisarcasa /incautar /luces\n/quitar /multar /detener /bk /bkc /tlc /derechos /codigos /bar(2)(3) /qb /placa /embargar /tgunmaletero /(q)(p)spikes /placaex\n/limpiar /sospechosos /sapddiv /verllaves /registroveh /dejarmulta /equipo /arrestar /destruirplanta /deposito /cono /bengala", "Cerrar", "");
		    }
		    else if(Team_Groove(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Groove Street", "{FFFF00}Comandos disponibles para la faccion Groove Street:\n{FFFFFF}/equipo /robar /miembros /graffiti(Rangos 3 en adelante) /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_Latin(playerid))
			{
   				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Latin Kings", "{FFFF00}Comandos disponibles para la faccion Latin Kings:\n{FFFFFF}/equipo /robar /miembros /graffiti(Rangos 3 en adelante) /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Yakuza(playerid))
			{
				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Yakuza", "{FFFF00}Comandos disponibles para la faccion Yakuza:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /jap /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Santana(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Santana", "{FFFF00}Comandos disponibles para la faccion Santana:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /ing /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
		    else if(Team_SAMD(playerid))
			{
			    strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/equipo /secduty /gob /carnet (/r)adio (/d)epartaments (/m)egáfono (/apgarage - /cpgarage)\n");
				strcat(cmd4, "{23A9D6}[Médicos] {FFFFFF}/sacarsangre /pcinfo /subirpt /dejarpt /irpt /curar\n");
				strcat(cmd4, "{23A9D6}[Bombero] {FFFFFF}/qfuego /buscarfuego /bar(2)(3) /qb /cono /bengala /(q)(p)spikes");
				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- S.E.C", cmd4, "Cerrar", "");
			}
			else if(Team_Alqaeda(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Alqaeda", "{FFFF00}Comandos disponibles para la faccion Alqaeda:\n{FFFFFF}/equipo /miembros /f /apgarage /ara /himno - /gob\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Rusa(playerid))
			{
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Rusa", "{FFFF00}Comandos disponibles para la faccion Rusos:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /rus /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Ballas(playerid))
			{
		       	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ballas the Kings", "{FFFF00}Comandos disponibles para la Ballas:\n{FFFFFF}/equipo /robar /miembros /graffiti(Rangos 3 en adelante) /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n{FFFFFF}*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_Sureno(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Sureños 13", "{FFFF00}Comandos disponibles para la faccion Sureños 13:\n{FFFFFF}/equipo /robar /miembros /graffiti(Rangos 3 en adelante) /f\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n{FFFFFF}*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			 else if(Team_LCN(playerid))
			{
				ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Mafia Italiana LCN", "{FFFF00}Comandos disponibles para la faccion LCN:\n{FFFFFF}/equipo /robar /miembros /f /apgarage /ita /robarbanco (Solo-Líder)\n\n{FFFF00}Informacion:\n{FFFFFF}*Tener skins que representen la facción.\n*Evitar incumplir los conceptos de rol\n*A la 3era advertencia tu facción será limpiada.", "Cerrar", "");
			}
			else if(Team_Mecanicos(playerid))
			{
          		ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Crazy Motors", "{FFFF00}Comandos disponibles para la faccion Crazy Motors:\n{FFFFFF}/miembros /menu /mduty /nitro /hyd \n/venderspray /remolcar /reparar /recargar /equipo /f\n/apgarage - /cpgarage - /abrirspray - /cerrarspray", "Cerrar", "");
			}
			else if(Hitman(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Agencia Hitman", "{FFFF00}Comandos disponibles para la faccion Hitman:\n{FFFFFF}/miembros /buscar /acontrato /amascara\n/darhit /hrangos /borrarhit /equipo /hits", "Cerrar", "");
			}
			else if(Team_SAEM(playerid))
			{
			    ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}SAEM", "{FFFF00}Comandos disponibles para la faccion SAEM:\n{FFFFFF}/misil /equipo (/r)adio /d /m (/ta)zer /tgunmaletero /placaex /saemdiv /su /derechos /deposito\n/revisar /bar /placa /qb /esposar /gob /himno /limpiarcamion /vmaletero /(q)(p)spikes /detener /prision\nDiv Médicos: /dejarpt - /subirpt", "Cerrar", "");
			}
			else if(Team_LSTV(playerid))
			{
       			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}LSTV", "{FFFF00}Comandos disponibles para la faccion LSTV:\n{FFFFFF}/miembros /nr (Noticias) - /entrevista /f /apgarage\n /equipo /activarlinea /sacarlinea /panum /carnet", "Cerrar", "");
       			if(DirectorCNN(playerid)){SendClientMessageEx(playerid, COLOR_GRAD1, "Comando líder LSTV: /sfondos - /dejarfondos - /adprecio - /ponermusica.");}
			}
			else if(Gobierno(playerid))
			{
			  	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Gobierno", "{FFFF00}Comandos disponibles para la faccion Gobierno:\n{FFFFFF}/miembros /equipo /gob /himno /impuesto\n/dejarfondos /gobdiv /apgarage /d /(r)adio", "Cerrar", "");
			}
  			else if(Team_Judicial(playerid)) // 10
    		{
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}(/r)adio - /duty - [Ordenes] /orden - /qorden - /ordenes /arrestojudicial (Con policía presente)\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/ap - /cp (Sacar a la persona de prisión, pero sólo para el juicio) - /verjuicios - /juicio\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/multajudicial - /indemnizar - /librarcargos (Sacar a persona de prisión, liberarlo)\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/revertir (Finalizar condena) - /scarcel (Condenar a la persona a prisión)\n\n");
				strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}La facción es la única que puede juzgar a miembros de SAEM, LSPD y FBI. Hagan buen uso de los CMD.");
				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Sistema Judicial", cmd4, "Cerrar", "");
			}
			else if(Team_FBI(playerid))
			{
		        ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}FBI", "{FFFF00}Comandos disponibles para la faccion FBI:\n{FFFFFF}/miembros (/r)adio /d (/m)egaphone /su /encontrarveh\n/esposar /desesposar /ta(off) /vmaletero /equipo /arrestar /revisar /placa\n/deposito /quitar /multar /detener /derechos /codigos /encontrar /gob\n/limpiar /sospechosos /fbidiv /tgunmaletero /ram /revisarcasa /incautar /placaex /luces", "Cerrar", "");
			}
			else if(Team_CDG(playerid)) // 15
			{
   				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/f(amily) /equipo /puente /miembros - CMD básicos.\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/llenaralmacen [Cantidad] - Este comando es usado delante del almacén de la facción a llenar.\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}Los miembros de CDG tienen que pagar 10 dólares para comprar un producto, Ej: 20 Productos, te costarán 200 dólares.\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}Tienen que vender los productos a más de 10 dólares la unidad para obtener beneficios, pagar antes de llenar el almacén.\n");
				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- CDG", cmd4, "Cerrar", "");
				//ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}C.D.G", "{FFFF00}Comandos disponibles para la faccion Cartel del Golfo:\n{FFFFFF}/f /equipo /puente /miembros /llenaralmacen [Delante del Almacén de la FACC]", "Cerrar", "");
			}
			else if(Team_ALEPH(playerid))
			{
			    strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/f(amily) /equipo /puente /miembros /ale (No es necesario aprenderlo en la Universidad)\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}Esta facción es sectaria, todo está en centralizar su rol y no son una mafia.\n");
				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}Su líder se encarga de captar gente y amenazar al resto de facciones y darse a conocer.\n");
				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- ALEPHl", cmd4, "Cerrar", "");
		        //ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}ALEPH", "{FFFF00}Comandos disponibles para la faccion ALEPH:\n{FFFFFF}/f /equipo /puente /miembros /ale", "Cerrar", "");
			}
    	}
    	else if(clickedid == AyudaX[3])//{BE81F7}
    	{
   			strcat(cmd4, "{BE81F7}[VEHÍCULOS] {FFFFFF}El número de Slots de los vehículos depende de la cantidad de puntos de rol obtenidos.\n");
			strcat(cmd4, "{BE81F7}[VEHÍCULOS] {FFFFFF}Se comienza con 4 vehículos mínimo y 10 vehículos máximo. Más información en /puntosrol.\n");
			strcat(cmd4, "{BE81F7}[VEHÍCULOS] {FFFFFF}/estacionar - /v [Opción], /motor, /gps, /seguro, /gunlocker (Slots de armas en vehículos)\n");
			strcat(cmd4, "{BE81F7}[VEHÍCULOS] {FFFFFF}/smaletero (Sacar)- /gmaletero (Guardar) - /vendermicoche [ID] [Precio] - /vendercoche (En la DGT).\n");
			strcat(cmd4, "{BE81F7}[VEHÍCULOS] {FFFFFF}/desguazar (Eliminar Vehículo) - /llenar (Gasolina) - /darllave [ID] - /quitarllave [ID].\n");
			strcat(cmd4, "{BE81F7}[VEHÍCULOS] {FFFFFF}[Uso de Intermitentes]: Encienda las luces del vehículo (/v luces), use [Q] o [E] para activar.");
			ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Vehículos", cmd4, "Cerrar", "");
			//ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vehículo", "{FFFFFF}/estacionar /v (nombre) /gps /qmod /seguro\n/gunlocker /vendermicoche /borrarcoche /llenar\n /smaletero /gmaletero /darllave /quitarllave", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[4])
    	{
     		//new cmd8[600];
            strcat(cmd4, "{BE81F7}[GARAGES]{FFFFFF} Compra: En caso de que deseé comprar un garage debe usar el comando {23A9D6}'/comprargarage'{FFFFFF}.\n");
            strcat(cmd4, "{BE81F7}[GARAGES]{FFFFFF} Nombre: Una vez que has comprado un garage puedes colocarle un nombre, usa {23A9D6}'/nombregarage'{FFFFFF}.\n");
            strcat(cmd4, "{BE81F7}[GARAGES]{FFFFFF} Abrir: Una vez que compraste tu garage puedes abrirlo e ingresar, ábrelo con {23A9D6}'/abrirporton'{FFFFFF}.\n");
            strcat(cmd4, "{BE81F7}[GARAGES]{FFFFFF} Cerrar: También puedes cerrarlo para que nadie entre, cierralo con {23A9D6}'/cerrarporton'{FFFFFF}.\n");
            strcat(cmd4, "{BE81F7}[GARAGES]{FFFFFF} Vender: Si decides que es tiempo de vender tu garage puedes usar el comando {23A9D6}'/vendergarage'{FFFFFF} o {23A9D6}'/vendermicasa'{FFFFFF}.");
            ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Garages", cmd4, "Aceptar", "");
                //ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Premium", "{FFFFFF}/invitaramigo /viplocker /venderfichasvip /togvip\n/automensaje /ayudafichas /togphone /vip\n/spawncasa /skinpremium /repararpremium", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[5])
    	{
    		strcat(cmd4, "{BE81F7}[CHAT] {FFFFFF}COMANDOS IC: (/g)ritar - (/s)usurar - /me - /do - /e(ntorno) - (/r)adio - /ad-/ads (Anuncios).\n");
			strcat(cmd4, "{BE81F7}[CHAT] {FFFFFF}/acento - /idiomas - Teléfono: /llamar - /sms - /altavoz - /agenda (Comprar Antes).\n");
			strcat(cmd4, "{BE81F7}[CHAT] {FFFFFF}COMANDOS OOC: /b - (/w)hisper - (/f)accion. - /n(ew) - /vip (Chat OOC VIP).\n");
			strcat(cmd4, "{BE81F7}[CHAT] {FFFFFF}/tog [Opción] - /duda - /soporte - /informacion - /re (Tomar SS si es posible).");
			ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Chat", cmd4, "Cerrar", "");
			//ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chat", "{FFFF00}Comandos IC:\n{FFFFFF}(/g)ritar (/s)usurar /me /c (/r)adio\n\n{FFFF00}Comandos OOC:\n{FFFFFF}/b (/w)hisper (/f)accion", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[6])
    	{
        	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Lider", "{FFFF00}[CMD Generales]: /contratar - /despedir - /darrango\n[CMD Fondos]: /faccin - /faccout\n[CMD Legales]: /gob - /dooc\n[CMD Ilegales]: /robarcasino - /robarbanco", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[7])
    	{
			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - armas", "{FFFFFF}/tarma /rarma /tirararma\n /aceptar (arma) /cancelar (arma)", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[8])
    	{
    		switch(Info[playerid][pJob])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer de viajes", "{FFFFFF}\n/precioviaje - /rutabus - /miruta", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Pizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de droga", "{FFFFFF}/vendercrack /venderhierba /comprarcrack /comprarhierba\n/plantar /checkplanta /sacarplanta", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/removergps", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bodyguard", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		        case 15: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Trenero", "{FFFFFF}/rutatren /trenduty", "Cerrar", "");
		        case 16: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Piloto", "{FFFFFF}/rutaavion /pilotoduty", "Cerrar", "");
		        default: SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un trabajo!");
		    }
		    switch(Info[playerid][pJob2])
		    {
		        case 1:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bartender", "{FFFFFF}/venderbebida", "Cerrar", "");
		        case 2:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de moviles", "{FFFFFF}/vendertelefono", "Cerrar", "");
		        case 3:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Chofer de viajes", "{FFFFFF}\n/precioviaje - /rutabus - /miruta", "Cerrar", "");
		        case 4:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Pizzero ", "{FFFFFF}/tomarpizza (En lugar de las pizzabikes)", "Cerrar", "");
		        case 5:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Vendedor de droga", "{FFFFFF}/vendercrack /venderhierba /comprarcrack /comprarhierba\n/plantar /checkplanta /sacarplanta", "Cerrar", "");
		        case 6:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Camionero", "{FFFFFF}/cargarcamion /robarcamion /habilidad", "Cerrar", "");
		        case 7:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de armas", "{FFFFFF}/creararma /tarma /rarma /materiales /vendermateriales\n/habilidad", "Cerrar", "");
		        case 8:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Taxista", "{FFFFFF}/tarifa /aceptar taxi /cancelar taxi /taxiduty", "Cerrar", "");
		        case 9:  ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Granjero", "{FFFFFF}/cosechar /dcosechar /vendercosecha", "Cerrar", "");
		        case 10: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Traficante de droga", "{FFFFFF}/paquete /habilidad /tirar paquetes(d)\n/removergps", "Cerrar", "");
		        case 11: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Bodyguard", "{FFFFFF}/venderchaleco", "Cerrar", "");
		        case 12: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Artesano", "{FFFFFF}/crear /materiales /vendermateriales", "Cerrar", "");
		        case 13: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Jardinero", "{FFFFFF}/recogercesped", "Cerrar", "");
		        case 14: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Heladero", "{FFFFFF}/hduty /venderhelado", "Cerrar", "");
		       	case 15: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Trenero", "{FFFFFF}/rutatren /trenduty", "Cerrar", "");
		        case 16: ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Piloto", "{FFFFFF}/rutaavion /pilotoduty", "Cerrar", "");
		    }
		}
 		else if(clickedid == AyudaX[9])
    	{
    	    strcat(cmd4, "{BE81F7}[NEGOCIOS] {FFFFFF}Sólo se puede tener un negocio por persona, según el tipo de negocio el beneficio será diferente.\n");
			strcat(cmd4, "{BE81F7}[NEGOCIOS] {FFFFFF}/binfo (Información completa del negocio) - /comprarnegocio - /vendernegocio.\n");
			strcat(cmd4, "{BE81F7}[NEGOCIOS] {FFFFFF}/abrirnegocio - /cerrarnegocio - /negociomenu - /sganancias - /ncaja (Ajustes Caja Fuerte).\n");
			strcat(cmd4, "{BE81F7}[NEGOCIOS] {FFFFFF}Extorsión: /extorcion - /qextorcion - /recaudar (Revisar ganancias del Negocio).\n");
			ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Negocios", cmd4, "Cerrar", "");
			//ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Negocio", "{FFFFFF}/comprarnegocio /vendernegocio /sganancias /binfo\n/extorcion /qextorcion /recaudar", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[10])
    	{
			if (Info[playerid][pFMember] != 255)
		    {
                ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Familias", "{FFFFFF}/festado /familias /fdepositar /fretirar /cfdepositar\n/fropa /fsarma /fgarma\n\n{FFFF00}Comandos Lider:\n{FFFFFF}/ajustar /famrango /anombrerango /fseguro /festacionar\n/famllaves /fcomprarseguro(En 24/7)", "Cerrar", "");
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "No eres parte de una familia o banda.");
    	}
    	else if(clickedid == AyudaX[11])
    	{
	    	strcat(cmd4, "{BE81F7}[BANCO] {FFFFFF}Para abrir una cuenta bancaria tienes que ir el banco, una vez dentro usa /tarjeta para comenzar.\n");
			strcat(cmd4, "{BE81F7}[BANCO] {FFFFFF}/depositar - /sacar - /transferir - /balance - /atm (Comando general)\n");
			strcat(cmd4, "{BE81F7}[BANCO] {FFFFFF}El Estado de San Andreas otorga préstamos bancarios si lo solicitan via foro. (Subforo del Gobierno)\n");
			ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Banco", cmd4, "Cerrar", "");
			//ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Banco", "{FFFFFF}/depositar /sacar /transferir\n /balance /atm /tarjeta", "Cerrar", "");
    	}
    	else if(clickedid == AyudaX[12])
    	{
  	    	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Casa", "{FFFFFF}/comprarcasa /rentar /desrentar /timbre /vendercasa(2)\n /ponerrenta /preciorenta /sarma /garma /cdepositar\n/cretirar /cmejorar /cajaestado /cseguro /cocinar /vendermicasa(2)/n/ajustarcasa /hinfo", "Cerrar", "");
  	    	SendClientMessageEx(playerid, COLOR_WHITE, "[NUEVO]: Recuerda entrar frecuentemente al servidor para no perder tu casa. Si no entras en 31 días, se pondrá en venta. [/hinfo]");
    	}
    	else if(clickedid == AyudaX[13])
    	{
   			for(new i = 0; i < 15; i++)
			{
				TextDrawHideForPlayer(playerid, AyudaX[i]);
			}
			CancelSelectTextDraw(playerid);
    	}
    	else if(clickedid == AyudaX[14]) // /salirayuda - /soporte - /informacion
    	{
			ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Matrimonio", "{FFFFFF}/testigo /proponer /divorcio", "Cerrar", "");
    	}
    	else if(clickedid == AyudaT[4])
    	{
    	ShowPlayerDialog(playerid, 1000, DIALOG_STYLE_MSGBOX, "{00F70C}Ayuda - Telefono", "{FFFFFF}/llamar /sms /altavoz /agenda (Comprar Antes)", "Cerrar", "");
		}
 	}
    return 1;
}
//***************************
stock SendMoleMessage(color, string[]){
	foreach(Player, i){
		if(gPlayerLogged{i} == 1){
			SendClientMessageEx(i, color, string);
		}
	}
}
function cameraexpire(playerid)
{
	SetPVarInt(playerid, "cameraactive", 0);
 	SetCameraBehindPlayer(playerid);
 	if(GetPVarInt(playerid, "camerasc") == 0)
 	{
	 	SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
	  	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
	  	SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
	}
 	TogglePlayerControllable(playerid,1);
  	DestroyDynamic3DTextLabel(Camera3D[playerid]);
   	SendClientMessageEx(playerid, COLOR_GRAD1, "A tu cámara se le acabaron las baterias.");
}
CreateDynamicDoor(doorid){
	new string[128];
	format(string, sizeof(string), "{FFFFFF}%s\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",DDoorsInfo[doorid][ddDescription],doorid);
	switch(DDoorsInfo[doorid][ddColor]){
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	}
	switch(DDoorsInfo[doorid][ddPickupModel]){
	    case -1: { /* Disable Pickup */ }
		case 1:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 2:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    default: DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
	}
}
function PlayerPlayMusic(playerid){
	if(IsPlayerConnected(playerid)){
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

function StopMusic(){
	foreach(Player, i){
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}

function FishCost(playerid, fish){
	if(IsPlayerConnected(playerid)){
		new cost = 0;
		switch (fish){
			case 1: cost = 3;
			case 2: cost = 4;
			case 3: cost = 6;
			case 5: cost = 7;
			case 6: cost = 4;
			case 8: cost = 10;
			case 9: cost = 14;
			case 11: cost = 12;
			case 12: cost = 9;
			case 14: cost = 14;
			case 15: cost = 10;
			case 16: cost = 9;
			case 17: cost = 8;
			case 18: cost = 11;
			case 19: cost = 5;
			case 21: cost = 4;
		}
		return cost;
	}
	return 0;
}

function ClearFishes(playerid){
	if(IsPlayerConnected(playerid)){
		Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nada");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

function ClearFishID(playerid, fish){
	if(IsPlayerConnected(playerid)){
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nada");
		switch (fish){
			case 1:{
				strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight1] = 0;
				Fishes[playerid][pFid1] = 0;
			}
			case 2:{
				strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight2] = 0;
				Fishes[playerid][pFid2] = 0;
			}
			case 3:{
				strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight3] = 0;
				Fishes[playerid][pFid3] = 0;
			}
			case 4:{
				strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight4] = 0;
				Fishes[playerid][pFid4] = 0;
			}
			case 5:{
				strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight5] = 0;
				Fishes[playerid][pFid5] = 0;
			}
		}
	}
	return 1;
}

//*******************Checks*******************
AdminOnlineCheck(){
	new count;
	foreach(Player, i){
		if(Info[i][pAdminZC] > 1){
			count++;
		}
	}
	return count;
}
medicoon(){
	new count;
	foreach(Player, i){
		if(Info[i][pMember] == 4 || Info[i][pLeader] == 4){
			count++;
		}
	}
	return count;
}
JudgeOnlineCheck(){
	new count;
	foreach(Player, i){
		if(Info[i][pMember] == 9 || Info[i][pLeader] == 9){
			count++;
		}
	}
	return count;
}

stock ConvertTime(cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1){

    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))
    #define CTM_cty 31536000 // 1 Year ._.
    #define CTM_ctmo 2628000 // 1 Mes, 2628000 segundos.
    #define CTM_ctw 604800 // 1 Semana, 604800 segundos.
    #define CTM_ctd 86400  // 1 DIA, 86400 segundos.
    #define CTM_cth 3600 // 1H, 3600 segundos.
    #define CTM_ctm 60 // 1 MIN, 60 segundos.
    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0


    new strii[128];

    if(cty != -1){
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctmo != -1){
        CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctw != -1){
        CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctd != -1){
        CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(cth != -1){
        CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctm != -1){
        CT(ctm);
        format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
    return strii;
}

stock IsValidVehicleID(vehicleid)
{
   if(GetVehicleModel(vehicleid)) return 1;
   return 0;
}

ShowAdMuteFine(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new allmoney;
 	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
	{
 		allmoney = HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+Info[playerid][pAccount];
   	}
   	else
    {
	 	  allmoney = GetPlayerCash(playerid)+Info[playerid][pAccount];
    }
    new fine = 10*allmoney/100;
	if(Info[playerid][pADMuteTotal] < 4) format(string,sizeof(string),"Prisión por %d Minutos\nPerder Dinero ($%d)",Info[playerid][pADMuteTotal]*15,fine);
	if(Info[playerid][pADMuteTotal] == 4) format(string,sizeof(string),"Prisión por 1 Hora");
	if(Info[playerid][pADMuteTotal] == 5) format(string,sizeof(string),"Prisión por 1 Hora y 15 Minutos)");
	if(Info[playerid][pADMuteTotal] == 6) format(string,sizeof(string),"Prisión por 1 Hora y 30 Minutos");
	SafeDialogEx(playerid,ADMUTE,DIALOG_STYLE_LIST,"Selecciona tu castigo - AD Mutes",string,"Ok","Cancelar");
}

function WeedGrowth(weedid)
{
	if(Info[weedid][pWExists])
	{
	    if(Info[weedid][pWValue] < 45)
	    {
			new level = Info[weedid][pDrugsSkill];
	        if(level >= 0 && level <= 50)
			{ Info[weedid][pWValue]+= 1; }
			else if(level >= 51 && level <= 100)
			{ Info[weedid][pWValue]+= 2; }
			else if(level >= 101 && level <= 200)
			{ Info[weedid][pWValue]+= 2; }
			else if(level >= 201 && level <= 400)
			{ Info[weedid][pWValue]+= 2; }
			else if(level >= 401)
			{ Info[weedid][pWValue]+= 3; }
			if(Info[weedid][pWValue] > 45)
			{
			    Info[weedid][pWValue] = 45;
			}
		}
	}
	return 1;
}

WeedLogin(playerid)
{
	if(Info[playerid][pWExists])
	{
		Info[playerid][pWObject] = CreateDynamicObject(19473, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ], 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 60000, 1, "i", playerid);
		return 1;
	}
	return 1;
}

WeedLogout(WeedID)
{
	if(Info[WeedID][pWExists])
	{
		KillTimer(Info[WeedID][pWTimer]);
		DestroyDynamicObject(Info[WeedID][pWObject]);
		return 1;
	}
	return 1;
}

ClearWeed(WeedID)
{
	KillTimer(Info[WeedID][pWTimer]);
	DestroyDynamicObject(Info[WeedID][pWObject]);
	Info[WeedID][pWX] = 0.0;
	Info[WeedID][pWY] = 0.0;
	Info[WeedID][pWZ] = 0.0;
	Info[WeedID][pWValue] = 0;
	Info[WeedID][pWExists] = 0;
	return 1;
}

stock GiftPlayer(playerid)
{
		new string[128];
		new gift = Random(1, 19);
		switch(gift)
		{
		    case 1:
		    {
	        	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return GiftPlayer(playerid);
		    	GivePlayerValidWeapon(playerid, 22);
		    	GivePlayerValidWeapon(playerid, 31);
		    	GivePlayerValidWeapon(playerid, 29);
	        	SendClientMessageEx(playerid, -1, " Felicidades, ahora tienes un set de armas!");
	        	format(string, sizeof(string), "* A %s le regalaron un set de armas completo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 2:
		    {
    			GivePlayerCash(playerid, 30000);
	        	SendClientMessageEx(playerid, -1, "  Felicidades, has ganado $10,000!");
	        	format(string, sizeof(string), "* A %s le regalaron $10,000 que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 3:
		    {
	        	Info[playerid][pMats] += 500;
	        	SendClientMessageEx(playerid, -1, " Felicidades, ahora tienes 500 materiales!");
	        	format(string, sizeof(string), "* A %s le regalaron 500 materiales, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 4:
		    {
				return GiftPlayer(playerid);
		    }
		    case 5:
		    {
				Info[playerid][pCrack] += 5000;
				SendClientMessageEx(playerid, -1, " Felicidades, ganaste 50 gramos de crack!");
				format(string, sizeof(string), "* A %s le regalaron 50 gramos de crack, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 6:
		    {
	        	GivePlayerCash(playerid, 60000);
				SendClientMessageEx(playerid, -1, " Felicidades, ganaste $20,000!");
				format(string, sizeof(string), "* A %s le regalaron $20,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 7:
		    {
	        	GivePlayerCash(playerid, 55000);
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado $25,000!");
				format(string, sizeof(string), "* A %s le regalaron $25,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 8:
		    {
	        	GivePlayerCash(playerid, 80000);
				SendClientMessageEx(playerid, -1, "  Felicidades, has ganado $40,000!");
				format(string, sizeof(string), "* A %s le regalaron $40,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 9:
		    {
		    	GivePlayerCash(playerid, 50000);
				SendClientMessageEx(playerid, -1, " Felicidades - has ganado $50,000!");
				format(string, sizeof(string), "* A %s le regalaron $50,000 en efectivo, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 10:
		    {
		    	Info[playerid][pMats] += 10000;
				SendClientMessageEx(playerid, -1, " Felicidades - Has ganado 10,000 materiales!");
				format(string, sizeof(string), "* A %s le regalaron 10,000 materiales, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 11:
		    {
			    Info[playerid][pExp] += 16;
				SendClientMessageEx(playerid, -1, " Felicidades - has ganado 3 puntos de experiencia!");
				format(string, sizeof(string), "* A %s le regalaron 3 puntos de experiencia, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 12:
		    {
			    Info[playerid][pExp] += 22;
				SendClientMessageEx(playerid, -1, " Felicidades - has ganado 2 puntos de experiencia!");
				format(string, sizeof(string), "* A %s le regalaron 2 puntos de experiencia, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 13:
		    {
		    Info[playerid][pExp] += 5;
				SendClientMessageEx(playerid, -1, " Felicidades - has ganado 5 puntos de experiencia!");
				format(string, sizeof(string), "* A %s le regalaron 5 puntos de experiencia, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 14:
		    {
				Info[playerid][pPaintTokens] += 150;
				SendClientMessageEx(playerid, COLOR_GRAD2, " Felicidades - has ganado 150 Fichas de PaintBall!");
				format(string, sizeof(string), "* A %s le regalaron 150 fichas de paintball, que lo disfrute!", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				Log("LOGS/regalos.log", string);
		    }
		    case 17:
		    {
          		if(Info[playerid][pVIP] > 0)
		        {
					Info[playerid][pVTokens] += 10;
					SendClientMessageEx(playerid, COLOR_GRAD2, " Felicidades - has ganado 50 Fichas VIP!");
					SendClientMessageEx(playerid, -1, " Puedes venderlas o usarlas en el lounge VIP!");
					format(string, sizeof(string), "* A %s le regalaron 50 Fichas VIP, que lo disfrute!", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
					Log("LOGS/regalos.log", string);
				}
				else
			    {
			        Info[playerid][pVIP] = 1;
        			Info[playerid][pTempVIP] = 10800;
		    		Info[playerid][pBuddyInvited] = 1;
				    SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido invitado a ser Bronce VIP por 3 horas. Disfrutalo!");
				    format(string, sizeof(string), "BUDDY INVITE: %s ha ganado un buddyinvite.", GetPlayerNameEx(playerid));
				    Log("LOGS/setvip.log", string);
				    format(string, sizeof(string), "* A %s le regalaron 3 horas de Bronce VIP, que lo disfrute!", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
                    Log("LOGS/regalos.log", string);
				}
		    }
		    default: return GiftPlayer(playerid);
		}
	    return 1;
}


public OnPlayerCommandReceived(playerid, cmdtext[])
{
    printf("[CMD] [%s]: %s", GetPlayerNameEx(playerid), cmdtext);
    if(!gPlayerLogged{playerid}) return SendClientMessageEx(playerid, COLOR_GRAD2, "* No puedes utilizar comandos si no estás logeado en el servidor");
	if(strfind(cmdtext, "|", true) != -1)
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes usar el carácter '|' en un comando.");
		return 0;
	}
	if(GetPVarInt(playerid, "LoadingObjects") == 1)
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes usar comandos en este momento.");
	    return 0;
	}
 	if(Info[playerid][pAdminZC] < 2)
	{
		if(strfind(cmdtext, ":", true) != -1)
		{
			new
				i_numcount,
				i_period,
				i_pos;
			while(cmdtext[i_pos])
			{
				if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if(cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3)
			{
				new string[128];
				format(string,sizeof(string),"Atención: (ID: %d) %s puede estar haciendo SPAM: '%s'.", playerid, GetPlayerNameEx(playerid),cmdtext);
				SendAdminMessage(COLOR_RED, string);
				return 0;
			}
		}
	}
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) SendClientMessage(playerid, 0x73000064, "[INFRANET]{F6CDE3} El comando introducido no existe, le recomendamos que use /ayuda.");
	return 1;
}

//------------------------------------------------------------------------------------------------------
stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
	new
		Float: f_playerPos[3];
	GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
	foreach(Player, i)
	{
		if(!BigEar[i])
		{
			if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
			{
				if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col1, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col2, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col3, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col4, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col5, string);
				}
			}
		}
		else SendClientMessageEx(i, col1, string);
	}
	return 1;
}

ProxDetectorS(Float:radi, playerid, targetid)
{
	new
		Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

function PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

public OnPlayerText(playerid, text[])
{
    if(DetectarSpam(text)) { SendClientMessage(playerid,0xFFFFFFFF,"Hiciste SPAM."); return 0; }
	// Anti-MG
	if(strfind(text, "gay", true) != -1 || strfind(text, "rol", true) != -1 || strfind(text, "=V", true) != -1 || strfind(text, "Server", true) != -1 || strfind(text, "Noob", true) != -1 || strfind(text, "RolePlay", true) != -1 || strfind(text, ":D", true) != -1 || strfind(text, ":c", true) != -1)
	{
	SendClientMessage(playerid,0xDC092FFF,"No hagas MG, podrás ser sancionado.");
	return 0;
    }
	new sendername[MAX_PLAYER_NAME],string[256],tmp[32];
	new giveplayer[MAX_PLAYER_NAME];
	if(Muted[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "* ¡Has sido silenciado!");
		return 0;
	}
	if(!gPlayerLogged{playerid})
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "No puedes usar el chat en el Login - Kikeado automáticamente.");
		Kick(playerid);
		return 0;
	}
	if(TutStep[playerid] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "* Estás en el tutorial no puedes hablar.");
		return 0;
	}
	if(TalkingLive[playerid] != INVALID_PLAYER_ID)
	{
		if(Team_LSTV(playerid))
		{
			format(string, sizeof(string), "[News Live] Reportero %s: %s", GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_NEWS2, string);
		}
		else
		{
			format(string, sizeof(string), "[News Live] Invitado %s: %s", GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_NEWS2, string);
		}
		return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
		if (strcmp("si", text, true) == 0)
		{
			if(IsPlayerConnected(GotProposedBy[playerid]))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "Sacerdote: %s aceptas a %s como tu esposa para siempre? (Escribe 'Si' - cualquier otro caracter arruinaria el matrimonio).", giveplayer,sendername);
				SendClientMessageEx(GotProposedBy[playerid], COLOR_WHITE, string);
				MarriageCeremoney[GotProposedBy[playerid]] = 1;
				MarriageCeremoney[playerid] = 0;
				GotProposedBy[playerid] = 999;
				return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
			}
			if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(Info[playerid][pSex] == 1 && Info[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticias: Tenemos una nueva linda pareja! %s y %s ahora están casados!!", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(Info[playerid][pSex] == 1 && Info[ProposedTo[playerid]][pSex] == 1)
					{
						format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticias: Tenemos una nueva pareja gay! %s & %s se han casado.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(Info[playerid][pSex] == 2 && Info[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticias: Tenemos una nueva pareja de lesbianas! %s & %s se han casado.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(Info[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", sendername);
					format(Info[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", giveplayer);
					GivePlayerCash(playerid, - 100000);
					Info[playerid][pMarried] = 1;
					Info[ProposedTo[playerid]][pMarried] = 1;
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		else
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					format(string, sizeof(string), "* No quisiste casarse con %s, no dijiste 'si'.", GetPlayerNameEx(GotProposedBy[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s no quisó casaste contigo, no dijo 'si'.",GetPlayerNameEx(playerid));
					SendClientMessageEx(GotProposedBy[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					format(string, sizeof(string), "* No quisiste casarse con %s, no dijiste 'si'.",GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s no quisó casaste contigo, no dijo 'si'.",GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		return 0;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(UnidentifedCall[playerid] == 1)
		{
		    format(string, sizeof(string), "(Teléfono) Desconocido: %s", text);
		}
		else
		{
			format(string, sizeof(string), "(Teléfono) %s: %s", sendername, text);
		}
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		// -============================ · ============================- //
		if(Mobile[playerid] == 915)
		{
		    if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Central: Entendido, ¿su ubicación porfavor?");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			format(wanted, sizeof(wanted), "Central: %s necesita una ambulancia en %s",turner, text);
			SendRadioMessage(4, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Incidente: %s",Situacion[playerid]);
			SendRadioMessage(4, TEAM_CYAN_COLOR, wanted);
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			emdtrace = 1; emdtrace_x = trace_x; emdtrace_y = trace_y; emdtrace_z = trace_z;
			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Central: Ahora enviaremos una ambulancia, sea paciente.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Colgaron.");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			return 0;
		}
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Central: Por favor, ¿una breve explicación de la situación?");
				return 0;
			}
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Central: Entendido, ¿su ubicación porfavor?");
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			Mobile[playerid] = 915;
			return 0;
		}
		if(Mobile[playerid] == 758)
		{
		    format(string, sizeof(string), "(Celular) %s", text);
		    SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
			format(string, sizeof(string), "[Conexión telefónica - %s] Celular: %s",GetPlayerNameEx(playerid), text);
			OOCNews(COLOR_NEWS2, string);
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Comisaria: repítame que no le he entendido!");
				return 0;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(strfind(text, " ", true))
			{
			    format(string, sizeof(string), "** Central: han solicitado una patrulla en: %s",text);
				SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
				format(string, sizeof(string), "** Central: un tal %s denuncia: %s",sendername, Situacion[playerid]);
				SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
				SendClientMessageEx(playerid, COLOR_GRAD2, "Comisaria: una patrulla se pasará por la zona.");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Comisaria: ¡Gracias por su información!");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Colgaron <--");
				Mobile[playerid] = INVALID_PLAYER_ID;
				new Float:trace_x, Float:trace_y, Float:trace_z;
				GetPlayerPos(playerid, trace_x, trace_y, trace_z);
				pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 9);
				return 0;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "Comisaria: Por favor calmese y vuelva a repetir su situación diciendo la ciudad.");
			    return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "Comisaria: no le entiendo., repíta porfavor!");
				return 0;
			}
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			format(string, sizeof(string), "Comisaria: entendido señor %s, díganos en donde se encuentra y alguna referencia.", GetPlayerNameEx(playerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCIA:  Lo sentimos, no le entendimos, POLICIA o PARAMEDICO ?");
				return 0;
			}
			else if ((strcmp("Policia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Policia")))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "--> Conexión establecida con LSPD.");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Central: Explique brevemente lo ocurrido.");
				Mobile[playerid] = 912;
				return 0;
			}
			else if ((strcmp("paramedico", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("paramedico")))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "--> Conexión establecida con S.E.C (Médicos)");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Central: Explique brevemente los detalles del accidente.");
				Mobile[playerid] = 914;

				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, 0x0080FFFF, "EMERGENCIA: Lo sentimos, no le entendimos, POLICIA o PARAMEDICO ?");
				return 0;
			}
		}
		if(Mobile[playerid] == 3901)
		{
			SendFamilyMessage(7, COLOR_GREEN, "Central: Llegó un nuevo mensaje:");
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "[ID:%d] Mensaje de %s: %s", playerid, sendername, text);
			SendFamilyMessage(5, COLOR_GREEN, string);
			SendClientMessageEx(playerid, COLOR_GREEN, "SA News Estudio: Gracias por su información !");
			SendClientMessageEx(playerid, COLOR_GRAD2, "   la llamada se colgo...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(Info[Mobile[playerid]][pSpeaker] != 0)
				{
			   		format(string, sizeof(string), "[Altavoz] %s Dice: %s", GetPlayerNameEx(playerid), text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
			   		SendClientMessageEx(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW,"No hay nadie!");
		}
		return 0;
	}
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		if(GetPVarInt(playerid, "ArenaMode") == 2)
		{
			switch(Info[playerid][pPaintTeam])
			{
			    case 1:
				{
					format(string, sizeof(string), "[Paintball Arena] ({FF0000}Equipo Rojo{FFFFFF}) %s dice: %s", GetPlayerNameEx(playerid), text);
				}
				case 2:
				{
					format(string, sizeof(string), "[Paintball Arena] ({FFFFFF}Equipo Azul{FFFFFF}) %s dice: %s", GetPlayerNameEx(playerid), text);
				}
			}
		}
		if(GetPVarInt(playerid, "ArenaMode") == 2)
		{
			format(string, sizeof(string), "[Paintball Arena] %s dice: %s", GetPlayerNameEx(playerid), text);
		}
		if(GetPVarInt(playerid, "ArenaMode") == 3)
		{
			format(string, sizeof(string), "[Paintball Arena] %s dice: %s", GetPlayerNameEx(playerid), text);
		}
		SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_WHITE, string);
		return 0;
	}
	if(Info[playerid][pMaskuse] == 1)
	{
		format(string, sizeof(string), "Desconocido dice: %s", text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		return 0;
	}
 	switch(Info[playerid][pAccent])
	{
		case 0, 1:
		{
			format(string, sizeof(string), "%s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 2:
		{
			format(string, sizeof(string), "[Acento Britanico] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 3, 4, 5:
		{
			format(string, sizeof(string), "[Acento Asiático] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 6:
		{
			format(string, sizeof(string), "[Acento Venezolano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 7:
		{
			format(string, sizeof(string), "[Acento Peruano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 8:
		{
			format(string, sizeof(string), "[Acento Ruso] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 9:
		{
			format(string, sizeof(string), "[Acento Americano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 10:
		{
			format(string, sizeof(string), "[Acento Español] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 11:
		{
			format(string, sizeof(string), "[Acento Colombiano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 12:
		{
			format(string, sizeof(string), "[Acento Francés] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 13:
		{
			format(string, sizeof(string), "[Acento Italiano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 14:
		{
			format(string, sizeof(string), "[Acento Gangster] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 15:
		{
			format(string, sizeof(string), "[Acento Uruguayo] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 16:
		{
			format(string, sizeof(string), "[Acento Brasilero] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 17:
		{
			format(string, sizeof(string), "[Acento Argentino] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 18:
		{
			format(string, sizeof(string), "[Acento Chileno] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 19:
		{
			format(string, sizeof(string), "[Acento Cubano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 20:
		{
			format(string, sizeof(string), "[Acento Israeli] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 21:
		{
			format(string, sizeof(string), "[Acento Alemán] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 22:
		{
			format(string, sizeof(string), "[Acento Hippie] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 23:
		{
			format(string, sizeof(string), "[Acento Méxicano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
       case 24:
		{
			format(string, sizeof(string), "[Acento Árabe] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 25:
		{
			format(string, sizeof(string), "[Acento Noruego] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 26:
		{
			format(string, sizeof(string), "[Acento Australiano] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 27:
		{
			format(string, sizeof(string), "[Acento - ] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 28:
		{
			format(string, sizeof(string), "[Acento - ] %s dice: %s", GetPlayerNameEx(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
	}
	return 0;
}

function FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

    function TeleportPlayer(playerid)
    {
            new Float:cx, Float:cy, Float:cz;
            GetPlayerPos(playerid, cx, cy, cz);
    		for(new i = 0; i < sizeof(DDoorsInfo); i++)
                            {
                            if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
							{
           						 SendClientMessageEx(playerid, COLOR_GRAD2, "Usa el comando /entrar o presiona la tecla [H] para entrar a un interior, para salir usa /salir, o pulsa [H]");
            					return 1;
       						 }
                            if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
                                    {
                            if(DDoorsInfo[i][ddVIP] > 0 && Info[playerid][pVIP] < DDoorsInfo[i][ddVIP])
                                            {
                                    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar necesitas ser un mayor nivel de VIP.");
                                    return 1;
                            }
                            if(DDoorsInfo[i][ddFamily] > 0)
                                            {
                                    if(Info[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1)
                                                    {
                                    SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar, sólo para miembros de la familia.");
                                                    return 1;
                                            }
                                }
                                if(DDoorsInfo[i][ddFaction] > 0)
                                            {
                                                    if(DDoorsInfo[i][ddFaction] >= 1 && DDoorsInfo[i][ddFaction] <= 3)
                                                    {
                                                            if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar, esta puerta está restringida. (Sólo Policías)");
                                                    }
                                                    else if(DDoorsInfo[i][ddFaction] < 32 && Info[playerid][pMember] != DDoorsInfo[i][ddFaction])
                                                    {
                                                            return  SendClientMessageEx(playerid, COLOR_GRAD2, "Sólo ingreso a miembros de la facción.");
                                                    }
                                }
                                if(DDoorsInfo[i][ddAdmin] > 0 && Info[playerid][pAdminZC] < DDoorsInfo[i][ddAdmin])
                                            {
                                    return SendClientMessageEx(playerid, COLOR_GRAD2, "No puedes entrar, necesitas ser de más nivel administrativo.");
                                }

                                if(DDoorsInfo[i][ddWanted] > 0 && Info[playerid][pWantedLevel] != 0)
                                            {
                                    return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta puerta esta restringida a personas con nivel de búsqueda.");
                                }

                                            if(DDoorsInfo[i][dLocked] == 1)
                                            {
                                                return SendClientMessageEx(playerid, COLOR_GRAD2, "Esta puerta está bloqueada.");
                                            }
                            SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
                            Info[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
                            Info[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
                            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
                            if(DDoorsInfo[i][ddCustomInterior])
                                            {
                               LoadObjects(playerid);
                            }
                            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                                            {
                            SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                            SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                            LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
                            }
                            else
                                            {
                                    SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                                    SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                                    SetCameraBehindPlayer(playerid);
                            }
                            if(DDoorsInfo[i][dMusic] == 0) return 1;
                            else
                            {
                                switch(DDoorsInfo[i][dMusic])
                                {
                                    case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349", 1, 1, 1, 1, 0); // Reggeaton
                                case 2: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=860870", 1, 1, 1, 1, 0); // Electro
                                case 3: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 1, 1, 1, 1, 0); // Techno
                                case 4: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016", 1, 1, 1, 1, 0); // Hip hop
                                case 5: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366", 1, 1, 1, 1, 0); // Variada
                            }
                        }
                                            return 1;
                            }
                        }
                        for(new i = 0; i < sizeof(fINFO); i++)
                            {
                            if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyEntrance][0], fINFO[i][FamilyEntrance][1], fINFO[i][FamilyEntrance][2]))
                                    {
                                    LoadObjects(playerid);
                            SetPlayerInterior(playerid,fINFO[i][FamilyInterior]);
                            Info[playerid][pInt] = fINFO[i][FamilyInterior];
                            Info[playerid][pVW] = fINFO[i][FamilyVirtualWorld];
                            SetPlayerVirtualWorld(playerid, fINFO[i][FamilyVirtualWorld]);
                            if(fINFO[i][FamilyCustomMap])
                                            {
                                    LoadObjects(playerid);
                            }
                            Streamer_UpdateEx(playerid, fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
                            SetPlayerPos(playerid,fINFO[i][FamilyExit][0],fINFO[i][FamilyExit][1],fINFO[i][FamilyExit][2]);
                            SetPlayerFacingAngle(playerid,fINFO[i][FamilyExit][3]);
                            return 1;
                            }
                            }
                            //FBI
                    if(PlayerToPointStripped(1, playerid,325.4713,-1514.8862,36.0325, cx,cy,cz))
                    {
                        	LoadObjects(playerid);
                            SetPlayerPos(playerid,278.0079,-1505.8489,-45.1302); Info[playerid][pVW] = 600;
                            SetPlayerVirtualWorld(playerid, 600); SetPlayerFacingAngle(playerid, ESTE);
                            SetCameraBehindPlayer(playerid);
                    }
            if(PlayerToPointStripped(1, playerid,278.0079,-1505.8489,-45.1302, cx,cy,cz))
            {
                    SetPlayerPos(playerid,325.4713,-1514.8862,36.0325); SetPlayerFacingAngle(playerid, 90);
                    SetCameraBehindPlayer(playerid); SetPlayerVirtualWorld(playerid, 0);
            }
////////////// ASCENSORES  LEGALES /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Ascensores FBI.
            else if (PlayerToPointStripped(1, playerid,316.2381,-1513.3770,24.9219, cx,cy,cz))
			{
				SafeDialogEx( playerid, ELEVATOR4 , DIALOG_STYLE_LIST, "Elevador", "Interior\nHelipuerto", "Ir", "Cancelar");
			}
            else if (PlayerToPointStripped(1, playerid,301.5812,-1490.6759,-45.1302, cx,cy,cz))
            {
                    if(!Team_FBI(playerid))
                    {
                            SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
                            return 1;
                    }
                    else SafeDialogEx( playerid, ELEVATOR5 , DIALOG_STYLE_LIST, "Elevador", "Garage\nHelipuerto", "Ir", "Cancelar");
            }
            else if (PlayerToPointStripped(1, playerid,308.8113,-1509.8134,77.7645, cx,cy,cz))
            {
            	SafeDialogEx( playerid, ELEVATOR7 , DIALOG_STYLE_LIST, "Elevador", "Interior\nGarage", "Ir", "Cancelar");
            }
            else if (PlayerToPointStripped(1, playerid,364.7064,-11.3221,1001.8516, cx,cy,cz) && GetPlayerInterior(playerid) == 9)
            {
            	SetPosEx(playerid, 928.6895,-1353.0563,13.3438,89.7594,0,0);
                GameTextForPlayer(playerid, "~w~INFRANET-RP", 5000, 1);
            }
            // Ascensores LSPD. [ASCENSOR IDA]
			else if(PlayerToPointStripped(2, playerid,1554.822021,-1648.085815,4990.7, cx,cy,cz))
			{
				if(Info[playerid][pMember] == 1 || Info[playerid][pLeader] == 1)
				{
           			ShowPlayerDialog(playerid,DIALOG_LSPD_ELEVATOR1,DIALOG_STYLE_LIST,
	   				"LSPD - Sector Sur","(A) Planta Superior\t - \t(Oficinas) \n(B) Planta Inferior\t - \t(Prisión)","Ir","Salir");
				}
				else if(Autorizado[playerid] == 1)
				{
					SetPosEx(playerid, 1555.0,-1648.085815,4985.34, -90.0, 1, 1);
					SendClientMessageEx(playerid, COLOR_WHITE, "Usted se encuentra en la prisión de LSPD, su autorización es límitada.");
 					Autorizado[playerid] = 0;
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
				}
			}
 			else if(PlayerToPointStripped(2, playerid,1554.630126,-1709.477050,4990.7, cx,cy,cz))
			{
				if(Info[playerid][pMember] == 1 || Info[playerid][pLeader] == 1)
				{
 					ShowPlayerDialog(playerid,DIALOG_LSPD_ELEVATOR2,DIALOG_STYLE_LIST,
					"LSPD - Sector Norte","(A) Planta Superior\t - \t(Oficinas) \n(B) Planta Inferior\t - \t(Garage)","Ir","Salir");
				}
				else
				{
					SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
				}
			}
		 	// - Del Garage a la HQ sólo policías y esposados pueden pasar. / De la prisión a HQ sin jail y policias. [ASCENSOR RETORNO]
 			//  || PlayerCuffed(playerid) == 0
			/////////// LSPD - TP de la Prisión al Interior de LSPD (Ascensor) - Sector Sur.
			else if(PlayerToPointStripped(2, playerid,1555.0,-1648.085815,4985.34, cx,cy,cz))
 			{
 	    		if(IsACop(playerid) || Info[playerid][pJailed] == 0) // Jugador sale de la HQ sin jail.
				{
	 				SetPosEx(playerid,1554.822021,-1648.085815,4990.7, -90.0, 1, 1);
	 				GameTextForPlayer(playerid, "~w~Departamento De ~n~Policia de Los Santos", 2500, 1);
				}
				else
				{
					GameTextForPlayer(playerid, "~r~!No puedes salir del lugar sin la condena a cumplir!", 2500, 3);
				}
  			}
			/////////// LSPD - TP del Parking al Interior de LSPD (Ascensor) - Sector Norte.
			else if(PlayerToPointStripped(2, playerid,1525.365966,-1677.872680,5.890625, cx,cy,cz))
			{
				if(IsACop(playerid)|| Info[playerid][pEstado] == 2) // Jugador entra a la HQ esposado.
				{
				    LoadObjects(playerid); // Se precisa cargado completo de la HQ al entrar por primera vez.
 					SetPosEx(playerid,1554.630126,-1709.477050,4990.7, -90.0, 1, 1);
 					GameTextForPlayer(playerid, "~w~Departamento De ~n~Policia de Los Santos", 2500, 1);
  				}
				else
				{
					GameTextForPlayer(playerid, "~r~!Acceso restringido!", 2500, 3);
				}
 			}
			//////////// LSPD - De la planta de arriba a la de abajo. (Ascensor)
			// Sector Sur
  			else if(PlayerToPointStripped(2, playerid,1554.822021,-1648.085815,4995.55, cx,cy,cz))
			{
				if(Info[playerid][pMember] == 1 || Info[playerid][pLeader] == 1)
				{
					SetPosEx(playerid,1554.822021,-1648.085815,4990.7, -90.0, 1, 1);
				}
				else
				{
					GameTextForPlayer(playerid, "~r~!Solo Policias pueden usar el ascensor!", 5000, 3);
				}
			}
			// Sector Norte
			else if(PlayerToPointStripped(2, playerid,1554.630126,-1709.477050,4995.55, cx,cy,cz))
			{
				if(Info[playerid][pMember] == 1 || Info[playerid][pLeader] == 1)
				{
					SetPosEx(playerid,1554.630126,-1709.477050,4990.7, -90.0, 1, 1);
				}
				else
				{
					GameTextForPlayer(playerid, "~r~!Solo Policias pueden usar el ascensor!", 5000, 3);
				}
			}
//////////// GARAGES /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
   			{
      			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	  			{
      				SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
                    Streamer_Update(playerid);
       			}
          		else
  				{
      				SetPlayerPos(playerid, 2235.1851,-1763.5916,2032.9728);
                    SetPlayerFacingAngle(playerid, 14.9);
                    SetCameraBehindPlayer(playerid);
                    LoadObjects(playerid);
          		}
                return 1;
            }
            if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
            {
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
    				SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
                    Streamer_Update(playerid);
        		}
       			else
       			{
					SetPlayerPos(playerid, 1134.0381,-1591.4459,6602.5879);
     				SetPlayerFacingAngle(playerid, 14.9);
                    SetCameraBehindPlayer(playerid);
         			LoadObjects(playerid);
			 	}
                return 1;
     		}
       		if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
		 	{
				if(Info[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 2000, 4);
    			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    			{
       				SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  NORTE);
                    Streamer_Update(playerid);
           		}
             	else
			 	{
                    SetPlayerPos(playerid, 855.6053,-1412.6117,4202.1577);
                    SetPlayerFacingAngle(playerid, NORTE);
                    SetCameraBehindPlayer(playerid);
                    LoadObjects(playerid);
               	}
   				return 1;
             }
             for(new i = 0; i < sizeof(HouseInfo); i++)
			 {
                            if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])){
                            if(Info[playerid][pPhousekey] == i || Info[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i){
                                            LoadObjects(playerid);
                                    SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                                    Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                                    Info[playerid][pVW] = i+6000;
                                    SetPlayerVirtualWorld(playerid, i+6000);
                                    if(HouseInfo[i][hCustomInterior] == 1){
                                    LoadObjects(playerid);
                                    }
                                    SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                                    SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                                    SetCameraBehindPlayer(playerid);
                                    GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
                                    Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                            }
                            else
                            {
                                    GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
                            }
                            return 1;
                    }
                    }
                    for(new i = 0; i <  sizeof(DDoorsInfo); i++)
                    {
                    if (IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
                            {
                    SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
                    Info[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
                    SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
                    Info[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
                    if(DDoorsInfo[i][ddCustomExterior])
                                    {
                                            LoadObjects(playerid);
                    }
                    if(DDoorsInfo[i][dMusic] != 0) StopAudioStreamForPlayer(playerid);
                    if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                                    {
                            SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                            SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                            SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                            LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                    }
                    else
                                    {
                            SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                            SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                            SetCameraBehindPlayer(playerid);
                            return 1;
                    }
                    }
            }
            for(new i = 0; i < sizeof(fINFO); i++)
                    {
                    if (IsPlayerInRangeOfPoint(playerid,3.0,fINFO[i][FamilyExit][0], fINFO[i][FamilyExit][1], fINFO[i][FamilyExit][2]) && Info[playerid][pVW] == fINFO[i][FamilyVirtualWorld]) {
                    Info[playerid][pInt] = 0;
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerInterior(playerid,0);
                    Streamer_UpdateEx(playerid, fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
                    SetPlayerPos(playerid,fINFO[i][FamilyEntrance][0],fINFO[i][FamilyEntrance][1],fINFO[i][FamilyEntrance][2]);
                    SetPlayerFacingAngle(playerid,fINFO[i][FamilyEntrance][3]);
                    return 1;
                    }
            }
                    if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
                    {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                    SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  179.93);
                    Streamer_Update(playerid);
                }
                else{
                                    SetPlayerPos(playerid, 2280.5620,-1722.8878,13.5469);
                                    SetPlayerFacingAngle(playerid, 181);
                                    SetCameraBehindPlayer(playerid);
                            }
                            return 1;
                    }
                    if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
                    {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                    SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
                    Streamer_Update(playerid);
                }
                else{
                                    SetPlayerPos(playerid, 1241.9020,-1734.0985,13.5899);
                                    SetPlayerFacingAngle(playerid, 354.9746);
                                    SetCameraBehindPlayer(playerid);
                            }
                            return 1;
                    }
                    if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
                    {
                    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
                    SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
                    Streamer_Update(playerid);
                }
                else{
                                    SetPlayerPos(playerid, 853.3862,-1387.1884,13.7470);
                                    SetPlayerFacingAngle(playerid, 182.4513);
                                    SetCameraBehindPlayer(playerid);
                            }
                            return 1;
                    }
                for(new i = 0; i <  sizeof(HouseInfo); i++)
                    {
                    if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && Info[playerid][pVW] == i+6000)
                            {
                    	SetPlayerInterior(playerid,0);
                        Info[playerid][pInt] = 0;
                        if(HouseInfo[i][hCustomExterior])
                        {
                            LoadObjects(i);
                        }
                        SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                        SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
                        SetCameraBehindPlayer(playerid);
                        SetPlayerVirtualWorld(playerid, 0);
                        Info[playerid][pVW] = 0;
                        return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                    }
                }
            return 1;
    }


ClearChatbox(playerid)
{
	for(new i = 0; i < 20; i++)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "");
	}
	return 1;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

function RadarCooldown(playerid)
{
   DeletePVar(playerid, "RadarTimeout");
   return 1;
}

function MapsRemoveForPlayer(playerid)
{
// Semáforos innecesarios. (Control de Velocidad Unity - Alhambra).
RemoveBuildingForPlayer(playerid, 1283, 1822.5703, -1763.2578, 15.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1832.0703, -1756.5156, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1900.8047, -1756.5156, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1832.8359, -1751.5078, 15.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1820.8359, -1741.1484, 15.5781, 0.25);

//Mecanicos

RemoveBuildingForPlayer(playerid, 4049, 1330.3750, -1793.0781, 22.9688, 0.25);
RemoveBuildingForPlayer(playerid, 4050, 1350.7578, -1802.2813, 12.6953, 0.25);
RemoveBuildingForPlayer(playerid, 4051, 1371.8203, -1754.8203, 19.0469, 0.25);
RemoveBuildingForPlayer(playerid, 4191, 1353.2578, -1764.5313, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 4194, 1360.3828, -1840.6172, 26.8047, 0.25);
RemoveBuildingForPlayer(playerid, 4219, 1330.3281, -1792.5938, 23.4922, 0.25);
RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.1563, -1844.0156, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1336.3359, -1842.8516, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.3750, -1841.5391, 13.0391, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1373.6875, -1860.0703, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1337.2578, -1841.8750, 13.0000, 0.25);
RemoveBuildingForPlayer(playerid, 4193, 1360.3828, -1840.6172, 26.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1340.8906, -1835.3672, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1340.1328, -1835.0391, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1340.8672, -1834.4844, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.8750, -1818.2266, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1336.7891, -1816.3047, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.1250, -1816.5781, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1338.0781, -1815.7578, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.8984, -1816.1641, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1342.2734, -1806.2031, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1342.6328, -1807.0391, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1221, 1342.5156, -1805.0703, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 4010, 1350.7578, -1802.2813, 12.6953, 0.25);
RemoveBuildingForPlayer(playerid, 4231, 1342.0547, -1800.2188, 25.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.9531, -1796.4297, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1338.9609, -1796.0000, 13.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.9375, -1795.4609, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 4112, 1330.3750, -1793.0781, 22.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1221, 1338.9688, -1793.7266, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1337.6953, -1774.7344, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1338.7891, -1775.3203, 12.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1337.0078, -1773.8672, 13.0000, 0.25);
RemoveBuildingForPlayer(playerid, 4022, 1353.2578, -1764.5313, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1532, 1353.1328, -1759.6563, 12.5000, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1341.4531, -1755.4844, 16.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1345.7656, -1740.6172, 15.6250, 0.25);
RemoveBuildingForPlayer(playerid, 4021, 1371.8203, -1754.8203, 19.0469, 0.25);

//Burger Shot Cerca de Unity

RemoveBuildingForPlayer(playerid, 4075, 1791.7969, -1716.9844, 12.5234, 0.25);
RemoveBuildingForPlayer(playerid, 4076, 1783.1016, -1702.3047, 14.3516, 0.25);
RemoveBuildingForPlayer(playerid, 4077, 1781.4766, -1648.4219, 26.8359, 0.25);
RemoveBuildingForPlayer(playerid, 4078, 1783.1016, -1647.3125, 23.2578, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 1767.2109, -1617.5391, 15.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 1799.1328, -1708.7656, 14.1016, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1807.5156, -1625.8828, 12.7031, 0.25);
RemoveBuildingForPlayer(playerid, 1266, 1805.0234, -1692.4453, 25.1484, 0.25);
RemoveBuildingForPlayer(playerid, 4018, 1791.7969, -1716.9844, 12.5234, 0.25);
RemoveBuildingForPlayer(playerid, 4027, 1783.1016, -1702.3047, 14.3516, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1777.8516, -1677.1953, 14.3125, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1805.0234, -1692.4453, 25.1484, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1761.4609, -1651.7422, 14.3125, 0.25);
RemoveBuildingForPlayer(playerid, 4028, 1781.4766, -1648.4219, 26.8359, 0.25);
RemoveBuildingForPlayer(playerid, 3984, 1783.1016, -1647.3125, 23.2578, 0.25);
RemoveBuildingForPlayer(playerid, 700, 1792.8047, -1640.9531, 14.3125, 0.25);

//Hitman (Nueva HQ) by Alexey_Kozlov

RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3295, 2144.4297, -2307.9063, 24.3906, 0.25);
RemoveBuildingForPlayer(playerid, 3296, 2152.5938, -2303.8203, 24.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3286, 2144.4297, -2307.9063, 24.3906, 0.25);
RemoveBuildingForPlayer(playerid, 3287, 2152.5938, -2303.8203, 24.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2165.0703, -2288.9688, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2194.4766, -2242.8750, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2235.1641, -2231.8516, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3289, 2140.4219, -2301.9688, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 3258, 2140.4219, -2301.9688, 12.9922, 0.25);


// Nuevas texturas "Rusos" y "Santana", FS "GM".
// CDG:
RemoveBuildingForPlayer(playerid, 4625, 1453.6016, -989.4844, 34.4375, 0.25);
RemoveBuildingForPlayer(playerid, 4600, 1453.6016, -989.4844, 34.4375, 0.25);
// Hitmans (Nueva HQ):
/*RemoveBuildingForPlayer(playerid, 5230, 2489.2344, -1962.0156, 19.0391, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2528.4141, -1975.0156, 12.5547, 0.25);
RemoveBuildingForPlayer(playerid, 708, 2527.5156, -1952.3281, 12.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1524, 2489.2422, -1959.0703, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1223, 2459.8203, -1970.3281, 11.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1687, 2430.4766, -1967.7891, 18.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1687, 2437.2109, -1946.6484, 18.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1688, 2446.7266, -1951.5000, 18.5625, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2456.3984, -1959.5625, 16.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1223, 2455.6094, -1962.0781, 11.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2458.9375, -1967.3203, 17.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1223, 2459.8203, -1964.1719, 11.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1688, 2496.9141, -1967.5156, 21.8594, 0.25);
RemoveBuildingForPlayer(playerid, 1687, 2503.8438, -1968.5938, 21.6563, 0.25);
RemoveBuildingForPlayer(playerid, 956, 2480.8594, -1959.2734, 12.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2472.6250, -1941.8828, 11.5156, 0.25);
RemoveBuildingForPlayer(playerid, 5142, 2489.2344, -1962.0156, 19.0391, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2536.7344, -1968.2500, 12.8828, 0.25);
RemoveBuildingForPlayer(playerid, 671, 2536.1172, -1947.9766, 12.8828, 0.25);
*/
//Santana:
RemoveBuildingForPlayer(playerid, 13783, 1254.3984, -803.1719, 85.9609, 0.25);
RemoveBuildingForPlayer(playerid, 13724, 1254.3984, -803.1719, 85.9609, 0.25);
//Rusos:
RemoveBuildingForPlayer(playerid, 6523, 702.8672, -1276.0313, 20.9063, 0.25);
RemoveBuildingForPlayer(playerid, 6522, 702.8672, -1276.0313, 20.9063, 0.25);
////// Pandillas Blood's /////////
RemoveBuildingForPlayer(playerid, 5520, 1996.3984, -1110.7891, 30.2656, 0.25); // Blood's
RemoveBuildingForPlayer(playerid, 5671, 1996.3984, -1110.7891, 30.2656, 0.25);
// SKATE PARK.
RemoveBuildingForPlayer(playerid, 5575, 1919.5234, -1400.8984, 16.1719, 0.25);
RemoveBuildingForPlayer(playerid, 5390, 1919.5234, -1400.8984, 16.1719, 0.25);
// MAPEADOS AFUERAS DE LS.
//Hospital Palomino
RemoveBuildingForPlayer(playerid, 3326, 2246.4141, 0.4219, 28.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3329, 2267.3750, 0.8516, 26.4688, 0.25);
RemoveBuildingForPlayer(playerid, 13461, 2373.2344, 29.1719, 30.3438, 0.25);
RemoveBuildingForPlayer(playerid, 726, 2228.4141, 21.7578, 24.5547, 0.25);
RemoveBuildingForPlayer(playerid, 3317, 2246.4141, 0.4219, 28.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3314, 2267.3750, 0.8516, 26.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 2285.5469, -0.1406, 29.8125, 0.25);
RemoveBuildingForPlayer(playerid, 729, 2269.0938, 14.6875, 25.3672, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 16.8906, 27.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 12.8125, 27.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 8.7266, 27.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 4.6484, 27.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, 0.5625, 27.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2253.1563, -18.2656, 26.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2256.7188, -18.2656, 26.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2264.6016, -18.2656, 26.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2261.0391, -18.2656, 26.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2275.0156, -18.2656, 26.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2268.1172, -18.2656, 26.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -15.7891, 27.1641, 0.25);
RemoveBuildingForPlayer(playerid, 3407, 2282.8750, -18.2031, 25.4688, 0.25);
RemoveBuildingForPlayer(playerid, 3408, 2243.8750, -18.0703, 25.4766, 0.25);
RemoveBuildingForPlayer(playerid, 782, 2252.6484, -13.5078, 25.5547, 0.25);
RemoveBuildingForPlayer(playerid, 765, 2260.6172, -10.6094, 25.5313, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -11.7031, 27.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -3.5156, 27.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1419, 2283.7734, -7.6094, 27.5938, 0.25);
// Comisaría de policia - Palomino
RemoveBuildingForPlayer(playerid, 3321, 2320.4922, 114.8672, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 13461, 2373.2344, 29.1719, 30.3438, 0.25);
RemoveBuildingForPlayer(playerid, 729, 2310.7344, 107.5391, 25.9063, 0.25);
RemoveBuildingForPlayer(playerid, 3307, 2320.4922, 114.8672, 26.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2333.8438, 103.4453, 26.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2333.8438, 106.9531, 26.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2333.8438, 110.4609, 26.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2333.8438, 113.9766, 26.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2333.8438, 117.4844, 26.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2328.3594, 101.7734, 26.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1418, 2331.8438, 101.7734, 26.3906, 0.25);
RemoveBuildingForPlayer(playerid, 13470, 2343.8672, 220.4375, 25.5313, 0.25);
//////////////Taller Dillmore//////////////////////////////////////////////////
RemoveBuildingForPlayer(playerid, 13241, 681.4766, -459.0000, 15.5313, 0.25);
RemoveBuildingForPlayer(playerid, 13389, 720.0156, -454.6250, 15.3281, 0.25);
RemoveBuildingForPlayer(playerid, 13484, 738.3984, -553.9844, 21.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 675.5469, -471.5000, 16.1953, 0.25);
RemoveBuildingForPlayer(playerid, 1495, 680.8281, -472.9375, 15.5234, 0.25);
RemoveBuildingForPlayer(playerid, 781, 656.8594, -474.2656, 15.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 687.2500, -471.5000, 16.1953, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 687.2500, -471.5000, 16.1953, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 710.5625, -470.4844, 15.8359, 0.25);
RemoveBuildingForPlayer(playerid, 1438, 725.6641, -473.3594, 15.2578, 0.25);
RemoveBuildingForPlayer(playerid, 1368, 673.5859, -468.7578, 16.1953, 0.25);
RemoveBuildingForPlayer(playerid, 3172, 713.3125, -468.0703, 15.1328, 0.25);
RemoveBuildingForPlayer(playerid, 781, 652.5391, -469.0156, 15.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 710.5938, -468.1797, 15.8281, 0.25);
RemoveBuildingForPlayer(playerid, 13028, 720.0156, -462.5234, 16.8594, 0.25);
RemoveBuildingForPlayer(playerid, 1345, 725.8750, -465.7422, 15.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 677.5234, -464.4766, 22.7500, 0.25);
RemoveBuildingForPlayer(playerid, 12976, 681.4766, -459.0000, 15.5313, 0.25);
RemoveBuildingForPlayer(playerid, 12977, 679.1406, -455.7734, 16.3359, 0.25);
RemoveBuildingForPlayer(playerid, 1335, 659.2266, -439.3906, 16.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1688, 686.7578, -455.4141, 20.6406, 0.25);
RemoveBuildingForPlayer(playerid, 1691, 686.1172, -452.2578, 20.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1345, 693.2891, -456.0156, 16.0078, 0.25);
RemoveBuildingForPlayer(playerid, 12978, 720.0156, -454.6250, 15.3281, 0.25);
RemoveBuildingForPlayer(playerid, 13027, 720.0156, -454.6172, 18.1563, 0.25);
///////////////////////// CNN del Norte ///////////////////////////////////////////////////////////////////
RemoveBuildingForPlayer(playerid, 13062, 266.3594, 20.1328, 5.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 243.9531, 24.6172, 2.0156, 0.25);
RemoveBuildingForPlayer(playerid, 3287, 259.8359, -4.0313, 6.1094, 0.25);
RemoveBuildingForPlayer(playerid, 3296, 259.8359, -4.0313, 6.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1684, 276.8438, -2.4297, 2.8828, 0.25);
RemoveBuildingForPlayer(playerid, 13059, 266.3594, 20.1328, 5.4844, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 255.2734, 22.7734, 1.8984, 0.25);
// TEXSUR: Edificio que aparece en el logeo.
// Edificio 1:
RemoveBuildingForPlayer(playerid, 3696, 2336.9219, -1242.0859, 31.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3697, 2336.9219, -1242.0859, 31.4297, 0.25);
RemoveBuildingForPlayer(playerid, 17530, 2452.6016, -1193.3828, 35.3125, 0.25);
// Edificio 2: RETIRADO POR LAG
// Bayside.
RemoveBuildingForPlayer(playerid, 9260, -2291.6094, 2311.5313, 9.0938, 0.25);
RemoveBuildingForPlayer(playerid, 9348, -2314.1484, 2408.3047, 5.9609, 0.25);
RemoveBuildingForPlayer(playerid, 9352, -2421.0469, 2343.6953, 19.7891, 0.25);
RemoveBuildingForPlayer(playerid, 9380, -2291.6094, 2311.5313, 9.0938, 0.25);
RemoveBuildingForPlayer(playerid, 9381, -2235.5547, 2361.7734, 15.8047, 0.25);
RemoveBuildingForPlayer(playerid, 9382, -2251.6484, 2380.0938, 10.5000, 0.25);
RemoveBuildingForPlayer(playerid, 9413, -2389.4141, 2404.5078, 14.1875, 0.25);
RemoveBuildingForPlayer(playerid, 9429, -2314.1484, 2408.3047, 5.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1297, -2245.1172, 2298.7578, 7.3047, 0.25);
RemoveBuildingForPlayer(playerid, 1297, -2279.3750, 2327.1484, 3.9531, 0.25);
RemoveBuildingForPlayer(playerid, 1308, -2256.6250, 2346.8047, 3.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1635, -2226.0625, 2360.8281, 6.3984, 0.25);
RemoveBuildingForPlayer(playerid, 1440, -2244.2344, 2361.2031, 4.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1264, -2247.6328, 2364.8594, 4.3828, 0.25);
RemoveBuildingForPlayer(playerid, 1264, -2246.7734, 2364.4922, 4.3828, 0.25);
RemoveBuildingForPlayer(playerid, 1264, -2246.8125, 2365.7578, 4.3828, 0.25);
RemoveBuildingForPlayer(playerid, 1431, -2245.7109, 2363.3047, 4.5000, 0.25);
RemoveBuildingForPlayer(playerid, 1227, -2253.5391, 2372.5469, 4.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1264, -2254.0859, 2371.0313, 4.3828, 0.25);
RemoveBuildingForPlayer(playerid, 1264, -2252.5391, 2371.0234, 4.3828, 0.25);
RemoveBuildingForPlayer(playerid, 715, -2281.1094, 2380.2266, 12.6953, 0.25);
RemoveBuildingForPlayer(playerid, 9247, -2251.6484, 2380.0938, 10.5000, 0.25);
RemoveBuildingForPlayer(playerid, 1431, -2254.7969, 2385.4609, 4.5000, 0.25);
// Paso a Nivel.
// Nuevo taller mecánico.
RemoveBuildingForPlayer(playerid, 5523, 2021.6563, -1810.7266, 18.6016, 0.25);
RemoveBuildingForPlayer(playerid, 5524, 2025.3750, -1773.9531, 16.6797, 0.25);
RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
RemoveBuildingForPlayer(playerid, 5526, 2049.5781, -1781.6797, 18.3281, 0.25);
RemoveBuildingForPlayer(playerid, 1524, 2034.3984, -1801.6719, 14.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1268, 2030.9297, -1763.1641, 28.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1268, 2066.8125, -1791.7891, 21.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1268, 2128.2344, -1780.7109, 23.8750, 0.25);
RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);
RemoveBuildingForPlayer(playerid, 5411, 2021.6563, -1810.7266, 18.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1259, 2030.9297, -1763.1641, 28.5781, 0.25);
RemoveBuildingForPlayer(playerid, 5628, 2025.3750, -1773.9531, 16.6797, 0.25);
RemoveBuildingForPlayer(playerid, 5522, 2048.7188, -1776.4766, 18.6484, 0.25);
RemoveBuildingForPlayer(playerid, 5521, 2049.5781, -1781.6797, 18.3281, 0.25);
RemoveBuildingForPlayer(playerid, 1259, 2066.8125, -1791.7891, 21.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 2070.2109, -1794.5938, 12.5234, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 2068.1641, -1780.6094, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1216, 2069.0000, -1766.6641, 13.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1216, 2068.9375, -1767.8359, 13.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1259, 2128.2344, -1780.7109, 23.8750, 0.25);
// Mafia Rusos, Optimización incréible.
RemoveBuildingForPlayer(playerid, 3719, 771.5000, -1655.0703, 8.0781, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 762.0156, -1655.8594, 4.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 757.7266, -1661.3750, 5.9766, 0.25);
RemoveBuildingForPlayer(playerid, 759, 765.6406, -1663.3281, 2.8984, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 764.5000, -1647.7656, 4.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1408, 761.7578, -1650.4375, 4.3359, 0.25);
RemoveBuildingForPlayer(playerid, 759, 767.7656, -1646.9375, 3.4375, 0.25);
RemoveBuildingForPlayer(playerid, 759, 766.2344, -1645.6016, 3.4375, 0.25);
RemoveBuildingForPlayer(playerid, 3640, 771.5000, -1655.0703, 8.0781, 0.25);
RemoveBuildingForPlayer(playerid, 621, 765.3359, -1644.5156, 2.2344, 0.25);
RemoveBuildingForPlayer(playerid, 759, 765.3281, -1642.7891, 2.8984, 0.25);
RemoveBuildingForPlayer(playerid, 762, 768.4219, -1632.7266, 9.1563, 0.25);
RemoveBuildingForPlayer(playerid, 762, 771.9141, -1641.7578, 5.8906, 0.25);
RemoveBuildingForPlayer(playerid, 620, 774.6953, -1634.0078, 0.0391, 0.25);
// Anonymous - Mafia de mierda.

///////// LSPD // TEXTURIZADO.
RemoveBuildingForPlayer(playerid, 4064, 1571.6016, -1675.7500, 35.6797, 0.25);
RemoveBuildingForPlayer(playerid, 3976, 1571.6016, -1675.7500, 35.6797, 0.25);
///////// UNITY // TEXTURIZADO.
RemoveBuildingForPlayer(playerid, 5033, 1745.2031, -1882.8516, 26.1406, 0.25);
RemoveBuildingForPlayer(playerid, 4821, 1745.2031, -1882.8516, 26.1406, 0.25);
/// Pista de Baile GlenPark by James Lestner.
RemoveBuildingForPlayer(playerid, 5400, 1913.1328, -1370.5000, 17.7734, 0.25);
// Al Qaeda HQ en las Venturas.

// Obras Salazar. En LSTV. (Finalizado el dia 22/12).
// Nuevo LSTV, HQ anterior de Aldershot - CNN, mapeado único por MATIAS PRATS el Bot.
RemoveBuildingForPlayer(playerid, 6491, 717.4844, -1357.3047, 20.2969, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1377.6641, 21.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1356.5859, 21.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1338.2422, 21.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 677.1953, -1328.8750, 25.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25);
RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
RemoveBuildingForPlayer(playerid, 6490, 717.4844, -1357.3047, 20.2969, 0.25);
RemoveBuildingForPlayer(playerid, 6516, 717.6875, -1357.2813, 18.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 696.1953, -1328.8750, 25.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 702.2344, -1328.8750, 25.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 721.2109, -1328.8750, 25.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1415, 732.8516, -1332.8984, 12.6875, 0.25);
RemoveBuildingForPlayer(playerid, 1439, 732.7266, -1341.7734, 12.6328, 0.25);
// Obras Salazar. En LS. (Finalizado el dia 20/12).
// Nuevo Ayuntamiento (Sector UNO)
RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
RemoveBuildingForPlayer(playerid, 4046, 1479.5234, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4047, 1531.6328, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4217, 1449.2500, -1852.5703, 22.3672, 0.25);
RemoveBuildingForPlayer(playerid, 1266, 1482.0859, -1859.9688, 25.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1465.4766, -1848.2500, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1466.9453, -1847.8438, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1419.7344, -1846.5469, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1420.4297, -1845.3438, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1419.6953, -1844.2031, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1420.4922, -1842.4375, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1419.7266, -1842.8516, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1419.6719, -1842.0313, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 4170, 1433.9531, -1844.4063, 21.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1482.0859, -1859.9688, 25.0391, 0.25);
RemoveBuildingForPlayer(playerid, 4004, 1479.5234, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1357, 1487.6953, -1848.1094, 12.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1486.2109, -1848.1250, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1468.0625, -1847.7891, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1488.9219, -1848.2734, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 4171, 1503.3984, -1848.3359, 21.4609, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1515.3828, -1850.0547, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1514.4219, -1850.0391, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1516.6875, -1850.0547, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
RemoveBuildingForPlayer(playerid, 4048, 1531.6328, -1852.6406, 24.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1538.9453, -1849.2734, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1538.8359, -1847.6250, 13.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1538.3906, -1847.9297, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1539.1016, -1847.2969, 12.9297, 0.25);
// Tienda 24/7 de la plaza del Ayuntamiento. (Sector Uno)
/*RemoveBuildingForPlayer(playerid, 4049, 1330.3750, -1793.0781, 22.9688, 0.25);
RemoveBuildingForPlayer(playerid, 4051, 1371.8203, -1754.8203, 19.0469, 0.25);
RemoveBuildingForPlayer(playerid, 4191, 1353.2578, -1764.5313, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 4194, 1360.3828, -1840.6172, 26.8047, 0.25);
RemoveBuildingForPlayer(playerid, 4219, 1330.3281, -1792.5938, 23.4922, 0.25);
RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
RemoveBuildingForPlayer(playerid, 4193, 1360.3828, -1840.6172, 26.8047, 0.25);
RemoveBuildingForPlayer(playerid, 4231, 1342.0547, -1800.2188, 25.4297, 0.25);
RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
RemoveBuildingForPlayer(playerid, 4112, 1330.3750, -1793.0781, 22.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1337.6953, -1774.7344, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1338.7891, -1775.3203, 12.9688, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1337.0078, -1773.8672, 13.0000, 0.25);
RemoveBuildingForPlayer(playerid, 4022, 1353.2578, -1764.5313, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1532, 1353.1328, -1759.6563, 12.5000, 0.25);
RemoveBuildingForPlayer(playerid, 4021, 1371.8203, -1754.8203, 19.0469, 0.25);
//RemoveBuildingForPlayer(playerid, 1265, 1336.1563, -1844.0156, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1336.3359, -1842.8516, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.3750, -1841.5391, 13.0391, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1337.2578, -1841.8750, 13.0000, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1340.8906, -1835.3672, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 1340.1328, -1835.0391, 12.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1340.8672, -1834.4844, 12.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 1336.8750, -1818.2266, 12.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1372, 1336.7891, -1816.3047, 12.6641, 0.25);
RemoveBuildingForPlayer(playerid, 1220, 1338.1250, -1816.5781, 12.9297, 0.25);
*/
// Deposito de Vehiculos (LSPD) (Sector Uno)
RemoveBuildingForPlayer(playerid, 4124, 1653.4844, -1826.6406, 23.9219, 0.25);
RemoveBuildingForPlayer(playerid, 4212, 1661.8047, -1826.7188, 24.8281, 0.25);
RemoveBuildingForPlayer(playerid, 4123, 1653.4844, -1826.6406, 23.9219, 0.25);
// Plaza delante de Unity (Sector Uno)
RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
// Avenida LS (Sector DOS)
RemoveBuildingForPlayer(playerid, 4054, 1402.5000, -1682.0234, 25.5469, 0.25);
RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
RemoveBuildingForPlayer(playerid, 4083, 1334.9766, -1644.1875, 11.7891, 0.25);
RemoveBuildingForPlayer(playerid, 4115, 1350.4141, -1512.0078, 23.0469, 0.25);
RemoveBuildingForPlayer(playerid, 4116, 1345.6250, -1552.9609, 48.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4118, 1404.9063, -1539.2969, 20.1484, 0.25);
RemoveBuildingForPlayer(playerid, 4119, 1375.2734, -1452.3984, 23.0391, 0.25);
RemoveBuildingForPlayer(playerid, 4200, 1352.6328, -1647.3438, 14.7031, 0.25);
RemoveBuildingForPlayer(playerid, 1530, 1332.1328, -1722.3047, 14.1875, 0.25);
RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
RemoveBuildingForPlayer(playerid, 4221, 1406.7109, -1499.5625, 69.1563, 0.25);
RemoveBuildingForPlayer(playerid, 4005, 1402.5000, -1682.0234, 25.5469, 0.25);
RemoveBuildingForPlayer(playerid, 4106, 1342.9688, -1652.2656, 15.2031, 0.25);
RemoveBuildingForPlayer(playerid, 4011, 1334.9766, -1644.1875, 11.7891, 0.25);
RemoveBuildingForPlayer(playerid, 4199, 1352.6328, -1647.3438, 14.7031, 0.25);
RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);
RemoveBuildingForPlayer(playerid, 4121, 1336.0156, -1604.7344, 25.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1340.4609, -1580.8672, 16.9063, 0.25);
RemoveBuildingForPlayer(playerid, 4113, 1345.6250, -1552.9609, 48.5156, 0.25);
RemoveBuildingForPlayer(playerid, 4008, 1404.9063, -1539.2969, 20.1484, 0.25);
RemoveBuildingForPlayer(playerid, 4114, 1350.4141, -1512.0078, 23.0469, 0.25);
RemoveBuildingForPlayer(playerid, 4120, 1364.1953, -1491.6016, 25.6016, 0.25);
RemoveBuildingForPlayer(playerid, 4117, 1375.2734, -1452.3984, 23.0391, 0.25);
// Aeropuerto de Los Santos. IBERIA.
RemoveBuildingForPlayer(playerid, 4869, 1893.3906, -2269.6016, 14.6094, 0.25);
RemoveBuildingForPlayer(playerid, 4954, 1893.3906, -2269.6016, 14.6094, 0.25);
RemoveBuildingForPlayer(playerid, 5011, 1874.2109, -2286.5313, 17.9297, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1921.6406, -2206.3906, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2249.0234, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2315.4297, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2382.1406, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2061.5313, -2209.8125, 14.9766, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2082.4063, -2269.6563, 14.9609, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2082.4375, -2298.2266, 14.9609, 0.25);
RemoveBuildingForPlayer(playerid, 3769, 2060.6875, -2305.9609, 14.9844, 0.25);
RemoveBuildingForPlayer(playerid, 5077, 1961.5469, -2183.7969, 14.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2422.1719, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2350.7344, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2382.1406, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2057.7344, -2402.9922, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2359.7578, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 5006, 1874.2109, -2286.5313, 17.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2328.1406, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2244.5078, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 1983.8594, -2281.7109, 13.0625, 0.25);
RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2281.3984, 18.3828, 0.25);
RemoveBuildingForPlayer(playerid, 5031, 2037.0469, -2313.5469, 18.7109, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2315.4297, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2249.0234, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2057.0547, -2315.4688, 12.7422, 0.25);
RemoveBuildingForPlayer(playerid, 3625, 2060.6875, -2305.9609, 14.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2057.5391, -2270.0703, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2082.4063, -2269.6563, 14.9609, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2082.4375, -2298.2266, 14.9609, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2289.8906, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2332.5547, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2089.7813, -2244.4922, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1921.6406, -2206.3906, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1949.3438, -2227.5156, 13.6563, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1944.0625, -2227.5156, 13.6563, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1951.0313, -2207.7031, 18.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1954.6172, -2227.4844, 13.6875, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1965.1719, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1959.8984, -2227.4453, 13.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1975.7266, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1970.4453, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1979.6797, -2207.8438, 18.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1981.0000, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 1983.8047, -2224.1641, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2018.0313, -2224.1641, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2010.3984, -2207.6172, 18.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2042.4766, -2207.7031, 18.4219, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2224.3828, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2219.1094, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2056.8281, -2224.1641, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2054.9844, -2213.7891, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2208.4609, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2203.1875, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2061.5313, -2209.8125, 14.9766, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1810.3125, -2170.2891, 15.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1957.3906, -2176.7109, 16.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2181.3594, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2186.6328, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1835.6563, -2162.6719, 15.5547, 0.25);
//removes de mapeos original GTA SAN ANDREAS
//*************************Tienda electronica*************************
RemoveBuildingForPlayer(playerid, 5839, 1198.9922, -1128.8125, 27.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1223, 1176.8438, -1135.4141, 22.8125, 0.25);
RemoveBuildingForPlayer(playerid, 717, 1182.1719, -1134.6875, 23.0000, 0.25);
RemoveBuildingForPlayer(playerid, 5727, 1198.9922, -1128.8125, 27.8438, 0.25);
//*************************banco Los santos*************************
RemoveBuildingForPlayer(playerid, 5941, 982.3359, -1169.6016, 32.8203, 0.25);
RemoveBuildingForPlayer(playerid, 5720, 982.3359, -1169.6016, 32.8203, 0.25);
//*************************gasolinera*************************

//*************************gasolinera ganton*************************
RemoveBuildingForPlayer(playerid, 5224, 2385.1875, -1906.5156, 18.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1527, 2392.3594, -1914.5703, 14.7422, 0.25);
RemoveBuildingForPlayer(playerid, 5233, 2374.7734, -1937.1797, 20.1953, 0.25);
RemoveBuildingForPlayer(playerid, 5168, 2385.1875, -1906.5156, 18.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 2396.3047, -1899.6172, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1522, 2399.3281, -1899.6172, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 1687, 2398.3906, -1910.9609, 21.2266, 0.25);
RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1901.5625, 13.0234, 0.25);
RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1905.1094, 13.0234, 0.25);
RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1908.4531, 13.0234, 0.25);
//*************************Autos Chocones*************************
RemoveBuildingForPlayer(playerid, 6464, 379.0625, -2065.0234, 11.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1529, 399.0078, -2066.8828, 11.2344, 0.25);
RemoveBuildingForPlayer(playerid, 6466, 374.6953, -2054.8828, 8.7031, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 381.0313, -2070.9375, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 6283, 379.0625, -2065.0234, 11.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2055.1016, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2061.9531, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2049.3516, 7.3750, 0.25);
RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25);
//********************* Sureños ************//
RemoveBuildingForPlayer(playerid, 3667, 1826.6016, -1989.6094, 15.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1818.8750, -2042.3438, 16.3906, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 1813.0859, -2013.0313, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1811.2500, -2012.6172, 21.9609, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1808.8828, -1985.3359, 9.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3588, 1826.6016, -1989.6094, 15.2109, 0.25);
RemoveBuildingForPlayer(playerid, 4982, 1892.5391, -2012.8281, 21.3750, 0.25);

//*************************alhambra*************************
RemoveBuildingForPlayer(playerid, 1537, 1837.4375, -1683.9688, 12.3047, 0.25);
RemoveBuildingForPlayer(playerid, 1533, 1837.4375, -1680.9375, 12.2969, 0.25);


//*************************Bar las 4p´s*************************
RemoveBuildingForPlayer(playerid, 14739, 752.3984, 1439.9453, 1104.2813, 0.25);
RemoveBuildingForPlayer(playerid, 2425, 756.6406, 1441.5391, 1102.8047, 0.25);

//*********************SAEM CAMPO LV*********************
RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);

/// SAEM, Job de camionero.

RemoveBuildingForPlayer(playerid, 3709, 2206.3125, -2616.4688, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2205.1563, -2582.7891, 14.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2206.3125, -2616.4688, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2205.1563, -2582.7891, 14.8125, 0.25);

//// SAEM - Exterior nuevo 07/2015 (Residencia, Hospital, Carcel, Armeria y Oficinas.
// Actualizado Oficialmente el dia 14/12. INFRANET SAEM.
RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
RemoveBuildingForPlayer(playerid, 3689, 2685.3828, -2366.0547, 19.9531, 0.25);
RemoveBuildingForPlayer(playerid, 3689, 2430.5859, -2583.9453, 20.5234, 0.25);
RemoveBuildingForPlayer(playerid, 3707, 2716.2344, -2452.5938, 20.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3707, 2720.3203, -2530.9141, 19.9766, 0.25);
RemoveBuildingForPlayer(playerid, 3707, 2480.8594, -2460.0547, 20.4922, 0.25);
RemoveBuildingForPlayer(playerid, 3707, 2539.1797, -2424.3594, 20.4922, 0.25);
RemoveBuildingForPlayer(playerid, 3690, 2685.3828, -2366.0547, 19.9531, 0.25);
RemoveBuildingForPlayer(playerid, 3690, 2430.5859, -2583.9453, 20.5234, 0.25);
RemoveBuildingForPlayer(playerid, 3688, 2387.8047, -2580.8672, 17.7891, 0.25);
RemoveBuildingForPlayer(playerid, 3688, 2450.8750, -2680.4531, 17.7891, 0.25);
RemoveBuildingForPlayer(playerid, 3687, 2503.5391, -2366.5078, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3687, 2475.2578, -2394.7891, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3687, 2450.5078, -2419.5391, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3686, 2464.3047, -2617.0156, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2417.7891, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2608.0156, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2571.2422, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2511.9609, -2535.4531, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2660.4766, -2429.2969, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2639.5469, -2429.2969, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2618.8594, -2429.2969, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3708, 2720.3203, -2530.9141, 19.9766, 0.25);
RemoveBuildingForPlayer(playerid, 3708, 2716.2344, -2452.5938, 20.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3708, 2480.8594, -2460.0547, 20.4922, 0.25);
RemoveBuildingForPlayer(playerid, 3708, 2539.1797, -2424.3594, 20.4922, 0.25);
RemoveBuildingForPlayer(playerid, 3710, 2415.4609, -2468.5781, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2372.4453, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2789.2109, -2377.6250, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2386.8516, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2437.2109, -2490.0938, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2399.4219, -2490.6797, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2391.8750, -2503.5078, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3744, 2551.5313, -2472.6953, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2524.0938, 16.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3709, 2544.2500, -2548.8125, 16.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2356.5703, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2568.4453, -2483.3906, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2563.1563, -2563.5781, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2531.7031, -2629.2266, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2519.8047, -2701.8750, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2381.1016, -2701.8750, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 5325, 2488.9922, -2509.2578, 18.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2422.7031, -2411.9219, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3746, 2472.4453, -2362.9375, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
RemoveBuildingForPlayer(playerid, 3770, 2795.8281, -2394.2422, 14.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3770, 2746.4063, -2453.4844, 14.0781, 0.25);
RemoveBuildingForPlayer(playerid, 3770, 2507.3672, -2640.0703, 14.0781, 0.25);
RemoveBuildingForPlayer(playerid, 3769, 2464.1250, -2571.6328, 15.1641, 0.25);
RemoveBuildingForPlayer(playerid, 3769, 2400.9063, -2577.3359, 15.1641, 0.25);
RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2381.1016, -2701.8750, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2392.1172, -2653.5625, 13.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2386.8438, -2653.5078, 13.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2397.3984, -2653.6250, 13.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2402.6719, -2653.6406, 13.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2407.9453, -2653.6484, 13.9375, 0.25);
RemoveBuildingForPlayer(playerid, 3621, 2387.8047, -2580.8672, 17.7891, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2391.8750, -2503.5078, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3625, 2400.9063, -2577.3359, 15.1641, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2410.9766, -2535.2422, 16.4688, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2399.4219, -2490.6797, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3624, 2415.4609, -2468.5781, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2519.8047, -2701.8750, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3621, 2450.8750, -2680.4531, 17.7891, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2430.5781, -2653.9453, 23.7188, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2632.7734, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2645.3203, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2470.1406, -2628.2656, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3626, 2507.3672, -2640.0703, 14.0781, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2531.7031, -2629.2266, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3627, 2464.3047, -2617.0156, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2604.9297, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2579.9844, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3625, 2464.1250, -2571.6328, 15.1641, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2612.6563, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2585.1797, 13.9063, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2585.2422, 13.9063, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2511.8359, -2622.6172, 17.3906, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2608.0156, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2571.2422, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2563.2188, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2496.5547, -2557.3359, 13.9063, 0.25);
RemoveBuildingForPlayer(playerid, 1413, 2501.8359, -2557.3984, 13.9063, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2547.3203, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2470.2734, -2539.0234, 26.6719, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2450.0156, -2535.5703, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2470.1406, -2530.5547, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2469.6016, -2514.6484, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2435.8203, -2512.4844, 16.4688, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2437.2109, -2490.0938, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2498.3438, -2481.9766, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2471.5859, -2494.0703, 15.0781, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2444.3281, -2435.0625, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2526.4297, -2561.3047, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2548.8125, 16.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2511.9609, -2535.4531, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2544.2500, -2524.0938, 16.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2533.3906, -2514.1094, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2533.6172, -2461.6875, 26.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2551.5313, -2472.6953, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2563.1563, -2563.5781, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2568.4453, -2483.3906, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2459.3359, -2427.8281, 16.7422, 0.25);
RemoveBuildingForPlayer(playerid, 3622, 2450.5078, -2419.5391, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2468.8594, -2413.5234, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2422.7031, -2411.9219, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2483.7188, -2403.3438, 16.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2455.0703, -2399.0156, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3622, 2475.2578, -2394.7891, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2491.7031, -2383.3281, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2495.8438, -2386.9375, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2472.4453, -2362.9375, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3622, 2503.5391, -2366.5078, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2546.0469, -2396.5938, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2512.0078, -2375.0859, 16.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2513.0000, -2339.3281, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2571.1641, -2421.1328, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2618.8594, -2429.2969, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2518.6641, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1315, 2672.5938, -2506.8594, 15.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1315, 2680.8594, -2493.0781, 15.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1635, 2704.3672, -2487.8672, 20.5625, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2481.5156, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2696.0234, -2474.8594, 16.4141, 0.25);
RemoveBuildingForPlayer(playerid, 5326, 2661.5156, -2465.1406, 20.1094, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2447.2891, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2696.0234, -2446.6250, 16.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2639.5469, -2429.2969, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 3623, 2660.4766, -2429.2969, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 1307, 2629.2109, -2419.6875, 12.2891, 0.25);
RemoveBuildingForPlayer(playerid, 1307, 2649.8984, -2419.6875, 12.2891, 0.25);
RemoveBuildingForPlayer(playerid, 1315, 2686.7578, -2416.6250, 15.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1315, 2672.5938, -2408.2500, 15.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2416.5234, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2639.1953, -2392.8203, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2663.8359, -2392.8203, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2637.1719, -2385.8672, 16.4141, 0.25);
RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2394.5078, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
RemoveBuildingForPlayer(playerid, 3578, 2747.0078, -2480.2422, 13.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3626, 2746.4063, -2453.4844, 14.0781, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2443.1719, 26.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2436.1875, 13.3438, 0.25);
RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2427.3203, 13.3516, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2425.3516, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2386.8516, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2372.4453, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2410.2109, 14.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2417.7891, 16.7266, 0.25);
RemoveBuildingForPlayer(playerid, 3574, 2789.2109, -2377.6250, 15.2188, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2425.3516, 14.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2410.2109, 14.6563, 0.25);
RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2410.0781, 14.6328, 0.25);
RemoveBuildingForPlayer(playerid, 3626, 2795.8281, -2394.2422, 14.1719, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2356.5703, 25.5156, 0.25);
RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);

//*********************SAEM barco SF*********************
RemoveBuildingForPlayer(playerid, 3791, -1289.9766, 494.7734, 10.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3795, -1294.1172, 499.3359, 10.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3791, -1290.5000, 496.4375, 10.6719, 0.25);
RemoveBuildingForPlayer(playerid, 3787, -1290.2656, 499.9609, 10.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3787, -1290.3125, 497.9609, 10.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3792, -1294.5938, 497.3750, 10.3359, 0.25);
RemoveBuildingForPlayer(playerid, 3787, -1300.6406, 504.0391, 10.7734, 0.25);
RemoveBuildingForPlayer(playerid, 3789, -1301.5859, 511.1094, 10.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3792, -1301.5859, 511.9688, 10.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3800, -1298.2109, 503.1641, 10.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3798, -1297.7422, 501.6172, 10.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3788, -1294.0156, 509.2188, 10.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3793, -1294.0156, 510.1563, 10.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3794, -1294.6172, 501.3281, 10.7188, 0.25);
RemoveBuildingForPlayer(playerid, 3798, -1293.2344, 512.4531, 10.2031, 0.25);
RemoveBuildingForPlayer(playerid, 3795, -1290.3984, 503.4688, 10.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3792, -1289.7031, 503.9922, 10.7500, 0.25);
RemoveBuildingForPlayer(playerid, 3793, -1294.3750, 503.1094, 10.4297, 0.25);
//*********************Hospital exterior*********************
RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1353.5000, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1343.2656, 12.5781, 0.25);
// Removes Hospital Exterior LS - SEC, Médicos 14/12.
RemoveBuildingForPlayer(playerid, 1529, 1098.8125, -1292.5469, 17.1406, 0.25);
RemoveBuildingForPlayer(playerid, 5930, 1134.2500, -1338.0781, 23.1563, 0.25);
RemoveBuildingForPlayer(playerid, 5931, 1114.3125, -1348.1016, 17.9844, 0.25);
RemoveBuildingForPlayer(playerid, 5934, 1076.7109, -1358.0938, 15.4453, 0.25);
RemoveBuildingForPlayer(playerid, 5935, 1120.1563, -1303.4531, 18.5703, 0.25);
RemoveBuildingForPlayer(playerid, 5936, 1090.0547, -1310.5313, 17.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1085.7031, -1361.0234, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 5731, 1076.7109, -1358.0938, 15.4453, 0.25);
RemoveBuildingForPlayer(playerid, 5788, 1080.9844, -1305.5234, 16.3594, 0.25);
RemoveBuildingForPlayer(playerid, 5787, 1090.0547, -1310.5313, 17.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1087.5469, -1284.8203, 17.0781, 0.25);
RemoveBuildingForPlayer(playerid, 5764, 1065.1406, -1270.5781, 25.7109, 0.25);
RemoveBuildingForPlayer(playerid, 5810, 1114.3125, -1348.1016, 17.9844, 0.25);
RemoveBuildingForPlayer(playerid, 5993, 1110.8984, -1328.8125, 13.8516, 0.25);
RemoveBuildingForPlayer(playerid, 5811, 1131.1953, -1380.4219, 17.0703, 0.25);
RemoveBuildingForPlayer(playerid, 5708, 1134.2500, -1338.0781, 23.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1141.9844, -1346.1094, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);
RemoveBuildingForPlayer(playerid, 617, 1178.6016, -1332.0703, 12.8906, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1353.5000, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.0078, -1343.2656, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 5737, 1120.1563, -1303.4531, 18.5703, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1177.7344, -1315.6641, 13.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.8125, -1292.9141, 12.5781, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1184.8125, -1303.1484, 12.5781, 0.25);
////////// Parking delante del Hospital.
RemoveBuildingForPlayer(playerid, 5929, 1230.8906, -1337.9844, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 1231.6406, -1389.8672, 15.6719, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 5812, 1230.8906, -1337.9844, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
//*********************mecanicos exterior*********************

//*********************Sistema judicial exterior*********************
RemoveBuildingForPlayer(playerid, 4026, 1497.7969, -1543.7109, 17.5547, 0.25);
RemoveBuildingForPlayer(playerid, 4218, 1497.7031, -1546.6172, 43.9922, 0.25);
RemoveBuildingForPlayer(playerid, 4016, 1497.7969, -1543.7109, 17.5547, 0.25);
//*********************removes Grovve*********************
RemoveBuildingForPlayer(playerid, 1265, 2488.8047, -1684.7891, 12.8125, 0.25);
RemoveBuildingForPlayer(playerid, 3594, 2532.9844, -1719.4297, 13.1797, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2537.1172, -1719.9922, 16.4219, 0.25);
RemoveBuildingForPlayer(playerid, 3594, 2537.9688, -1700.7109, 13.1797, 0.25);
RemoveBuildingForPlayer(playerid, 760, 2520.6016, -1670.7422, 13.4375, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2490.1016, -1654.6563, 16.1328, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 2491.2344, -1653.9609, 12.9219, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2492.2656, -1653.9922, 12.8984, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 2505.6719, -1658.9063, 12.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1265, 2510.9219, -1656.1328, 12.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2501.9297, -1650.5078, 12.9141, 0.25);
RemoveBuildingForPlayer(playerid, 947, 2533.8828, -1667.5781, 16.2891, 0.25);
RemoveBuildingForPlayer(playerid, 760, 2520.5469, -1662.8828, 13.1641, 0.25);
RemoveBuildingForPlayer(playerid, 3594, 2514.3906, -1658.6016, 13.1406, 0.25);
RemoveBuildingForPlayer(playerid, 762, 2446.5547, -1681.0703, 12.3828, 0.25);
RemoveBuildingForPlayer(playerid, 3593, 2457.8672, -1679.6719, 12.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2415.8203, -1662.8828, 16.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2415.2031, -1653.1328, 12.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2453.9609, -1653.6953, 12.6797, 0.25);
RemoveBuildingForPlayer(playerid, 1230, 2475.0000, -1653.6094, 12.7891, 0.25);
RemoveBuildingForPlayer(playerid, 3593, 2437.4844, -1644.1172, 12.9844, 0.25);
//*********************Estacionamiento*********************
RemoveBuildingForPlayer(playerid, 713, 1109.6953, -1752.6172, 11.8516, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1098.4141, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1055.2813, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1775.6094, 13.9766, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1049.7891, -1757.1172, 12.3516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1752.2500, 13.9766, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1109.6953, -1752.6172, 11.8516, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1098.4141, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 713, 1055.2813, -1725.7422, 12.1563, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1775.6094, 13.9766, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1049.7891, -1757.1172, 12.3516, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1051.4688, -1752.2500, 13.9766, 0.25);
//*********************Bomberos Exterior SF*********************
/*RemoveBuildingForPlayer(playerid, 11010, -2113.3203, -186.7969, 40.2813, 0.25);
RemoveBuildingForPlayer(playerid, 11048, -2113.3203, -186.7969, 40.2813, 0.25);
RemoveBuildingForPlayer(playerid, 11091, -2133.5547, -132.7031, 36.1328, 0.25);
RemoveBuildingForPlayer(playerid, 11245, -2023.7109, 83.9688, 37.8750, 0.25);
RemoveBuildingForPlayer(playerid, 11272, -2037.5391, 79.9297, 34.1094, 0.25);
RemoveBuildingForPlayer(playerid, 11376, -2144.3516, -132.9609, 38.3359, 0.25);
RemoveBuildingForPlayer(playerid, 11011, -2144.3516, -132.9609, 38.3359, 0.25);
RemoveBuildingForPlayer(playerid, 11009, -2128.5391, -142.8438, 39.1406, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -2137.6172, -110.9375, 48.3516, 0.25);
RemoveBuildingForPlayer(playerid, 1226, -2137.1328, -66.2266, 38.1875, 0.25);
RemoveBuildingForPlayer(playerid, 1226, -2097.4219, -74.3359, 38.1875, 0.25);
RemoveBuildingForPlayer(playerid, 11008, -2037.5391, 79.9297, 34.1094, 0.25);*/
//*********************sapd Exterior*********************
RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
//*********************CIA Exterior**********************
RemoveBuildingForPlayer(playerid, 5854, 992.5313, -962.7344, 60.7813, 0.25);
RemoveBuildingForPlayer(playerid, 727, 931.7891, -991.1719, 37.0234, 0.25);
RemoveBuildingForPlayer(playerid, 5998, 913.9531, -1015.6328, 72.5313, 0.25);
RemoveBuildingForPlayer(playerid, 727, 880.1406, -1058.8516, 23.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1261, 874.6875, -1021.8672, 45.5313, 0.25);
RemoveBuildingForPlayer(playerid, 732, 882.6172, -1008.9297, 36.5234, 0.25);
RemoveBuildingForPlayer(playerid, 1267, 874.6875, -1021.8672, 45.5313, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 916.5156, -985.1250, 41.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1307, 937.9375, -986.5391, 37.0313, 0.25);
// LCN Exterior - La Cosa Nostra.
RemoveBuildingForPlayer(playerid, 4917, 1145.9531, -2037.0000, 65.5156, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1127.2422, -2080.7813, 66.3750, 0.25);
RemoveBuildingForPlayer(playerid, 691, 1144.0781, -2076.3750, 68.1016, 0.25);
RemoveBuildingForPlayer(playerid, 661, 1159.9766, -2075.1563, 67.1484, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1155.3672, -2072.5547, 67.8594, 0.25);
RemoveBuildingForPlayer(playerid, 691, 1175.6094, -2079.4688, 67.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1174.7500, -2070.0313, 71.7813, 0.25);
RemoveBuildingForPlayer(playerid, 4826, 1102.9141, -2036.9844, 77.3359, 0.25); // HQ Italianos.
RemoveBuildingForPlayer(playerid, 4825, 1145.9531, -2037.0000, 65.5156, 0.25); // HQ.
RemoveBuildingForPlayer(playerid, 762, 1189.7734, -2078.3672, 70.7422, 0.25);
RemoveBuildingForPlayer(playerid, 661, 1197.8516, -2074.6172, 67.5313, 0.25);
RemoveBuildingForPlayer(playerid, 691, 1207.6094, -2079.0781, 66.7813, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1139.1797, -1997.7656, 67.5547, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1146.1328, -1998.4688, 67.5547, 0.25);
RemoveBuildingForPlayer(playerid, 661, 1148.7031, -1992.9844, 67.1484, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1165.1328, -1994.1172, 66.8047, 0.25);
RemoveBuildingForPlayer(playerid, 691, 1208.6484, -2000.0703, 67.3906, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1190.1953, -1995.4531, 66.8047, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1279.4141, -1998.4766, 56.8125, 0.25);
RemoveBuildingForPlayer(playerid, 691, 1291.0469, -2007.0703, 54.8828, 0.25);
RemoveBuildingForPlayer(playerid, 618, 1286.0000, -2000.3984, 55.9766, 0.25);
// ETA - Terroristas.
RemoveBuildingForPlayer(playerid, 785, -476.9766, -664.5078, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 785, -460.2578, -591.9609, 11.0625, 0.25);
RemoveBuildingForPlayer(playerid, 785, -642.7656, -447.0078, 25.5703, 0.25);
RemoveBuildingForPlayer(playerid, 785, -735.4063, -510.3281, 23.6641, 0.25);
RemoveBuildingForPlayer(playerid, 17349, -542.0078, -522.8438, 29.5938, 0.25);
RemoveBuildingForPlayer(playerid, 791, -735.4063, -510.3281, 23.6641, 0.25);
RemoveBuildingForPlayer(playerid, 800, -656.1641, -587.6406, 32.9141, 0.25);
RemoveBuildingForPlayer(playerid, 800, -653.6953, -574.3203, 33.9297, 0.25);
RemoveBuildingForPlayer(playerid, 800, -649.8359, -579.8047, 32.2891, 0.25);
RemoveBuildingForPlayer(playerid, 17019, -606.0313, -528.8203, 30.5234, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -573.0547, -559.6953, 38.5234, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -533.5391, -559.6953, 38.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1415, -541.4297, -561.2266, 24.5859, 0.25);
RemoveBuildingForPlayer(playerid, 17012, -542.0078, -522.8438, 29.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1415, -513.7578, -561.0078, 24.5859, 0.25);
RemoveBuildingForPlayer(playerid, 800, -504.8516, -571.4063, 25.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1441, -503.6172, -540.5313, 25.2266, 0.25);
RemoveBuildingForPlayer(playerid, 800, -500.7813, -567.7188, 25.7422, 0.25);
RemoveBuildingForPlayer(playerid, 800, -500.7266, -574.1953, 25.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1415, -502.6094, -528.6484, 24.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1440, -502.1172, -521.0313, 25.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1441, -502.4063, -513.0156, 25.2266, 0.25);
RemoveBuildingForPlayer(playerid, 791, -642.7656, -447.0078, 25.5703, 0.25);
RemoveBuildingForPlayer(playerid, 1415, -620.4141, -490.5078, 24.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1415, -619.6250, -473.4531, 24.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -573.0547, -479.9219, 38.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -552.7656, -479.9219, 38.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1440, -553.6875, -481.6328, 25.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1441, -554.4531, -496.1797, 25.1641, 0.25);
RemoveBuildingForPlayer(playerid, 1441, -537.0391, -469.1172, 25.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -532.4688, -479.9219, 38.6484, 0.25);
RemoveBuildingForPlayer(playerid, 790, -532.1719, -441.4375, 30.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1440, -516.9453, -496.6484, 25.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1440, -503.1250, -509.0000, 25.0234, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -512.1641, -479.9219, 38.5938, 0.25);
RemoveBuildingForPlayer(playerid, 693, -554.2969, -426.9766, 34.2422, 0.25);
RemoveBuildingForPlayer(playerid, 693, -514.8438, -432.1719, 26.4688, 0.25);
RemoveBuildingForPlayer(playerid, 17030, -501.0625, -434.0313, 18.8906, 0.25);
RemoveBuildingForPlayer(playerid, 791, -476.9766, -664.5078, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 791, -460.2578, -591.9609, 11.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -491.8594, -479.9219, 38.5859, 0.25);
RemoveBuildingForPlayer(playerid, 17020, -475.9766, -544.8516, 28.1172, 0.25);
RemoveBuildingForPlayer(playerid, 1278, -471.5547, -479.9219, 38.6250, 0.25);
RemoveBuildingForPlayer(playerid, 790, -466.5781, -441.4375, 19.8438, 0.25);
// MAP BALLAS.
RemoveBuildingForPlayer(playerid, 17772, 2870.2422, -1589.3906, 16.5625, 0.25);
RemoveBuildingForPlayer(playerid, 1530, 2767.7813, -1621.1875, 11.2344, 0.25);
RemoveBuildingForPlayer(playerid, 17904, 2769.2422, -1624.2266, 19.3203, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2786.5781, -1592.9375, 10.8047, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 2833.3047, -1593.1797, 13.3281, 0.25);
RemoveBuildingForPlayer(playerid, 17550, 2870.2422, -1589.3906, 16.5625, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2809.4219, -1567.6328, 9.5469, 0.25);
RemoveBuildingForPlayer(playerid, 616, 2785.9453, -1575.8281, 13.6406, 0.25);
RemoveBuildingForPlayer(playerid, 620, 2809.2734, -1556.3125, 9.5469, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 2808.7109, -1562.2578, 15.9844, 0.25);
RemoveBuildingForPlayer(playerid, 621, 2820.5313, -1528.0625, 13.4453, 0.25);
// Parking Removes - Delante del Hotel y Pizzeria.
RemoveBuildingForPlayer(playerid, 5551, 2140.5156, -1735.1406, 15.8906, 0.25);
RemoveBuildingForPlayer(playerid, 5410, 2140.5156, -1735.1406, 15.8906, 0.25);
// Anastasia Dimaio. Soldados del Hormigon - Bar.
RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
RemoveBuildingForPlayer(playerid, 17965, 2322.2813, -1355.1953, 25.4063, 0.25);
RemoveBuildingForPlayer(playerid, 1266, 2317.5859, -1355.8281, 37.2188, 0.25);
RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
RemoveBuildingForPlayer(playerid, 1297, 2317.3594, -1379.5234, 26.2266, 0.25);
RemoveBuildingForPlayer(playerid, 17543, 2322.2813, -1355.1953, 25.4063, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 2317.5938, -1355.8203, 37.2266, 0.25);

//Reja Yakusa
RemoveBuildingForPlayer(playerid, 13862, 359.25, -1125.8281, 80.85156, 0.25);

//*****************************FIN REMOVES*****************************
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	{
	    new vid = GetPlayerVehicleID(playerid);
	   	if(!IsAMBike(vid) || !IsABoat(vid) || !IsAPlane(vid)) // Si es una bicicleta, barco o avión. (IsABike).
	   	{
	  	 	if(newkeys & (KEY_LOOK_LEFT) && newkeys & (KEY_LOOK_RIGHT) && iLuces[playerid] == 1) // /luces activado.
			{
		    	if(Intermitentes_xqz[vid][2]) DestroyObject(Intermitentes_xqz[vid][5]),DestroyObject(Intermitentes_xqz[vid][2]), DestroyObject(Intermitentes_xqz[vid][3]),Intermitentes_xqz[vid][2]=0;
            	else if(Intermitentes_xqz[vid][0]) DestroyObject(Intermitentes_xqz[vid][4]),DestroyObject(Intermitentes_xqz[vid][0]), DestroyObject(Intermitentes_xqz[vid][1]),Intermitentes_xqz[vid][0]=0;
				else
				CambiarIntermitentes(vid,1,1);
				return 1;
			}
			if(newkeys & KEY_LOOK_RIGHT && iLuces[playerid] == 1)
			{
	  		  	if(Intermitentes_xqz[vid][0]) DestroyObject(Intermitentes_xqz[vid][4]), DestroyObject(Intermitentes_xqz[vid][0]), DestroyObject(Intermitentes_xqz[vid][1]),Intermitentes_xqz[vid][0]=0;
      	      	else if(Intermitentes_xqz[vid][2]) DestroyObject(Intermitentes_xqz[vid][5]), DestroyObject(Intermitentes_xqz[vid][2]), DestroyObject(Intermitentes_xqz[vid][3]),Intermitentes_xqz[vid][2]=0;
				else
				CambiarIntermitentes(vid,0,1);
			}
			if(newkeys & KEY_LOOK_LEFT && iLuces[playerid] == 1)
			{
			    if(Intermitentes_xqz[vid][2]) DestroyObject(Intermitentes_xqz[vid][5]),DestroyObject(Intermitentes_xqz[vid][2]), DestroyObject(Intermitentes_xqz[vid][3]),Intermitentes_xqz[vid][2]=0;
      	      	else if(Intermitentes_xqz[vid][0]) DestroyObject(Intermitentes_xqz[vid][4]),DestroyObject(Intermitentes_xqz[vid][0]), DestroyObject(Intermitentes_xqz[vid][1]),Intermitentes_xqz[vid][0]=0;
				else
				CambiarIntermitentes(vid,1,0);
			}
		}
	}
//***sistema de fire***
	if(HOLDING(KEY_FIRE)) // GetPlayerState(playerid) == 2
    {
        SetTimerEx("Checkfire", 750, false, "i", playerid);
        Apagandofire[playerid] = 1;
    }
    if(RELEASED(KEY_FIRE))
    {
        Apagandofire[playerid] = 0;
    }
//*********************
//**security**
#if defined AntiArmas 1
new Menu[1024];
if(newkeys & KEY_FIRE && ArmaProhibida(playerid))
{
new Arma, Balas;
GetPlayerWeaponData(playerid, 7, Arma, Balas);
SetPlayerHealth(playerid, 0);
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Arma prohibida detectada.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
#endif
return 1;
}
	//************
	new sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsPlayerNPC(playerid)) return 1;
	if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys) && gPlayerUsingLoopingAnim[playerid] == 1 && Info[playerid][pBeingSentenced] == 0)
	{
	    StopLoopingAnim(playerid);
        TextDrawHideForPlayer(playerid,txtAnimHelper);
        SeRinde[playerid] = 0;
    }
	if((newkeys & KEY_FIRE) && GetPVarInt(playerid, "SpeedRadar") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			if(GetPlayerWeapon(playerid) == SPEEDGUN)
			{
			    new Float:x,Float:y,Float:z;
				for(new veh = 1; veh < MAX_VEHICLES; veh++)
				{
				    if(IsVehicleStreamedIn(veh, playerid))
				    {
					    GetVehiclePos(veh,x,y,z);
					    if(IsPlayerAimingAt(playerid,x,y,z,10))
					    {
					        new string[128];
							new Float: Speed = GetVehicleSpeed(veh, 0);
							format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~Placa: ~w~%d~n~~b~Vel: ~w~%d MPH", veh, floatround(Speed/1.609));
							GameTextForPlayer(playerid, string,3500, 3);
							format(string, sizeof(string), "Placa: %d Vel: %d MPH", veh, floatround(Speed/1.609));
							SendClientMessageEx(playerid, COLOR_GRAD4, string);
							SetPVarInt(playerid, "RadarTimeout", 1);
							SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
							return 1;
						}
					}
			    }
			}
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "editingcdvehpos"))
		{
			TogglePlayerControllable(playerid, false);
		    SafeDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Advertencia:","Esta es la nueva posición que quieres?","Ok","Cancelar");
		}
		if(GetPVarInt(playerid, "editingcdvehnew"))
		{
            TogglePlayerControllable(playerid, false);
	        SafeDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Advertencia:","Esta es la nueva posición que quieres?","Ok","Cancelar");
		}
		if(GetPVarInt(playerid, "editingfamhq") != 255)
		{
		    if(GetPVarInt(playerid, "editingfamhqaction") == 1)
		    {
      			DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la entrada que quieres?","Ok","Cancelar");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 2)
		    {
		        DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la salida que quieres?","Ok","Cancelar");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 5)
		    {
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la entrada que quieres?","Ok","Cancelar");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 6)
		    {
		        TogglePlayerControllable(playerid, false);
	        	SafeDialogEx(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Es está la salida que quieres?","Ok","Cancelar");
		    }

		}
	}
	if(newkeys == KEY_NO)
	{
	 new params[1];
	 cmd_motor(playerid, params);
	}
	if(newkeys == KEY_YES)
	{
	    if(TutStep[playerid] == 0) return 1;
	    if(PuedeP[playerid] == 1) return GameTextForPlayer(playerid, "~W~Cargando. . .", 5000, 1);
		if(TutStep[playerid] == 1)
		{
			switch(TutTime[playerid])
			{
		    	case 1: TutTime[playerid] = 2;
		    	case 2: TutTime[playerid] = 3;
		    	case 3: TutTime[playerid] = 12;
 		    	case 12: TutTime[playerid] = 13;
		    	case 13: TutTime[playerid] = 14;
		    }
		    Tutorial_Inside(playerid);
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				SetHP(playerid, cHealth+2);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "* Terminaste de tomar la bebida.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	{
 		new Float:health;
 		GetPlayerHealth(playerid, health);

		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    new hpint = floatround( health, floatround_round );
		    if( hpint >= 100 )
			{
  				SendClientMessageEx(playerid, COLOR_GREY, " Estás con tu vida llena.");
	 			return 1;
	   		}
	   		else
	   		{
				GetPlayerHealth(playerid, health);
				SetHP(playerid, health+2.0);
			}
		}
	}
	if(newkeys & KEY_SPRINT)
    {
    	if(IsPlayerConnected(playerid))
		{
		    if(ShowRules[playerid] == 0)
			{
				return 1;
			}
  			if(PlayerDrunk[playerid] > 9) { ApplyAnimation(playerid,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[playerid]*1000); }
  			if(PuedeD[playerid] == 1)
	    	{
				return GameTextForPlayer(playerid, "Espera. . .", 5000, 1);
			}
			else if(ShowRules[playerid] == 1)
			{
				switch(RulesTime[playerid])
				{
		    		case 1: RulesTime[playerid] = 2;
		    		case 2: RulesTime[playerid] = 3;
		    		case 3: RulesTime[playerid] = 4;
		    		case 4: RulesTime[playerid] = 5;
		    		case 5: RulesTime[playerid] = 6;
		    		case 6: RulesTime[playerid] = 7;
		    		case 7: RulesTime[playerid] = 8;
		    		case 8: RulesTime[playerid] = 9;
		    		case 9: RulesTime[playerid] = 10;
		    	}
		    	ShowRol(playerid);
		    }
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
    	if(IsPlayerConnected(playerid))
		{
		    if (GetPlayerState(playerid) == 1)
			{
				TeleportPlayer(playerid);
				if(ReduceTime[playerid] == 0) // Sprunk.
				{
				    new Float:hp; GetPlayerHealth(playerid, hp);
					if(PlayerToPoint(1.0,playerid,-36.3182,-56.8905,1003.5469))
					{
					    ReduceTime[playerid] = 1;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-19.1974,-56.8366,1003.5469))
					{
					    ReduceTime[playerid] = 1;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-35.9060,-139.2014,1003.5469))
					{
					    ReduceTime[playerid] = 1;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-15.2743,-139.2626,1003.5469))
					{
					    ReduceTime[playerid] = 1;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+5);
					}
					else if(PlayerToPoint(1.0,playerid,-16.7039,-139.3292,1003.5469))
					{
					    ReduceTime[playerid] = 1;
					    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
				}
			}
			else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
    }
    if (newkeys == 16 && InteriorLimusina[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorLimusina[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InteriorLimusina[playerid] = 0;
	}
	if (newkeys == 16 && InteriorSwatVan[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorSwatVan[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InteriorSwatVan[playerid] = 0;
	}
	if (newkeys == 16 && InteriorCaravana[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorCaravana[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		InteriorCaravana[playerid] = 0;
	}
	if (newkeys == 16 && InteriorBeagle[playerid] > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(InteriorBeagle[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y+2, Z);
		SetPlayerInterior(playerid, 0);
		InteriorBeagle[playerid] = 0;
	}
   	if(newkeys == KEY_CTRL_BACK)
	{
	 	new params[1];
	 	cmd_entrar(playerid, params);
	 	cmd_salir(playerid, params);
	}
    if(newkeys & KEY_FIRE)
	{
		if(HaveTaser[playerid] == 1)
		{
 			ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,0,0,1);

		    new victimid = GetClosestPlayer(playerid);
			if(IsPlayerConnected(victimid))
	     	{
	        	if(GetDistanceBetweenPlayers(playerid,victimid) < 2)
	            {
	                Info[victimid][pEstado] = 1;
	                GameTextForPlayer(victimid, "~r~Has sido tazeado", 3500, 3);
                    TogglePlayerControllable(victimid, 0);
					SetPVarInt(victimid, "PlayerCuffed", 2);
					SetPVarInt(victimid, "IsFrozen", 1);
					PlayerCuffedTime[victimid] = 300;
					SetTimerEx("TimerGCRP",30000,false,"d",victimid);
	                return 1;
	             }
	         }
         }
	}

	return 1;
}

stock ClearKnock(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	KnockedDown[playerid] = 0;
}

stock RemovePlayerWeapon(playerid, weapon){
	switch(weapon) {
		case 0, 1: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][0] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][1] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 22, 23, 24: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][2] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 25, 26, 27: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][3] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 28, 29, 32: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][4] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 30, 31: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][5] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 33, 34: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][6] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 35, 36, 37, 38: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][7] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 16, 17, 18, 39: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][8] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 41, 42, 43: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][9] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 10, 11, 12, 13, 14, 15: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][10] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 44, 45, 46: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][11] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 40: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][12] = 0;
			SetPlayerWeapons(playerid);
	    }
	}
	return 1;
}

/*RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[13];
	for(new s = 0; s < 13; s++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, s, wep, ammo);
		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, s, plyWeapons[s], ammo);
		}
		else
		{
			Info[playerid][pWeapons][s] = 0;
		}
	}
	ResetPlayerWeapons(playerid);
 	for(new s = 0; s < 13; s++)
	{
		GivePlayerValidWeapon(playerid, plyWeapons[s]);
	}
	return 1;
}*/

function ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
	}
}

function FreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 0);
}

function UnfreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 1);
}
function Aterrizaje(playerid)
{
	if (Avion_Route[playerid] == 5)
	{
	    PlayAudioStreamForPlayer(playerid, "http://INFRANET-rp.com/host/aterrizaje.mp3");
	    InterpolateCameraPos(playerid,2154.04028, -2682.89478, 41.28977, 1825.00293, -2512.59790, 61.50528, 6500, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid,2004.8916,-2593.5776,14.4709, 2004.8916,-2593.5776,24.4709, 6500, CAMERA_MOVE);
		SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Radio Cabina]: Aquí Aeropuerto de Los Santos, en breve le daremos autorización de acceso.");
		SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Radio Cabina]: Espere un momento, en unos momentos podrá estacionar la nave, gracias.");
		SetTimerEx("Aterrizaje2", 800, false, "d", playerid); // 5 Segundos.
	}
}
function Aterrizaje2(playerid)
{
	if (Avion_Route[playerid] == 5)
	{
		SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "[Radio Cabina]: Pista libre, estacione la nave en el Sector Oeste del Aeropuerto.");
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);
	}
}
function Heal(playerid)			{	SetHP(playerid, 10);			return 1;	}

function CheckForCloseDoor(playerid)
{
	for(new b = 0; b < MAX_PORTONES; b++)
	{
 		if(PlayerToPoint(15, playerid, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]))
		{
  			if(Info[playerid][pMember] != 0 && Info[playerid][pMember] == iPorton[b][pFac]) // Tiene facción y es miembro de la facción a la que pertenece el portón.
	    	{
               	MoveDynamicObject(iPorton[b][pObject],iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2], iPorton[b][pSpeed], iPorton[b][pA][3], iPorton[b][pA][4], iPorton[b][pA][5]);
			   	PlayerPlaySound(playerid, 1153, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]);
        		//SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Portón Facción]: {FFFFFF}Abriste el acceso, usa /cpgarage para cerrarlo de nuevo. (Dinamic System)");
			   	return 1;
			}
			if(Info[playerid][pFMember] != 0 && Info[playerid][pFMember] == iPorton[b][pFam]) // Es miembro de la familia a la que pertenece el portón.
   			{
     			MoveDynamicObject(iPorton[b][pObject],iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2], iPorton[b][pSpeed], iPorton[b][pA][3], iPorton[b][pA][4], iPorton[b][pA][5]);
			    PlayerPlaySound(playerid, 1153, iPorton[b][pA][0], iPorton[b][pA][1], iPorton[b][pA][2]);
			    //SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Portón Familia]: {FFFFFF}Abriste el acceso, usa /cpgarage para cerrarlo de nuevo. (Dinamic System)");
	    		return 1;
			}
		} // Se cierra el LOOP de revisar todo garage cerca de la persona.
	} // Se cierra el LOOP de todos los portones existentes en el servidor (Actualmente 50).
	new sendername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, sendername, sizeof(sendername));
	if(IsAPolice(playerid))
    {
        if (PlayerToPoint(15, playerid,1576.80005, -1638.14319, 14.56300))
		{
			MoveDynamicObject(pdgate1,1586.73999, -1638.14319, 14.56300, 1.0 ,0.00000, 0.00000, 180.00000);
      		PlayerPlaySound(playerid, 1153, 1586.73999, -1638.14319, 14.56300);
      		return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE,"No hay señal.");
    }
    if(Team_SAMD(playerid)){
   		if (PlayerToPoint(30, playerid,1121.61951, -1315.17566, 1.97200))
		   {
    			MoveDynamicObject(hospitalgate, 1121.61951, -1315.17566, 1.97200, 1.5, 0.0, 0.0, -90.0); // Cerrado.
    			PlayerPlaySound(playerid, 1153, 1121.61951, -1315.17566, 1.97200);
		       	return 1;
	       }
	       else SendClientMessageEx(playerid, COLOR_WHITE,"No hay señal.");
		}
	if(Team_Mecanicos(playerid)){
		if (PlayerToPoint(30, playerid,1975.92395, -1780.50000, 12.38))
			{
		       	MoveDynamicObject(EntradaTaller,1975.92395, -1780.50000, 18.00000, 2.0,   0.00000, -90.00000, 0.00000);
		       	//SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Taller Mecánico]: {FFFFFF}Abriste el acceso al taller público, usa /cpgarage para cerrarlo.");
		       	//SetTimer("GateCloseTaller1", 8000, 0);
		       	return 1;
     		}
		if (PlayerToPoint(30, playerid,2030.15137, -1780.31531, 15.1176))
			{
		       	MoveDynamicObject(EntradaTaller2,2030.15137, -1790.31531, 15.1176, 2.0,   0.00000, 0.00000, 90.00000);
		       	//SendClientMessageEx(playerid, COLOR_WHITE, "{00F70C}[Taller Mecánico]: {FFFFFF}Abriste el acceso al taller privado, usa /cpgarage para cerrarlo.");
		       	//SetTimer("GateCloseTaller2", 8000, 0);
		       	return 1;
     		}
            else SendClientMessageEx(playerid, COLOR_WHITE,"");
	    }
    if(Team_LCN(playerid)){
   		if (PlayerToPoint(20, playerid,1374.0200, -1883.0172, 13.8000)){
    		MoveDynamicObject(portonbarlcn,1374.0200, -1883.0172, 13.8000, 2.0);
      		return 1;
		}
  		else SendClientMessageEx(playerid, COLOR_WHITE,"");
    }
    else SendClientMessageEx(playerid, COLOR_WHITE,"Usted no tiene un mando a distancia.");
    return 1;
}
stock CambiarIntermitentes(vehicleid, leftindicator=0, rightindicator=0)
{
	if(!leftindicator & !rightindicator) return false;
	new Float:_vX[2], Float:_vY[2], Float:_vZ[2];
	if(rightindicator)
	{
	    if(IsTrailerAttachedToVehicle(vehicleid))
	    {
	        new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
            GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 			Intermitentes_xqz[vehicleid][4] = CreateObject(19294, 0, 0, 5000,0,0,0);
			AttachObjectToVehicle(Intermitentes_xqz[vehicleid][4], GetVehicleTrailer(vehicleid),  _vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
		}
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 		Intermitentes_xqz[vehicleid][0] = CreateObject(19294, 0, 0, 5000,0,0,0);
		AttachObjectToVehicle(Intermitentes_xqz[vehicleid][0], vehicleid,  _vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
 		Intermitentes_xqz[vehicleid][1] = CreateObject(19294, 0, 0, 5000,0,0,0);
		AttachObjectToVehicle(Intermitentes_xqz[vehicleid][1], vehicleid,  _vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	if(leftindicator)
	{
	    if(IsTrailerAttachedToVehicle(vehicleid))
	    {
	    	new omg = GetVehicleModel(GetVehicleTrailer(vehicleid));
            GetVehicleModelInfo(omg, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 			Intermitentes_xqz[vehicleid][5] = CreateObject(19294, 0, 0, 5000,0,0,0);
			AttachObjectToVehicle(Intermitentes_xqz[vehicleid][5], GetVehicleTrailer(vehicleid),  -_vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
		}
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 		Intermitentes_xqz[vehicleid][2] = CreateObject(19294, 0, 0, 5000,0,0,0);
		AttachObjectToVehicle(Intermitentes_xqz[vehicleid][2], vehicleid,  -_vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
 		Intermitentes_xqz[vehicleid][3] = CreateObject(19294, 0, 0, 5000,0,0,0);
		AttachObjectToVehicle(Intermitentes_xqz[vehicleid][3], vehicleid,  -_vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	return 1;
}

stock Bought(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
 		new a[12];
		format(a,sizeof(a),"~r~ -%d$",amount);
		GameTextForPlayer(playerid, a, 5000, 1);
		GivePlayerCash(playerid, -amount);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock Earn(playerid, amount){
	if(IsPlayerConnected(playerid)){
		new a[12];
		format(a,sizeof(a),"~g~ %d$",amount);
	    GameTextForPlayer(playerid, a, 5000, 1);
		GivePlayerCash(playerid, amount);
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock CheckMoney(playerid, money){
    if(IsPlayerConnected(playerid)){
	    new b[64];
	    new xx;
		xx = money - (GetPlayerCash(playerid));
	    if(GetPlayerCash(playerid) >= money){ return 1; }
		else{
		    format(b,sizeof(b),"No tienes dinero suficiente! Te faltan %d$",xx);
			SendClientMessageEx(playerid, COLOR_GRAD2, b);
			return 0;
		}
	}
	return 0;
}

function ClearDrugs(playerid)
{
	UsedWeed[playerid] = 0;
	UsedCrack[playerid] = 0;
	return 1;
}

function NewUs(playerid)
{
	  NewUsed[playerid] = 0;
      return 1;
}

function PuedePTimer(playerid)
{
	PuedeP[playerid] = 0;
	return 1;
}

function ReleasePlayer(playerid)
{
	SetPVarInt(playerid, "IsFrozen", 0);
	TogglePlayerControllable(playerid,1);
}

function NewbieUnMuted(playerid)
{
    Info[playerid][pNMute] = 0;
    SendClientMessage(playerid, COLOR_WHITE, "Ahora ya no estas silenciado del canal de ayuda recuerda usarlo sólo para preguntas.");
    SendClientMessage(playerid, COLOR_WHITE, "Si sigues recuerda que puedes resultar baneado automáticamente del servidor.");
    if(Info[playerid][pWarn] == 2)
	{
 		new ip[32], string[128];
		GetPlayerIp(playerid,ip,sizeof(ip));
  		Info[playerid][pBannedZC] = 2;
		Info[playerid][pWarn]= 0;
		format(string, sizeof(string), "[AdmCmd]: %s fue baneado automáticamente, razón: Execesivas advertencias.", GetPlayerNameEx(playerid));
		BroadCast(COLOR_LIGHTRED,string);
		AddBan(ip);
		KickxD(playerid);
	}
	return 1;
}

//function Reg_ShowDNI(playerid) { ShowDNI(playerid,playerid); }

function Reg_ShowDNI(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
	    new string[64], sex[18], otext[36];
	    new sendername[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    if(Info[playerid][pSex] == 1) { sex = "Masculino"; }
   		if(Info[playerid][pSex] == 2) { sex = "Femenino"; }
   		if(Info[targetid][pOrigin] == 2) { otext = "SF"; }
		else if(Info[targetid][pOrigin] == 1) { otext = "LS"; }
   		format(string, sizeof(string), "Nombre: %s  Sexo: %s   Edad: %d", sendername, sex, Info[playerid][pAge]);
   		SendClientMessageEx(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "Fecha Nacimiento: %d   Nacionalidad: %s", 2012-Info[playerid][pAge], otext);
   		SendClientMessageEx(targetid, COLOR_WHITE, string);
	}
}
//***dni por textdraw***
function ShowDNI(playerid,giveplayerid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(giveplayerid))
	{
	    new string[64], sex[18], otext[36];
	    if(Info[playerid][pSex] == 1) { sex = "Hombre"; }
   		if(Info[playerid][pSex] == 2) { sex = "Mujer"; }
   		if(Info[playerid][pOrigin] == 2) { otext = "San Fierro"; }
		else if(Info[playerid][pOrigin] == 1) { otext = "Los Santos"; }

        format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		PlayerTextDrawSetString(giveplayerid,DNI5[giveplayerid], string);

        format(string, sizeof(string), "%d", Info[playerid][pDNI]);
		PlayerTextDrawSetString(giveplayerid,DNI3[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		PlayerTextDrawSetString(giveplayerid,DNI9[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		PlayerTextDrawSetString(giveplayerid,DNI7[giveplayerid], string);

		format(string, sizeof(string), "%s", otext);
		PlayerTextDrawSetString(giveplayerid,DNI11[giveplayerid], string);

   		PlayerTextDrawSetPreviewModel(giveplayerid,DNI12[giveplayerid], Info[playerid][pChar]);

		PlayerTextDrawShow(giveplayerid, DNI0[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI1[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI2[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI3[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI4[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI5[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI6[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI7[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI8[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI9[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI10[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI11[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI12[giveplayerid]);

		SetTimerEx("qdni",10000,false,"i",giveplayerid);
	}
}
//**********************
//**licencias por textdraw***
function ShowLicencia(playerid,giveplayerid,tipo)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(giveplayerid))
	{
 		new sex[18],string[200];
	    if(Info[playerid][pSex] == 1) { sex = "Hombre"; }
   		if(Info[playerid][pSex] == 2) { sex = "Mujer"; }

   		format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		PlayerTextDrawSetString(giveplayerid, LICENCIA2[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		PlayerTextDrawSetString(giveplayerid, LICENCIA8[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		PlayerTextDrawSetString(giveplayerid, LICENCIA4[giveplayerid], string);

   		PlayerTextDrawSetPreviewModel(giveplayerid, LICENCIA1[giveplayerid], Info[playerid][pChar]);
	    if(tipo == 1)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:gold");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 2)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:goboat");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 3)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:golfly");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 4)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "hud:fist");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	    if(tipo == 5)
	    {
	        PlayerTextDrawSetString(giveplayerid,LICENCIA3[giveplayerid], "ld_drv:silver");
	        PlayerTextDrawShow(giveplayerid, LICENCIA0[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA1[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA2[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA3[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA4[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA5[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA6[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA7[giveplayerid]);
	        PlayerTextDrawShow(giveplayerid, LICENCIA8[giveplayerid]);

            SetTimerEx("qlicencia",10000,false,"i",giveplayerid);
	    }
	}
}
//***************************
function RegMsn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SafeDialogEx(playerid,DIALOG_REG_MSN,DIALOG_STYLE_MSGBOX,"{00C200}Confirmación","{FFFFFF}Asegúrate bien en los datos no podrás cambiar tus datos al acabar el registro.\n\n¿Los datos son correctos?","Si","No");
		return 1;
	}
	return 1;
}

stock Admin(lvl,playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new admin = Info[playerid][pAdminZC];
	    if(admin	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}

function Detective_FindPerson(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(WhoFind[playerid], X,Y,Z);
	SetPlayerCheckpoint(playerid, X,Y,Z, 6);
	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar.");
	WhoFind[playerid] = 0; TextStringforPlayer(playerid);
	return 1;
}

function Detective_FindCar(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(WhoFind[playerid], X,Y,Z);
	SetPlayerCheckpoint(playerid, X,Y,Z, 10);
	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar.");
	WhoFind[playerid] = 0;
	return 1;
}
function Detective_FindHouse(playerid)
{
	new h = WhoFind[playerid];
	SetPlayerCheckpoint(playerid, HouseInfo[h][hExteriorX],HouseInfo[h][hExteriorY],HouseInfo[h][hExteriorZ], 10);
	SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar.");
	GameTextForPlayer(playerid, "~w~Casa Encontrada", 5000, 1);
	WhoFind[playerid] = 0;
	return 1;
}
LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    TextDrawShowForPlayer(playerid,txtAnimHelper);
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
 	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoadAnimLibs(playerid)
{
    PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"GHANDS");
	PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"SWAT");
	PreloadAnimLib(playerid,"WUZI");
   	PreloadAnimLib(playerid,"PED");
   	PreloadAnimLib(playerid,"ped");
   	PreloadAnimLib(playerid,"SCRATCHING");
    PreloadAnimLib(playerid,"FAT");
    PreloadAnimLib(playerid,"POLICE");
   	PreloadAnimLib(playerid,"Attractors");
   	PreloadAnimLib(playerid,"FOOD");
   	PreloadAnimLib(playerid,"CRIB");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"FIGHT_D");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"SNM");
	PreloadAnimLib(playerid,"benchpress");
}
SearchingHit(playerid)
{
	new string[ 256 ];
   	SendClientMessageEx(playerid, COLOR_WHITE, "Contratos Habilitados:");
   	new hits;
	foreach(Player, i)
	{
		if(Info[i][pMember] != 8 && Info[i][pHead] > 0)
		{
	 		if(GotHit[i] == 0)
  			{
				hits++;
				format(string, sizeof(string), "Nombre: %s (ID %d) | Precio: $%d | Contratado por: %s | Detalles: %s | Seguido por: Nobody", GetPlayerNameEx(i), i, Info[i][pHead], Info[i][pContractBy], Info[i][pContractDetail]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
			else
			{
  				format(string, sizeof(string), "Nombre: %s (ID %d) | Precio: $%d |  Contratado por: %s | Detalles: %s | Seguido por: %s", GetPlayerNameEx(i), i, Info[i][pHead], Info[i][pContractBy], Info[i][pContractDetail], GetPlayerNameEx(GetChased[i]));
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
  		}
	}
	if(hits && Info[playerid][pRank] >= 6 && Info[playerid][pMember] == 8 && Info[playerid][pLeader] == 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Usa {5ABAFF}/darhit{FFFFFF} para asignar un contrato a uno de los hitman.");
	}
	if(hits == 0)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "No hay contratos disponibles.");
	}
	return 0;
}

SendPaintballArenaMessage(arenamodo, color, message[])
{
	foreach(Player, p)
	{
   		new modo = GetPVarInt(p, "ArenaMode");
   		if(arenamodo == modo)
       	{
	      	SendClientMessageEx(p, color, message);
		}
	}
	return 1;
}

function BackupClear(playerid, faction, timer)
{
	if(IsPlayerConnected(playerid))
	{
		if(faction == 1)
		{
			if(Info[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_LSPD(i) && OnDuty[i] == 1)
						DisablePlayerCheckpoint(playerid);
						SetPlayerToTeamColor(playerid);
					}
				}
				if(timer != 1) 	SendClientMessageEx(playerid, TEAM_BLUE_COLOR, "Tu pedido de refuerzos ha sido cancelado automáticamente.");
				else 					SendClientMessageEx(playerid, TEAM_BLUE_COLOR, "Tu pedido fue cancelado.");

				Info[playerid][pRequestingBackup] = 0;
			}
		}
	}
	return 1;
}

//·| << Timers de Objetos >> ========================================================================================|·
function Puerta2Abierta()
{
    MoveObject(PuertaH2,250.67543029785, 130.39466552734, 1037.9182128906, 0.97);
    SetTimer("Puerta2Cerrada", 5000, 0);
}
function Puerta1Abierta()
{
    MoveObject(PuertaH1,250.56510925293, 130.34936218262, 1032.2158203125, 0.97);
    SetTimer("Puerta1Cerrada", 8000, 0);
}
function Puerta2Cerrada()
{
    MoveObject(PuertaH2,250.67543029785, 131.59466552734, 1037.9182128906, 0.97);
    if(HaciaAbajo == 1) {
    SetTimer("Eabajo", 2000, 0); }
    else { }
}
function Puerta1Cerrada()
{
    MoveObject(PuertaH1,250.56510925293, 131.54936218262, 1032.2158203125, 0.97);
    if(HaciaArriba == 1) {
    SetTimer("Earriba", 2000, 0); }
    else {
    }
}

stock SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, A);
    SetPlayerInterior(playerid, interiorid);
    SetPlayerVirtualWorld(playerid, worldid);
	Info[playerid][pInt] = interiorid;
	Info[playerid][pVW] = worldid;
}

function TazerTimer(playerid)
{
	if (TazerTimeout[playerid] > 0)
   	{
		new string[128];
   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Recargando Tazer... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
   	}
	return 1;
}

GetPlayerNameEx(playerid) {

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

function BikeModel(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 509) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 510) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 462) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 448) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 581) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 522) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 461) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 523) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 586) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 468) { return 1; }
		else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 471) { return 1; }
	}
	return 0;
}

//Buttons
function CloseChief()
{
	MoveDynamicObject(chief1,229.59960938,119.50000000,1009.21875000,4);
 	MoveDynamicObject(chief2,232.59960938,119.53515625,1009.21875000,4);
	return 1;
}
function CloseEastLobby()
{
	MoveDynamicObject(eastlobby1,253.14941406,110.59960938,1002.21502686,4);
	MoveDynamicObject(eastlobby2,253.18457031,107.59960938,1002.21502686,4);
	return 1;
}
function CloseWestLobby()
{
	MoveDynamicObject(westlobby1,239.71582031,116.09179688,1002.21502686,4);
	MoveDynamicObject(westlobby2,239.67968750,119.09960938,1002.21502686,4);
	return 1;
}

function CloseLocker()
{
	MoveDynamicObject(locker1,267.29980469,112.56640625,1003.61718750,4);
 	MoveDynamicObject(locker2,264.29980469,112.52929688,1003.61718750,4);
	return 1;
}
function CloseCCTV()
{
	MoveDynamicObject(cctv1,264.44921875,115.79980469,1003.61718750,4);
 	MoveDynamicObject(cctv2,267.46875000,115.83691406,1003.61718750,4);
	return 1;
}
function CloseFBILobbyLeft()
{
	MoveDynamicObject(FBILobbyLeft,295.40136719,-1498.43457031,-46.13965225,4);
	return 1;
}
function CloseFBILobbyRight()
{
	MoveDynamicObject(FBILobbyRight,302.39355469,-1521.62988281,-46.13965225,4);
	return 1;
}
function CloseFBIPrivate()
{
	MoveDynamicObject(FBIPrivate[0],299.29986572,-1492.82666016,-28.73300552,4);
	MoveDynamicObject(FBIPrivate[1],299.33737183,-1495.83911133,-28.73300552,4);
	return 1;
}

ExecuteNOPAction(playerid)
{
	NOPTrigger[playerid]++;
	RemovePlayerFromVehicle(playerid);
	new newcar = GetPlayerVehicleID(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z+2);
	SetVehicleToRespawn(newcar);
	if(NOPTrigger[playerid] >= 1)
	{
		new sec = (NOPTrigger[playerid] * 1000)/1000-1, string[128];
		format(string, sizeof(string), "AdmWarning: %s (ID %d) tal vez es `NOP hacking explote´, (Modelo: %d) por %d segundos.", GetPlayerNameEx(playerid), playerid, GetVehicleModel(newcar),sec);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "AdmCmd: %s fue expulsado por el servidor, razón: Posible Crasher", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
 		SafeDialogEx(playerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Haz sido expulsado del servidor","El Servidor\nte ha expulsado\nRazon: Posible Car Crash","Salir","");
		SetTimerEx("KickxD",500,0,"d",playerid);
	}
	return 1;
}

stock PlayerFacePlayer(playerid, targetplayerid) { // Yeah, this'll fix the handshake headaches we had last time around (shaking air).
	new
		Float: Angle;

	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return 1;
}

stock GivePlayerEventWeapons( playerid )
{
	if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 0 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 1 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 2 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 3 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 4 ], 60000 );
	}
	return 1;
}

function SafeLoadObjects(playerid)
{
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1);
		TextDrawHideForPlayer(playerid, box);
		TextDrawHideForPlayer(playerid, streamer);
	}
}

function ReFill(playerid)
{
	if(!IsAtGasStation(playerid) || !IsPlayerInAnyVehicle(playerid) || VehicleFuel[GetPlayerVehicleID(playerid)] >= 200 || GetPlayerCash(playerid) < 1)
	{
		StopRefueling(playerid);
	}
	else
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return StopRefueling(playerid);
		VehicleFuel[GetPlayerVehicleID(playerid)] += 125;
		RefuelingVehiclePrice[playerid] += 20;
		if(VehicleFuel[GetPlayerVehicleID(playerid)] >= 200) VehicleFuel[GetPlayerVehicleID(playerid)] = 200;
	}
	return true;
}

stock StopRefueling(playerid)
{
	new string[128];
	GivePlayerCash(playerid, -RefuelingVehiclePrice[playerid]);
	format(string, sizeof(string), "Tu vehiculo a sido llenado por $%d.", RefuelingVehiclePrice[playerid]);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
    //TillEx(4, 200); // Gasolineras.
	RefuelingVehicle[playerid] = 0; RefuelingVehiclePrice[playerid] = 0; KillTimer(RefuelingVehicleTimer[playerid]);
	return true;
}

public OnVehicleSpawn(vehicleid)
{
    	// Sistema de intermitentes.
    if(Intermitentes_xqz[vehicleid][2]) DestroyObject(Intermitentes_xqz[vehicleid][2]), DestroyObject(Intermitentes_xqz[vehicleid][3]),DestroyObject(Intermitentes_xqz[vehicleid][5]),Intermitentes_xqz[vehicleid][2]=0;
	if(Intermitentes_xqz[vehicleid][0]) DestroyObject(Intermitentes_xqz[vehicleid][0]), DestroyObject(Intermitentes_xqz[vehicleid][1]),DestroyObject(Intermitentes_xqz[vehicleid][4]),Intermitentes_xqz[vehicleid][0]=0;
    if(Lamp[vehicleid] == 1)
	{
    	DestroyObject(light[vehicleid]);
        Lamp[vehicleid] = 0;
    }
    if(vehicleid == TBuses[0])
	{
		DestroyObject(derecha); DestroyObject(izquierda);
		derecha = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R357", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(derecha, TBuses[0], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
		izquierda = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R357", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(izquierda, TBuses[0], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
	}
 	if(vehicleid == TBuses[1])
	{
		DestroyObject(derecha); DestroyObject(izquierda);
		derecha = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R358", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(derecha, TBuses[1], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
		izquierda = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R358", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(izquierda, TBuses[1], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
	}
 	if(vehicleid == TBuses[2])
	{
		DestroyObject(derecha); DestroyObject(izquierda);
		derecha = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R359", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(derecha, TBuses[2], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
		izquierda = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R359", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(izquierda, TBuses[2], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
	}
 	if(vehicleid == TBuses[3])
	{
		DestroyObject(derecha); DestroyObject(izquierda);
		derecha = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(derecha, "{FFFFFF}  Autobús\n{FFFF00} R360", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(derecha, TBuses[3], 1.350000,3.525001,1.350000,0.000000,0.000000,90.0);
		izquierda = CreateObject(19329,0,0,-1000,0,0,0);
		SetObjectMaterialText(izquierda, "{FFFFFF}  Autobús\n{FFFF00} R360", 0, 20, "Arial", 16, 0, -1, 0, 0);
		AttachObjectToVehicle(izquierda, TBuses[3], -1.350000,3.525001,1.350000,0.000000,0.000000,-90.0);
	}
	if(vehicleid == SAPD_Vehicle[22])
	{
		DestroyObject(misil);
		misil = CreateObject(3267,0,0,-1000,0,0,0);
		AttachObjectToVehicle(misil, SAPD_Vehicle[22], 0.000000,-1.275000,0.974999,0.000000,0.000000,0.000000);
	}
	if(GetVehicleModel(vehicleid) == 432){SetVehicleHealth(vehicleid, 10000);} // Tanque.
	if(GetVehicleModel(vehicleid) == 427){SetVehicleHealth(vehicleid, 5000);} // Enforcer.
	if(GetVehicleModel(vehicleid) == 428){SetVehicleHealth(vehicleid, 5000);} // Securicar.
	if(GetVehicleModel(vehicleid) == 548){SetVehicleHealth(vehicleid, 5000);} // Cargogob.
    VehicleStatus{vehicleid} = 0;
    estacionveh[vehicleid] = 0;
	foreach(Player, i)
	{
	    new v;
	    v = GetPlayerVehicle(i, vehicleid);
	    if (v != -1)
	    {
 			if(PlayerVehicleInfo[i][v][pvId] == vehicleid && GetVehicleModel(vehicleid) != PlayerVehicleInfo[i][v][pvModelId])
	  		{
	   			DestroyVehicle(vehicleid);
				PlayerVehicleInfo[i][v][pvId] = CreateVehicle(PlayerVehicleInfo[i][v][pvModelId], PlayerVehicleInfo[i][v][pvPosX], PlayerVehicleInfo[i][v][pvPosY], PlayerVehicleInfo[i][v][pvPosZ], PlayerVehicleInfo[i][v][pvPosAngle],PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2], -1);
				if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
	            ChangeVehiclePaintjob(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
                SetVehicleVirtualWorld(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvVW]);
                SetVehicleHealth(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvHealth]);
				//SetVehicleNumberPlate(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvNumberPlate]);
				for(new m = 0; m < MAX_MODS; m++)
	   			{
   					AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
	      		}
 			}
 			else
			{
			    ChangeVehiclePaintjob(vehicleid, PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(vehicleid, PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
				SetVehicleVirtualWorld(vehicleid, PlayerVehicleInfo[i][v][pvVW]);
				SetVehicleHealth(vehicleid, PlayerVehicleInfo[i][v][pvHealth]);
				for(new m = 0; m < MAX_MODS; m++)
	            {
  	            	AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
	            }
				if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
			}
			new string[128];
			format(string,sizeof(string),"Tu %s ha sido enviado a la última posición donde lo aparcaste.",GetVehicleName(vehicleid));
			SendClientMessageEx(i, COLOR_GRAD1, string);
		}
	}
 	if(LockStatus[vehicleid])
	{
		foreach(Player, i)
		{
			if(Info[i][pLockCar] == vehicleid)
			{
				Info[i][pLockCar] = INVALID_VEHICLE_ID;
			}
		}
	}
	arr_Engine{vehicleid} = 0;
	VehicleFuel[vehicleid] = 200;
	TruckContents[vehicleid] = 0;
}

function SetPlayerJoinCamera(playerid) //Camara de Logeo.
{
SetPosEx(playerid, 1375.74207, -807.15186, 83.94895, 0, 0, 0);
InterpolateCameraPos(playerid, 1145.97803, -906.18604, 97.48013, 1416.4598, -914.8869, 68.2429, 15000, CAMERA_MOVE);
InterpolateCameraLookAt(playerid, 1274.4357, -832.1067, 88.1849, 1412.5050, -813.9489, 82.6266, 15000, CAMERA_MOVE);
}

stock IsPlayerInVehicleRadio(playerid, Float:radius)
{
    new Float:r, Float:rr, Float:rrr, Float:rc, Float:rrc, Float:rrrc;
    GetPlayerPos(playerid, r, rr, rrr);
    for(new i; i < MAX_VEHICLES; i++)
    {
        GetVehiclePos(i, rc, rrc, rrrc);
        if(PlayerToPoint(radius,playerid,rc,rrc,rrrc))
        {
            return i;
        }
    }
    return false;
}

stock CleanScreen()
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        ClearChatbox(i);
    }
    return 1;
}

function DisableVehicleAlarm(vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}

function HospitalFun(playerid)
{
    if(Team_SAEM(playerid))
	{
	    SetCameraBehindPlayer(playerid);
		SetPosEx(playerid, 2658.3025, -2444.0889, 14.0683,0,0,0);
		SendClientMessageEx(playerid, COLOR_WHITE, "Has sido enviado a SAEM, lamentablemente no recuerdas nada de lo ocurrido.");
	}
	else
	{
    	SendClientMessageEx(playerid, COLOR_WHITE, "Lamentablemente perdiste el conocimiento y no recuedas nada.");
    	SendClientMessageEx(playerid, COLOR_WHITE, "Los gastos son de {FF0000}$500{FFFFFF}, que tengas buen día.");
    	GivePlayerCash(playerid, -500);
		SetCameraBehindPlayer(playerid);
		SetPosEx(playerid,1114.10, -1319.2, 13.76, ESTE,0,0); //1176.4598,-1324.1121,14.0224
	}
}

function OtherTimerEx(playerid, type)
{
	if(type == TYPE_GIVEWEAPONTIMER)
	{
	    if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
		{
			SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(type == TYPE_GUARDTIMER)
	{
	    if(GetPVarInt(playerid, "GuardTimer") > 0)
	    {
	        SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
	    }
	}
	else if(type == TYPE_FLOODPROTECTION)
	{
 		if( CommandSpamUnmute[playerid] >= 1)
 		{
  			CommandSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
	}
	else if(type == TYPE_PAYTIMER)
	{
	    if(GetPVarInt(playerid, "GiveMoneyTimer") > 0)
		{
			SetPVarInt(playerid, "GiveMoneyTimer", GetPVarInt(playerid, "GiveMoneyTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
		}
	}
	else if(type == TYPE_ARMSTIMER)
	{
	    if(GetPVarInt(playerid, "ArmsTimer") > 0)
		{
			SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
		}
	}
	else if (type == TYPE_TPPIZZARUNTIMER)
	{
		if(GetPVarInt(playerid, "tpPizzaTimer") > 0 && GetPVarInt(playerid, "Pizza"))
		{
			SetPVarInt(playerid, "tpPizzaTimer", GetPVarInt(playerid, "tpPizzaTimer")-1);
			SetTimerEx("OtherTimerEx", 2000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
		}
	}
	else if(type == TYPE_TPDRUGRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
		}
	}
	if(type == TYPE_TPMATRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		}
	}
	else if(type == TYPE_TPTRUCKRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpTruckRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpTruckRunTimer", GetPVarInt(playerid, "tpTruckRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		}
	}
	else if (type == TYPE_PIZZATIMER)
	{
	    if(GetPVarInt(playerid, "pizzaTimer") == 0)
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "No lograste entregar la pizza a la casa antes de que se se enfriara!");
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if (GetPVarInt(playerid, "Pizza") == 0)
	    {
	        DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if (GetPVarInt(playerid, "pizzaTimer") > 0 && GetPVarInt(playerid, "Pizza") > 0)
	    {
			SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTimer")-1);
	        SetProgressBarValue(PizzaBar[playerid], (GetPVarInt(playerid, "pizzaTimer") * 100.0 / GetPVarInt(playerid, "pizzaTotal")));
	        UpdateProgressBar(PizzaBar[playerid], playerid);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	    }
	}
}

stock IsLocolowVehicle(veh)
{
	new model = GetVehicleModel(veh);
    switch(model)
    {
        case 412,534,535,536,566,567,576: return 1;
    }
    return 0;
}

stock SendReportToQue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

        for(new i=0;i<MAX_REPORTS;i++)
        {
                if(!breakingloop)
                {
                        if(Reports[i][HasBeenUsed] == 0)
                        {
                                breakingloop = true;
                                newid = i;
                        }
                }
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 30000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "Reporte de [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(COLOR_REPORT,string, 2);
    }
    else
    {
        ClearReports();
        SendReportToQue(reportfrom, report);
        }
    if(Info[reportfrom][pVIP] >= 4){
        new string[128];
                format(string, sizeof(string), "~r~Reporte VIP: ~g~%d", newid);
                foreach(Player, i){
                    if(Info[i][pAdminZC] >= 2){
                        GameTextForPlayer(i, string, 1500, 1);
                        }
                }
        }
        return 1;
}

function ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(Reports[i][Report], "None", 0, 4, 4);
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][TimeToExpire] = 5;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
        TextStringforPlayer(i);
	}
	return 1;
}

function ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] > 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GRAD2, "Tu reporte ha expirado. Tu puedes intentar mandando otro reporte.");
	            SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_GRAD2, "También es recomendable que busques ayuda en nuestro foro infranet.foroactivo.com");
	            Reports[reportid][BeingUsed] = 0;
	            Reports[reportid][ReportFrom] = 999;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 30000, 0, "d", reportid);
		}
	}
	return 1;
}

function ReplyTimer(reportid)
{
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = 999;
    Reports[reportid][CheckingReport] = 999;
}

/*ReadyToCapture(pointid)
{
	new string[128];
	//if(Points[pointid][Type] == 3 && Points[pointid][Type] == 4) return 1;
	format(string, sizeof(string), "%s está disponible para capturar! En el punto escribe /capturar!", Points[pointid][Name]);
	Points[pointid][CaptureProccess] = Create3DTextLabel(string, COLOR_POINTGEN, Points[pointid][Pointx], Points[pointid][Pointy], Points[pointid][Pointz]+0.6, 10.0, 0, 0);
	Points[pointid][CaptureProccessEx] = 1;
	return 1;
}

function CaptureTimer(point)
{
	new string[128];
	new fam;
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
		new claimer = Points[point][ClaimerId];
		new Float: x, Float: y, Float: z;
		GetPlayerPos(claimer, x, y, z);
		if (Points[point][Capturex] != x || Points[point][Capturey] != y || Points[point][Capturez] != z || GetPVarInt(Points[point][ClaimerId],"Injured") == 1)
		{
			SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "No pudiste capturar el punto, te moviste o te moriste mientras intentabas capturar.");
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][TimeToClaim] = 0;
		}
		else
		{
			if(Points[point][Vulnerable] > 0)
			{
			    SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "No pudiste capturar, el punto ya fue capturado.");
				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
				return 1;
			}
			fam = Info[claimer][pFMember];
            Points[point][PlayerNameCapping] = GetPlayerNameEx(claimer);
		   	format(string, sizeof(string), "%s ha intentado tomar el control de %s por %s, será de ellos en %d minutos.", Points[point][PlayerNameCapping], Points[point][Name], fINFO[fam][FamilyName], TIME_TO_TAKEOVER);
			SendClientMessageToAllEx(COLOR_POINTGEN, string);
			if(Points[point][CaptureProccessEx] >= 1)
			{
				Update3DTextLabelText(Points[point][CaptureProccess], COLOR_POINTGEN, string);
				Points[point][CaptureProccessEx] = 2;
			}
			Points[point][TakeOverTimerStarted] = 1;
			Points[point][TakeOverTimer] = 5;
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][ClaimerTeam] = fam;
			Points[point][TimeToClaim] = 0;
			if(Points[point][CaptureTimerEx2] != -1) KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = SetTimerEx("CaptureTimerEx", 60000, 1, "d", point);
		}
	}
	return 1;
}
function ProgressTimer(point)
{
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
	    Points[point][TimeLeft]--;
		SetProgressBarValue(Points[point][PointBarID], GetProgressBarValue(Points[point][PointBarID])-10.0);
		UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		if(GetProgressBarValue(Points[point][PointBarID]) >= 10) SetTimerEx("ProgressTimer", 1000, 0, "d", point);
		new string[128];
		format(string, sizeof(string), "%s está tratando de capturar el punto, tiempo restante: %d", GetPlayerNameEx(Points[point][ClaimerId]), Points[point][TimeLeft]);
		if(Points[point][TimeLeft] == 9) Points[point][CaptureProgress] = CreateDynamic3DTextLabel(string, COLOR_RED, Points[point][Pointx], Points[point][Pointy], Points[point][Pointz]+1.0, 10.0);
				else if(Points[point][TimeLeft] < 9 && Points[point][TimeLeft] >= 0) UpdateDynamic3DTextLabelText(Points[point][CaptureProgress], COLOR_RED, string);

		if(GetProgressBarValue(Points[point][PointBarID]) == 50.0)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_YELLOW);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(GetProgressBarValue(Points[point][PointBarID]) == 20.0)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_RED);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(GetProgressBarValue(Points[point][PointBarID]) <= 0.0 && Points[point][TimeLeft] <= 0)
		{
		    CaptureTimer(point);
		    Points[point][TimeLeft] = 0;
		    DestroyProgressBar(Points[point][PointBarID]);
		    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
		}
	}
	else
	{
	    DestroyProgressBar(Points[point][PointBarID]);
	    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
	    Points[point][ClaimerId] = INVALID_PLAYER_ID;
		Points[point][TimeToClaim] = 0;
	}
	return 1;
}

function CaptureTimerEx(point)
{
	new string[128];
	new fam;
	if (Points[point][TakeOverTimerStarted])
	{
		fam = Points[point][ClaimerTeam];
		if (Points[point][TakeOverTimer] > 0)
		{
			Points[point][TakeOverTimer]--;
			format(string, sizeof(string), "%s ha intentado tomar el control de %s por %s, será de ellos en %d minutos!",
			Points[point][PlayerNameCapping], Points[point][Name], fINFO[fam][FamilyName], Points[point][TakeOverTimer]);
			Update3DTextLabelText(Points[point][CaptureProccess], COLOR_POINTGEN, string);
		}
		else
		{
			Points[point][ClaimerTeam] = INVALID_PLAYER_ID;
			Points[point][TakeOverTimer] = 0;
			Points[point][TakeOverTimerStarted] = 0;
			Points[point][Announced] = 0;
			Points[point][Vulnerable] = NEW_VULNERABLE;
			Delete3DTextLabel(Points[point][CaptureProccess]);
			Points[point][CaptureProccessEx] = 0;
			strmid(Points[point][Owner], fINFO[fam][FamilyName], 0, 32, 32);
			strmid(Points[point][CapperName], Points[point][PlayerNameCapping], 0, 32, 32);
			format(string, sizeof(string), "%s ha tomado correctamente el control de %s por %s.", Points[point][CapperName], Points[point][Name], Points[point][Owner]);
			SendClientMessageToAllEx(COLOR_POINTGEN, string);
			UpdatePoints();
			KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = -1;
  	for(new i = 0; i < sizeof(fINFO); i++)
			{
				if(strcmp(Points[point][Owner], fINFO[i][FamilyName], true) == 0)
				{
				fINFO[i][FamilyBank] += 15000;
				}
			}
		}
	}
}*/

// CHECK VIP EXPIRE
CheckVIPExpire(playerid){
   	print("DEBUG CheckVIPExpire");
   	new year, month,day;
   	getdate(year, month, day);
   	if(Info[playerid][pVIP] == 0){
	   Info[playerid][pVIPDateD] = -1;
	   Info[playerid][pVIPDateM] = -1;
	   return 1;
	}
	if(Info[playerid][pVIPDateD] >= 1 && Info[playerid][pVIPDateM] >= 1){
    	if(Info[playerid][pVIP] >= 1 && Info[playerid][pBuddyInvited] == 0){

	    	if(day >= Info[playerid][pVIPDateD] && Info[playerid][pVIPDateM] == 12 && month != 12){
	    	    //print("DEBUG: DICIEMBRE EXPLOIT [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "INFRANET-RP: {FFFFFF} {FFFFFF}Tu VIP ha expirado, puedes hacer tu orden de renovación ahora mismo.");
			}
			if(day >= Info[playerid][pVIPDateD] && month >= Info[playerid][pVIPDateM]){
                //print("DEBUG: NORMAL [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "INFRANET-RP: {FFFFFF} {FFFFFF}Tu VIP ha expirado, puedes hacer tu orden de renovación ahora mismo.");
			}
			if(Info[playerid][pVIPDateD] >= 30 && month > Info[playerid][pVIPDateM]){
			    //print("DEBUG: Si es 30 y pasó el mes [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "INFRANET-RP: {FFFFFF} {FFFFFF}Tu VIP ha expirado, puedes hacer tu orden de renovación ahora mismo.");
			}
		}
	}
	return 1;
}

stock IsWAAVehicle(veh)
{
    new model = GetVehicleModel(veh);
    switch(model)
    {
        case 558,559,560,561,562,565: return 1;
    }
    return 0;
}

function RadioBroadCast(playerid, color, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(Info[i][pRadioFreq] == Info[playerid][pRadioFreq] && Info[i][pRadio] >= 1 && gRadio[i] != 0 || See_FRC[i] == 1) // Frecuencia de todos, igual al del player, tener todos radio y tenerla todos encendida.
		{                                                                                   // Segunda opción: Tener /verwalkie activado y poder ver todos el canal.
		    if(See_FRC[playerid] == 0) // Espiar canal /wt - /wa - /pr.
		    {
				GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
				format(MiscString, sizeof(MiscString), "** Radio (%d khz) ** %s: %s", Info[playerid][pRadioFreq], GetPlayerNameEx(playerid), string);
				SendClientMessageEx(i, PUBLICRADIO_COLOR, MiscString);
				format(MiscString, sizeof(MiscString), "(radio) %s", string);
				SetPlayerChatBubble(playerid,MiscString,COLOR_WHITE,15.0,5000);
			}
			else
			{
				format(MiscString, sizeof(MiscString), "[ADM] WALKIE OOC: (( Administrador dice %s: %s))", GetPlayerNameEx(playerid), string);
				SendClientMessageEx(i, PUBLICRADIO_COLOR, MiscString);
			}
		}
	}
}

function ShowRol(playerid)
{
	if(ShowRules[playerid] == 1)
	{
	    switch(RulesTime[playerid])
	    {
	        case 1:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1; gNewbie[playerid]=1; gMusic[playerid]=1;
	        	SetPlayerVirtualWorld(playerid, playerid+1);
	        	TogglePlayerControllable(playerid, 0);
				Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
				SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
				SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
				SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Hola! Bienvenido al tutorial, esperamos que aprendas y te diviertas junto a todos.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Un administrador te envió al tutorial con el fin de ayudarte a aprender y a disfrutar el roleplay.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Pulsa la tecla ESPACIO para seguir.");

			}
	        case 2:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "DeathMatch [DM]");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es DeathMatch [DM]? Bueno esto se llama a matar o golpear a una persona sin tener una razon para hacerlo.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Un ejemplo, si vas por la calle y empiezas a pegarle o a dispararle a alguien sin tener ninún motivo");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "hasta matarlo, la persona te reportará y tu puedes ser encarcelado por 10 a 30 minutos.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Haciendo esto estarias haciendo DeathMatch y va en contra las reglas del servidor.");
	        }
	        case 3:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Metagaming [MG]");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Metagaming [MG]? Es usar información OOC dentro de IC o viceversa ¿No te quedo muy claro no?");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "bueno, como verás cada usuario tiene un nombre en su cabeza, es obvio que en la vida real no pasa lo mismo");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "para saber su nombre tienes que preguntarle; Hola ¿Cual es tu nombre? y el te responderá, desde ese momento ya");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "puedes llamarlo por su nombre. También es usar signos de caracteres en el chat IC (xD, :), xP, etc).");
	        }
	        case 4:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 13000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "In Character - Out of Character (IC - OOC)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "IC : Es la información que tu personaje obtiene en su vida (In Game), y sólo tu personaje la sabe.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "OOC: Es la información que tu sabes como persona, la que está manejando el personaje desde tu computador.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Por eso es que no puedes mezclar información IC con OOC o viceversa. Por que estarías haciendo Metagaming.");
	        }
	        case 5:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Powergaming [PG]");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Powergaming [PG]? Esto se llama a realizar actos (roles) ficticios y fuera de lo posible en la vida real.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, Usas el comando /me se tira del edificio y sige caminando. Es lógico que tu no vas a tirarte");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "de un quinto piso y salir vivo no?. También es obligar/forzar a una persona hacer un ROL.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, usando el comando /me le roba su dinero y se va corriendo. Imposible, para rolear tienes que tener criterio.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda eres un personaje REAL y tienes que portate como tal.");
	        }
	        case 6:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Revenge Kill (RK)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Revenge Kill [RK]? Cuando `mueres´ en un ROL (Asalto a un banco, guerra de pandillas, etc)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "tu no puedes regresar al mismo lugar y vengarte a por quien te mató, ya que tu exactamente no mueres, resultas herido");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "y cuando te recuperas no recuerdas nada, entonces no puedes volver al mismo lugar, ya que no recuerdas nada.");
	        }
	        case 7:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Bad Driving (BD) - Badly Parked Car (BPC)");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Bad Driving (BD) y Badly Parked Car (BPC)?");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Esto es muy sencillo y creo que su mismo nombre lo dice, se llama a manejar incorrectamente (por las veredas, atropellando gente, etc),");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "y es en contra las reglas del servidor, recuerda que estás simulando la vida real.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Badly Parked Car se define en estacionar tu vehiculo de una manera imposible, o No-RP, por ejemplo en medio del asfalto.");
	        }
	        case 8:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Car Kill - Car Jack");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Car Kill (CK) y Car Jack (CJ)?");
	        	SendClientMessageEx(playerid, COLOR_WHITE, " * Car Kill es matar a una persona atropellandolo en varias ocaciones hasta matarlo.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, " * Car Jack es sacar a una persona de su auto sin ningún rol alguno.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, " * Esos 2 Terminos son en contra del servidor y puedes ser castigado.");
	        }
	        case 9:
	        {
	            ClearChatbox(playerid);
	        	PuedeD[playerid] = 1;
	        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
	        	SendClientMessageEx(playerid, COLOR_GENERAL, "Fin - Reglas de Rol");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Bien, espero que hayas aprendido en este resumen de las reglas de nuestro servidor, puedes entrar a nuestro");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "foro (infranet.foroactivo.com) y buscar más información, ahora volverás a tu posición anterior, no perderás nada.");
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda siempre que más importante es el rol de un presonaje. Bienvenido y disfruta del servidor!");
	        }
	        case 10:
	        {
	            ClearChatbox(playerid);
	            gNewbie[playerid]=1; gMusic[playerid]=1; gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0; gRel[playerid] = 0; RulesTime[playerid] = 0; RulesTime[playerid] = 0;
				SetPlayerPos(playerid, GetPVarFloat(playerid, "rOldX"), GetPVarFloat(playerid, "rOldY"), GetPVarFloat(playerid, "rOldZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "rOldVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid, "rOldInt"));
				Info[playerid][pVW] = GetPVarInt(playerid, "rOldVW");
				Info[playerid][pInt] = GetPVarInt(playerid, "rOldInt");
				ShowRules[playerid] = 0;
		    	RulesTime[playerid] = 0;
		        TogglePlayerControllable(playerid, 1);
		        ClearAnimations(playerid);
		        SetCameraBehindPlayer(playerid);
		        SendClientMessageEx(playerid, COLOR_GENERAL, "Puedes seguir roleando, recuerda que su duda puede estar en /soporte, gracias.");
	        }
		}
	}
	return 1;
}

function TutRolTimer(playerid)
{
	PuedeD[playerid] = 0;
	GameTextForPlayer(playerid, "Pulsa ESPACIO", 2000, 3);
}

function Tutorial_Inside(i) // Tutorial optimizado
{
    new string[512];
	if(TutStep[i] == 1)
	{
 		if(TutTime[i] >= 1)
		{
			switch (TutTime[i])
			{
   				case 1:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", i);
					ClearChatbox(i);
				    TextDrawShowForPlayer(i, TextTut[i]);
					/*for(new p = 1; p < 5; p++)
					{
						TextDrawShowForPlayer(i, TutTxt[p]);
					}*/
					TextDrawShowForPlayer(i, TutTxt[1]);
					TextDrawShowForPlayer(i, TutTxt[2]);
				    gOoc[i] = 1; gNews[i] = 1; gFam[i] = 1; gRel[i] = 1; gNewbie[i]=1; gMusic[i]=1;
					SetPlayerCameraPos(i,2453.9224, -1703.2395, 47.4169);
					SetPlayerCameraLookAt(i,2518.6484, -1655.5234, 12.9922);
					SetPlayerPos(i,2484.44165, -1638.94958, 12.42368);
					SetPlayerVirtualWorld(i, 0);
				    TogglePlayerControllable(i, 0);
				    SendClientMessage(i, COLOR_GENERAL, "[INFO] Usa /saltartutorial y a continuación pulsa la tecla [Y] para comenzar a jugar.");
                    PlayAudioStreamForPlayer(i,"http://k35.offliberty.com/A0W-msv8T0g.mp3");
                    format(string, sizeof(string), 	    "~b~Te damos la bienvenida a INFRANET~n~~n~\
														 ~w~Hemos creado una ciudad lo mas rolera posible, con todo lo necesario~n~\
														 desde universidades, centros sociales, piscina municipal, estadios y etc.~n~\
													     Siempre hay algo que hacer en la ciudad, facciones nuevas~n~\
														 mas variedad de vehiculos, con sistema de garajes.");
					TextDrawSetString(TextTut[i], string);
				}
				case 2:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", i);
					SetPlayerCameraPos(i,1554.5065,-1676.1437,25.1935);
					SetPlayerCameraLookAt(i,1541.8933,-1677.3979,20.2406);
					SetPlayerPos(i,1569.7626, -1675.1803, 52.5485);
					format(string, sizeof(string), 	   "~b~Nuevas facciones y sistemas~n~~n~\
														~w~Suponemos que buscar trabajo no es un problema, hay muchas facciones~n~\
					                                    desde las legales como LSPD, FBI, SAEM, LSTV, Talleres y etc.~n~\
														Hasta por facciones ilegales ineditas en el mundo del rol como son ~n~\
														CDG, cartel del golfo y Donakov, un grupo organizado.");
					TextDrawSetString(TextTut[i], string);
				}
				case 3:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", i);
					SetPlayerCameraPos(i,-2027.69, 175.51, 34.14);
					SetPlayerCameraLookAt(i,-2027.69, 175.51, 34.14);
					SetPlayerPos(i,-2010.9825, 150.8715, 116.7466);
					format(string, sizeof(string), 	   "Es importante destacar que el rol trancurre en LS y alrededores~n~\
														pero se dispone de casas en venta en San Fierro, entre otras cosas.~n~\
														Esperamos que disfrutes de los mapeos unicos que hay, muchas novedades~n~\
														Una vez dentro te aconsejamos que uses /soporte para recibir ayuda.");
					TextDrawSetString(TextTut[i], string);
				}
				/*case 4:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
				    TogglePlayerControllable(i, 0);
					Streamer_UpdateEx(i,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(i, 1183.4659,-1354.7358,101.4414);
					SetPlayerCameraPos(i,1296.0918,-1476.3325,159.4904);
					SetPlayerCameraLookAt(i,1183.4659,-1354.7358,101.4414);
					format(string, sizeof(string), 		"~n~ Informacion~n~\
														 ~w~Este servidor es dedicado a los usuarios y todo esta hecho por y para usuarios.~n~\
														 tan solo buscamos un servidor estable y jugable para todo el mundo, sin pensar .~n~\
														 en dinero creando asi, el mejor servidor de la historia.");
					TextDrawSetString(TextTut[i], string);
				}
				case 6:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
					Streamer_UpdateEx(i,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(i, 1693.5203,-1940.2075,36.7241);
					SetPlayerCameraPos(i,1709.0471,-1983.8403,19.0468);
					SetPlayerCameraLookAt(i,1698.5833,-1926.0229,21.2785);
					format(string, sizeof(string), 		"Fin del tutorial, esperamos que tengas una idea de como funciona este servidor~n~\
														 y como puedes aprovechar al maximo la experiencia del Role Play.~n~\
														 Si tienes otra duda puedes ingresar a nuestro foro que esta abajo.~n~\
														 Si ves algun jugador sospechoso no dudes en reportarlo, usando el comando~n~\
														 ~y~/re id razon~w~.");
					TextDrawSetString(TextTut[i], string);
				}
				case 7:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
				    SetPlayerPos(i,-1717.48, 915.97, 25.96);
                    SetPlayerCameraLookAt(i,-1717.48, 915.97, 25.96);
                    SetPlayerPos(i,-1685.17, 959.51, 25.96);
					format(string, sizeof(string), 		"San Fierro, Si Necesitas Cambiarte De Ropa o Quieres Accesorios~n~\
														 Puedes Buscar Las Tiendas de Roba, Hay Muchas Tiendas de Ropa Puedes~n~\
														 Puedes Difirenciarlas Por El Icono De Un Suerter Azul De Cada Tienda.~n~~n~\
														 ~b~Comandos: ~w~/cropa y /ctoys.");
					TextDrawSetString(TextTut[i], string);
				}
				case 8:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", i);
					Streamer_UpdateEx(i, 1554.3381,-1675.5692,16.1953);
					SetPlayerPos(i, 1554.3381,-1675.5692,-10.0);
					SetPlayerCameraPos(i, 1514.7783,-1700.2913,36.7506);
					SetPlayerCameraLookAt(i, 1554.3381,-1675.5692,16.1953);
					format(string, sizeof(string), 		"Los Santos, La Policia Son Encargados de La Seguridad De La Ciudad~n~\
														 Si Cometes Un Crimen Puedes Quedar Como Buscado En El Sistema Del LSPD~n~\
														 Y Ser Arrestado, Puedes Contactar ~b~(Nick Azul) ~w~Con Ellos En El Servidor.~n~~n~\
														 Tambien puedes Aplicar En El Foro Para Ser Parte De Ellos.");
					TextDrawSetString(TextTut[i], string);
				}
				case 9:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 9000, 0, "d", i);
		         	SetPlayerPos(i,-1550.21, 741.49, 19.49);
                    SetPlayerCameraPos(i,-1550.21, 741.49, 19.49);
                    SetPlayerPos(i,-1588.62, 707.23, 19.49);
					format(string, sizeof(string), 		"San Fierro, La Policia Son Encargados de La Seguridad De La Ciudad~n~\
														 Si Cometes Un Crimen Puedes Quedar Como Buscado En El Sistema Del SFPD~n~\
														 Y Ser Arrestado, Puedes Contactar ~b~(Nick Azul) ~w~Con Ellos En El Servidor.~n~~n~\
														 Tambien puedes Aplicar En El Foro Para Ser Parte De Ellos.");
					TextDrawSetString(TextTut[i], string);
				}
				case 10:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
				    TogglePlayerControllable(i, 0);
					Streamer_UpdateEx(i,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(i, -2679.5342,1639.0643,-10.0);
					SetPlayerCameraPos(i,-2734.3477,1520.4971,87.1810);
					SetPlayerCameraLookAt(i,-2679.5342,1639.0643,65.8865);
					format(string, sizeof(string), 		"~r~Reglas - Resumen~n~\
														  * DeathMatch No matar personas sin razon alguna~n~\
														  * Metagaming Confundir canales IC con OOC~n~\
														  * PowerGaming No hacer cosas imposibles en el juego~n~\
													      * No Desconectarse En Una Situacion De Rol~n~\
														  * No Insultar A las Personas e Usuarios~n~\
														  * No Abusar De Algun Bug o Seras Baneado");
					TextDrawSetString(TextTut[i], string);
				}
				case 11:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
				    TogglePlayerControllable(i, 0);
					Streamer_UpdateEx(i,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(i, -2679.5342,1639.0643,-10.0);
					SetPlayerCameraPos(i,-2734.3477,1520.4971,87.1810);
					SetPlayerCameraLookAt(i,-2679.5342,1639.0643,65.8865);
					format(string, sizeof(string), 		"~r~Vip Store - Informacion~n~\
														 ~w~Contamos Con Una Tienda Online Donde Podras Comprar.~n~\
														 Casas, Autos, Dinero, Y Acceso A Salas Unicas Para Users Premium~n~\
														 Recuerda Que Puedes Pagar Por PayPal, Sms, Web Union y Otros Metodos~n~\
														 Recuerda Que Cada Compra Que Haces Ayudas Con Los Gastos Del Servidor.");
					TextDrawSetString(TextTut[i], string);
				}*/
				case 12:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
					Streamer_UpdateEx(i,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(i, -2679.5342,1639.0643,-10.0);
					SetPlayerCameraPos(i,-2734.3477,1520.4971,87.1810);
					SetPlayerCameraLookAt(i,-2679.5342,1639.0643,65.8865);
					format(string, sizeof(string), 		"~b~Damos gracias a los que crearon esta comunidad y apoyaron el proyecto~n~~n~\
														 ~y~| Scripter Lider: ~w~Alexey Kozlov.~n~\
														 ~y~| Web Master: ~w~Harold_Hitchman~n~\
														 ~y~| Enc.Servidor: ~w~Infranet STAFF~n~\
														 ~y~| Publicista: ~w~Puesto Vacio");
				 TextDrawSetString(TextTut[i], string);
				}
				case 13:
				{
				    PuedeP[i] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", i);
					Streamer_UpdateEx(i,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(i, -2679.5342,1639.0643,-10.0);
					SetPlayerCameraPos(i,-2734.3477,1520.4971,87.1810);
					SetPlayerCameraLookAt(i,-2679.5342,1639.0643,65.8865);
					format(string, sizeof(string), 		"~b~Fin del tutorial, esperamos que todas vuestras dudas hayan quedado resueltas~n~~n~\
														 ~w~Toda sugerencia y duda pueden enviarla en el foro, infranet.foroactivo.com.~n~\
														 Gracias por elegirnos, si tiene un problema o ve algo raro, use el CMD:~n~\
											 			 ~y~/re [ID] [RAZON]~n~");
					TextDrawSetString(TextTut[i], string);
				}
				case 14:
				{
				    PuedeP[i] = 0;
				    TextDrawHideForPlayer(i, TextTut[i]);
					for(new p = 1; p < 5; p++)
					{
						TextDrawHideForPlayer(i, TutTxt[p]);
					}
              		gOoc[i] = 0; 		gNews[i] = 0;
              		gMusic[i] = 0;      gRel[i] = 0;
					gFam[i] = 0; 		TutStep[i] = 0;
					gNewbie[i]=0;		Muted[i] = 0;
					TutTime[i] = 0;     TutError[i] = 0;
					if(Info[i][pOrigin] == 1){
		           	SetPosEx(i, 1743.0253, -1861.7754, 13.2,0,0,0); //1242.5444,-1691.9274,16.1958 - AVIÓN.
		           	}
		           	else
		           	{
		           	SetPosEx(i, 1715.0370, -1928.3345, 13.55,0,0,0); //-2050.3315,462.0283,35.171 - TREN.
		            }
		            for(new loop=0; loop<20; loop++)  SendClientMessageEx(i, COLOR_WHITE,"");
					new inicio[160];
            		format(inicio, sizeof(inicio), "[INFRANET V 1.0] Bienvenido a Los Santos %s, en caso de que necesites un poco de ayuda, sige estos consejos.", GetPlayerNameEx(i));
		           	SendClientMessageEx(i, COLOR_GREY, inicio);
		           	SendClientMessageEx(i, COLOR_GREY, "{F7D358} Si tienes dudas usa /duda o /soporte. Para la búsqueda de empleo, /buscartrabajo.");
		           	SendClientMessageEx(i, COLOR_GREY, "{F7D358} La administración está a su disposición para ayudarle en lo que precise, gracias por elegirnos.");
		           	StopAudioStreamForPlayer(i);
		           	Info[i][pPuntosRol] = 2;
              		Info[i][pWRestricted] = 2;
                    Info[i][pTut] = 1;
	    		    Info[i][pLevel] = 2;
	    		    Info[i][pNMute] = 1;
	    		    Info[i][pPTR] += 10;
		           	TogglePlayerControllable(i, 1);
		           	SetPlayerVirtualWorld(i, 1);
		           	ClearAnimations(i);
		            GivePlayerCash(i, 50000); // Stats de Inicio.
		            SetCameraBehindPlayer(i);
		            format(string, sizeof(string), "~b~Bienvenido~n~%s", GetPlayerNameEx(i));
		            GameTextForPlayer(i, string, 4000, 1);
		            OnPlayerSavedStats(i);
		            TextDrawShowForPlayer(i, NewStaterp);
				}
			}
		}
	}
	return 1;
}

public OnPlayerInteriorChange(playerid,newinteriorid,oldinteriorid){
	if(gPlayerLogged{playerid} && gPlayerSpawned[playerid] && GetPVarInt(playerid, "EventToken") == 0){
		Info[playerid][pInt] = newinteriorid;
	}
	Streamer_Update(playerid);
}

hackerTrigger(playerid,newweapon){
	if(!gPlayerLogged{playerid}) { return 1; }
	if(Info[playerid][pTut] == 0) { return 1; }
	if(GetPVarInt(playerid, "IsInArena") == 1) { return 1; }

	new	reason[94],string[94];
	format(string, sizeof(string), "AdmWarning: {FFFFFF}%s -  Weapon Hacking (%s).", GetPlayerNameEx(playerid), WeaponNames[newweapon]);
	ABroadCast(COLOR_ORANGE,string, 2);
	format(string, sizeof(string), "AdmCmd: %s fue expulsado por el servidor, razón: weapon hack", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
 		SafeDialogEx(playerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Haz sido expulsado del servidor","El Servidor\nte ha expulsado\nRazon: Weapon Hack","Salir","");
		SetTimerEx("KickxD",500,0,"d",playerid);

 	format(reason, sizeof(reason), "Weapon Hacking (%s).", WeaponNames[newweapon]);
	return 1;
}

stock scriptBan(playerid, reason[]){
	new ip[32], aString[128];
	Info[playerid][pBannedZC] = 2;
   	format(aString, sizeof(aString), "INFRANET-RP: {FFFFFF} %s fue baneado, razón: %s", GetPlayerNameEx(playerid), reason);
   	SendClientMessageToAllEx(COLOR_LIGHTRED, aString);
   	GetPlayerIp(playerid,ip,sizeof(ip));
   	format(aString, sizeof(aString),"INFRANET-RP: {FFFFFF} %s fue baneado, razón: %s (IP: %d)", GetPlayerNameEx(playerid), reason, ip);
   	Log("LOGS/ban.log", aString);
   	++TotalAutoBan;
	AddBan(ip);
	Kick(playerid);
	return 1;
}

OnPlayerChangeWeapon(playerid, newweapon)
{
	if(InsideMainMenu[playerid] == 1) { Kick(playerid); }
	if(gPlayerLogged{playerid}){
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
			if(GetPlayerWeapon(playerid) >= 1 && GetPlayerState(playerid) == 1){
			//if(Info[playerid][pWeapons][0] != 1 && GetPlayerWeapon(playerid) == 1) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 2 && GetPlayerWeapon(playerid) == 2) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 3 && GetPlayerWeapon(playerid) == 3) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 4 && GetPlayerWeapon(playerid) == 4) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 5 && GetPlayerWeapon(playerid) == 5) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 6 && GetPlayerWeapon(playerid) == 6) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 7 && GetPlayerWeapon(playerid) == 7) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 8 && GetPlayerWeapon(playerid) == 8) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][1] != 9 && GetPlayerWeapon(playerid) == 9) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][2] != 22 && GetPlayerWeapon(playerid) == 22) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][2] != 23 && GetPlayerWeapon(playerid) == 23) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][2] != 24 && GetPlayerWeapon(playerid) == 24) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][3] != 25 && GetPlayerWeapon(playerid) == 25) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][3] != 26 && GetPlayerWeapon(playerid) == 26) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][3] != 27 && GetPlayerWeapon(playerid) == 27) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][4] != 28 && GetPlayerWeapon(playerid) == 28) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][4] != 29 && GetPlayerWeapon(playerid) == 29) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][4] != 32 && GetPlayerWeapon(playerid) == 32) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][5] != 30 && GetPlayerWeapon(playerid) == 30) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][5] != 31 && GetPlayerWeapon(playerid) == 31) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][6] != 33 && GetPlayerWeapon(playerid) == 33) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][6] != 34 && GetPlayerWeapon(playerid) == 34) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 35 && GetPlayerWeapon(playerid) == 35) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 36 && GetPlayerWeapon(playerid) == 36) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 37 && GetPlayerWeapon(playerid) == 37) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][7] != 38 && GetPlayerWeapon(playerid) == 38) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 16 && GetPlayerWeapon(playerid) == 16) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 17 && GetPlayerWeapon(playerid) == 17) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 18 && GetPlayerWeapon(playerid) == 18) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][8] != 39 && GetPlayerWeapon(playerid) == 39) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][9] != 41 && GetPlayerWeapon(playerid) == 41) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][9] != 42 && GetPlayerWeapon(playerid) == 42) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][9] != 43 && GetPlayerWeapon(playerid) == 43) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 10 && GetPlayerWeapon(playerid) == 10) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 11 && GetPlayerWeapon(playerid) == 11) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 12 && GetPlayerWeapon(playerid) == 12) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 13 && GetPlayerWeapon(playerid) == 13) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 14 && GetPlayerWeapon(playerid) == 14) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][10] != 15 && GetPlayerWeapon(playerid) == 15) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][11] != 44 && GetPlayerWeapon(playerid) == 44) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][11] != 45 && GetPlayerWeapon(playerid) == 45) hackerTrigger(playerid,newweapon);
			//if(Info[playerid][pWeapons][11] != 46 && GetPlayerWeapon(playerid) == 46) hackerTrigger(playerid,newweapon);
			if(Info[playerid][pWeapons][12] != 40 && GetPlayerWeapon(playerid) == 40) hackerTrigger(playerid,newweapon);
			}
		}
	}
}

stock fcreate(filename[]){
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

function splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

function DrinkCooldown(playerid)
{
    SetPVarInt(playerid, "DrinkCooledDown", 1);
    return 1;
}

function ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "");
		strmid(Info[playerid][pMarriedTo], string, 0, strlen(string), 255);
		Info[playerid][pMarried] = 0;
	}
	return 1;
}
function ClearRopero(houseid) // Limpieza general del armario. (10 Slots)
{
	ProInfo[houseid][hSlotRopero1] = 0;
	ProInfo[houseid][hSlotRopero2] = 0;
	ProInfo[houseid][hSlotRopero3] = 0;
	ProInfo[houseid][hSlotRopero4] = 0;
	ProInfo[houseid][hSlotRopero5] = 0;
	ProInfo[houseid][hSlotRopero6] = 0;
	ProInfo[houseid][hSlotRopero7] = 0;
	ProInfo[houseid][hSlotRopero8] = 0;
	ProInfo[houseid][hSlotRopero9] = 0;
	ProInfo[houseid][hSlotRopero10] = 0;
}
function ClearPropiedad(houseid) // Limpieza general de armas, drogas, materiales y dinero.
{
	ProInfo[houseid][hOwned] = 0; // Casa en venta.
	ProInfo[houseid][hSafeMoney] = 0;
	ProInfo[houseid][hPot] = 0;
	ProInfo[houseid][hCrack] = 0;
	ProInfo[houseid][hMaterials] = 0;
	ProInfo[houseid][hW][0] = 0;
	ProInfo[houseid][hW][1] = 0;
	ProInfo[houseid][hW][2] = 0;
	ProInfo[houseid][hW][3] = 0;
	ProInfo[houseid][hW][4] = 0;
	ProInfo[houseid][hM][0] = 0;
	ProInfo[houseid][hM][1] = 0;
	ProInfo[houseid][hM][2] = 0;
	ProInfo[houseid][hM][3] = 0;
	ProInfo[houseid][hM][4] = 0;
}
function ClearHouse(houseid)
{
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hTiempo] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 1;
	//*  Muebles a la puta calle	*/
	/*if(HouseInfo[houseid][hMuebleId][0] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][0]);
	}
	if(HouseInfo[houseid][hMuebleId][1] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][1]);
	}
	if(HouseInfo[houseid][hMuebleId][2] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][2]);
	}
	if(HouseInfo[houseid][hMuebleId][3] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][3]);
	}
	if(HouseInfo[houseid][hMuebleId][4] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][4]);
	}
	if(HouseInfo[houseid][hMuebleId][5] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][5]);
	}
	if(HouseInfo[houseid][hMuebleId][6] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][6]);
	}
	if(HouseInfo[houseid][hMuebleId][7] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][7]);
	}
	if(HouseInfo[houseid][hMuebleId][8] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][8]);
	}
	if(HouseInfo[houseid][hMuebleId][9] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][9]);
	}
	if(HouseInfo[houseid][hMuebleId][10] > 0){
 		DestroyDynamicObject(HouseInfo[houseid][hMuebleId][10]);
	}
         	HouseInfo[houseid][hMuebles][0] = 0;
			HouseInfo[houseid][hMueblesPOSX][0] = 0;
			HouseInfo[houseid][hMueblesPOSY][0] = 0;
			HouseInfo[houseid][hMueblesPOSZ][0] = 0;
			HouseInfo[houseid][hMueblesPOSRy][0] = 0;
            HouseInfo[houseid][hMueblesPOSRx][0] = 0;
            HouseInfo[houseid][hMueblesPOSRz][0] = 0;
            HouseInfo[houseid][hMuebles][1] = 0;
           	HouseInfo[houseid][hMueblesPOSX][1] = 0;
			HouseInfo[houseid][hMueblesPOSY][1] = 0;
			HouseInfo[houseid][hMueblesPOSZ][1] = 0;
            HouseInfo[houseid][hMueblesPOSRx][1] = 0;
            HouseInfo[houseid][hMueblesPOSRy][1] = 0;
            HouseInfo[houseid][hMueblesPOSRz][1] = 0;

			HouseInfo[houseid][hMuebles][2] = 0;
			HouseInfo[houseid][hMueblesPOSX][2] = 0;
			HouseInfo[houseid][hMueblesPOSY][2] = 0;
			HouseInfo[houseid][hMueblesPOSZ][2] = 0;
			HouseInfo[houseid][hMueblesPOSRx][2] = 0;
			HouseInfo[houseid][hMueblesPOSRy][2] = 0;
			HouseInfo[houseid][hMueblesPOSRz][2] = 0;

			HouseInfo[houseid][hMuebles][3] = 0;
			HouseInfo[houseid][hMueblesPOSX][3] = 0;
			HouseInfo[houseid][hMueblesPOSY][3] = 0;
			HouseInfo[houseid][hMueblesPOSZ][3] = 0;
			HouseInfo[houseid][hMueblesPOSRz][3] = 0;
			HouseInfo[houseid][hMueblesPOSRy][3] = 0;
			HouseInfo[houseid][hMueblesPOSRx][3] = 0;

			HouseInfo[houseid][hMuebles][4] = 0;
			HouseInfo[houseid][hMueblesPOSX][4] = 0;
			HouseInfo[houseid][hMueblesPOSY][4] = 0;
			HouseInfo[houseid][hMueblesPOSZ][4] = 0;
			HouseInfo[houseid][hMueblesPOSRz][4] = 0;
			HouseInfo[houseid][hMueblesPOSRy][4] = 0;
			HouseInfo[houseid][hMueblesPOSRx][4] = 0;

			HouseInfo[houseid][hMuebles][5] = 0;
			HouseInfo[houseid][hMueblesPOSX][5] = 0;
			HouseInfo[houseid][hMueblesPOSY][5] = 0;
			HouseInfo[houseid][hMueblesPOSZ][5] = 0;
			HouseInfo[houseid][hMueblesPOSRx][5] = 0;
			HouseInfo[houseid][hMueblesPOSRy][5] = 0;
			HouseInfo[houseid][hMueblesPOSRz][5] = 0;

			HouseInfo[houseid][hMuebles][6] = 0;
			HouseInfo[houseid][hMueblesPOSX][6] = 0;
			HouseInfo[houseid][hMueblesPOSY][6] = 0;
			HouseInfo[houseid][hMueblesPOSZ][6] = 0;
			HouseInfo[houseid][hMueblesPOSRx][6] = 0;
			HouseInfo[houseid][hMueblesPOSRy][6] = 0;
			HouseInfo[houseid][hMueblesPOSRz][6] = 0;

			HouseInfo[houseid][hMuebles][7] = 0;
			HouseInfo[houseid][hMueblesPOSX][7] = 0;
			HouseInfo[houseid][hMueblesPOSY][7] = 0;
			HouseInfo[houseid][hMueblesPOSZ][7] = 0;
			HouseInfo[houseid][hMueblesPOSRx][7] = 0;
			HouseInfo[houseid][hMueblesPOSRy][7] = 0;
			HouseInfo[houseid][hMueblesPOSRz][7] = 0;

			HouseInfo[houseid][hMuebles][8] = 0;
			HouseInfo[houseid][hMueblesPOSX][8] = 0;
			HouseInfo[houseid][hMueblesPOSY][8] = 0;
			HouseInfo[houseid][hMueblesPOSZ][8] = 0;
			HouseInfo[houseid][hMueblesPOSRx][8] = 0;
			HouseInfo[houseid][hMueblesPOSRy][8] = 0;
			HouseInfo[houseid][hMueblesPOSRz][8] = 0;

            HouseInfo[houseid][hMuebles][1] = 0;
           	HouseInfo[houseid][hMueblesPOSX][1] = 0;
			HouseInfo[houseid][hMueblesPOSY][1] = 0;
			HouseInfo[houseid][hMueblesPOSZ][1] = 0;
            HouseInfo[houseid][hMueblesPOSRx][1] = 0;
            HouseInfo[houseid][hMueblesPOSRy][1] = 0;
            HouseInfo[houseid][hMueblesPOSRz][1] = 0;

			HouseInfo[houseid][hMuebles][2] = 0;
			HouseInfo[houseid][hMueblesPOSX][2] = 0;
			HouseInfo[houseid][hMueblesPOSY][2] = 0;
			HouseInfo[houseid][hMueblesPOSZ][2] = 0;
			HouseInfo[houseid][hMueblesPOSRx][2] = 0;
			HouseInfo[houseid][hMueblesPOSRy][2] = 0;
			HouseInfo[houseid][hMueblesPOSRz][2] = 0;

			HouseInfo[houseid][hMuebles][3] = 0;
			HouseInfo[houseid][hMueblesPOSX][3] = 0;
			HouseInfo[houseid][hMueblesPOSY][3] = 0;
			HouseInfo[houseid][hMueblesPOSZ][3] = 0;
			HouseInfo[houseid][hMueblesPOSRz][3] = 0;
			HouseInfo[houseid][hMueblesPOSRy][3] = 0;
			HouseInfo[houseid][hMueblesPOSRx][3] = 0;

			HouseInfo[houseid][hMuebles][4] = 0;
			HouseInfo[houseid][hMueblesPOSX][4] = 0;
			HouseInfo[houseid][hMueblesPOSY][4] = 0;
			HouseInfo[houseid][hMueblesPOSZ][4] = 0;
			HouseInfo[houseid][hMueblesPOSRz][4] = 0;
			HouseInfo[houseid][hMueblesPOSRy][4] = 0;
			HouseInfo[houseid][hMueblesPOSRx][4] = 0;

			HouseInfo[houseid][hMuebles][5] = 0;
			HouseInfo[houseid][hMueblesPOSX][5] = 0;
			HouseInfo[houseid][hMueblesPOSY][5] = 0;
			HouseInfo[houseid][hMueblesPOSZ][5] = 0;
			HouseInfo[houseid][hMueblesPOSRx][5] = 0;
			HouseInfo[houseid][hMueblesPOSRy][5] = 0;
			HouseInfo[houseid][hMueblesPOSRz][5] = 0;

			HouseInfo[houseid][hMuebles][6] = 0;
			HouseInfo[houseid][hMueblesPOSX][6] = 0;
			HouseInfo[houseid][hMueblesPOSY][6] = 0;
			HouseInfo[houseid][hMueblesPOSZ][6] = 0;
			HouseInfo[houseid][hMueblesPOSRx][6] = 0;
			HouseInfo[houseid][hMueblesPOSRy][6] = 0;
			HouseInfo[houseid][hMueblesPOSRz][6] = 0;

			HouseInfo[houseid][hMuebles][7] = 0;
			HouseInfo[houseid][hMueblesPOSX][7] = 0;
			HouseInfo[houseid][hMueblesPOSY][7] = 0;
			HouseInfo[houseid][hMueblesPOSZ][7] = 0;
			HouseInfo[houseid][hMueblesPOSRx][7] = 0;
			HouseInfo[houseid][hMueblesPOSRy][7] = 0;
			HouseInfo[houseid][hMueblesPOSRz][7] = 0;

			HouseInfo[houseid][hMuebles][8] = 0;
			HouseInfo[houseid][hMueblesPOSX][8] = 0;
			HouseInfo[houseid][hMueblesPOSY][8] = 0;
			HouseInfo[houseid][hMueblesPOSZ][8] = 0;
			HouseInfo[houseid][hMueblesPOSRx][8] = 0;
			HouseInfo[houseid][hMueblesPOSRy][8] = 0;
			HouseInfo[houseid][hMueblesPOSRz][8] = 0;

			HouseInfo[houseid][hMuebles][9] = 0;
			HouseInfo[houseid][hMueblesPOSX][9] = 0;
			HouseInfo[houseid][hMueblesPOSY][9] = 0;
			HouseInfo[houseid][hMueblesPOSZ][9] = 0;
			HouseInfo[houseid][hMueblesPOSRx][9] = 0;
			HouseInfo[houseid][hMueblesPOSRy][9] = 0;
			HouseInfo[houseid][hMueblesPOSRz][9] = 0;

			HouseInfo[houseid][hMuebles][10] = 0;
			HouseInfo[houseid][hMueblesPOSX][10] = 0;
			HouseInfo[houseid][hMueblesPOSY][10] = 0;
			HouseInfo[houseid][hMueblesPOSZ][10] = 0;
			HouseInfo[houseid][hMueblesPOSRx][10] = 0;
			HouseInfo[houseid][hMueblesPOSRy][10] = 0;
			HouseInfo[houseid][hMueblesPOSRz][10] = 0;
			*/
}

function ClearFamily(family)
{
	foreach(Player, i)
	{
		if(Info[i][pFMember] == family)
		{
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "* La Banda/Familia en la que tu estás fue eliminada por un administrador, fuiste expulsado automáticamente.");
			Info[i][pFMember] = 255;
		}
	}
	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Ninguna");
	fINFO[family][FamilyTaken] = 0;
	strmid(fINFO[family][FamilyName], string, 0, strlen(string), 255);
	strmid(fINFO[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(fINFO[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Novato");
	strmid(fINFO[family][FamilyRank1], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Asociado");
	strmid(fINFO[family][FamilyRank2], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Soldado");
	strmid(fINFO[family][FamilyRank3], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Capo");
	strmid(fINFO[family][FamilyRank4], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Mano Derecha");
	strmid(fINFO[family][FamilyRank5], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Padrino");
	strmid(fINFO[family][FamilyRank6], string, 0, strlen(string), 255);
	fINFO[family][FamilyColor] = 0;
	fINFO[family][FamilyTurfTokens] = 24;
	fINFO[family][FamilyMembers] = 0;
	fINFO[family][FamilySpawn][0] = 0.0;
	fINFO[family][FamilySpawn][1] = 0.0;
	fINFO[family][FamilySpawn][2] = 0.0;
	fINFO[family][FamilySpawn][3] = 0.0;
    fINFO[family][FamilyGuns][0] = 0;
    fINFO[family][FamilyGuns][2] = 0;
    fINFO[family][FamilyGuns][3] = 0;
    fINFO[family][FamilyGuns][4] = 0;
    fINFO[family][FamilyGuns][5] = 0;
    fINFO[family][FamilyGuns][6] = 0;
    fINFO[family][FamilyGuns][7] = 0;
	fINFO[family][FamilyGuns][8] = 0;
	fINFO[family][FamilyGuns][9] = 0;
	fINFO[family][FamilyCash] = 0;
	fINFO[family][FamilyMats] = 0;
	fINFO[family][FamilyPot] = 0;
	fINFO[family][FamilyCrack] = 0;
	fINFO[family][FamilySafe][0] = 0.0;
	fINFO[family][FamilySafe][1] = 0.0;
	fINFO[family][FamilySafe][2] = 0.0;
	fINFO[family][FamilyUSafe] = 0;
	if(IsValidDynamicPickup(fINFO[family][FamilyEntrancePickup])) DestroyDynamicPickup( fINFO[family][FamilyEntrancePickup] );
	if(IsValidDynamicPickup(fINFO[family][FamilyExitPickup])) DestroyDynamicPickup( fINFO[family][FamilyExitPickup] );
	DestroyDynamic3DTextLabel( Text3D:fINFO[family][FamilyEntranceText] );
	DestroyDynamic3DTextLabel( Text3D:fINFO[family][FamilyExitText] );
	DestroyDynamicPickup( fINFO[family][FamilyPickup] );
	saveFamilies();
	return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else GetPlayerVelocity(playerid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}


IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("Archivos_CFG/ban.cfg", io_read);
	while(fread(file, string))
	{
	    if (strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}

AddBan(ip[])
{
	if (CheckBan(ip) == 0)
	{
		new File: file = fopen("Archivos_CFG/ban.cfg", io_append);
		new string[20];
		format(string, sizeof(string), "\n%s", ip);
	 	fwrite(file, string);
	 	fclose(file);
	 	foreach(Player, playerid)
		{
		    new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if (strcmp(playerIP, ip) == 0)
			{
	            SendClientMessage(playerid, COLOR_GENERAL, "INFRANET-RP: {FFFFFF} Fuiste baneado del servidor.");
				Kick(playerid);
			}
		}
		return 1;
	}
	return 0;
}

RemoveBan(ip[])
{
    if (CheckBan(ip) == 1)
	{
	    new string[20];
		new File: file = fopen("Archivos_CFG/ban.cfg", io_read);
		fcreate("Archivos_CFG/tempBan.cfg");
		new File: file2 = fopen("Archivos_CFG/tempBan.cfg", io_append);
		while(fread(file, string))
		{
			if (strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
		    {
				fwrite(file2, string);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("Archivos_CFG/ban.cfg", io_write);
		file2 = fopen("Archivos_CFG/tempBan.cfg", io_read);
		while(fread(file2, string))
		{
			fwrite(file, string);
		}
		fclose(file);
		fclose(file2);
		fremove("Archivos_CFG/tempBan.cfg");
		return 1;
    }
	return 0;
}
public OnPlayerUpdate(playerid)
{
    new pCurWeap = GetPlayerWeapon(playerid);
    if(InsideMainMenu[playerid] == 1) SetPlayerArmedWeapon(playerid, 0);
    if(TutStep[playerid] > 0) SetPlayerArmedWeapon(playerid, 0);
    if(GetPVarInt(playerid, "Injured") == 1) SetPlayerArmedWeapon(playerid, 0);
	if(GetPVarInt(playerid, "IsFrozen") == 1) TogglePlayerControllable(playerid, 0);
    if(pCurWeap != pCurrentWeapon[playerid])
    {
        OnPlayerChangeWeapon(playerid, pCurWeap);
        pCurrentWeapon[playerid] = pCurWeap;
	}
	if(papilla[playerid] == 1)
	{
	SetPlayerColor(playerid,0x808080FF);
	}
	if(refuer[playerid] == 1)
	{
		new Float:px,Float:py,Float:pz; GetPlayerPos(playerid, px, py, pz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(Team_LSPD(i) && OnDuty[i] == 1)
			{
			SetPlayerMarkerForPlayer(i, playerid, 0xAA3333AA);
			if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
			}
		}
	}
	//**Armas en la espalda**
    if(GetPlayerState(playerid)==PLAYER_STATE_ONFOOT)
	{
		new weaponid=GetPlayerWeapon(playerid),oldweapontype=GetWeaponType(OldWeapon[playerid]);
		new weapontype=GetWeaponType(weaponid);
		if(HoldingWeapon[playerid]==weaponid)
		    StopPlayerHoldingObject(playerid);

		if(OldWeapon[playerid]!=weaponid)
		{
		    new modelid=GetWeaponModel(OldWeapon[playerid]);
		    if(modelid!=0 && oldweapontype!=WEAPON_TYPE_NONE && oldweapontype!=weapontype)
		    {
		        HoldingWeapon[playerid]=OldWeapon[playerid];
		        switch(oldweapontype)
		        {
		            case WEAPON_TYPE_LIGHT:
						SetPlayerHoldingObject(playerid, modelid, 8,0.0,-0.1,0.15, -100.0, 0.0, 0.0);

					case WEAPON_TYPE_MELEE:
					    SetPlayerHoldingObject(playerid, modelid, 7,0.0,0.0,-0.18, 100.0, 45.0, 0.0);

					case WEAPON_TYPE_HEAVY:
					    SetPlayerHoldingObject(playerid, modelid, 1, 0.2,-0.125,-0.1,0.0,25.0,180.0);
		        }
		    }
		}

		if(oldweapontype!=weapontype)
			OldWeapon[playerid]=weaponid;
	}
    //***********************
	return 1;
}

function RestartTimer() {
	iGMXTick--;
	switch(iGMXTick)
	{
	    case 0:{
		    GameTextForAll("~w~Es servidor va ser reiniciado ahora...", 9000, 5);
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "AdmCmd:{FFFFFF} Es servidor ha sido reiniciado, porfavor vuelve a re-conectarte.");
			KillTimer(iGMXTimer);
			SendRconCommand("exit");
	    }
	    case 1: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~1~w~ segundo.", 1110, 5);
	    case 2: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~2~w~ segundos.", 1110, 5);
	    case 3: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~3~w~ segundos.", 1110, 5);
	    case 4: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~4~w~ segundos.", 1110, 5);
	    case 5: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~5~w~ segundos.", 1110, 5);
	}
	return 1;
}

function SyncPlayerTime(playerid)
{
	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	return 1;
}

Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

LoadObjects(playerid)
{
	TogglePlayerControllable(playerid, 0);
	TextDrawShowForPlayer(playerid, box);
	TextDrawShowForPlayer(playerid, streamer);
	SetPVarInt(playerid, "LoadingObjects", 1);
	return SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
}

function MessageTaxiDriver(job, color, string[])
{
	foreach(Player, i)
	{
		if(job == 9 && TransportDuty[i] > 0 && (Info[i][pJob] == 8 || Info[i][pJob2] == 8 || Info[i][pTaxiLicense] == 1 ))
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

FMemberCounter() {

	new
		arrCounts[sizeof(fINFO)],
		szFileStr[128],
		arrTimeStamp[2][3],
		File: iFileHandle = fopen("LOGS/countfam.log", io_append);

	gettime(arrTimeStamp[0][0], arrTimeStamp[0][1], arrTimeStamp[0][2]);
	getdate(arrTimeStamp[1][0], arrTimeStamp[1][1], arrTimeStamp[1][2]);
	foreach(Player, i) if(Info[i][pAdminZC] < 2 && Info[i][pFMember] != 255) ++arrCounts[Info[i][pFMember]];

	format(szFileStr, sizeof(szFileStr), "----------------------------------------\r\nFecha: %d/%d/%d - Hora: %d:%d\r\n", arrTimeStamp[1][1], arrTimeStamp[1][2], arrTimeStamp[1][0], arrTimeStamp[0][0], arrTimeStamp[0][1]);
	fwrite(iFileHandle, szFileStr);

	for(new iFam; iFam < sizeof(fINFO); ++iFam) format(szFileStr, sizeof(szFileStr), "(%i) %s: %i\r\n", iFam+1, fINFO[iFam][FamilyName], arrCounts[iFam]), fwrite(iFileHandle, szFileStr);
	return fclose(iFileHandle);
}

stock SendJobMessage(job, color, string[])
{
	foreach(Player, i)
	{
		if(Info[i][pJob] == job || Info[i][pJob2] == job)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

IsPlayerInInvalidNosVehicle( playerid )
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

//------------------------------------------------------------------------------
//----------------------DYNAMIC GANG VEHICLE SYSTEM-----------------------------
//------------------------------------------------------------------------------
stock CreateGangVehicle(f, fv, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(FVINFO[f][fv][fvId] == INVALID_VEHICLE_ID)
	{
		FVINFO[f][fv][fvModelId] = modelid;
		FVINFO[f][fv][fvSpawnx] = x;
		FVINFO[f][fv][fvSpawny] = y;
		FVINFO[f][fv][fvSpawnz] = z;
		FVINFO[f][fv][fvSpawna] = angle;
		FVINFO[f][fv][fvColor1] = color1;
		FVINFO[f][fv][fvColor2] = color2;
		FVINFO[f][fv][fvPrice] = price;
		FVINFO[f][fv][fvFuel] = 200;
		FVINFO[f][fv][fvLock] = 1;
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		FVINFO[f][fv][fvId] = carcreated;
		//printf("Created the gang vehicle for family %d | vehicleid #%d | familyvehicleslot #%d.", f, FVINFO[f][fv][fvId], fv);
		return carcreated;
	}
	return INVALID_VEHICLE_ID;
}

stock DestroyGangVehicle(f, fv)
{
	if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(FVINFO[f][fv][fvId]);
		FVINFO[f][fv][fvModelId] = 0;
		FVINFO[f][fv][fvSpawnx] = 0.0;
		FVINFO[f][fv][fvSpawny] = 0.0;
		FVINFO[f][fv][fvSpawnz] = 0.0;
		FVINFO[f][fv][fvSpawna] = 0.0;
		FVINFO[f][fv][fvPaintJob] = -1;
		FVINFO[f][fv][fvColor1] = 126;
		FVINFO[f][fv][fvColor2] = 126;
		FVINFO[f][fv][fvPrice] = 0;
		FVINFO[f][fv][fvImpounded] = 0;
		FVINFO[f][fv][fvFuel] = 200;
		FVINFO[f][fv][fvLock] = 0;
		VehicleFuel[FVINFO[f][fv][fvId]] = 200;
	    //printf("Family %d vehicle %d(vehicleid %d) has been destroyed.", f,fv,FVINFO[f][fv][fvId]);
	    FVINFO[f][fv][fvId] = INVALID_VEHICLE_ID;
	}
}

stock LoadGangVehicles(f)
{
	//printf(" Loading family %d's vehicles.", f);
	for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    {
        if(FVINFO[f][fv][fvModelId] != 0)
        {
			new carcreated = CreateVehicle(FVINFO[f][fv][fvModelId], FVINFO[f][fv][fvSpawnx], FVINFO[f][fv][fvSpawny], FVINFO[f][fv][fvSpawnz], FVINFO[f][fv][fvSpawna],FVINFO[f][fv][fvColor1], FVINFO[f][fv][fvColor2], -1);
			FVINFO[f][fv][fvId] = carcreated;
			VehicleFuel[carcreated] = FVINFO[f][fv][fvFuel];
			if(FVINFO[f][fv][fvLocked] == 1) LockGangVehicle(f, FVINFO[f][fv][fvId], FVINFO[f][fv][fvLock]);
        }
    }
}

LockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FVINFO[family][v][fvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
		vehicle_lock_doors(carid);
	}
}

UnLockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FVINFO[family][v][fvId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

stock UnloadGangVehicles(f)
{
	//printf(" Unloading %s's vehicles.", fINFO[f][FamilyName]);
	for(new fv = 0; fv < MAX_PLAYERVEHICLES; fv++)
    {
        if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID)
        {
            if(LockStatus[FVINFO[f][fv][fvId]] != 0) LockStatus[FVINFO[f][fv][fvId]] = 0;
			DestroyVehicle(FVINFO[f][fv][fvId]);
			VehicleFuel[FVINFO[f][fv][fvId]] = 200.0;
			FVINFO[f][fv][fvId] = INVALID_VEHICLE_ID;
        }
    }
}

stock UpdateGangVehicleParkPosition(f, fv, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health, temp = 1, vw)
{
	if(FVINFO[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
	    if(temp == 0)
		{
	 		new Float:oldx, Float:oldy, Float:oldz;
			oldx = FVINFO[f][fv][fvSpawnx];
			oldy = FVINFO[f][fv][fvSpawny];
			oldz = FVINFO[f][fv][fvSpawnz];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FVINFO[f][fv][fvSpawnx] = newx;
			FVINFO[f][fv][fvSpawny] = newy;
			FVINFO[f][fv][fvSpawnz] = newz;
			FVINFO[f][fv][fvSpawna] = newangle;
			DestroyVehicle(FVINFO[f][fv][fvId]);
			new carcreated = CreateVehicle(FVINFO[f][fv][fvModelId], FVINFO[f][fv][fvSpawnx], FVINFO[f][fv][fvSpawny], FVINFO[f][fv][fvSpawnz],
			FVINFO[f][fv][fvSpawna],FVINFO[f][fv][fvColor1], FVINFO[f][fv][fvColor2], -1);
	        FVINFO[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SetVehicleVirtualWorld(carcreated, vw);
	        saveFamiliesHQ();
        	return 1;
		}
		else
		{
		    new Float:oldx, Float:oldy, Float:oldz;
			oldx = FVINFO[f][fv][fvSpawnxtmp];
			oldy = FVINFO[f][fv][fvSpawnytmp];
			oldz = FVINFO[f][fv][fvSpawnztmp];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FVINFO[f][fv][fvSpawnxtmp] = newx;
			FVINFO[f][fv][fvSpawnytmp] = newy;
			FVINFO[f][fv][fvSpawnztmp] = newz;
			FVINFO[f][fv][fvSpawnatmp] = newangle;
			DestroyVehicle(FVINFO[f][fv][fvId]);
			new carcreated = CreateVehicle(FVINFO[f][fv][fvModelId], FVINFO[f][fv][fvSpawnxtmp], FVINFO[f][fv][fvSpawnytmp], FVINFO[f][fv][fvSpawnztmp],
			FVINFO[f][fv][fvSpawnatmp],FVINFO[f][fv][fvColor1], FVINFO[f][fv][fvColor2], -1);
	        FVINFO[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SetVehicleVirtualWorld(carcreated, vw);
	        saveFamiliesHQ();
        	return 1;
		}
	}
	return 0;
}

stock GetGangFreeVehicleId(f){
    new
		i = 0;
	while (i < MAX_GANG_VEHICLES && FVINFO[f][i][fvId] != INVALID_VEHICLE_ID){
		i++;
	}
	if (i == MAX_GANG_VEHICLES) return -1;
	return i;

}

stock GetGangVehicleCount(f)
{
    new
		i = 0,
		cars = 0;
	while (i < MAX_GANG_VEHICLES && FVINFO[f][i][fvId] != INVALID_VEHICLE_ID){
	    cars++;
		i++;
	}
	return cars;

}

stock GetGangVehicle(f, vehicleid)
{
	if(f == 255) return -1;
	if(vehicleid == -1) return -1;
    for(new v = 0; v < MAX_GANG_VEHICLES; v++)
    {
        if(FVINFO[f][v][fvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

//------------------------------------------------------------------------------
//DEALERSHIP Cars SYSTEM BY ALEX DONUTS
//------------------------------------------------------------------------------
stock CreateCarDealership(Float: enx, Float: eny, Float: enz, Float: radius, price, message[])
{
	new dealershipid = GetFreeCarDealership();
	if(dealershipid == -1) return -1;
	new text_info[128];
	CDSInfo[dealershipid][cdEntranceX] = enx;
	CDSInfo[dealershipid][cdEntranceY] = eny;
	CDSInfo[dealershipid][cdEntranceZ] = enz;
	CDSInfo[dealershipid][cdRadius] = radius;
	CDSInfo[dealershipid][cdPrice] = price;
	strmid(CDSInfo[dealershipid][cdMessage], message, 0, strlen(message), 255);
	CDSInfo[dealershipid][cdPickupID] = CreateDynamicPickup(1239, 1, CDSInfo[dealershipid][cdEntranceX], CDSInfo[dealershipid][cdEntranceY], CDSInfo[dealershipid][cdEntranceZ], .interiorid = 0);
	format(text_info, sizeof(text_info),"Concesionario (%d) %s\nDueño: %s", dealershipid, CDSInfo[dealershipid][cdMessage], CDSInfo[dealershipid][cdPrice]);
    CDSInfo[dealershipid][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_GENERAL,CDSInfo[dealershipid][cdEntranceX], CDSInfo[dealershipid][cdEntranceY], CDSInfo[dealershipid][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    SavecDealership(dealershipid);
    return dealershipid;
}

stock DestroyCarDealership(dealershipid)
{
	new string[30];
	CDSInfo[dealershipid][cdEntranceX] = 0.0;
	CDSInfo[dealershipid][cdEntranceY] = 0.0;
	CDSInfo[dealershipid][cdEntranceZ] = 0.0;
	CDSInfo[dealershipid][cdRadius] = 0.0;
	CDSInfo[dealershipid][cdTill] = 0;
	CDSInfo[dealershipid][cdOwned] = 0;
	CDSInfo[dealershipid][cdPrice] = 0;
	format(string, sizeof(string), "Nadie");
	strmid(CDSInfo[dealershipid][cdOwner], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Nada");
	strmid(CDSInfo[dealershipid][cdMessage], string, 0, strlen(string), 255);
	DestroyDynamic3DTextLabel(CDSInfo[dealershipid][cdTextLabel]);
	DestroyDynamicPickup(CDSInfo[dealershipid][cdPickupID]);
	CDSInfo[dealershipid][cdPickupID] = 0;
	CDSInfo[dealershipid][cdTextLabel] = Text3D:INVALID_3DTEXT_ID;
	CDSInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	{
		if (CDSInfo[dealershipid][cdVehicleModel][v] != 0)
		{
	        DestroyCarDealershipVehicle(dealershipid, v);
		}
	}
	SavecDealership(dealershipid);
}

stock GetFreeCarDealership()
{
    new
		i = 0;
	while (i < MAX_CARDEALERSHIPS && CDSInfo[i][cdEntranceX] != 0.0 && CDSInfo[i][cdEntranceY] != 0.0)
	{
		i++;
	}
	if (i == MAX_CARDEALERSHIPS) return -1;
	return i;

}

stock SetPlayerOwnerOfCD(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	CDSInfo[dealershipid][cdOwned] = 1;
	GetPlayerName(playerid, owner, sizeof(owner));
	strmid(CDSInfo[dealershipid][cdOwner], owner, 0, strlen(owner), 255);
	new text_info[128];
	format(text_info, sizeof(text_info),"Concesionario (%d) %s\nDueño: %s", dealershipid, CDSInfo[dealershipid][cdMessage], CDSInfo[dealershipid][cdOwner]);
	UpdateDynamic3DTextLabelText(CDSInfo[dealershipid][cdTextLabel], COLOR_GENERAL, text_info);
	SavecDealership(dealershipid);
}

stock SellCarDealership(dealershipid)
{
	CDSInfo[dealershipid][cdOwned] = 0;
	CDSInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
	CDSInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
	CDSInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
	CDSInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	strmid(CDSInfo[dealershipid][cdOwner], "Nadie", 0, MAX_PLAYER_NAME, 255);
	new text_info[128];
	format(text_info, sizeof(text_info),"Concesionario (%d) %s En Venta\nPrecio: %d", dealershipid, CDSInfo[dealershipid][cdMessage], CDSInfo[dealershipid][cdPrice]);
	UpdateDynamic3DTextLabelText(CDSInfo[dealershipid][cdTextLabel], COLOR_GENERAL, text_info);
	SavecDealership(dealershipid);
}

stock IsPlayerOwnerOfCD(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
	    if(strcmp(CDSInfo[d][cdOwner],owner, true ) == 0)
	    {
			return d;
		}
	}
	return -1;
}

stock IsPlayerOwnerOfCDEx(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(CDSInfo[dealershipid][cdOwner],owner, true ) == 0)
	{
	    return 1;
	}
	return 0;
}

stock CreateCarDealershipVehicle(dealershipid, modelid, Float: x, Float: y, Float: z, Float: a, price)
{
    new cdvehicleid = GetFreeCarDealershipVehicleId(dealershipid);
    if(cdvehicleid == -1) return -1;
    new text_info[128];
    CDSInfo[dealershipid][cdVehicleModel][cdvehicleid] = modelid;
    CDSInfo[dealershipid][cdVehicleCost][cdvehicleid] = price;
    CDSInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = x;
    CDSInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = y;
    CDSInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = z;
    CDSInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = a;
    new carcreated = CreateVehicle(modelid, x, y, z, a, 0, 0, 6);
    format(text_info, sizeof(text_info), "%s En Venta | Precio: %d", GetVehicleName(carcreated), CDSInfo[dealershipid][cdVehicleCost][cdvehicleid]);
    CDSInfo[dealershipid][cdVehicleLabel][cdvehicleid] = CreateDynamic3DTextLabel(text_info,COLOR_MAGENTA,0.0, 0.0, 0.0,5.0,INVALID_PLAYER_ID,carcreated,1);
	CDSInfo[dealershipid][cdVehicleId][cdvehicleid] = carcreated;
	SavecDealership(cdvehicleid);
    return cdvehicleid;
}

stock DestroyCarDealershipVehicle(dealershipid, cdvehicleid)
{
    CDSInfo[dealershipid][cdVehicleModel][cdvehicleid] = 0;
    CDSInfo[dealershipid][cdVehicleCost][cdvehicleid] = 0;
    CDSInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = 0.0;
    CDSInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = 0.0;
    DestroyDynamic3DTextLabel(CDSInfo[dealershipid][cdVehicleLabel][cdvehicleid]);
    DestroyVehicle(CDSInfo[dealershipid][cdVehicleId][cdvehicleid]);
    CDSInfo[dealershipid][cdVehicleLabel][cdvehicleid] = Text3D:INVALID_3DTEXT_ID;
    CDSInfo[dealershipid][cdVehicleId][cdvehicleid] = 0;
}

stock GetFreeCarDealershipVehicleId(dealershipid)
{
    new
		i = 0;
	while (i < MAX_DEALERSHIPVEHICLES && CDSInfo[dealershipid][cdVehicleModel][i] != 0)
	{
		i++;
	}
	if (i == MAX_DEALERSHIPVEHICLES) return -1;
	return i;

}

stock GetCarDealershipVehicleId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CDSInfo[d][cdVehicleId][v] == vehicleid)
            {
                return v;
            }
		}
    }
    return -1;
}

stock GetCarDealershipId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CDSInfo[d][cdVehicleId][v] == vehicleid)
            {
                return d;
            }
		}
    }
    return -1;
}

//------------------------------------------------------------------------------
//SISTEMAAUTOS BY ALEX DONUTS
//------------------------------------------------------------------------------
stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID)
	{
	    PlayerCars++;
        carsforplayer[playerid]++;
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playerid][playervehicleid][pvVW] = GetPlayerVirtualWorld(playerid);
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = color1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playerid][playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 200;
		PlayerVehicleInfo[playerid][playervehicleid][pvLock] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvHealth] = 1000.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
		for(new m = 0; m < MAX_MODS; m++)
	    {
	    	PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
		}
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvVW]);
		//SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerVehicle(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvModelId])
	{
	    PlayerCars--;
	    carsforplayer[playerid]--;
		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvVW] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = -1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 200;
		PlayerVehicleInfo[playerid][playervehicleid][pvLock] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvHealth] = 1000.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 0;
		VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 200;
		VehicleFuel[playervehicleid] = 200;
		strcpy(PlayerVehicleInfo[playerid][playervehicleid][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
	    PlayerVehicleInfo[playerid][playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;
	    if(PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    {
	        Info[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	        Info[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}
	}
}

stock LoadPlayerVehicles(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	//printf(" Loading %s's vehicles.", playername);
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvImpounded] >= 2) PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
        if(PlayerVehicleInfo[playerid][v][pvModelId] != 0 && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            PlayerCars++;
            carsforplayer[playerid]++;
			new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][v][pvModelId], PlayerVehicleInfo[playerid][v][pvPosX], PlayerVehicleInfo[playerid][v][pvPosY], PlayerVehicleInfo[playerid][v][pvPosZ], PlayerVehicleInfo[playerid][v][pvPosAngle],PlayerVehicleInfo[playerid][v][pvColor1], PlayerVehicleInfo[playerid][v][pvColor2], -1);
			PlayerVehicleInfo[playerid][v][pvId] = carcreated;
			VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][v][pvFuel];
			SetVehicleHealth(carcreated, PlayerVehicleInfo[playerid][v][pvHealth]);
			SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][v][pvVW]);
			//SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][v][pvNumberPlate]);
			if(PlayerVehicleInfo[playerid][v][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvLock]);
        }
        else if(PlayerVehicleInfo[playerid][v][pvModelId] == 0 && PlayerVehicleInfo[playerid][v][pvImpounded] != 0)
            PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
    }
    LoadAllPlayerVehicleMods(playerid);
}

stock UnloadPlayerVehicles(playerid)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	//printf(" Unloading %s's vehicles.", playername);
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvImpounded] >= 2) PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
        if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            PlayerCars--;
            carsforplayer[playerid]--;
            if(LockStatus[PlayerVehicleInfo[playerid][v][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][v][pvId]] = 0;
            UpdatePlayerVehicleMods(playerid, v);
			DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
			VehicleFuel[PlayerVehicleInfo[playerid][v][pvId]] = 200;
			PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
			if(PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    	{
	    	    Info[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	    	    Info[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    		PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
			}
        }
    }
}

stock RegisterVehicleNumberPlate(vehicleid, sz_NumPlate[])
{
	new
	    Float: a_CarPos[4], fuel; // X, Y, Z, Z Angle, Fuel

	GetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	GetVehicleZAngle(vehicleid, a_CarPos[3]);
	fuel = VehicleFuel[vehicleid];
	//SetVehicleNumberPlate(vehicleid, sz_NumPlate);
	SetVehicleToRespawn(vehicleid);
	//SetVehicleToRespawn(vehicleid);
	SetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	SetVehicleZAngle(vehicleid, a_CarPos[3]);
	VehicleFuel[vehicleid] = fuel;
	return 1;
}

stock UpdatePlayerVehicleParkPosition(playerid, playervehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] != INVALID_PLAYER_VEHICLE_ID)
	{
		 new Float:oldx, Float:oldy, Float:oldz, oldfuel;
		 oldx = PlayerVehicleInfo[playerid][playervehicleid][pvPosX];
		 oldy = PlayerVehicleInfo[playerid][playervehicleid][pvPosY];
		 oldz = PlayerVehicleInfo[playerid][playervehicleid][pvPosZ];
		 if(oldx == newx && oldy == newy && oldz == newz) return 0;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = newx;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = newy;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = newz;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = newangle;
		 PlayerVehicleInfo[playerid][playervehicleid][pvVW] = GetVehicleVirtualWorld(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 oldfuel = VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]];
		 VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 200;
		 UpdatePlayerVehicleMods(playerid, playervehicleid);
		 DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvModelId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ],
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle],PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2], -1);
   		 SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvVW]);
		 PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
         VehicleFuel[carcreated] = oldfuel;
         SetVehicleHealth(carcreated, health);
         LoadPlayerVehicleMods(playerid, playervehicleid);
         return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0) {
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new carid = PlayerVehicleInfo[playerid][playervehicleid][pvId];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
			sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playerid][playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playerid][playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playerid][playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][14] = sideskirt2;
	}
}

stock LoadPlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 && PlayerVehicleInfo[playerid][playervehicleid][pvSpawned]== 1)
	{
		//printf(" Cargando mods del jugador ID #%d.", playerid);
		new paintjob = PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob];
		new color1 = PlayerVehicleInfo[playerid][playervehicleid][pvColor1];
		new color2 = PlayerVehicleInfo[playerid][playervehicleid][pvColor2];
		if(PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] != -1)
		{
			 ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][playervehicleid][pvId], paintjob);
			 ChangeVehicleColor(PlayerVehicleInfo[playerid][playervehicleid][pvId], color1, color2);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
			AddVehicleComponent(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]);
		}
	}
}

stock LoadAllPlayerVehicleMods(playerid)
{
	//print(" Modificaciones de todos los autos cargadas.");
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvModelId] != 0 && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            new paintjob = PlayerVehicleInfo[playerid][v][pvPaintJob];
        	new color1 = PlayerVehicleInfo[playerid][v][pvColor1];
	        new color2 = PlayerVehicleInfo[playerid][v][pvColor2];
            if(PlayerVehicleInfo[playerid][v][pvPaintJob] != -1)
	        {
                ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][v][pvId], paintjob);
	        }
	        ChangeVehicleColor(PlayerVehicleInfo[playerid][v][pvId], color1, color2);
	        for(new m = 0; m < MAX_MODS; m++)
	        {
  	        	AddVehicleComponent(PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvMods][m]);
	        }
		}
	}
}

stock GetPlayerFreeVehicleId(playerid){
	for(new i; i < MAX_PLAYERVEHICLES; ++i){
		if(PlayerVehicleInfo[playerid][i][pvModelId] == 0) return i;
	}
	return -1;
}

function GetPlayerVehicleCount(playerid){
	new cars = 0;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++){
	    if(PlayerVehicleInfo[playerid][i][pvModelId]){
	        if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][i][pvImpounded] == 0 && PlayerVehicleInfo[playerid][i][pvSpawned] == 1){
				if(CheckPlayerVehicleForDesync(playerid, PlayerVehicleInfo[playerid][i][pvId])) return 0;
				cars++;
			}
	    }
	}
	return cars;
}

function VehicleCount(playerid){
    new cars = 0;
    for(new i = 0; i < MAX_PLAYERVEHICLES; i++){
		if(PlayerVehicleInfo[playerid][i][pvModelId] != 0){
			cars++;
		}
    }
    return cars;
}
/*InvalidModCheck(model, partid) {
    switch(model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 573, 556, 557, 539, 471, 432, 406, 444,
		448, 461, 462, 463, 468, 481, 509, 510, 521, 522, 581, 586, 417, 425, 447, 460, 469, 476, 487,
		488, 477, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 0;
		default: switch(GetVehicleComponentType(partid)) {
			case 5: switch(partid) {
				case 1008, 1009, 1010: return 1;
				default: return 0;
			}
			case 7: switch(partid) {
				case 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098: return 1;
				default: return 0;
			}
			case 8: switch(partid) {
				case 1086: return 1;
				default: return 0;
			}
			case 9: switch(partid) {
				case 1087: return 1;
				default: return 0;
			}
			default: for(new i; i < 4; i++) if(partid == vehicleMods[model - 400][GetVehicleComponentType(partid)][i]) {
				return 1;
			}
		}
	}
	return 0;
}*/

function CheckPlayerVehicleForDesync(playerid, vehicleid)
{
	if(GetVehicleModel(vehicleid) < 400 || GetVehicleModel(vehicleid) > 611)
	{
    	SendClientMessageEx(playerid, COLOR_WHITE, "Error: Desincronización de vehículos detectado, ejecutando sincronización de sus vehículos...");
    	UnloadPlayerVehicles(playerid);
    	//LoadPlayerVehicles(playerid);
    	SendClientMessageEx(playerid, COLOR_WHITE, "Sus vehículos han sido sincronizados con el servidor.");
    	return 1;
	}
	return 0;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

stock GetDistancePlayerVeh(playerid, veh) {

	new
	    Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}

stock doesVehicleExist(vehicleid) {

    if(GetVehicleModel(vehicleid) >= 400) {
		return 1;
	}
	return 0;
}

stock IsValidSkin(skinid){
	if(skinid < 0 || skinid > 311) return false;
	return true;
}

stock IsPublicSkin(skinid) {
	if(!IsValidSkin(skinid)) return false;

	switch(skinid) {
		case 274 .. 288, 265 .. 267, 71: return false;
	}
	return true;
}
stock GetClosestCar(playerid, exception = INVALID_VEHICLE_ID) {
    new
		Float:Distance,
		target = -1;
    for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v)) {
        if(v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
            target = v;
            Distance = GetDistancePlayerVeh(playerid, v);
        }
    }
    return target;
}

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}
function ApagarMotorPuente(vehicleid, playerid)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == VEHICLE_PARAMS_ON) // Si el motor del coche NPC sige encendido.
    {
        if(Entorno_Car(vehicleid)) //  Si el coche es NPC.
		{
    		new string1[128];
    		new malasuerte = random(2)+1;
    		if(malasuerte == 1) // 33% de Probabilidad. (Toca 0)
			{
			    KillTimer(TimerCochesPuente); // Se apaga el Timer de apagado de motor.
                ClearAnimPlayer(playerid); // Se deshacen las animaciones.
				SetTimerEx("ApagarMotorPuente", 600000, false, "dd", vehicleid, playerid); // Se vuelve a activar el Timer en 10 minutos.
				return 1;
			}
			else // 66% de Probabilidad (Toca 1 o 2)
			{
    			if(Info[playerid][pMaskuse] == 0)
				{
					format(string1, sizeof(string1), "* %s se le apagó el motor de su vehículo bruscamente.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else{ProxDetector(3.0, playerid, "Desconocido se le apagó el motor de su vehículo bruscamente.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);}
				SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
				SendClientMessageEx(playerid, COLOR_GREY, "[INFO]:{FFFFFF} El motor se apagó, será mejor volver a usar /puente.");
				arr_Engine{vehicleid} = 0; ClearAnimPlayer(playerid); // Se deshacen las animaciones.
			}
		} // Motor NPC.
	} // Coche NPC.
	return 1;
}
function SetVehicleEngine(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == VEHICLE_PARAMS_ON)
	{
	new string1[128];
	if(Info[playerid][pMaskuse] == 0)
	{
	format(string1, sizeof(string1), "* %s apaga el motor de su vehiculo.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else{ProxDetector(3.0, playerid, "Desconocido apaga el motor de su vehiculo.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);}
	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	SendClientMessageEx(playerid, COLOR_WHITE, "Motor a sido apagado con éxito.");
	arr_Engine{vehicleid} = 0;
	}
    else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
	new Float: f_vHealth;
	GetVehicleHealth(vehicleid, f_vHealth);
	if(f_vHealth < 350.0) return SendClientMessageEx(playerid, COLOR_RED, "El coche no prenderá, porque el motor se ha quemado! (/servicios).");
    if(VehicleFuel[vehicleid] <= 0) return SendClientMessageEx(playerid, COLOR_RED, "El coche no prenderá, no hay gasolina en el tanque (/servicios).");
	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	arr_Engine{vehicleid} = 1;
	new string1[128];
	if(Info[playerid][pMaskuse] == 0)
	{
	format(string1, sizeof(string1), "* %s arranca el motor de su vehiculo.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else{ProxDetector(3.0, playerid, "Desconocido arranca el motor de su vehículo.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);}
	}
	return 1;
}

SetVehicleLights(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		iLuces[playerid] = 0; // No podrá usar los intermitentes.
		SendClientMessageEx(playerid, COLOR_WHITE, "Luces del vehiculo fueron apagadas.");
	}
    else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		iLuces[playerid] = 1; // Podrá encender las luces.
		SendClientMessageEx(playerid, COLOR_WHITE, "Luces del vehículo encendidas con éxito. Puedes usar los intermitentes.");
	}
	return 1;
}

SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Capó del vehiculo fue cerrado.");
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Capó del vehiculo fue abierto.");
	}
	return 1;
}

SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Maletero del vehiculo fue cerrado.");
	}
    else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Maletero del vehiculo fue abierto.");
	}
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {
	new
		Float:Floats[3];
	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GivePlayerCash(playerid, money)
{
	SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	GivePlayerMoney(playerid, money);
	return 1;
}

stock ResetPlayerCash(playerid)
{
	SetPVarInt(playerid, "Cash", 0);
	ResetPlayerMoney(playerid);
	return 1;
}

//---------------------------------------------------------
//Delay:NOPCheck[1000, i](playerid)
// Timer Name: NOPCheck(playerid)
function NOPCheck(playerid)
{
	if(GetPlayerState(playerid) != 2) NOPTrigger[playerid] = 0;
	if(GetPlayerState(playerid) != 2) return 1;
	new newcar = GetPlayerVehicleID(playerid);
    if(LSPD_Vehiculos(newcar) && Info[playerid][pMember] != 1 && Info[playerid][pLeader] != 1) ExecuteNOPAction(playerid);
    else if(FBI_Vehiculos(newcar) && Info[playerid][pMember] != 2 && Info[playerid][pLeader] != 2) ExecuteNOPAction(playerid);
    else if(SAEM_Vehiculos(newcar) && Info[playerid][pMember] != 3 && Info[playerid][pLeader] !=3) ExecuteNOPAction(playerid);
    else if(Mecanicos_Vehiculos(newcar) && Info[playerid][pMember] != 6 && Info[playerid][pLeader] !=6) ExecuteNOPAction(playerid);
    else if(SEC_Vehiculos(newcar) && Info[playerid][pMember] != 4 && Info[playerid][pLeader] !=4) ExecuteNOPAction(playerid);
    else if(Gobierno_Vehiculos(newcar) && Info[playerid][pMember] != 7 && Info[playerid][pLeader] !=7) ExecuteNOPAction(playerid);
    else if(Taxi_Vehicle(newcar) && Info[playerid][pJob] != 8 && Info[playerid][pJob2] != 8) ExecuteNOPAction(playerid);
	return 1;
}
/*timer HouseUpdate[1000]()
{
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    if(HouseInfo[h][hOwned] != 0)
   		{
	        --HouseInfo[h][hTiempo];
		}
	}
	SaveHouses();
}
timer HouseUpdate[90000]() // Cada minuto y medio.
{
    for(new h = 0; h < sizeof(HouseInfo); h++)
    {
        if(HouseInfo[h][hOwned] != 0)
        {
            if(HouseInfo[h][hTiempo] <= 0)
            {
                new szFileStr[1024];
                format(HouseInfo[h][hOwner], 128, "Nobody" ); // Renovación del propietario.
                HouseInfo[h][hTiempo] = 0; // Se pone el tiempo a 0 para evitar la existencia de posibles bugs.
                HouseInfo[h][hOwned] = 0; // Se retira el propietario de cada casa inactiva.
				DestroyDynamicPickup(HouseInfo[h][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[h][hTextID]);
				format(string, sizeof(string), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[h][hDescription],HouseInfo[h][hValue],HouseInfo[h][hLevel],h);
				HouseInfo[h][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]+0.5,10.0);
				HouseInfo[h][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
            }
        	--HouseInfo[h][hTiempo];
        }
    }
    SaveHouses(); // Guardado de casas cada minuto.
}*/
// Función: Otros Timers.
timer KickJail[10000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i) && gPlayerLogged{i} == 1)
	    {
			if(Info[i][pJailed] == 1)
			{
			    if(!IsPlayerInRangeOfPoint(i, 150, -3578.6624,-2300.2500,0.1042) && Info[i][pAdminZC] < 1)
			    {
			    	new stringX[128]; // Da kick si no está en su lugar de jail.
			    	format(stringX, sizeof(stringX), "[AntiHack]: %s (ID %d) ha sido auto-expulsado del servidor, razón: salir fuera de jail.", GetPlayerNameEx(i), i);
					ABroadCast(COLOR_YELLOW, stringX, 0 );
					Kick(i);
				}
			}
		}
	}
}
timer severTimers[1000]()
{
	if(iAdverTimer >= 1)
		--iAdverTimer;
	foreach(Player, i)
	{
	    SyncPlayerTime(i);
	    if(IsPlayerConnected(i) && gPlayerLogged{i} == 1)
	    {
			if(Tied[i] > 0) TogglePlayerControllable(i, 0);
            if(GetPVarInt(i, "EMSAttempt") == -1) ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				CellTime[i]++;
				if (Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME], string[96];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(string, sizeof(string), "* El teléfono de %s esta sonando", called);
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
			    new string[24];
				format(string, sizeof(string), "~w~Costo de llamada~n~~r~%d",CallCost[i]);
				GivePlayerCash(i, -CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				CallCost[i] = 0;
			}
			for(new h = 0; h < sizeof(Points); h++)
			{
				if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz])){
					if(Points[h][Type] == 3 && Info[i][pPot] < 3){
						GameTextForPlayer(i, "~w~Usa /comprarhierba para comprar algo de ~n~~r~hierba", 5000, 5);
					}
					else if(Points[h][Type] == 1 && GetPVarInt(i, "Packages") == 0){
						GameTextForPlayer(i, "~w~Usa /materiales para comprar ~n~~r~paquetes de materiales.", 5000, 5);
					}
					else if(Points[h][Type] == 4){
						GameTextForPlayer(i, "~w~Usa /comprarcrack para comprar ~n~algo de ~r~crack", 5000, 5);
					}
					else if(Points[h][Type] == 5){
						GameTextForPlayer(i, "~w~Usa /paquete para comprar un ~n~~r~paquete de droga", 5000, 5);
					}
				}
			}
			if(TransportDriver[i] < 999)
			{
				if(GetPlayerVehicleID(i) != GetPlayerVehicleID(TransportDriver[i]) || !TransportDuty[TransportDriver[i]])
				{
					if(IsPlayerConnected(TransportDriver[i]))
					{
					    new string[24];
						TransportMoney[TransportDriver[i]] += TransportCost[i];
						TransportTime[TransportDriver[i]] = 0;
						TransportCost[TransportDriver[i]] = 0;
						format(string, sizeof(string), "~w~Pasajero se fue~n~~g~ganaste %d",TransportCost[i]);
						GameTextForPlayer(TransportDriver[i], string, 5000, 1);
						TransportDriver[i] = 999;
					}
				}
				else if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					GivePlayerCash(i, -TransportValue[TransportDriver[i]]);
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
		  					TransportCost[i] += TransportValue[TransportDriver[i]];
							TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
				TransportTime[i] += 1;
				new string[24];
				format(string, sizeof(string), "~r~%d ~w~: ~g~%d",TransportTime[i],TransportCost[i]);
				GameTextForPlayer(i, string, 15000, 6);
				GameTextForPlayer(TransportDriver[i], string, 15000, 6);
				if(TransportCost[i] > GetPlayerCash(i))
				{
				    RemovePlayerFromVehicle(i);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(i, slx, sly, slz);
					SetPlayerPos(i, slx, sly, slz + 2);
				    GameTextForPlayer(i, "~r~No tienes más dinero para pagar el taxi!", 4000, 4);
				}
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
				else if(Info[i][pWeapons][4] == 0) SetPlayerArmedWeapon(i, 0);
				else SetPlayerArmedWeapon(i, 29);
			}
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && Info[i][pAdminZC] < 4)
			{
				new string[74 + MAX_PLAYER_NAME];
			    format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) es posible que use Cheat de JetPack .", GetPlayerNameEx(i), i);
				ABroadCast( COLOR_YELLOW, string, 2 );
				format(string, sizeof(string), "%s (ID %d) es posible que use Cheat de JetPack.", GetPlayerNameEx(i), i);
				Log("LOGS/hack.log", string);
				format(string, sizeof(string), "AdmCmd: %s ha sido auto-expulsado, razón: jetpack hack.", GetPlayerNameEx(i), i);
				ABroadCast(COLOR_YELLOW, string, 0 );
				Kick(i);
			}
			if(IsPlayerInRangeOfPoint(i, 2.5, 1544.2, -1353.4, 329.4))
			{
				GivePlayerValidWeapon(i, 46); // Paracaidas en el edificio más alto de LS.
			}
			/*if(Info[i][pJailed] == 1 && !IsPlayerInRangeOfPoint(i, 120, -3578.6624,-2300.2500,0.1042) && Info[i][pAdminZC] < 1)
			{
			    new stringX[128]; // Da kick si no está en su lugar de jail.
			    format(stringX, sizeof(stringX), "[AntiHack]: %s (ID %d) ha sido auto-expulsado del servidor, razón: salir fuera de jail.", GetPlayerNameEx(i), i);
				ABroadCast(COLOR_YELLOW, stringX, 0 );
				Kick(i);
			}*/
		}
	}
}

timer severTimers2[1000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i) && gPlayerLogged{i} == 1)
		{
			if(GetPlayerPing(i) > MAX_PING)
			{
			    new string[128];
	           	format(string, sizeof(string), "[AdmWarning]: %s ha sido kikeado por tener %d de ping (maximo: 1500).", GetPlayerNameEx(i), GetPlayerPing(i) );
				ABroadCast(COLOR_GENERAL, string, 2);
	        	SendClientMessageEx(i, COLOR_GENERAL, "INFRANET-RP: {FFFFFF} {FFFFFF}Has sido expulsado del servidor, tu ping superó el máximo.");
	        	Kick(i);
		    }
			if(Info[i][pJudgeJailType] != 0 && Info[i][pJudgeJailTime] > 0 && !Info[i][pBeingSentenced]) Info[i][pJudgeJailTime]--;
			if(Info[i][pJudgeJailTime] <= 0 && Info[i][pJudgeJailType] != 0) Info[i][pJudgeJailType] = 0;
	        if(IsaRent[i] > 0)
			{
				if(RentTime[i] > 0)
				{
			       	RentTime[i]--;
			   	}
			   	if(RentTime[i] == 0)
				{
			       	RentTime[i] = 0;
			       	if(IsaRent[i] == 1)
					{
						IsaRent[i] = 0;
						TypeOfRent[i] = 0;
						new newcar = GetPlayerVehicleID(i);
						if(IsARentCar(newcar))
						{
							SetVehicleToRespawn(HireKey[i]);
							TogglePlayerControllable(i, 1);
						}
					}
				}
			}
   			if(CommandSpamUnmute[i] == 0){ CommandSpamTimes[i] = 0;}
			if(Info[i][pADTime] != 0){Info[i][pADTime]--;}
			if(Info[i][pServiceTime] != 0) { Info[i][pServiceTime]--; }
			if(Info[i][pSavedTime] != 0) { Info[i][pSavedTime]--; }
			if(NewbieTimer[i] > 0) { NewbieTimer[i]--; }
			if(VIPTimer[i] > 0){ VIPTimer[i]--; }
   			if(Info[i][pDPTime] != -1){
			   	Info[i][pDPTime]--;
			   	if(Info[i][pDPTime] == 0){
			       	Info[i][pDPHours] = 0;
			       	Info[i][pRHours] = 0;
			       	Info[i][pDPTime] = -1;
			       	Info[i][pPTR] +=1;
			       	SendClientMessageEx(i, COLOR_GREEN,"* Se terminó tu tiempo, no pudiste mantener el beneficio de Usuario Dedicado, intentalo de nuevo!");
			   	}
			}
			if(GetPlayerCash(i) != GetPlayerMoney(i))
			{
				ResetMoneyBar(i);
				UpdateMoneyBar(i,GetPVarInt(i, "Cash"));
			}
			if(Info[i][pTriageTime] != 0)
			{
				Info[i][pTriageTime]--;
    		}
 		    if(Info[i][pTempVIP] >= 1)
			 {
				Info[i][pTempVIP]--;
    		}
		    if(Info[i][pTempVIP] <= 0 && Info[i][pBuddyInvited] == 1)
			{
				Info[i][pTempVIP] = 0;
				Info[i][pBuddyInvited] = 0;
    			Info[i][pVIP] = 0;
				SendClientMessageEx(i, COLOR_VIP, "INFO: {FFFFFF}Tu VIP Temporal ha expirado.");
				SetPlayerToTeamColor(i);
     		}
			if(Info[i][pRMuted] > 1)
			{
			   	if(Info[i][pRMutedTime] > 0)
   				{
			   	    Info[i][pRMutedTime]--;
			   	}
			   	else
				{
			   	    Info[i][pRMuted] = 0;
			   	}
			}
		    if(Info[i][pJailed] > 0)
			{
				if(Info[i][pJailTime] > 0)
				{
					Info[i][pJailTime]--;
					new text[128];
		        	switch(Info[i][pJailed])
					{
		            	case 1, 4: format(text, sizeof(text), "~n~~n~~n~~n~~n~~n~~n~ ~r~Jail OOC!~n~~w~%d segundos (%i minutos) restantes", Info[i][pJailTime], Info[i][pJailTime]/60);
					}
					GameTextForPlayer(i, text, 2000, 3);
				}
    			if(Info[i][pJailTime] <= 0)
				{
				    Info[i][pJailTime] = 0;
				    switch(Info[i][pJailed])
				    {
				        case 2:{
						SetPosEx(i,1605.5861,-1646.6277,13.5469,0,0,0);
						Info[i][pWantedLevel] = 0;
						SetPlayerWantedLevel(i, Info[i][pWantedLevel]);
				        }
				        case 3:{
				 		SetPlayerInterior(i, 0);
				 		Info[i][pInt] = 0;
			 			SetPlayerVirtualWorld(i, 0);
			 			Info[i][pVW] = 0;
			 			SetPlayerPos(i,343.1081,-1521.4404,33.2985);
				        }
				        case 1,4:{
				    	SetPlayerInterior(i, 0);
				    	Info[i][pInt] = 0;
				    	SetPosEx(i,1552.8286,-1674.9845,16.1953,0,0,0);
				        }
				        case 5:{
			 			SetPlayerInterior(i, 0);
			 			Info[i][pInt] = 0;
			 			SetPlayerVirtualWorld(i, 0);
			 			Info[i][pVW] = 0;
			 			SetPlayerPos(i,130.0132,1945.5618,19.3507);
						}
				        case 6:{
			 			SetPlayerInterior(i, 0);
			 			Info[i][pInt] = 0;
			 			SetPlayerVirtualWorld(i, 0);
			 			Info[i][pVW] = 0;
			 			SetPlayerPos(i,725.8815,-1438.3231,13.5391);
						}
						case 1000:{
				    	SetPlayerInterior(i, 0);
				    	Info[i][pInt] = 0;
				    	SetPosEx(i,1552.8286,-1674.9845,16.1953,0,0,0);
				    	}
					}
					Info[i][pJailed] = 0;
					PhoneOnline[i] = 0;
					SendClientMessageEx(i, COLOR_GREEN,"Has pagado tu condena.");
					GameTextForPlayer(i, "~g~Eres Libre~n~~w~Se mejor persona.", 5000, 1);
					SetPlayerSkin(i, Info[i][pChar]);
					SetPlayerToTeamColor(i); // Se resetean Variables de jail.
					strmid(Info[i][pJailedBy], "Nadie", 0, strlen("Nadie"), 32);
					strmid(Info[i][pJailReason], "Ninguno", 0, strlen("Ninguno"), 64);
				}
			}
			if(Info[i][pWantedLevel] > 0)
			{
			   	SetPlayerWantedLevel(i, Info[i][pWantedLevel]);
			}
		    if(UsedFind[i] >= 1){
		    	UsedFind[i] -= 1;
		   	}
   			if(JustReported[i] > 0){
				JustReported[i]--;
			}
			if(JustDuda[i] > 0){
				JustDuda[i]--;
			}
			if(JustAfk[i] > 0){
				JustAfk[i]--;
			}
			if(tarmalimit[i] > 0){
				tarmalimit[i]--;
			}
		    if(Info[i][pGiftTime] != 0){
				Info[i][pGiftTime]--;
			}
			if(PlayerTazeTime[i] >= 1){
				PlayerTazeTime[i] += 1;
				if(PlayerTazeTime[i] == 15){PlayerTazeTime[i] = 0;}
			}
			if(MechanicCallTime[i] > 0)
			{
				if(MechanicCallTime[i] == 300) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Checkpoint eliminado!", 2500, 1); }
				else
				{
				    new string[5];
					format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(MedicCallTime[i] > 0)
			{
				if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Checkpoint eliminado!", 2500, 1); }
				else
				{
				    new string[5];
					format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(MedicAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
					GameTextForPlayer(i, string, 1500, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(GetPlayerState(i) == PLAYER_STATE_ONFOOT) for(new h = 0; h < sizeof(fINFO); h++)
			{
				if(IsPlayerInRangeOfPoint(i, 2.0, fINFO[h][FamilySafe][0], fINFO[h][FamilySafe][1], fINFO[h][FamilySafe][2]))
				{
					if(fINFO[h][FamilyUSafe] == 1)
					{
					    TextStringforPlayer(i);
						GameTextForPlayer(i, "~y~Caja Fuerte~w~~n~Escribe ~r~/ayudasafe~w~ para mas informacion", 5000, 3);
					}
				}
			}
			if(EMSCallTime[i] > 0)
			{
		    	if(EMSAccepted[i] < 999)
				{
		        	if(IsPlayerConnected(EMSAccepted[i]))
					{
		            	new Float:X,Float:Y,Float:Z;
		            	GetPlayerPos(EMSAccepted[i], X, Y, Z);
		            	SetPlayerCheckpoint(i, X, Y, Z, 5);
					}
				}
			}
			if(Info[i][pEstado] == 1){
				if(PlayerCuffedTime[i] <= 0){
			    	//Frozen[i] = 0;
			    	SetPVarInt(i, "IsFrozen", 0);
					TogglePlayerControllable(i, 1);
					Info[i][pEstado] = 0;
					SetPVarInt(i, "PlayerCuffed", 0);
					PlayerCuffedTime[i] = 0;
					PlayerTazeTime[i] = 1;
					ClearAnimations(i);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(i, X, Y, Z);
					SetPlayerPos(i, X, Y, Z);
				}
				else{
					PlayerCuffedTime[i] -= 1;
				}
			}
			if(Info[i][pEstado] == 2){
				if(PlayerCuffedTime[i] <= 0){
			    	new Float:X, Float:Y, Float:Z;
			    	GetPlayerPos(i, X, Y, Z);
			    	new copinrange;
					foreach(Player, j){
			    		if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && IsACop(j)){copinrange = 1;}
					}
			    	if(copinrange == 0)
					{
						//Frozen[i] = 0;
						SetPVarInt(i, "IsFrozen", 0);
						GameTextForPlayer(i, "~r~Rompiste las esposas eres libre!", 2500, 3);
						TogglePlayerControllable(i, 1);
						Info[i][pEstado] = 0;
						DeletePVar(i, "PlayerCuffed");
						PlayerCuffedTime[i] = 0;
					}
					else{PlayerCuffedTime[i] = 60;}
				}
				else{PlayerCuffedTime[i] -= 1;}
			}
			if(PlayerDrunk[i] > 9)
			{
		    	if(PlayerDrunkTime[i] > 20)
				{
		    		ApplyAnimation(i,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[i]*1000);
		    		SetPlayerDrunkLevel(i, PlayerDrunk[i]*1000);
		    		PlayerDrunk[i] -= 1;
		    		PlayerDrunkTime[i] = 0;
				}
				PlayerDrunkTime[i] += 1;
			}
			if(PlayerDrunk[i] < 10 && PlayerDrunk[i] > 0)
			{
		    	if(PlayerDrunkTime[i] > 30)
				{
		        	PlayerDrunk[i] -= 1;
                   	PlayerDrunkTime[i] = 0;
				}
				PlayerDrunkTime[i] += 1;
			}
		}
	}
}

//UPDATE ACCOUNTS TICKRATE 1 MIN
timer saveAccounts[60000]()
{
	new string[128];
	saveFamilies();
	saveFamiliesHQ();
	new playerip[32];
	foreach(Player, i){
	    if(gPlayerLogged{i}){
  			format(string, sizeof(string), "Nvl: %d Exp: %d/%d", Info[i][pLevel],  Info[i][pExp], (Info[i][pLevel]+1)*(explevel)); // sistema experiencia (nota copiar todo desde update asta timer
    		TextDrawSetString(Experiencia[i], string);
			Info[i][pInt] = GetPlayerInterior(i);
			Info[i][pVW] = GetPlayerVirtualWorld(i);
			GetPlayerPos(i, Info[i][pPos_x], Info[i][pPos_y], Info[i][pPos_z]);
			GetPlayerFacingAngle(i, Info[i][pPos_r]);
			GetPlayerIp(i, playerip, sizeof(playerip));
			format(Info[i][pIP], 32, "%s", playerip);
        	SubirRol(i);
        }
    }
    //print("EXE:saveAccounts;");
}

// Timer Name: VehicleUpdate()
// TickRate: 10 Sec.
timer VehicleUpdate[10000]()
{
    new engine,lights,alarm,doors,bonnet,boot,objective,modelid;
    for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v)){
		modelid = GetVehicleModel(v);
	    GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
		switch(modelid){
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: VehicleFuel[v] = 200;
			case 509, 481, 510: VehicleFuel[v] = 200, arr_Engine{v} = 1, SetVehicleParamsEx(v,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
	    if(engine == VEHICLE_PARAMS_ON){
			if(VehicleFuel[v] > 0 && !IsAHarvest(v)){
				VehicleFuel[v]-=1;
				if(VehicleFuel[v] <= 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			}
			if(arr_Engine{v} == 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	    }
	}
}
timer ServerMicrobeat[250]()
{
    	new
		Float: fExpHealth,
		Float: fCurrentSpeed,
		iVehicle,
		arrDamage[4],
		arrVehParams[7],
		szSpeed[80];
		foreach(Player, i)
		{
	    	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
		    	fCurrentSpeed = player_get_speed(i);
				fVehSpeed[i] = fCurrentSpeed;
				iVehicle = GetPlayerVehicleID(i);
  				for(new s=0;s<10;s++)
		  		{
					if(SpikeStrips[s][sX] != 0) // Cuando un coche pase cerca de los pinchos, destrozar las ruedas mediante script.
					{
						if(VehicleToPoint( 3.0, iVehicle, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
						{
			  				GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
			 				arrDamage[3] = encode_tires(1, 1, 1, 1);
			   				UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
		  				}
					}
	   			}
				GetVehicleHealth(iVehicle,fExpHealth);
				if(fExpHealth < 350.0 && !IsABike(iVehicle))
				{
 					SetVehicleHealth(iVehicle, 251.0);
    				SetVehicleParamsEx(iVehicle, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
					if(arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(iVehicle,VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
					GameTextForPlayer(i, "~r~Motor quemado!", 2500, 3);
					arr_Engine{iVehicle} = 0;
				}
				else if(Info[i][pSpeedo] != 0 && arr_Engine{iVehicle} == 1)
				{
			    	if(fCurrentSpeed > 140)
					{
						format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%.0f KPH ~w~- Gas: %d", fCurrentSpeed, VehicleFuel[iVehicle]);
					}
					else if(fCurrentSpeed > 40)
					{
						format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~%.0f KPH ~w~- Gas: %d", fCurrentSpeed, VehicleFuel[iVehicle]);
					}
					else if(fCurrentSpeed >= 0)
					{
						format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~%.0f KPH ~w~- Gas: %d", fCurrentSpeed, VehicleFuel[iVehicle]);
					}
					GameTextForPlayer(i, szSpeed, 1500, 3);
				}
			}
  			if(GetPVarInt(i,"PlayerHasBeenFlashed") == 1)
			{
				continue;
			}
			else if (GetPVarInt(i,"PlayerHasBeenFlashed") == 2)
			{
				DeletePVar(i,"PlayerHasBeenFlashed");
				continue;
			}
			//iVehicle = GetPlayerVehicleID(i);
			new v = GetPlayerVehicle(i, iVehicle);
			if(v != -1)
			if(VehiculoFaccionLegal(iVehicle) == false) //if(!LSPD_Vehicle(iVehicle) && !IsAnAmbulance(iVehicle) && !FBI_Vehicle(iVehicle) && !SAEM_Vehicle(iVehicle))
			{
				for(new b = 0; b < MAX_vCAMERAS;b++)
    			{
 					if(IsPlayerInRangeOfPoint(i,vCameraInfo[b][vCameraRange],vCameraInfo[b][vCameraPos][0], vCameraInfo[b][vCameraPos][1], vCameraInfo[b][vCameraPos][2]) && vCameraInfo[b][vCameraStatus] == 0)
    				{
        				new limit = vCameraInfo[b][vCameraLimit]+15;
        				if(fCurrentSpeed > limit)
        				{
        					TextDrawShowForPlayer(i,flash);
            				new Float:x,Float:y,Float:z;GetPlayerPos(i,x,y,z);
            				PlayerPlaySound(i, 1132, x, y, z);
            				SetPVarInt(i,"PlayerHasBeenFlashed",1);
            				SetTimerEx("RemoveFlash",1000,false,"i",i); 
							format(szMessage, sizeof(szMessage), "¡Detectado! Tu velocidad sobrepasó lo permitido en esta zona. Tu velocidad: %.0f KM/H - Max: %d KM/H  Multa: $%d",fCurrentSpeed,vCameraInfo[b][vCameraLimit],vCameraInfo[b][vCameraTicket]);
							SendClientMessageEx(i,COLOR_LIGHTBLUE,szMessage);
							if(GetPlayerCash(i) > vCameraInfo[b][vCameraTicket])
							{
								Bought(i, vCameraInfo[b][vCameraTicket]);
								SendClientMessageEx(i,COLOR_LIGHTBLUE,"[DGT]: Has pagado el coste de la multa, recuerda respetar las reglas de tráfico.");
								InfoFacc[1][gFondos] += vCameraInfo[b][vCameraTicket]; // LSPD Fondos.
								InfoFacc[2][gFondos] += vCameraInfo[b][vCameraTicket]; // FBI Fondos.
							}
	   						else
	   						{
	   							SendClientMessageEx(i,COLOR_LIGHTBLUE,"[DGT]: Debes pagar la multa en la central de SAPD de lo contrario puedes ser arrestado o tu coche puede ser embargado.");
	   							for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	   							{
	   							    if(IsPlayerInVehicle(i, PlayerVehicleInfo[i][d][pvId]))
	   							    {
	   							        PlayerVehicleInfo[i][v][pvTicket] += vCameraInfo[b][vCameraTicket];
	   								} // Cierre: Si el multado está en su coche.
								} // Cierre: Loop de los Veh del usuario.
							} // Cierre: Si/No tiene dinero para pagar la multa.
						} // Cierre: Si supera la velocidad permitida "limit".
					} // Cierre: Si esta persona pasó cerca de un Radar de Velocidad.
				} // Cierre: Loop de los Radares existentes.
			} // Cierre: Si se trata de un Veh No-Legal.
		} // Revisión de cada Player conectado al servidor.
}
timer Mensajes[600000]()
{
	foreach(Player, i){
	    if(Advisors > 0 && Info[i][pLevel] < 4) SendClientMessageEx(i, COLOR_LIGHTBLUE, "¿Necesitas ayuda? Los ayudantes están aquí para ayudarte. (/ayudame para obtener ayuda.)");
		if(GetPlayerCash(i) < 0){
			if(MoneyMessage[i]==0){
				new string[128];
				format(string, sizeof(string), "Actualmente estás debiendo dinero; necesitas pagar $%d. Si no lo haces, serás arrestado...", GetPlayerCash(i));
				SendClientMessageEx(i, COLOR_LIGHTRED, string);
				MoneyMessage[i] = 1;
			}
		}
		else MoneyMessage[i] = 0;
	}
	if(VIPGiftsTimeLeft > 0 && VIPGifts == 1){
	    VIPGiftsTimeLeft -= 10;
	    if(VIPGiftsTimeLeft > 0){
		    new string[128];
			format(string, sizeof(string), "%s quiere que vengas al Club VIP hay regalos para ti [%d minutos restantes]", VIPGiftsName, VIPGiftsTimeLeft);
   			BroadCast(COLOR_LIGHTGREEN, string);
		}
	}
	if(VIPGiftsTimeLeft <= 0 && VIPGifts == 1){
	    VIPGiftsTimeLeft = 0;
	    VIPGifts = 0;
	    new string[128];
		format(string, sizeof(string), "Club VIP ya no está regalando obsequios. Gracias por venir!", VIPGiftsName, VIPGiftsTimeLeft);
		BroadCast(COLOR_LIGHTGREEN, string);
	}
}

timer EMSUpdate[3000](){
	foreach(Player, i){
	    if(GetPVarType(i, "Injured")){
	        if(GetPVarInt(i, "EMSAttempt") != 0){
				new Float:health;
 				GetPlayerHealth(i,health);
				if(GetPVarInt(i, "EMSAttempt") == -1)
				{
    				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			SetHP(i, health-1);
	    			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
					GameTextForPlayer(i, "~y~Estas herido~n~~w~/aceptar muerte o /servicios medicos", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 1)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			SetHP(i, health-5);
	    			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
					GameTextForPlayer(i, "~r~Herido~n~~w~Espera que SAMD llege...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 8)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			SetHP(i, health-5);
	    			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
					GameTextForPlayer(i, "~r~Herido~n~~w~Espera que SAMD llege...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 2)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
					    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
						SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
				  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
	    			}
	    			GameTextForPlayer(i, "~g~Rescatado~n~~w~En espera de atencion medica...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 3){
	    			if(IsPlayerInAnyVehicle(i)){
	        			new ambmodel = GetPlayerVehicleID(i);
	        			if(GetVehicleModel(ambmodel) == 416){
	    					GameTextForPlayer(i, "~g~Rescatado~n~~w~Espera que SAMD te lleve al hospital...", 5000, 3);
						}
						else{
	        				SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
	        				KillEMSQueue(i);
	        				SetPVarInt(i, "Hospital", 1);
							SpawnPlayer(i);
						}
					}
					else{
		    			SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
	        			KillEMSQueue(i);
	        			SetPVarInt(i, "Hospital", 1);
						SpawnPlayer(i);
					}
				}
				if(health <= 10)
				{
	    			SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
	    			KillEMSQueue(i);
	    			SetPVarInt(i, "Hospital", 1);
        	    	SetHP(i, 50);
					SpawnPlayer(i);
				}
	        }
	    }
	}
}
// Anti AFK
// TickRate: 10 minutos
timer AntiAFK[900000]()
{ // 900 Segundos. - Timer se repite cada 15 Minutos. En 30 minutos kick.
	foreach(Player, zc)
	{
	    if(gPlayerLogged{zc})
		{
	        if(Info[zc][pEstado] == 0)
			{
			    if(Info[zc][pAdminZC] <= 1)
				{
					GetPlayerPos(zc, PlayerPos[zc][0], PlayerPos[zc][1], PlayerPos[zc][2]);
					if(PlayerPos[zc][0] == PlayerPos[zc][3] && PlayerPos[zc][1] == PlayerPos[zc][4] && PlayerPos[zc][2] == PlayerPos[zc][5])
					{
					
			    		OnPlayerSavedStats(zc);
			    		ClearChatbox(zc);
			    		gPlayerLogged{zc} = 0;
			    		UnloadPlayerVehicles(zc);
						RemovePlayerFromVehicle(zc);
						SetPlayerPos(zc, 1375.74207, -807.15186, 83.94895);
						SetPlayerFacingAngle(zc, -90.0);
						SetPlayerCameraPos(zc, 1416.4598, -914.8869, 68.2429);
						SetPlayerCameraLookAt(zc, 1412.5050, -813.9489, 82.6266);
			    		SendClientMessage(zc, COLOR_GENERAL, "[INFO]: Has sido deslogeado del servidor por inactividad.");
			    		new string[128];
   	 					format(string, sizeof(string), "[Anti-AFK] El usuario %s ha sido expulsado del servidor, AFK más de 20 minutos.", GetPlayerNameEx(zc));
	 					ABroadCast(COLOR_ORANGE, string, 2);
						format(string, sizeof(string), "{FFFFFF}Expulsado por inactividad!\nIngresa tu contraseña para re-ingresar al servidor.\n\n{5FB404}Contraseña:");
						SafeDialogEx(zc,DLOGIN,DIALOG_STYLE_PASSWORD ,"Re-Ingresar",string,"Entrar","Salir");
					}
					PlayerPos[zc][3] = PlayerPos[zc][0];
					PlayerPos[zc][4] = PlayerPos[zc][1];
					PlayerPos[zc][5] = PlayerPos[zc][2];
				} // No es admin.
			} // No está esposado ni congelado.
		} // Está logeado.
	} // Conteo de todas las ID conectadas.
}
// Timer Name: SpecUpdate() TickRate: 3 secs.
timer SpecUpdate[3000](){
	foreach(Player, i){
	    if(Info[i][pAdminZC] >= 2){
		    if(Spectating[i] >= 1){
				if(Spectate[i] < 553){
					new targetid = Spectate[ i ];
					if( !IsPlayerConnected( targetid ) ){
    					SendClientMessageEx( i, COLOR_WHITE, "El jugador que estabas specteando salio del servidor." );
			    		GettingSpectated[Spectate[i]] = 999;
			    		Spectating[i] = 0;
						Spectate[i] = 999;
						SetPVarInt(i, "SpecState", -1);
						SetPVarInt(i, "SpecOff", 1 );
						TogglePlayerSpectating( i, false );
						SetCameraBehindPlayer(i);
						SetPlayerColor(i, COLOR_POINTGEN);
					}
				}
				if(Spectate[i] == 553){
					TogglePlayerControllable(i, 1);
					TogglePlayerSpectating(i, 0);
					DeletePVar(i, "MedicBill");
					SpawnPlayer( i );
					Spectate[i] = 999;
					Spectating[i] = 0;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
				if(Spectate[i] == 554){
					TogglePlayerControllable(i, 1);
					SetPlayerInterior(i,Unspec[i][sPint]);
					Info[i][pInt] = Unspec[i][sPint];
					SetPlayerPos(i, Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2]);
					Spectate[i] = 999;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
					if(Spectate[i] == 556){
					Spectate[i] = 999;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
					if(Spectate[i] == 557){
					Spectate[i] = 554;
					SetPlayerColor(i, COLOR_POINTGEN);
				}
			}
		}
	}
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(pickupid == koson)
	{
		if(Koson1[playerid]== 1)
		{
		    if(acobrarcesped[playerid]<2000) acobrarcesped[playerid]=2500;
		    if(acobrarcesped[playerid]>2000) acobrarcesped[playerid]=3500;
			DisablePlayerCheckpoint(playerid);
   				armaRecibir[playerid]=random(5);
				if(armaRecibir[playerid] == 2)
				{
				new string[128];
				format(string, sizeof(string), "Ganaste %d$ por tu trabajo y un regalo de parte del jefe.",acobrarcesped[playerid]);
	  			GameTextForPlayer(playerid,string,4000,3);
				GivePlayerCash(playerid, acobrarcesped[playerid]);
				GivePlayerValidWeapon(playerid, 6);
                SetPlayerSkin(playerid,OldskinJ[playerid]);
                acobrarcesped[playerid]=0;
			}else{
			    new string[128];
				format(string, sizeof(string), "Ganaste %d$ por tu trabajo.",acobrarcesped[playerid]);
	  			GameTextForPlayer(playerid,string,4000,3);
				GivePlayerCash(playerid, acobrarcesped[playerid]);
				SetPlayerSkin(playerid,OldskinJ[playerid]);
				acobrarcesped[playerid]=0;
   				}
				Koson1[playerid]= 0;
				recojercesped[playerid]=0;
		}
	}
	if(pickupid == cesped)
	{
		GameTextForPlayer(playerid,"~r~Usa /recogercesped para empezar el trabajo!",3000,3);
	}
	if(pickupid == LenadorU)
            {
                    if(GetPVarInt(playerid,"PlayerStartDrova") == 1) return GameTextForPlayer(playerid,"~r~Continua recogiendo madera!",3000,3);
                    ShowPlayerDialog(playerid,999,DIALOG_STYLE_MSGBOX,"[LEÑADOR]","Empezar a cortar madera?","Si","No");
                    talar[playerid]=1;

            }
            else if(pickupid == Talararbol[0])
            {
                    if (talar[playerid] == 1)
                    {
                	if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo)");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
                    SetPlayerAttachedObject(playerid,1, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                 	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol1",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
            else if(pickupid == Talararbol[1])
            {
                    if (talar[playerid] == 1)
                    {
                    if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo)");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
					SetPlayerAttachedObject(playerid,1, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol2",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
            else if(pickupid == Talararbol[2])
            {
                    if (talar[playerid] == 1)
                    {
                    if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo)");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
					SetPlayerAttachedObject(playerid,1, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol3",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
            else if(pickupid == Talararbol[3])
            {
                    if (talar[playerid] == 1)
                    {
                	if(GetPVarInt(playerid,"PlayerStartDrova") == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[Acepta primero el trabajo");
                    ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
					SetPlayerAttachedObject(playerid,1, 341, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            		Tiempotalar[playerid] = SetTimerEx("espera",5000,false,"i", playerid);
                	Azar1 = random(sizeof(Maderaazar));
                	gcorte[playerid] += Maderaazar[Azar1][0];
					CorteX+=Maderaazar[Azar1][0];
					CorteY+=Maderaazar[Azar1][0];
					CorteY ++;
                    TrabajoL[playerid] = true;
                    SetTimerEx("arbol4",4000,false,"i", playerid);
                    lena1[playerid] = 1;
                    talar[playerid]=0;
                    }
            }
        if(pickupid == lena)
	{
		if(lena1[playerid]== 1)
		{
			new string[128];
	 		ClearAnimations(playerid);
	 		DisablePlayerCheckpoint(playerid);
			GivePlayerCash(playerid, gcorte[playerid] * 2);
			lena1[playerid]= 0; AttachObject(playerid);
			ApplyAnimation(playerid,"PED","IDLE_tired",4.1,1,0,0,0,2500);
			format(string, sizeof(string), "Recibiste %d$ por tu trabajo",gcorte[playerid]* 3);
			GameTextForPlayer(playerid,string,4000,3);
			talar[playerid]=1;
			gcorte[playerid] = 0;
			for(new x2;x2<MAX_PLAYERTOYS;x2++)
	    	{
		    RemovePlayerAttachedObject(playerid, x2);
        	}
		}
	}
	if(pickupid == ganja)
	{
		GameTextForPlayer(playerid,"~r~Usa /vendercosecha para recibir tu paga!",3000,3);
	}
    if(pickupid == roboV)
    {
    	GameTextForPlayer(playerid,"~r~Usa /robarshop por toda la tienda!",3000,3);
	}
	if(pickupid == roboD)
    {
    	GameTextForPlayer(playerid,"~r~Usa /dejarrobo para vender el objeto robado!",3000,3);
	}
	if(pickupid == bombita)
	{
		GameTextForPlayer(playerid,"~r~Usa /Cbomba para comprar una bomba, precio:20.000$!",3500,3);
	}
    if(pickupid == ticketR)
    {
    GameTextForPlayer(playerid,"~p~/Cticket: Precio del Ticket:50$!",3000,3);
    }
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
		enum
	{
		CHECKPOINT_1,
		CHECKPOINT_2,
		CHECKPOINT_3,
		CHECKPOINT_4,
		CHECKPOINT_5,
		CHECKPOINT_6,
		CHECKPOINT_7,
		CHECKPOINT_8,
		CHECKPOINT_9,
		CHECKPOINT_10,
		CHECKPOINT_11,
		CHECKPOINT_12,
		CHECKPOINT_13,
		CHECKPOINT_14,
		CHECKPOINT_15,
	}
    	if(Kosonrob[playerid] == 1)
		{
			switch(pKosonrob[playerid])
			{
			case CHECKPOINT_1:
    			{
					pKosonrob[playerid] = CHECKPOINT_2;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2040.2615,-1239.2533,22.5250,1.0972,-1164.6312,20.3167, 5.0);
					new cobro1=random(200);
                    acobrarcesped[playerid]+=cobro1;
				}
			case CHECKPOINT_2:
				{
					pKosonrob[playerid] = CHECKPOINT_3;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2037.7347,-1153.3411,22.9239,94.2694,-1171.8638,22.3931, 5.0);
					new cobro2=random(200);
                    acobrarcesped[playerid]+=cobro2;
				}
			case CHECKPOINT_3:
				{
					pKosonrob[playerid] = CHECKPOINT_4;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1973.5685,-1157.2955,20.5330,90.5327,-1225.0547,16.6850, 5.0);
					new cobro3=random(200);
                    acobrarcesped[playerid]+=cobro3;
				}
			case CHECKPOINT_4:
				{
					pKosonrob[playerid] = CHECKPOINT_5;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1888.0820,-1156.6615,23.7287,198.9810,-1246.1703,22.7465, 5.0);
					new cobro4=random(200);
                    acobrarcesped[playerid]+=cobro4;
				}
			case CHECKPOINT_5:
				{
                    pKosonrob[playerid] = CHECKPOINT_6;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1918.8859,-1233.3040,17.0178,280.3542,0.0,0.0, 5.0);
					new cobro5=random(200);
                    acobrarcesped[playerid]+=cobro5;
				}
			case CHECKPOINT_6:
				{
                    pKosonrob[playerid] = CHECKPOINT_7;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1969.6433,-1223.3857,19.6034,282.1702,0.0,0.0, 5.0);
					new cobro6=random(200);
                    acobrarcesped[playerid]+=cobro6;
				}
			case CHECKPOINT_7:
				{
                    pKosonrob[playerid] = CHECKPOINT_8;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2048.9810,-1204.7010,23.0090,62.0343,0.0,0.0, 5.0);
					new cobro7=random(200);
                    acobrarcesped[playerid]+=cobro7;
				}
			case CHECKPOINT_8:
				{
                    pKosonrob[playerid] = CHECKPOINT_9;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1974.1473,-1177.3590,19.6034,92.4975,0.0,0.0, 5.0);
					new cobro8=random(200);
                    acobrarcesped[playerid]+=cobro8;
				}
			case CHECKPOINT_9:
				{
                    pKosonrob[playerid] = CHECKPOINT_10;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1898.7450,-1181.7754,23.1214,143.4958,0.0,0.0, 5.0);
					new cobro9=random(200);
                    acobrarcesped[playerid]+=cobro9;
				}
				case CHECKPOINT_10:
				{
                    pKosonrob[playerid] = CHECKPOINT_11;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1867.7736,-1228.7124,16.5319,256.9824,0.0,0.0, 5.0);
					new cobro10=random(200);
                    acobrarcesped[playerid]+=cobro10;
				}
				case CHECKPOINT_11:
				{
                    pKosonrob[playerid] = CHECKPOINT_12;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,1946.0057,-1241.0990,18.7193,282.7324,0.0,0.0, 5.0);
					new cobro11=random(200);
                    acobrarcesped[playerid]+=cobro11;
				}
			case CHECKPOINT_12:
				{
                    pKosonrob[playerid] = CHECKPOINT_13;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2044.1243,-1220.5642,22.6328,29.5925,0.0,0.0, 5.0);
					new cobro12=random(200);
					AttachObject(playerid);
                    acobrarcesped[playerid]+=cobro12;
				}
			case CHECKPOINT_13:
				{
                    pKosonrob[playerid] = CHECKPOINT_14;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 2,2001.8083,-1153.2592,21.6568,175.6700,-1164.6312,20.3167, 5.0);
					new cobro13=random(200);
                    acobrarcesped[playerid]+=cobro13;
				}
			case CHECKPOINT_14:
				{
                    pKosonrob[playerid] = CHECKPOINT_15;
					JobAmmounts2[playerid] ++;
					SetPlayerRaceCheckpoint(playerid, 1,2021.1426,-1284.9330,25.6477,1991.8071,-1164.6312,20.3167, 5.0);
					new cobro14=random(200);
                    acobrarcesped[playerid]+=cobro14;

				}
			case CHECKPOINT_15:
				{
				new cobro15=random(50);
				acobrarcesped[playerid]+=cobro15;
    			acobrarcesped[playerid]+=cobro15;
				DisablePlayerRaceCheckpoint(playerid);
				Koson1[playerid]=1;
				GameTextForPlayer(playerid,"~w~cobra tu paga en la casa",6000,3);
				recojercesped[playerid]=0;
				RemovePlayerFromVehicle(playerid);
				}
			}
		}
		return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Info[playerid][pAdminZC] > 5999)
	{
    	SetPlayerPosFindZ(playerid, fX, fY, fZ);
    }
    return 1;
}

public Tiempoarbol0(playerid)
{
DestroyObject(Arbolmuerto[0]);
Arbolvivo[0] = CreateObject(726, -528, -1453.8994140625, 9.8999996185303, 0, 0, 0);
return 1;
}
public Tiempoarbolx(playerid)
{
DestroyObject(Arbolmuerto[1]);
Arbolvivo[1] = CreateObject(763, -513.7998046875, -1470.7998046875, 10.800000190735, 0, 0, 0);
return 1;
}
public Tiempoarbolxx(playerid)
{
DestroyObject(Arbolmuerto[2]);
Arbolvivo[2] = CreateObject(766, -525.8994140625, -1473.5, 9.8999996185303, 0, 0, 0);
return 1;
}
public Tiempoarbolxxx(playerid)
{
DestroyObject(Arbolmuerto[3]);
Arbolvivo[3] = CreateObject(727, -514.69921875, -1457.099609375, 10.89999961853, 0, 0, 0);
return 1;
}

public espera(playerid)
{
    new string[128];
	if(TrabajoL[playerid]==true){
	SetPlayerAttachedObject(playerid, 1 , 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
	ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
	StopAudioStreamForPlayer(playerid);
	format(string, sizeof(string), "Recogiste  %d de madera",gcorte[playerid]);
 	GameTextForPlayer(playerid,string,4000,3);
 	SetPlayerCheckpoint(playerid, -407.2330,-1426.3041,26.3147, 3.0);
	}
	return 1;
}

public arbol1(playerid)
{
	DestroyObject(Arbolvivo[0]);
	Arbolmuerto[0] = CreateObject(843, -529.7998046875, -1453.8994140625, 10.5, 0, 0, 0);
 	SetTimerEx("Tiempoarbol0", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 1);
  	return 1;
}

public arbol2(playerid)
{
	DestroyObject(Arbolvivo[1]);
 	Arbolmuerto[1] = CreateObject(843, -513.70001220703, -1472.3000488281, 11.300000190735, 0, 0, 87.989501953125);
 	SetTimerEx("Tiempoarbolx", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 1);
  	return 1;
}

public arbol3(playerid)
{
	DestroyObject(Arbolvivo[2]);
 	Arbolmuerto[2] = CreateObject(843, -525.79998779297, -1475.1999511719, 10.300000190735, 0, 0, 87.989501953125);
 	SetTimerEx("Tiempoarbolxx", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 1);
 	AttachObject(playerid);
  	return 1;
}

public arbol4(playerid)
{
	DestroyObject(Arbolvivo[3]);
 	Arbolmuerto[3] = CreateObject(843, -516.19921875, -1457, 11.5, 0, 0, 0);
  	SetTimerEx("Tiempoarbolxxx", 10000, false, "i", playerid);
  	RemovePlayerAttachedObject(playerid, 1);
  	return 1;
}

////////////////robos tienda electroncia////////////////////
forward RobadoCosas(playerid);
public RobadoCosas(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 7.0,1009.2381,48.5105,55.3221))
	{
    YaRobo[playerid] = 1;
	new randomrobo = random(8);
	switch(randomrobo)
	{
	    case 0:
		{
		    SendClientMessage(playerid,-1,"Logras robar una TV Vieja.");
			RobarTVVieja(playerid);
			SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
			SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 1:
		{
		    SendClientMessage(playerid,-1,"Logras robar una TV Moderna.");
			RobarTVBuena(playerid);
			SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
			SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 2:
		{
		    SendClientMessage(playerid,-1,"Logras robar una Caja de Madera.");
		    RobarCaja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 3:
		{
            SendClientMessage(playerid,-1,"Logras robar una PC.");
            RobarPC(playerid);
            SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
            SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 4:
		{
		    SendClientMessage(playerid,-1,"Logras robar una PlayStation vieja.");
		    RobarPlayVieja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 5:
		{
		    SendClientMessage(playerid,-1,"Logras robar una PlayStation nueva.");
		    RobarPlayVieja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 6:
		{
		    SendClientMessage(playerid,-1,"Logras robar una Videograbadora vieja.");
		    RobarVideoVieja(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
		case 7:
		{
		    SendClientMessage(playerid,-1,"Logras robar una Videograbadora nueva.");
		    RobarVideoBuena(playerid);
		    SetPlayerCheckpoint(playerid, 1406.8153,-1372.5907,8.1257, 2);
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Recuerda usar /tirarrobo si te persige LSPD!");
		}
	}
	}
	return 1;
}


public TimerGCRP(playerid)
{
	if(Info[playerid][pEstado] == 1)
	{
	Info[playerid][pEstado] = 0;
	DeletePVar(playerid, "IsFrozen");
	TogglePlayerControllable(playerid, 1);
	}
	return 1;
}


public TimerKICK(playerid)
{
	Kick(playerid);
	return 1;
}
public TimerBAN(playerid)
{
Info[playerid][pBannedZC] = 2;
UnloadPlayerVehicles(playerid);
Kick(playerid);
return 1;
}

public TimerBANIP(playerid)
{
new playerip[32];
Info[playerid][pBannedZC] = 2;
GetPlayerIp(playerid, playerip, sizeof(playerip));
Kick(playerid);
AddBan(playerip);
return 1;
}



public TimerROB(playerid)
{
    Info[playerid][probita] = 0;
	return 1;
}

public Timermanubrio(playerid)
{
	manubrio[playerid] = 0;
	return 1;
}

public TimerESCAPE(playerid)
{
	if(Info[playerid][pEstado] == 0)
	{
	SetPlayerPos(playerid, 965.3533,-1176.4833,22.8302);
	}
return 1;
}

public TimerBANK(playerid)
{
 	new Float:x, Float:y, Float:z;
	GetObjectPos(BOMBA[playerid], x, y, z);
	CreateExplosion(x, y, z, 7, 2.0);
	DestroyObject(BOMBA[playerid]);
	SendClientMessage(playerid,-1,"{FF0000}>>{FFFFFF}La puerta fué destrozada, roba la caja fuerte.");
	pbomba[playerid] = 0;
	bombap[playerid] = 0;
	MoveDynamicObject(Pbankazo,1000.86, -1170.12, 7.67, 10);
 	SetTimer("BankClose", 9000000, 0);
	return 1;
}
public TimerTICKET(playerid)
{
 Vortex[playerid] = 0; ClearAnimPlayer(playerid);
 RemovePlayerFromVehicle(playerid);
 SendClientMessageEx(playerid, COLOR_GREY, "Se acabó el tiempo de tu ticket,compra otro!");
 return 1;
}

public TimerBANCO(playerid)
{
robobanco[playerid] = 0;
return 1;
}




public Tiempo(playerid)
{
		if(IsPlayerInRangeOfPoint(playerid, 105.0, 1023.9638,-1149.6885,20.6183))
		{
       	new string[128];
        GivePlayerCash(playerid, 500000);
		format(string, sizeof(string), "Has logrado robar  $500.000");
	   	GameTextForPlayer(playerid,string,4000,3);
	   	SendClientMessage(playerid, COLOR_GREEN, "Escapa con el dinero por la cuerda /escapar.");
	   	SetTimerEx("TimerBANCO",3600000,false,"d",playerid);
	   	SetPlayerCheckpoint(playerid, 965.3533,-1176.4833,22.8302, 5);
     	SetPlayerAttachedObject( playerid, 0, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000 );
	   	}
	   	return 1;
}
stock RandomEx(min, max)
{
    new randval = random(max - min) + min;
    return randval;
}
stock OpenBlastDoor()
{
	MoveObject(blast_door_obj, 321.42, -1188.23, 81.57, 0.5);
	blast_door_open = 1;
	PlaySoundForAll(1153, 321.42, -1188.23, 81.57);
	SetTimer("close_blast_door", 10000, 0);
	return 1;
}

stock OpenLSPDdoor()
{
	MoveObject(LSPD_door_obj, 1545.61, -1627.85, 26.22, 0.5);
	LSPD_door_open = 1;
	PlaySoundForAll(1153, 1545.58, -1627.96, 17.59);
	SetTimer("close_LSPD_door", 10000, 0);
	return 1;
}

stock PlaySoundForAll(soundid, Float:x=0.0, Float:y=0.0, Float:z=0.0)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}
stock PickUpBoombox(playerid)
{
    foreach(Player, i)
	{
 		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
   		{
     		StopStream(i);
		}
	}
	DeletePVar(playerid, "BBArea");
	DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
 	DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            StopStream(playerid);
	            SendClientMessage(playerid, COLOR_GREY, "* Te alejas de la zona y la música deja de oirse poco a poco.");
				return 1;
	        }
	    }
	}
	return 1;
}

stock StopStream(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock PlayStream(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
        if(Tazer[playerid] == 1 && GetPlayerWeapon(playerid) == TAZE_WEAPON)
        {
            new Float:health,losehp;
        	GetPlayerHealth(damagedid,health);
        	losehp = TAZE_LOSEHP;
            if(Tazed[damagedid] == 1) return 1;
            new Float:x, Float:y, Float:z;
            GetPlayerPos(damagedid, x, y, z);
            ClearAnimations(damagedid);
            ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
            Spark[damagedid] = CreateObject(TAZE_SPARK, x, y, z-3, 0, 0, 0);
            SetTimerEx("DestroySpark", TAZE_DESTROY, 0, "i", damagedid);
            SetTimerEx("TazedRemove", TAZE_TIMER, 0, "i", damagedid);
            GameTextForPlayer(damagedid, "~r~Has sido tazeado", 3500, 3);
            SendClientMessageEx(damagedid, COLOR_WHITE, "* Has sido tazeado por un policía mediante el uso de su 9 milímetros.");
            SendClientMessageEx(playerid, COLOR_WHITE, "* Has alcanzado el objetivo, estará paralizado durante 10 segundos, ves a por él.");
            //TogglePlayerControllable(damagedid, 0);
            Tazed[damagedid] = 1;
            Info[damagedid][pEstado] = 1;
            SetPVarInt(damagedid, "PlayerCuffed", 2);
			SetPVarInt(damagedid, "IsFrozen", 1);
			PlayerCuffedTime[damagedid] = 300;
            if(losehp) {} else SetPlayerHealth(damagedid, health+amount);
        }
        return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
    if(IsPlayerConnected(playerid))
 	{
  		/*new
            infoString[128],
            weaponName[24],
            victimName[MAX_PLAYER_NAME],
            attackerName[MAX_PLAYER_NAME];
            
    	GetPlayerName(playerid, victimName, sizeof (victimName));
        GetPlayerName(issuerid, attackerName, sizeof (attackerName));
        GetWeaponName(weaponid, weaponName, sizeof (weaponName));*/
 	    switch(weaponid)
 	    {
 	        case 0: BajarVida(playerid, 5);
 	        case 1: BajarVida(playerid, 10);
 	        case 15: BajarVida(playerid, 65);
 	        case 13: BajarVida(playerid, 15);
 	        case 12: BajarVida(playerid, 15);
 	        case 11: BajarVida(playerid, 5);
 	        case 10: BajarVida(playerid, 5);
 	        case 14: BajarVida(playerid, 15);
 	        case 3: BajarVida(playerid, 55);
 	        case 5: BajarVida(playerid, 15);
 	        case 6: BajarVida(playerid, 15);
 	        case 7: BajarVida(playerid, 15);
      		case 2: BajarVida(playerid, 15);
 	        case 8: BajarVida(playerid, 25);
 	        case 4: BajarVida(playerid, 30);
 	        case 22: BajarVida(playerid, 5);
 	        case 23: BajarVida(playerid, 5);
 			case 24: BajarVida(playerid, 60);
 			case 25: BajarVida(playerid, 50);
 			case 27: BajarVida(playerid, 10);
 			case 28: BajarVida(playerid, 10);
 			case 29: BajarVida(playerid, 18);
 			case 30: BajarVida(playerid, 25);
 			case 31: BajarVida(playerid, 5);
 			case 32: BajarVida(playerid, 10);
 			case 33: BajarVida(playerid, 35);
 			case 34: BajarVida(playerid, 100);
 		}
 		/*format(infoString, sizeof(infoString), "[Aviso] %s usó una [Arma: %s] para atacar a %s.", GetPlayerNameEx(issuerid), weaponName, GetPlayerNameEx(playerid));
        ABroadCast(COLOR_ORANGE, string, 2);*/
 		
 	}
    return 1;
}
stock BajarVida(playerid,Float:vida)
{
 	new Float:Arm, Float:temporal, Float:Hp;
 	GetPlayerArmour(playerid, Arm);
 	if(Arm > 0.0)
 	{
	 	temporal = floatsub(Arm,vida);
	 	if(temporal < 0.0)
	 	{
	 	    SetPlayerArmour(playerid,0.0);
	 	    GetPlayerHealth(playerid, Hp);
	 	    SetPlayerHealth(playerid,floatsub(Hp,temporal));
	 	}
	 	else SetPlayerArmour(playerid, temporal);
 	}
 	else
 	{
 		GetPlayerHealth(playerid, Hp);
        SetPlayerHealth(playerid,floatsub(Hp,vida));
 	}
	return 1;
}

/*function UpdateBizz()
{
	new idx, File: file2, coordsstring[256];
	while (idx < sizeof(BizzInfo))
	{
		format(coordsstring, sizeof(coordsstring), "%d,%s,%s,%s,%f,%f,%f,%d,%d,%d,%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bName],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntrancex],
		BizzInfo[idx][bEntrancey],
		BizzInfo[idx][bEntrancez],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bType],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bTillEx]);

		if(idx == 0)	file2 = fopen("bizz.cfg", io_write);
		else			file2 = fopen("bizz.cfg", io_append);

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
}

function OnGlobalBizzTextdrawUpdate()
{
    for(new b = 0; b < sizeof(BizzInfo); b++)
	{
	    OnBizzTextdrawUpdate(b);
 	}
 	return 1;
}*/
stock InfoGanancias(bID, valor) // ID del negocio (VW del usuario y cantidad a pagar). (Este stock no afecta al VW 0).
{
	if(bID < 0 || bID >= MAX_NEGOCIOS)
	{
		new string[128];
		format(string, sizeof(string), "[Anti-BUG] Se intentó dar ganancias al negocio ID %d de %d dólares. (Máx negocios 50).",bID, valor);
		Log("LOGS/negocios.log", string);
		return 1; // Evitamos dar ganancias a negocios menor de la ID 0 o mayor de la ID 50. (Según el VW en el que estén).
		// Motivo: Si se diera ganancias al negocio 67 el servidor crashea, no existe ese negocio en la carpeta especificada e In Game.
	}
    NegociosVariables[bID][bGanancias] += valor; // El dinero va a la ID del negocio.
    NegociosVariables[bID][bStock] -= 1; // El negocio pierde un producto.
	ActualizarNegocio(bID); // Update general del negocio.
	return 1;
}

function ActualizarNegocio(bID) // Elimar objetos y pickups para crearlos de nuevo. (X, Y y Z ajustados previamente por CMD) y guardarlo.
{
    new strings[382];
    
		DestroyDynamicPickup(NegociosVariables[bID][bPickupID]);
		DestroyDynamic3DTextLabel(NegociosVariables[bID][bLabelID]);
		if(NegociosVariables[bID][bExteriorPos][0] != 0.0) // Si el negocio fue eliminado, no se crea. (Coordenada X)
		{
			switch(NegociosVariables[bID][bLocked])
			{
				case 1:
				{
       				if(!strcmp("Sin Dueño", NegociosVariables[bID][bOwner]))
       				{
   						format(strings, sizeof(strings), "{FFFFFF}%s\nNegocio en venta, usa /comprarnegocio\n[Estado: {FF0000}Cerrado{FFFFFF}]\n[Nivel necesario: %d - Precio %d$]\n\n{00C6A1}ID: {FFFFFF}%d",NegociosVariables[bID][bName], NegociosVariables[bID][bLevelNeeded], NegociosVariables[bID][bPrice], bID);
   				    }
					else
					{
						format(strings, sizeof(strings), "{FFFFFF}%s\nPropietario: %s\n{FFFFFF}[Estado: {FF0000}Cerrado{FFFFFF}]\n\n{00C6A1}ID: {FFFFFF}%d",NegociosVariables[bID][bName], NegociosVariables[bID][bOwner], bID);
					}
				}
				case 0:
				{
       				if(!strcmp("Sin Dueño", NegociosVariables[bID][bOwner]))
       				{
   						format(strings, sizeof(strings), "{FFFFFF}%s\nNegocio en venta, usa /comprarnegocio\n{FFFFFF}[Estado: {04B404}Abierto{FFFFFF}]\n[Nivel necesario: %d - Precio %d$]\n\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",NegociosVariables[bID][bName], NegociosVariables[bID][bLevelNeeded], NegociosVariables[bID][bPrice], bID);
					}
					else
					{
						format(strings, sizeof(strings), "{FFFFFF}%s\nPropietario: %s\n{FFFFFF}[Estado: {04B404}Abierto{FFFFFF}]\n\n{00C6A1}ID: {FFFFFF}%d {FFFF71}(Tecla H)",NegociosVariables[bID][bName], NegociosVariables[bID][bOwner], bID);
					}
				}
			}
			NegociosVariables[bID][bLabelID] = CreateDynamic3DTextLabel(strings, -1, NegociosVariables[bID][bExteriorPos][0], NegociosVariables[bID][bExteriorPos][1], NegociosVariables[bID][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			NegociosVariables[bID][bPickupID] = CreateDynamicPickup(1274, 23, NegociosVariables[bID][bExteriorPos][0], NegociosVariables[bID][bExteriorPos][1], NegociosVariables[bID][bExteriorPos][2], 0, 0, -1, 250);
		}
		saveNegocios(bID); // Se guardan los stats del negocio, lo ajustado por el CMD y pickup junto al TextLabel en esta última función.
		return 1;
}
function ActualizarFaccion(bID)
{
    new strings[382];

		DestroyDynamicPickup(InfoFacc[bID][gPickupID]);
		DestroyDynamic3DTextLabel(InfoFacc[bID][gLabelID]);
		if(InfoFacc[bID][gExteriorPos][0] != 0.0) // Si el negocio fue eliminado, no se crea. (Coordenada X)
		{
			format(strings, sizeof(strings), "{BE81F7} Almacén - %s {FFFFFF}\nArmamento disponible: {BE81F7}%d unds.{FFFFFF}\n[FACC ID:%d]", InfoFacc[bID][gFacc], InfoFacc[bID][gMateriales],bID);
			// Se crea Texto y Pickup de los almacenes de cada facción.
			InfoFacc[bID][gLabelID] = CreateDynamic3DTextLabel(strings, -1, InfoFacc[bID][gExteriorPos][0], InfoFacc[bID][gExteriorPos][1], InfoFacc[bID][gExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
			InfoFacc[bID][gPickupID] = CreateDynamicPickup(1239, 23, InfoFacc[bID][gExteriorPos][0], InfoFacc[bID][gExteriorPos][1], InfoFacc[bID][gExteriorPos][2], 0, 0, -1, 250);
		}
		saveLideres(bID); // Se guardan los stats del negocio, lo ajustado por el CMD y pickup junto al TextLabel en esta última función.saveLideres(params[0]);
		return 1;
}
/*VenderNegocio(bID)
{
	BizzInfo[bizzid][bOwned] = 0;
	strmid(BizzInfo[bizzid][bOwner], "El Estado", 0, strlen("El Estado"), 64);
	strmid(BizzInfo[bizzid][bExtortion], "Nadie", 0, strlen("Nadie"), 32);
	BizzInfo[bizzid][bTill] = 0;
	BizzInfo[bizzid][bTillEx] = 0;
	UpdateBizz();
	//OnBizzTextdrawUpdate(bizzid);
	return 1;
}

function TillTimer()
{
	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
	    new bearn = BizzInfo[b][bBuyPrice]/500;
		Till(b, bearn+500);
	}
}

stock Till(bizzid, amount) // BUG, las ID de los negocios no se corresponden al tipo real de negocio. (Ej: En la GM negicio ID 7 es ropa, In Game es un 24/7).
{
	if(BizzInfo[bizzid][bOwned] == 1){
        if(strcmp("Nadie", BizzInfo[bizzid][bExtortion], true ) == 0){
        	BizzInfo[bizzid][bTill] += amount;
       	}
       	else{
       	    new money = amount / 4;
			BizzInfo[bizzid][bTill] += money * 3;
			BizzInfo[bizzid][bTillEx] += money;
		}
	}
	return 1;
}
stock TillEx(typebizz, amount) // Payday2. - Ganancias de los negocios según su tipo.
{
	if(typebizz == 1) // 24/7.
	{
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
			if(BizzInfo[b][bOwned] == 1)
			{
        		if(strcmp("Nadie", BizzInfo[b][bExtortion], true ) == 0)
				{
          			BizzInfo[b][bTill] += amount;
       			}
       			else
   				{
       	    		new money = amount/4;
					BizzInfo[b][bTill] += money*3;
					BizzInfo[b][bTillEx] += money;
				}
			}
		}
		return 1;
	}
	else if(typebizz == 2) // Ropa.
	{
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
			if(BizzInfo[b][bOwned] == 1)
			{
        		if(strcmp("Nadie", BizzInfo[b][bExtortion], true ) == 0)
				{
          			BizzInfo[b][bTill] += amount;
       			}
       			else
   				{
       	    		new money = amount/4;
					BizzInfo[b][bTill] += money*3;
					BizzInfo[b][bTillEx] += money;
				}
			}
		}
		return 1;
	}
	else if(typebizz == 3) // Comida.
	{
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
			if(BizzInfo[b][bOwned] == 1)
			{
        		if(strcmp("Nadie", BizzInfo[b][bExtortion], true ) == 0)
				{
          			BizzInfo[b][bTill] += amount;
       			}
       			else
   				{
       	    		new money = amount/4;
					BizzInfo[b][bTill] += money*3;
					BizzInfo[b][bTillEx] += money;
				}
			}
		}
		return 1;
	}
	else if(typebizz == 4) // Gasolina.
	{
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
			if(BizzInfo[b][bOwned] == 1)
			{
        		if(strcmp("Nadie", BizzInfo[b][bExtortion], true ) == 0)
				{
          			BizzInfo[b][bTill] += amount;
       			}
       			else
   				{
       	    		new money = amount/4;
					BizzInfo[b][bTill] += money*3;
					BizzInfo[b][bTillEx] += money;
				}
			}
		}
		return 1;
	}
	else if(typebizz == 5) // Privado.
	{
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
			if(BizzInfo[b][bOwned] == 1)
			{
        		if(strcmp("Nadie", BizzInfo[b][bExtortion], true ) == 0)
				{
          			BizzInfo[b][bTill] += amount;
       			}
       			else
   				{
       	    		new money = amount/4;
					BizzInfo[b][bTill] += money*3;
					BizzInfo[b][bTillEx] += money;
				}
			}
		}
	}
	return 1;
}
function CheckBizz(playerid, earn)
{
	if(PlayerToPoint(10.0,playerid,499.9703,-20.3358,1000.6797))    Till(0, earn);
	if(PlayerToPoint(10.0,playerid,221.7099,299.1493,955.9631))  Till(1, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(2, earn);
 	if(PlayerToPoint(10.0,playerid,377.0499,-67.4344,1001.5078))     Till(3, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(4, earn);
 	if(PlayerToPoint(10.0,playerid,375.8651,-118.9402,1001.4995))     Till(5, earn);
 	if(PlayerToPoint(10.0,playerid,379.2390,-190.1861,1000.6328))     Till(6, earn);
 	if(PlayerToPoint(10.0,playerid,681.4490,-459.2420,-25.6172))     Till(7, earn);
 	if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))     Till(8, earn);
 	if(PlayerToPoint(10.0,playerid,-22.3260,-138.6221,1003.5469))     Till(9, earn);
 	if(PlayerToPoint(10.0,playerid,-25.6448,-56.6718,1003.5469))     Till(10, earn);
	if(PlayerToPoint(10.0,playerid,-29.3554,-28.8020,1003.5573))   Till(11,earn);
	if(PlayerToPoint(10.0,playerid,-28.7605,-185.1333,1003.5469))   Till(12,earn);
	if(PlayerToPoint(10.0,playerid,-28.0818,-89.9434,1003.5469))   Till(13,earn);
	if(PlayerToPoint(5.0,playerid,-60.2884,59.0147,1023.5759))   Till(14,earn);
	if(PlayerToPoint(5.0,playerid,-59.3870,58.2315,1004.8693))   Till(15,earn);
	if(PlayerToPoint(5.0,playerid,-60.4091,58.8382,1043.5759))   Till(16,earn);
	if(PlayerToPoint(5.0,playerid,-60.1126,58.8346,1063.5759))   Till(17,earn);
	if(PlayerToPoint(5.0,playerid,-60.4153,58.8366,1083.5759))   Till(18,earn);
	if(PlayerToPoint(5.0,playerid,-60.9187,58.8351,1098.57599))   Till(19,earn);
	if(PlayerToPoint(10.0,playerid,207.5627,-103.7291,1005.2578))   Till(20,earn);
	if(PlayerToPoint(10.0,playerid,203.9068,-41.0728,1001.8047))   Till(21,earn);
	if(PlayerToPoint(10.0,playerid,214.4470,-7.6471,1001.2109))   Till(22,earn);
	if(PlayerToPoint(10.0,playerid,161.3765,-83.8416,1001.8047))   Till(23,earn);
	if(PlayerToPoint(10.0,playerid,202.6777,-163.0623,1000.5306))   Till(24,earn);
	if(PlayerToPoint(10.0,playerid,499.9703,-20.3358,1000.6797))    Till(25, earn);
	if(PlayerToPoint(10.0,playerid,221.7099,299.1493,955.9631))  Till(26, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(27, earn);
 	if(PlayerToPoint(10.0,playerid,377.0499,-67.4344,1001.5078))     Till(28, earn);
 	if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))     Till(29, earn);
 	if(PlayerToPoint(10.0,playerid,375.8651,-118.9402,1001.4995))     Till(30, earn);
 	if(PlayerToPoint(10.0,playerid,379.2390,-190.1861,1000.6328))     Till(31, earn);
 	if(PlayerToPoint(10.0,playerid,681.4490,-459.2420,-25.6172))     Till(32, earn);
 	if(PlayerToPoint(10.0,playerid,496.3752,-76.0410,998.7578))     Till(33, earn);
 	if(PlayerToPoint(10.0,playerid,-22.3260,-138.6221,1003.5469))     Till(34, earn);
 	if(PlayerToPoint(10.0,playerid,-25.6448,-56.6718,1003.5469))     Till(35, earn);
	if(PlayerToPoint(10.0,playerid,-29.3554,-28.8020,1003.5573))   Till(36,earn);
	if(PlayerToPoint(10.0,playerid,-28.7605,-185.1333,1003.5469))   Till(37,earn);
	if(PlayerToPoint(10.0,playerid,-28.0818,-89.9434,1003.5469))   Till(38,earn);
	if(PlayerToPoint(5.0,playerid,-60.2884,59.0147,1023.5759))   Till(39,earn);
	return 0;
}*/

IsAtBarr(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(10.0,playerid,1221.7099,299.1493,955.9631))         return 1;
		else if(PlayerToPoint(10.0,playerid,681.2422,-453.6727,-25.6172))   return 1;
		else if(PlayerToPoint(10.0,playerid,1377.0499,-67.4344,1001.5078)) return 1;
		else if(PlayerToPoint(10.0,playerid,369.6622,-6.0164,1001.8589))  return 1;
		else if(PlayerToPoint(10.0,playerid,375.8651,-118.9402,1001.4995)) return 1;
		else if(PlayerToPoint(10.0,playerid,379.2390,-190.1861,1000.6328))   return 1;
		else if(PlayerToPoint(10.0,playerid,1681.4490,-459.2420,-25.6172))    return 1;
		else if(PlayerToPoint(25.0,playerid,51920.0979,-1865.1298,13.6559))  return 1;
		else if(PlayerToPoint(10.0,playerid,1392.5297,-1893.1754,17.4266))  return 1;
		else if(PlayerToPoint(10.0,playerid,1496.3752,-76.0410,998.7578))  return 1;
		else if(PlayerToPoint(10.0,playerid,-90.3200,-41.1700,1000.300))  return 1; // Bar nuevo delante de la plaza de LS.
		else if(PlayerToPoint(10.0,playerid, 1511.437133,-1767.623291,2982.701171)) return 1; // Ayuntamiento.
	}
	return 0;
}
/*function ShowDNIFalse(playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
	    new string[64], sex[2];
	    if(Info[playerid][pSex] == 1) { sex = "M"; }
   		else								{ sex = "F"; }

	    Message(targetid, 0x0D86FFFF, "|___________ Documento Nacional de Identidad ___________|");
   		format(string, sizeof(string), "   Nombre: %s", Info[playerid][pDNIName]);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Sexo: %s", sex);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Edad: %d     Fecha Nacimiento: %d", Info[playerid][pAge], 2012-Info[playerid][pAge]);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Estado Civil: Soltero");
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   Nº DNI: %d", Info[playerid][pDNIFalse]);
   		Message(targetid, COLOR_WHITE, string);
   		format(string, sizeof(string), "   IDSA%d%s<%s>%d-%d", Info[playerid][pDNIFalse],sex,Info[playerid][pDNIFalse],2012-Info[playerid][pAge],Info[playerid][pAge]);
   		Message(targetid, COLOR_GRAD2, string);
   		Message(targetid, 0x0D86FFFF, "|_________________ ·------------------------------· _________________|");
	}
}*/

//***dni por textdraw***
function ShowDNIFalse(playerid,giveplayerid)
{
        if(IsPlayerConnected(playerid)&&IsPlayerConnected(giveplayerid))
		{
	    new string[64], sex[18], otext[36];
	    if(Info[playerid][pSex] == 2) { sex = "Hombre"; }
   		if(Info[playerid][pSex] == 1) { sex = "Mujer"; }
   		if(Info[playerid][pOrigin] == 2) { otext = "San Fierro"; }
		else if(Info[playerid][pOrigin] == 1) { otext = "Los Santos"; }

        format(string, sizeof(string), "%s", Info[playerid][pDNIName]);
		PlayerTextDrawSetString(giveplayerid,DNI5[giveplayerid], string);

        format(string, sizeof(string), "%d", Info[playerid][pDNI]);
		PlayerTextDrawSetString(giveplayerid,DNI3[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		PlayerTextDrawSetString(giveplayerid,DNI9[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		PlayerTextDrawSetString(giveplayerid,DNI7[giveplayerid], string);

		format(string, sizeof(string), "%s", otext);
		PlayerTextDrawSetString(giveplayerid,DNI11[giveplayerid], string);

   		PlayerTextDrawSetPreviewModel(giveplayerid,DNI12[giveplayerid], Info[playerid][pChar]);

		PlayerTextDrawShow(giveplayerid, DNI0[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI1[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI2[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI3[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI4[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI5[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI6[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI7[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI8[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI9[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI10[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI11[giveplayerid]);
		PlayerTextDrawShow(giveplayerid, DNI12[giveplayerid]);
		SetTimerEx("qdni",10000,false,"i",giveplayerid);
	}
}
//**********************
stock GetPricebyObject(modelid)
{
	switch(modelid)
	{
	    case 2822,2820: return 20;
	    case 2515,1715,1716,1720,1721,1714,1811: return 400;
	    case 2518,1737,2119,2116,2115,2111,1739,1810: return 450;
	    case 2516,2002,2160,2334,2335,2112,2079,2121: return 950;
	    case 2514,2015,2157,2159,2029,1825: return 1000;
	    case 2517,2014,2018,2156,2120: return 1200;
	    case 2336,2337,2013,2019: return 2000;
	    case 2519, 2520,2523,2524,2136: return 3000;
	    case 2521,2525,2528,2529,2135,2339,14720: return 4000;
	    case 2522,1208,2340,2415: return 5000;
	    default:
		{
			new priceex = Random(500,4000);
			return priceex;
	    }
	}
	return 1;
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    new casaid = Info[playerid][pPhousekeyX];
    //new 	hID = getPlayerHouseID(playerid);
    //new     casaid = Info[playerid][pPhousekey];
    /*if(listid == DormitorioFur ||listid == ComedorFur ||listid == BanoFur || listid == LobbyFur || listid == CocinaFur || listid == ParedesFur || listid == OtrosFur || listid == ElectroFur )
    {
        if(!response) return 1;
        new price = GetPricebyObject(modelid);
        if(CheckMoney(playerid, price))
		{
			BuyFurniture(playerid, hID, modelid, price);
		}
    }
    if(listid == MueblesObj)
	{
	    if(response)
		{
	        if(Info[playerid][pMuebles][0] == -1)
	        {
				Info[playerid][pMuebles][0] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 1.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][1] == -1)
	        {
				Info[playerid][pMuebles][1] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 2.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][2] == -1)
	        {
				Info[playerid][pMuebles][2] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 3.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][3] == -1)
	        {
				Info[playerid][pMuebles][3] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 4.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][4] == -1)
	        {
				Info[playerid][pMuebles][4] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 5.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][5] == -1)
	        {
				Info[playerid][pMuebles][5] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 6.");
				return 1;
			}
	        else if(Info[playerid][pMuebles][6] == -1)
	        {
				Info[playerid][pMuebles][6] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 7.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][7] == -1)
	        {
				Info[playerid][pMuebles][7] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 8.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][8] == -1)
	        {
				Info[playerid][pMuebles][8] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 9.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][9] == -1)
	        {
				Info[playerid][pMuebles][9] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 10.");
				return 1;
			}
   			else if(Info[playerid][pMuebles][10] == -1)
	        {
				Info[playerid][pMuebles][10] = modelid;
				SendClientMessageEx(playerid, COLOR_GREY, "¡Has comprado un nuevo mueble! para ponerlo en tu casa utiliza /ajustarcasa.");
				SendClientMessageEx(playerid, COLOR_GREY, " - El mueble ha sido guardado en la ranura 11.");
				return 1;
			} else return SendClientMessageEx(playerid, -1, "No tienes más espacio");

   		}
	}*/
	//*********************
	if(listid == bars)// Esta es la colocación de barreras. (/bar).
	{
		if(response) // CMD:bar.
		{
			// Creación de la barrera In Game. ShowModelSelectionMenu(playerid, skinactores, "...");
			new string[128], Float:Position[4];
			for(new i; i <MAX_BARRICADES; i++)
			{
				if(Barricade[i] == 0)
				{
					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					GetPlayerFacingAngle(playerid, Position[3]);
					Barricade[i] = CreateDynamicObject(modelid, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0);
					SetPlayerPos(playerid, Position[0]-0.5, Position[1]+0.8, Position[2]+2.5);
					EditDynamicObject(playerid, Barricade[i]);
					SetPVarInt(playerid, "BAR_EDIT", 1);
					BarObject[playerid] = modelid; ObjectBar[playerid] = Barricade[i];
					/////////////////////////////////////////////////////////////////////////
					new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(playerid, zone, sizeof(zone));
					SendClientMessageEx(playerid, COLOR_YELLOW, "[Aviso] Usa la tecla [Espacio] para ajustar la barrera, una vez lo hagas, presiona [Guardar].");
					format(string, sizeof(string), "Has creado una barricada en %s. Usa /qb para eliminarla.", zone);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					return 1;
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY,"[Información]: Has cancelado la colocación de la barrera.");
		return 1;
	}
	if(listid == skinactores)// Esta es la compra de la ropa.
	{
		if(response)
		{
			new Float:pos[4];
			GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
			GetPlayerFacingAngle(playerid, pos[3]);
			SetTimerEx("CrearActor", 5000, false, "ddffff", playerid, modelid, pos[0], pos[1], pos[2], pos[3]);
			SendClientMessage(playerid,0x00C200FF,"[Info]:{FFFFFF} Espera 5 segundos mientras se crea el actor.");
		}
		else SendClientMessage(playerid,0x00C200FF,"[Info]:{FFFFFF} Has cancelado la creacion de actor.");
		return 1;
	}
	if(listid == skinlist)
	{
		if(response)
		{
		    if(casaid == -1)
		    {
		        if(CheckMoney(playerid,100))
		        {
                    if(modelid >= 274 && modelid <= 288 || modelid >= 265 && modelid <= 267 || modelid == 71)
					{
						SendClientMessage(playerid, 0xFF0000FF, "Skin no permitida");
						return 1;
					}
					SendClientMessage(playerid, 0xFF0000FF, "Skin Cambiada, costo 100$");
                    Info[playerid][pChar] = modelid;
					Info[playerid][pModel] = modelid;
					SetPlayerSkin(playerid, Info[playerid][pChar]);
 					GivePlayerCash(playerid,-100);
 					if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 100);}
 					return 1;
		        }
		    }
		    else
		    {
				if(CheckMoney(playerid,50))
				{
		        	if(casaid == -1)
		            {
		        		Info[playerid][pChar] = modelid;
		      			SetPlayerSkin(playerid, Info[playerid][pChar]);
		      			SendClientMessage(playerid, -1, "{FFFFFF}Atención: no tienes ({BE81F7}ropero{FFFFFF}) en donde guardar la ropa, te la llevas puesta.");
		      			SendClientMessage(playerid, 0xFF0000FF, "Skin Cambiada, costo 50$");
		      		}
					if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 50);}
		        	Bought(playerid, 50);
    				if(casaid != -1)
					{
						EstaComprandoRopa[playerid] = 1;
						RopaElegida[playerid] = modelid;
						new slot1casa = ProInfo[casaid][hSlotRopero1];
						new slot2casa = ProInfo[casaid][hSlotRopero2];
						new slot3casa = ProInfo[casaid][hSlotRopero3];
						new slot4casa = ProInfo[casaid][hSlotRopero4];
						new slot5casa = ProInfo[casaid][hSlotRopero5];
						new slot6casa = ProInfo[casaid][hSlotRopero6];
						new slot7casa = ProInfo[casaid][hSlotRopero7];
						new slot8casa = ProInfo[casaid][hSlotRopero8];
						new slot9casa = ProInfo[casaid][hSlotRopero9];
						new slot10casa = ProInfo[casaid][hSlotRopero10];
						new string[128];
						format(string, sizeof(string), "- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\n- Skin: %d\nLlevar la ropa puesta", slot1casa, slot2casa, slot3casa, slot4casa, slot5casa, slot6casa, slot7casa, slot8casa, slot9casa, slot10casa);
    					ShowPlayerDialog(playerid, DIALOG_ROPEROMENU, DIALOG_STYLE_LIST, "Ropero", string, "Aceptar", "");
    				}
				}
			}
		}
	}
	/*if(listid == skinlist)
	{
	    if(response)
	    {
      	if(modelid >= 274 && modelid <= 288 || modelid >= 265 && modelid <= 267 || modelid == 71)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Skin no permitida");
			return 1;
		}
		SendClientMessage(playerid, 0xFF0000FF, "Skin Cambiada, costo 100$");
  		SetPlayerSkin(playerid, modelid);
 		GivePlayerCash(playerid,-100);
 		if(GetPlayerVirtualWorld(playerid) != 0) {InfoGanancias(GetPlayerVirtualWorld(playerid), 100);}
 		//TillEx(2, 100); // Ropa.
	  	}
	 	else SendClientMessage(playerid, 0xFF0000FF, "Cancelaste la selección de skin");
    	return 1;
	}*/
	return 1;
}
public Clock(playerid)
{
    new string[256];
    new string2[256];
    new year, month, day;
    new hour, minute, second;
    getdate(year, month, day);
    gettime(hour,minute,second);
    new mtext[20];
    getdate(year, month, day);
    if(month == 1) { mtext = "Enero"; }
    else if(month == 2) { mtext = "Febrero"; }
    else if(month == 3) { mtext = "Marzo"; }
    else if(month == 4) { mtext = "Abril"; }
    else if(month == 5) { mtext = "Mayo"; }
    else if(month == 6) { mtext = "Junio"; }
    else if(month == 7) { mtext = "Julio"; }
    else if(month == 8) { mtext = "Agosto"; }
    else if(month == 9) { mtext = "Septiembre"; }
    else if(month == 10) { mtext = "Octubre"; }
    else if(month == 11) { mtext = "Noviembre"; }
    else if(month == 12) { mtext = "Diciembre"; }
    format(string, sizeof(string), "%d de %s del %d", day, mtext, year);
    TextDrawSetString(Text:FechaD, string);
    format(string2, sizeof(string2), "%d:%d:%d", hour, minute, second);
    TextDrawSetString(Text:TiempoD, string2);
}
stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);
//*******************ADO[K]1NG*******************
stock ZlDisplay(playerid)
{
	TextDrawShowForPlayer(playerid, PRUEBA2);
	return 0;
}
stock BorrarZL(playerid)
{
TextDrawHideforPlayer(playerid, PRUEBA2);
return 0;
}
public ZL()
{
TextDrawSetString(PRUEBA2, ZLMensaje[random(sizeof(ZLMensaje))]);
return 0;
}
//**security**
public OnPlayerCleoDetected(playerid, cleoid)
{
#if defined AntiCleo 1
switch(cleoid)
{
case CLEO_CARWARP:
{
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por posible intento de Car Warp.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por FireSecurity. Razón: Posible Car Warp.", Nombre);
//SendClientMessageToAll(Gris, Texto);
ABroadCast(Gris, Texto,5000);
Kick(playerid);
}
case CLEO_CARSWING:
{
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por posible intento de Car Swing.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por FireSecurity. Razón: Posible Car Swing.", Nombre);
//SendClientMessageToAll(Gris, Texto);
ABroadCast(Gris, Texto,5000);
Kick(playerid);
}
case CLEO_CAR_PARTICLE_SPAM:
{
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Expulsado por posible intento de Cleo Spam.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido expulsado por FireSecurity. Razón: Posible Cleo Spam.", Nombre);
//SendClientMessageToAll(Gris, Texto);
ABroadCast(Gris, Texto,5000);
Kick(playerid);
}
}
#endif
return 1;
}
stock DetectarIP(IP[])
{
new Codigo = 0;
for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !strcmp(ObtenerIP(i), IP)) Codigo++;
return Codigo;
}
//==============================================================================
// Stock - ObtenerIP.
//==============================================================================
stock ObtenerIP(playerid)
{
new IP[16];
GetPlayerIp(playerid, IP, sizeof(IP));
return IP;
}
//==============================================================================
// Stock - BanearBots.
//==============================================================================
stock BanearBots(playerid)
{
#if defined AntiBot 1
new IP[32];
new Texto[256];
new Nombre[MAX_PLAYER_NAME];
new Menu[1024];
GetPlayerIp(playerid, IP, sizeof(IP));
for(new i = 0, PingUp = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && !BotServidor[i])
{
PingUp = GetPlayerPing(i);
if(i == playerid || !strcmp(IP, ObtenerIP(i)) || PingUp <= 0 || PingUp >= 50000)
{
Menu[0]='\0';
strcat(Menu, "{FFFFFF} Baneado por intento de Bot.  \n", 1024);
ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - FireSecurity: ", Menu, "Aceptar", "Cerrar") ;
GetPlayerName(playerid, Nombre, sizeof(Nombre));
format(Texto, sizeof(Texto), "[<!>] %s ha sido baneado por FireSecurity. Razón: Posible Bot.", Nombre);
SendClientMessageToAll(Gris, Texto);
BanEx(playerid, "[<!>] Baneado por intento de Bot.");
if(Barra[i] != -1)
{
KillTimer(Barra[i]);
Barra[i] = -1;
}
}
}
format(IP, sizeof(IP), "banip %s", IP);
return SendRconCommand(IP);
#endif
}
//==============================================================================
// Stock - IDMayor.
//==============================================================================
stock IDMayor(exceptof = INVALID_PLAYER_ID)
{
new MaxID = 0;
for(new i = 0; i < MAX_PLAYERS; i++) if(IsPlayerConnected(i) && i != exceptof && i > MaxID) MaxID = i;
return MaxID;
}
//==============================================================================
// Stock - AutoProhibido.
//==============================================================================
stock AutoProhibido(playerid)
{
new Auto = GetPlayerVehicleID(playerid);
#define MAX_INVALID_NOS_VEHICLES 52
new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
{
581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 417, 425, 469, 487, 512, 520, 563, 593,
509, 481, 510, 472, 473, 493, 520, 595, 484, 430, 453, 432, 476, 497, 513, 533, 577,
452, 446, 447, 454, 590, 569, 537, 538, 570, 449, 519, 460, 488, 511, 519, 548, 592
};
if(IsPlayerInAnyVehicle(playerid))
{
for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
{
if(GetVehicleModel(Auto) == InvalidNosVehicles[i]) return true;
}
}
return false;
}
//==============================================================================
// Stock - AutoCrash.
//==============================================================================
stock AutoCrash(modelid, componentid)
{
if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
return true;

switch (modelid)
{
case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
case 409: return (componentid == 1009);
case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
case 506: return (componentid == 1009);
case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
}
return false;
}
//==============================================================================
// Stock - ArmaProhibida.
//==============================================================================
stock ArmaProhibida(playerid)
{
new Arma = GetPlayerWeapon(playerid);
if( Arma == 44|| Arma == 45)
{
return true;
}
return false;
}
// © SkyStudios SA-MP: Todos los derechos reservados.
//************
public Camara()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	if(camaraon[i] > 0 && IsPlayerInAnyVehicle(i))
	{
		AttachObjectToVehicle(FPS[i], GetPlayerVehicleID(i), 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
    	AttachCameraToObject(i, FPS[i]);
	}
	else if(camaraon[i] > 0 && !IsPlayerInAnyVehicle(i))
	{
		AttachObjectToPlayer(FPS[i], i, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
    	AttachCameraToObject(i, FPS[i]);
	}
	}
	return 1;
}
stock DetectarSpam(SPAM[])
{
    new SSPAM;
    new CUENTAP,CUENTAN,CUENTAW,CUENTADP,CUENTAGB;
	for(SSPAM = 0; SSPAM < strlen(SPAM); SSPAM ++)
	{
	    if(SPAM[SSPAM] == '.') CUENTAP ++; //Cuenta los Puntos
	    if(SPAM[SSPAM] == '0' || SPAM[SSPAM] == '1' || SPAM[SSPAM] == '2' || SPAM[SSPAM] == '3' || SPAM[SSPAM] == '4' || SPAM[SSPAM] == '5' || SPAM[SSPAM] == '6' || SPAM[SSPAM] == '7' || SPAM[SSPAM] == '8' || SPAM[SSPAM] == '9') CUENTAN ++; //Cuenta los Numeros
	    if(SPAM[SSPAM] == 'w' || SPAM[SSPAM] == 'W') CUENTAW ++; //Cuenta las "W"
	    if(SPAM[SSPAM] == ':') CUENTADP ++; //Cuenta los ":"
	    if(SPAM[SSPAM] == '_') CUENTAGB ++; //Cuenta los "_"
	}
 	if(CUENTAP >= 3 && CUENTAN >= 4) return 1;
 	if(CUENTAW >= 3) return 1;
 	if(CUENTAN >= 3) return 1;
 	if(CUENTAGB >= 2 && CUENTAN >= 3) return 1;
 	if(strfind(SPAM, ".com", true) != -1 || strfind(SPAM, ".com.ar", true) != -1 || strfind(SPAM, ".org", true) != -1 || strfind(SPAM, ".net", true) != -1 || strfind(SPAM, ".es", true) != -1 || strfind(SPAM, ".tk", true) != -1) return 1;
 	if(CUENTADP >= 1 && CUENTAN >= 4) return 1;
 	return 0;
}
//***sistema muebles***
/*stock ColocarMueblesCasas(){
   	for(new MueblesI = 1; MueblesI < sizeof(HouseInfo); MueblesI++){
	   	if(HouseInfo[MueblesI][hMuebles][0] > 0){
	    HouseInfo[MueblesI][hMuebleId][0] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][0], HouseInfo[MueblesI][hMueblesPOSX][0], HouseInfo[MueblesI][hMueblesPOSY][0], HouseInfo[MueblesI][hMueblesPOSZ][0], HouseInfo[MueblesI][hMueblesPOSRx][0], HouseInfo[MueblesI][hMueblesPOSRy][0], HouseInfo[MueblesI][hMueblesPOSRz][0], HouseInfo[MueblesI][hMuebleVW][0], HouseInfo[MueblesI][hMuebleINT][0], -1, 200.0);
		}
		if(HouseInfo[MueblesI][hMuebles][1] > 0){
		HouseInfo[MueblesI][hMuebleId][1] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][1], HouseInfo[MueblesI][hMueblesPOSX][1], HouseInfo[MueblesI][hMueblesPOSY][1], HouseInfo[MueblesI][hMueblesPOSZ][1], HouseInfo[MueblesI][hMueblesPOSRx][1], HouseInfo[MueblesI][hMueblesPOSRy][1], HouseInfo[MueblesI][hMueblesPOSRz][1], HouseInfo[MueblesI][hMuebleVW][1], HouseInfo[MueblesI][hMuebleINT][1], -1, 200.0);
		}
	 	if(HouseInfo[MueblesI][hMuebles][2] > 0){
		HouseInfo[MueblesI][hMuebleId][2] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][2], HouseInfo[MueblesI][hMueblesPOSX][2], HouseInfo[MueblesI][hMueblesPOSY][2], HouseInfo[MueblesI][hMueblesPOSZ][2], HouseInfo[MueblesI][hMueblesPOSRx][2], HouseInfo[MueblesI][hMueblesPOSRy][2], HouseInfo[MueblesI][hMueblesPOSRz][2], HouseInfo[MueblesI][hMuebleVW][2], HouseInfo[MueblesI][hMuebleINT][2], -1, 200.0);
		}
	 	if(HouseInfo[MueblesI][hMuebles][3] > 0){
		HouseInfo[MueblesI][hMuebleId][3] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][3], HouseInfo[MueblesI][hMueblesPOSX][3], HouseInfo[MueblesI][hMueblesPOSY][3], HouseInfo[MueblesI][hMueblesPOSZ][3], HouseInfo[MueblesI][hMueblesPOSRx][3], HouseInfo[MueblesI][hMueblesPOSRy][3], HouseInfo[MueblesI][hMueblesPOSRz][3], HouseInfo[MueblesI][hMuebleVW][3], HouseInfo[MueblesI][hMuebleINT][3], -1, 200.0);
		}
		if(HouseInfo[MueblesI][hMuebles][4] > 0){
		HouseInfo[MueblesI][hMuebleId][4] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][4], HouseInfo[MueblesI][hMueblesPOSX][4], HouseInfo[MueblesI][hMueblesPOSY][4], HouseInfo[MueblesI][hMueblesPOSZ][4], HouseInfo[MueblesI][hMueblesPOSRx][4], HouseInfo[MueblesI][hMueblesPOSRy][4], HouseInfo[MueblesI][hMueblesPOSRz][4], HouseInfo[MueblesI][hMuebleVW][4], HouseInfo[MueblesI][hMuebleINT][4], -1, 200.0);
		}
		if(HouseInfo[MueblesI][hMuebles][5] > 0){
	 	HouseInfo[MueblesI][hMuebleId][5] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][5], HouseInfo[MueblesI][hMueblesPOSX][5], HouseInfo[MueblesI][hMueblesPOSY][5], HouseInfo[MueblesI][hMueblesPOSZ][5], HouseInfo[MueblesI][hMueblesPOSRx][5], HouseInfo[MueblesI][hMueblesPOSRy][5], HouseInfo[MueblesI][hMueblesPOSRz][5], HouseInfo[MueblesI][hMuebleVW][5], HouseInfo[MueblesI][hMuebleINT][5], -1, 200.0);
		}
	 	if(HouseInfo[MueblesI][hMuebles][6] > 0){
		HouseInfo[MueblesI][hMuebleId][6] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][6], HouseInfo[MueblesI][hMueblesPOSX][6], HouseInfo[MueblesI][hMueblesPOSY][6], HouseInfo[MueblesI][hMueblesPOSZ][6], HouseInfo[MueblesI][hMueblesPOSRx][6], HouseInfo[MueblesI][hMueblesPOSRy][6], HouseInfo[MueblesI][hMueblesPOSRz][6], HouseInfo[MueblesI][hMuebleVW][6], HouseInfo[MueblesI][hMuebleINT][6], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][7] > 0){
		HouseInfo[MueblesI][hMuebleId][7] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][7], HouseInfo[MueblesI][hMueblesPOSX][7], HouseInfo[MueblesI][hMueblesPOSY][7], HouseInfo[MueblesI][hMueblesPOSZ][7], HouseInfo[MueblesI][hMueblesPOSRx][7], HouseInfo[MueblesI][hMueblesPOSRy][7], HouseInfo[MueblesI][hMueblesPOSRz][7], HouseInfo[MueblesI][hMuebleVW][7], HouseInfo[MueblesI][hMuebleINT][7], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][8] > 0){
		HouseInfo[MueblesI][hMuebleId][8] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][8], HouseInfo[MueblesI][hMueblesPOSX][8], HouseInfo[MueblesI][hMueblesPOSY][8], HouseInfo[MueblesI][hMueblesPOSZ][8], HouseInfo[MueblesI][hMueblesPOSRx][8], HouseInfo[MueblesI][hMueblesPOSRy][8], HouseInfo[MueblesI][hMueblesPOSRz][8], HouseInfo[MueblesI][hMuebleVW][8], HouseInfo[MueblesI][hMuebleINT][8], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][9] > 0){
		HouseInfo[MueblesI][hMuebleId][9] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][9], HouseInfo[MueblesI][hMueblesPOSX][9], HouseInfo[MueblesI][hMueblesPOSY][9], HouseInfo[MueblesI][hMueblesPOSZ][9], HouseInfo[MueblesI][hMueblesPOSRx][9], HouseInfo[MueblesI][hMueblesPOSRy][9], HouseInfo[MueblesI][hMueblesPOSRz][9], HouseInfo[MueblesI][hMuebleVW][9], HouseInfo[MueblesI][hMuebleINT][9], -1, 200.0);
		}
 		if(HouseInfo[MueblesI][hMuebles][10] > 0){
		HouseInfo[MueblesI][hMuebleId][10] = CreateDynamicObject(HouseInfo[MueblesI][hMuebles][10], HouseInfo[MueblesI][hMueblesPOSX][10], HouseInfo[MueblesI][hMueblesPOSY][10], HouseInfo[MueblesI][hMueblesPOSZ][10], HouseInfo[MueblesI][hMueblesPOSRx][10], HouseInfo[MueblesI][hMueblesPOSRy][10], HouseInfo[MueblesI][hMueblesPOSRz][10], HouseInfo[MueblesI][hMuebleVW][10], HouseInfo[MueblesI][hMuebleINT][10], -1, 200.0);
		}
	}
}*/

/*function SituarObjetoCASAARCH(playerid, houseid, idobjetom, IDOBJETOUS, Float: X,Float: Y,Float: Z,Float: rX,Float: rY,Float: rZ, IDSLOT)
{
	Info[playerid][pMuebles][IDSLOT] = -1;
	HouseInfo[houseid][hMuebles][idobjetom] = IDOBJETOUS;
	HouseInfo[houseid][hMueblesPOSX][idobjetom] = X;
 	HouseInfo[houseid][hMueblesPOSY][idobjetom] = Y;
	HouseInfo[houseid][hMueblesPOSZ][idobjetom] = Z;
	HouseInfo[houseid][hMueblesPOSRx][idobjetom] = rX;
	HouseInfo[houseid][hMueblesPOSRy][idobjetom] = rY;
	HouseInfo[houseid][hMueblesPOSRz][idobjetom] = rZ;
	return 1;
}

function PonerNuevoMueble(playerid, houseid, IDSLOT)
{
	HouseInfo[houseid][hMuebleId][IDSLOT] = CreateDynamicObject(HouseInfo[houseid][hMuebles][IDSLOT], HouseInfo[houseid][hMueblesPOSX][IDSLOT], HouseInfo[houseid][hMueblesPOSY][IDSLOT], HouseInfo[houseid][hMueblesPOSZ][IDSLOT], HouseInfo[houseid][hMueblesPOSRx][IDSLOT], HouseInfo[houseid][hMueblesPOSRy][IDSLOT], HouseInfo[houseid][hMueblesPOSRz][IDSLOT], HouseInfo[houseid][hMuebleVW][IDSLOT], HouseInfo[houseid][hMuebleINT][IDSLOT], -1, 200.0);
	return 1;
}
function GuardarmuebleUserCASA(playerid, CASA){
    for(new SLOTS = 0; SLOTS< 7 ; SLOTS++){
		if(Info[playerid][pMuebles][SLOTS] < 1){
			if(HouseInfo[CASA][hMuebles][0] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][0];
	  			HouseInfo[CASA][hMuebles][0] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][0]);
	  		}
			else if(HouseInfo[CASA][hMuebles][1] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][1];
	  			HouseInfo[CASA][hMuebles][1] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][0]);
	  		}
			else if(HouseInfo[CASA][hMuebles][2] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][2];
	  			HouseInfo[CASA][hMuebles][2] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][2]);
	  		}
			else if(HouseInfo[CASA][hMuebles][3] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][3];
	  			HouseInfo[CASA][hMuebles][3] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][3]);
	  		}
			else if(HouseInfo[CASA][hMuebles][4] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][4];
	  			HouseInfo[CASA][hMuebles][4] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][4]);
	  		}
			else if(HouseInfo[CASA][hMuebles][5] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][5];
	  			HouseInfo[CASA][hMuebles][5] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][5]);
	  		}
			else if(HouseInfo[CASA][hMuebles][6] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][6];
	  			HouseInfo[CASA][hMuebles][6] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][6]);
	  		}
			else if(HouseInfo[CASA][hMuebles][7] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][7];
	  			HouseInfo[CASA][hMuebles][7] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][7]);
	  		}
			else if(HouseInfo[CASA][hMuebles][8] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][8];
	  			HouseInfo[CASA][hMuebles][8] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][8]);
	  		}
			else if(HouseInfo[CASA][hMuebles][9] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][9];
	  			HouseInfo[CASA][hMuebles][9] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][9]);
	  		}
			else if(HouseInfo[CASA][hMuebles][10] > 0){
				Info[playerid][pMuebles][SLOTS] = HouseInfo[CASA][hMuebles][10];
	  			HouseInfo[CASA][hMuebles][10] = -1;
	  	 		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][10]);
	  		}
 		}
	}
   	SendClientMessageEx(playerid, COLOR_GREY, "Los muebles de la casa han sido guardados en las ranuras disponibles.");
	return 1;
}

function GuardarmuebleUser(playerid, CASA, IDSLOT)
{
	if(Info[playerid][pMuebles][0] < 1)
	{
		Info[playerid][pMuebles][0] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 1 de tus muebles");
  		return 1;
	}
   	else if(Info[playerid][pMuebles][1] < 1)
 	{
		Info[playerid][pMuebles][1] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 2 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][2] < 1)
 	{
		Info[playerid][pMuebles][2] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 3 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][3] < 1)
 	{
		Info[playerid][pMuebles][3] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 4 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][4] < 1)
 	{
		Info[playerid][pMuebles][4] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 5 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][5] < 1)
 	{
		Info[playerid][pMuebles][5] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessage(playerid, COLOR_GREY, "Mueble guardado en la ranura 6 de tus muebles");
  		return 1;
   	}
	else if(Info[playerid][pMuebles][6] < 1)
 	{
		Info[playerid][pMuebles][6] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 7 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][7] < 1)
 	{
		Info[playerid][pMuebles][7] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 8 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][8] < 1)
 	{
		Info[playerid][pMuebles][8] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 9 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][9] < 1)
 	{
		Info[playerid][pMuebles][9] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 10 de tus muebles");
   	}
	else if(Info[playerid][pMuebles][10] < 1)
 	{
		Info[playerid][pMuebles][10] = HouseInfo[CASA][hMuebles][IDSLOT];
  		HouseInfo[CASA][hMuebles][IDSLOT] = -1;
  		DestroyDynamicObject(HouseInfo[CASA][hMuebleId][IDSLOT]);
  		SendClientMessageEx(playerid, COLOR_GREY, "Mueble guardado en la ranura 11 de tus muebles");
   	}
   	else SendClientMessageEx(playerid, COLOR_GREY, "No tienes espacio para guardar más muebles.");
	return 1;
}

stock InfoCasaMuebles(playerid)
{
	SendClientMessageEx(playerid, -1, "{BFE44E}- INFORMACIÓN SOBRE MUEBLES.");
	SendClientMessageEx(playerid, -1, "{BFE44E}» {FFFFFF}HIT: Presiona {BFE44E}'ESPACIO' {FFFFFF}para cambiar la posición de la cámara para la edición.");
	SendClientMessageEx(playerid, -1, "{BFE44E}» {FFFFFF}HIT: Presiona {BFE44E}'ESQ' {FFFFFF}para cancelar y no poner el mueble.");
	SendClientMessageEx(playerid, -1, "{BFE44E}» {FFFFFF}HIT: Presiona el ícono de guardar para terminar la edición y ponerlo o las felchas para moverlo.");
}*/
function CrearActor(playerid, Skin, Float:X, Float:Y, Float:Z, Float:A) // Sistema de Actores, /crearactor.
{
	new string[256];
	format(string,sizeof string, "CreateActor(%d, %f, %f, %f, %f);",Skin, X, Y, Z, A);
	Log_Write("LOGS/Actors.txt", string);
	CreateActor(Skin, X,Y,Z,A);
	SendClientMessage(playerid,0x00C200FF,"[Info]:{FFFFFF} Actor creado correctamente.");
}
stock Log_Write(const path[], const str[], {Float,_}:...)
{
static args,start,end,File:file,string[1024];
if ((start = strfind(path, "/")) != -1) {
strmid(string, path, 0, start + 1);
if (!fexist(string))
return printf("¡Error! Directorio \"%s\" No existe.", string);
}
#emit LOAD.S.pri 8
#emit STOR.pri args

file = fopen(path, io_append);

if (!file) return 0;

if (args > 8){
#emit ADDR.pri str
#emit STOR.pri start

for (end = start + (args - 8); end > start; end -= 4)
{
#emit LREF.pri end
#emit PUSH.pri
}
#emit PUSH.S str
#emit PUSH.C 1024
#emit PUSH.C string
#emit PUSH.C args
#emit SYSREQ.C format

fwrite(file, string);
fwrite(file, "\r\n");
fclose(file);

#emit LCTRL 5
#emit SCTRL 4
#emit RETN
}
fwrite(file, str);
fwrite(file, "\r\n");
fclose(file);

return 1;
}
/*public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_UPDATE) return 1;
    if(response == EDIT_RESPONSE_FINAL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(spraytag_object[playerid]);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[S:RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 2);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(spraytag_object[playerid]);
		}
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 2)
		{
			new
				iIndex = spraytag_slot[playerid]
			;

			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
				SprayTag_Spawn(playerid, iIndex);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[S:RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 1);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
		}
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") >= 1)
		{
			DestroyDynamicObject(spraytag_object[playerid]);
			DestroyDynamicObject(SprayTags[playerid][spraytag_slot[playerid]][_spObject]);
			SprayTag_Spawn(playerid, spraytag_slot[playerid]);
			DeletePVar(playerid, "SPRAYTAG_EDIT");
		}
	}
	return 1;
}*/
/*public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_UPDATE) return 1;
	//new ini[64];
	//new key[24];
	for(new hID = 0; hID < MAX_HOUSES; hID ++)
	{
		for(new i = 0; i < MAX_FURNITURE; i ++)
		{
			if(objectid == HouseInfo[hID][FurnitureObj][i])
			{
				if(response) // Clicked on the save icon
				{
					format(ini, 64, HOUSE_FILE, hID);
	   				new INI:File = INI_Open(ini);
	    			INI_SetTag(File,"HouseData");
					HouseInfo[hID][FPosX][i] = x; HouseInfo[hID][FPosY][i] = y; HouseInfo[hID][FPosZ][i] = z;
					HouseInfo[hID][FRotX][i] = rx; HouseInfo[hID][FRotY][i] = ry; HouseInfo[hID][FRotZ][i] = rz;
					format(key, 24, "FPosX%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FPosX][i]);
					format(key, 24, "FPosY%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FPosY][i]);
					format(key, 24, "FPosZ%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FPosZ][i]);
					format(key, 24, "FRotX%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FRotX][i]);
					format(key, 24, "FRotY%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FRotY][i]);
					format(key, 24, "FRotZ%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FRotZ][i]);

					SetDynamicObjectPos(objectid, HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i]);
					SetDynamicObjectRot(objectid, HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i]);
					INI_Close(File);
				}
				else // Pressed ESC
				{
					SetDynamicObjectPos(objectid, HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i]);
					SetDynamicObjectRot(objectid, HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i]);
				}
				break;
			}
		}
	}
    if(response == EDIT_RESPONSE_FINAL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(spraytag_object[playerid]);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[SA:RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 2);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(spraytag_object[playerid]);
		}
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 2)
		{
			new
				iIndex = spraytag_slot[playerid]
			;

			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
				SprayTag_Spawn(playerid, iIndex);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[SA:RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 1);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
		}
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") >= 1)
		{
			DestroyDynamicObject(spraytag_object[playerid]);
			DestroyDynamicObject(SprayTags[playerid][spraytag_slot[playerid]][_spObject]);
			SprayTag_Spawn(playerid, spraytag_slot[playerid]);
			DeletePVar(playerid, "SPRAYTAG_EDIT");
		}
	}
	return 1;
}*/
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_UPDATE) return 1;
	new ini[64];
	new key[24];
	for(new hID = 0; hID < MAX_PROPIEDADES; hID ++)
	{
		for(new i = 0; i < MAX_FURNITURE; i ++)
		{
			if(objectid == ProInfo[hID][FurnitureObj][i])
			{
				if(response) // Clicked on the save icon
				{
					format(ini, 64, PROPIEDADES_FILE, hID);
	   				new INI:File = INI_Open(ini);
	    			INI_SetTag(File,"PropiedadData");
					ProInfo[hID][FPosX][i] = x; ProInfo[hID][FPosY][i] = y; ProInfo[hID][FPosZ][i] = z;
					ProInfo[hID][FRotX][i] = rx; ProInfo[hID][FRotY][i] = ry; ProInfo[hID][FRotZ][i] = rz;
					format(key, 24, "FPosX%d", i); INI_WriteFloat(File,key, ProInfo[hID][FPosX][i]);
					format(key, 24, "FPosY%d", i); INI_WriteFloat(File,key, ProInfo[hID][FPosY][i]);
					format(key, 24, "FPosZ%d", i); INI_WriteFloat(File,key, ProInfo[hID][FPosZ][i]);
					format(key, 24, "FRotX%d", i); INI_WriteFloat(File,key, ProInfo[hID][FRotX][i]);
					format(key, 24, "FRotY%d", i); INI_WriteFloat(File,key, ProInfo[hID][FRotY][i]);
					format(key, 24, "FRotZ%d", i); INI_WriteFloat(File,key, ProInfo[hID][FRotZ][i]);

					SetDynamicObjectPos(objectid, ProInfo[hID][FPosX][i], ProInfo[hID][FPosY][i], ProInfo[hID][FPosZ][i]);
					SetDynamicObjectRot(objectid, ProInfo[hID][FRotX][i], ProInfo[hID][FRotY][i], ProInfo[hID][FRotZ][i]);
					INI_Close(File);
				}
				else // Pressed ESC
				{
					SetDynamicObjectPos(objectid, ProInfo[hID][FPosX][i], ProInfo[hID][FPosY][i], ProInfo[hID][FPosZ][i]);
					SetDynamicObjectRot(objectid, ProInfo[hID][FRotX][i], ProInfo[hID][FRotY][i], ProInfo[hID][FRotZ][i]);
				}
				break;
			}
		}
	}
    if(response == EDIT_RESPONSE_FINAL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(spraytag_object[playerid]);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[INFRA-RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 2);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(spraytag_object[playerid]);
		}
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 2)
		{
			new
				iIndex = spraytag_slot[playerid]
			;

			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
				SprayTag_Spawn(playerid, iIndex);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[INFRA-RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 1);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
		}
		if(GetPVarInt(playerid, "BAR_EDIT") == 1 && BarObject[playerid] != 0)
		{
		
  			DestroyDynamicObject(ObjectBar[playerid]);
			DeletePVar(playerid, "BAR_EDIT");
			ObjectBar[playerid] = CreateDynamicObject(BarObject[playerid], x, y, z, rx, ry, rz);
			BarObject[playerid] = 0;
			/*new Float:Position[3];
			for(new i; i <MAX_BARRICADES; i++)
			{
				GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3.5, Position[0], Position[1], Position[2]))
				{
                    DestroyDynamicObject(Barricade[i]);
					DeletePVar(playerid, "BAR_EDIT");
					Barricade[i] = CreateDynamicObject(BarObject[playerid], x, y, z, rx, ry, rz);
					//BarObject[playerid] = 0;
					return 1;
				}
			}*/
		}
		
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") >= 1)
		{
			DestroyDynamicObject(spraytag_object[playerid]);
			DestroyDynamicObject(SprayTags[playerid][spraytag_slot[playerid]][_spObject]);
			SprayTag_Spawn(playerid, spraytag_slot[playerid]);
			DeletePVar(playerid, "SPRAYTAG_EDIT");
		}
		if(GetPVarInt(playerid, "BAR_EDIT") == 1)
		{
			DeletePVar(playerid, "BAR_EDIT"); BarObject[playerid] = 0; print("Edición del Objeto cancelado.");
		}
	}
	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ) // Nueva POS.
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ; // Antigua POS.
	GetObjectPos(objectid, oldX, oldY, oldZ); // Obtener posición antigua.
	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ); // Obtener rotación antigua.
	if(!playerobject) // If this is a global object, sync the position for other players.
	{
	    if(!IsValidObject(objectid)) return 1;
	    SetObjectPos(objectid, fX, fY, fZ);
     	SetObjectRot(objectid, fRotX, fRotY, fRotZ);
     	print("Objeto ajustado a todos los players conectados.");
	}
	if(response == EDIT_RESPONSE_FINAL)
	{
		//Barricade[i] = CreateObject(modelid, fX, fY, fZ, 0.0, 0.0, fRotZ);
		print("Objeto guardado.");
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		//The player cancelled, so put the object back to it's old position
		if(!playerobject) //Object is not a playerobject
		{
			SetObjectPos(objectid, oldX, oldY, oldZ);
			SetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			print("Objeto cancelado para todos los players.");
		}
		else
		{
			SetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);
			SetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);
			print("Objeto cancelado para un único usuario.");
		}
		CancelEdit(playerid);
	}
	return 1;
}
/*public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
			new Float:oldX, Float:oldY, Float:oldZ,
	        Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	    	GetObjectPos(objectid, oldX, oldY, oldZ);
	    	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			//new OVW, OINT;

		    if(!playerobject)
		    {
		        if(!IsValidObject(objectid)) return;
		        MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
		    }


        if(response == EDIT_RESPONSE_FINAL)
        {
           	new house = Info[playerid][pPhousekey];
			if(ObjetoUsarEnCasa[playerid] == 1)
			{
				if(HouseInfo[house][hMuebles][0] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][0] = OINT;
				HouseInfo[house][hMuebleVW][0] = OVW;

 				SituarObjetoCASAARCH(playerid, house, 0, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 0);
				}
				else if(HouseInfo[house][hMuebles][1] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][1] = OINT;
				HouseInfo[house][hMuebleVW][1] = OVW;

	    		+(playerid, house, 1, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 1);
				}
				else if(HouseInfo[house][hMuebles][2] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][2] = OINT;
				HouseInfo[house][hMuebleVW][2] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 2, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 2);
				}
				else if(HouseInfo[house][hMuebles][3] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][3] = OINT;
				HouseInfo[house][hMuebleVW][3] = OVW;

    		 	SituarObjetoCASAARCH(playerid, house, 3, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 3);
				}
				else if(HouseInfo[house][hMuebles][4] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][4] = OINT;
				HouseInfo[house][hMuebleVW][4] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 4, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 4);
				}
				else if(HouseInfo[house][hMuebles][5] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][5] = OINT;
				HouseInfo[house][hMuebleVW][5] = OVW;

                SituarObjetoCASAARCH(playerid, house, 5, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 5);
				}
				else if(HouseInfo[house][hMuebles][6] <= 0)
	    		{
       			OVW = GetPlayerVirtualWorld(playerid);
                OINT = GetPlayerInterior(playerid);

               	HouseInfo[house][hMuebleINT][6] = OINT;
				HouseInfo[house][hMuebleVW][6] = OVW;

	    		SituarObjetoCASAARCH(playerid, house, 6, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);

                DestroyObject(Objeto_Por_Jugador[playerid]);
                PonerNuevoMueble(playerid, house, 6);
				}
				else if(HouseInfo[house][hMuebles][7] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][7] = OINT;
					HouseInfo[house][hMuebleVW][7] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 7, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 7);
				}
				else if(HouseInfo[house][hMuebles][8] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][8] = OINT;
					HouseInfo[house][hMuebleVW][8] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 8, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 8);
				}
				else if(HouseInfo[house][hMuebles][9] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][9] = OINT;
					HouseInfo[house][hMuebleVW][9] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 9, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 9);
				}
				else if(HouseInfo[house][hMuebles][10] <= 0)
	    		{
       				OVW = GetPlayerVirtualWorld(playerid);
                	OINT = GetPlayerInterior(playerid);
               		HouseInfo[house][hMuebleINT][10] = OINT;
					HouseInfo[house][hMuebleVW][10] = OVW;
	    			SituarObjetoCASAARCH(playerid, house, 10, IDObjetoUsar[playerid], oldX,oldY,oldZ,fRotX,fRotY,fRotZ, ObjetoUsar[playerid]);
                	DestroyObject(Objeto_Por_Jugador[playerid]);
                	PonerNuevoMueble(playerid, house, 10);
				}
            }
            //SaveHouses();
			//OnPlayerSavedStats(playerid);
			CancelEdit(playerid);
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
             //DestroyObject(Objeto_Por_Jugador[playerid]);
             CancelEdit(playerid);
        }
}*/
// System Furniture
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	CancelEdit(playerid);
	new hID = getPlayerHouseID(playerid);
	new title[64];
	for(new i = 0; i < MAX_FURNITURE; i++)
	{
		if(objectid == HouseInfo[hID][FurnitureObj][i])
		{
			SetPVarInt(playerid			,"ObjetcIDFur"	,i);
			format(title, sizeof(title) ,"Modelo ID - %d",HouseInfo[hID][FModel][i]);
			ShowPlayerDialog(playerid, DIALOG_EDITOBJECT,DIALOG_STYLE_LIST,title,"* Editar\n* Guardar\n* Vender","Seleccionar","Salir");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY,"* Has seleccionado un objeto que no es del sistema de objetos para casas.");
    return 1;
}
/*stock SaveFurniturePosition(houseid, furnid) // Furnid is the instance id of the furniture.
{
	new fname[64]; format(fname, 64, HOUSE_FILE, houseid);
	new key[32];
	new INI:File = INI_Open(fname);
	INI_SetTag(File,"HouseData");
	format(key, 24, "FPosX%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FPosX][furnid]);
	format(key, 24, "FPosY%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FPosY][furnid]);
	format(key, 24, "FPosZ%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FPosZ][furnid]);
	format(key, 24, "FRotX%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FRotX][furnid]);
	format(key, 24, "FRotY%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FRotY][furnid]);
	format(key, 24, "FRotZ%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FRotZ][furnid]);
	INI_Close(File);
	return 1;
}
stock ShowFurnitureMenu(playerid)
{
	//new string[64], money = GetPlayerCash(playerid);
	new titlestring[32], businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	format(titlestring, sizeof(titlestring), "%s",businessVariables[businessID][bName]);
	if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento, vuelve más tarde.");
    ShowPlayerDialog(playerid, DIALOG_BUY_FURNITURE, DIALOG_STYLE_LIST, titlestring, "Dormitorio\nComedor\nBaño\nLobby\nCocina\nElectrónica\nParedes\nOtros", "Comprar", "Cancelar");
	return 1;
}
stock BuyFurniture(playerid, houseid, modelid, price) // modelid is the furniture model id while fid is the instance id of a furniture.
{
	new fid = 0;
	while(fid < MAX_FURNITURE)
	{
		if(HouseInfo[houseid][FModel][fid] == INVALID_FURNITURE_ID) break;
		fid ++;
	}
	if(fid == MAX_FURNITURE || HouseInfo[houseid][FCount] >= MAX_FURNITURE) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes comprar más objetos para tu casa.");
	HouseInfo[houseid][FCount] += 1;
	HouseInfo[houseid][FModel][fid] = modelid;

	new fname[64]; format(fname, 64, HOUSE_FILE, houseid);
	new key[24];

	new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	//businessVariables[businessID][bGanancias] += price;
	//businessVariables[businessID][bStock]--;
    //SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bGanancias]);
    //SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	GivePlayerCash(playerid, -price);

	new INI:File = INI_Open(fname);
	INI_SetTag(File,"HouseData");
	INI_WriteInt(File,"FCount", HouseInfo[houseid][FCount]);
	format(key, 24, "FModel%d", fid); INI_WriteInt(File,key, HouseInfo[houseid][FModel][fid]);
	INI_Close(File);
	format(szDialog, sizeof(szDialog), "Objeto comprado!\nPrecio: $%d\n\nPuedes ver tus objetos comprados en el menú de tu casa usando\nel comando /casamenu > Muebles\n\n¿Continuar comprando?.",price);
	ShowPlayerDialog(playerid, DIALOG_FURNITURE_BOUGHT, DIALOG_STYLE_MSGBOX,"Información:",szDialog,"Continuar","Salir");
	return fid;
}*/
stock SaveFurniturePosition(houseid, furnid) // Furnid is the instance id of the furniture.
{
	new fname[64]; format(fname, 64, PROPIEDADES_FILE, houseid);
	new key[32];
	new INI:File = INI_Open(fname);
	INI_SetTag(File,"PropiedadData");
	format(key, 24, "FPosX%d", furnid); INI_WriteFloat(File,key, ProInfo[houseid][FPosX][furnid]);
	format(key, 24, "FPosY%d", furnid); INI_WriteFloat(File,key, ProInfo[houseid][FPosY][furnid]);
	format(key, 24, "FPosZ%d", furnid); INI_WriteFloat(File,key, ProInfo[houseid][FPosZ][furnid]);
	format(key, 24, "FRotX%d", furnid); INI_WriteFloat(File,key, ProInfo[houseid][FRotX][furnid]);
	format(key, 24, "FRotY%d", furnid); INI_WriteFloat(File,key, ProInfo[houseid][FRotY][furnid]);
	format(key, 24, "FRotZ%d", furnid); INI_WriteFloat(File,key, ProInfo[houseid][FRotZ][furnid]);
	INI_Close(File);
	return 1;
}
stock ShowFurnitureMenu(playerid)
{
	//new string[64], money = GetPlayerCash(playerid);
	new titlestring[32]; //businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	//format(titlestring, sizeof(titlestring), "%s",businessVariables[businessID][bName]);
	//if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento, vuelve más tarde.");
    ShowPlayerDialog(playerid, DIALOG_BUY_FURNITURE, DIALOG_STYLE_LIST, titlestring, "Dormitorio\nComedor\nBaño\nLobby\nCocina\nElectrónica\nParedes\nOtros", "Comprar", "Cancelar");
	return 1;
}
stock BuyFurniture(playerid, houseid, modelid, price) // modelid is the furniture model id while fid is the instance id of a furniture.
{
	new fid = 0;
	while(fid < MAX_FURNITURE)
	{
		if(ProInfo[houseid][FModel][fid] == INVALID_FURNITURE_ID) break;
		fid ++;
	}
	if(fid == MAX_FURNITURE || ProInfo[houseid][FCount] >= MAX_FURNITURE) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes comprar más objetos para tu casa.");
	ProInfo[houseid][FCount] += 1;
	ProInfo[houseid][FModel][fid] = modelid;

	new fname[64]; format(fname, 64, PROPIEDADES_FILE, houseid);
	new key[24];
	GivePlayerCash(playerid, -price);

	new INI:File = INI_Open(fname);
	INI_SetTag(File,"PropiedadData");
	INI_WriteInt(File,"FCount", ProInfo[houseid][FCount]);
	format(key, 24, "FModel%d", fid); INI_WriteInt(File,key, ProInfo[houseid][FModel][fid]);
	INI_Close(File);
	format(szDialog, sizeof(szDialog), ""COL_WHITE"Objeto comprado!\nPrecio: $%d\n\nPuedes ver tus objetos comprados en el menú de tu casa usando\nel comando /casamenu > Muebles\n\n¿Continuar comprando?.",price);
	ShowPlayerDialog(playerid, DIALOG_FURNITURE_BOUGHT, DIALOG_STYLE_MSGBOX,"Información:",szDialog,"Continuar","Salir");
	return fid;
}
getPlayerHouseID(const playerid)
{
	new x;
	new Nombre[MAX_PLAYER_NAME];
    while(x < MAX_PROPIEDADES)
	{
		if(strlen(ProInfo[x][hOwner]) >= 1)
		{
	        GetPlayerName(playerid, Nombre, sizeof(Nombre));
	        if(!strcmp(ProInfo[x][hOwner], Nombre, true)){return x;}
		}
		x++;
	}
    return 0;
}
stock BorrarCasaID(id)
{
	// Destrucción del texto + Pickup.
    DestroyDynamicPickup(ProInfo[id][hPickupID]);
	DestroyDynamic3DTextLabel(ProInfo[id][hTextID]);
	// Edición de textos. (Default al no estar creadas)
 	format(ProInfo[id][hDireccion], 256, "Sin Dirección.");
 	format(ProInfo[id][hOwner], MAX_PLAYER_NAME, "Nobody" );
 	ClearPropiedad(id); // Ropero. (SKINS)
	ClearRopero(id);// Armas - Drogas - Dinero.
	// EXTERIOR coordenadas.
	ProInfo[id][hExteriorX] = 0.0;
	ProInfo[id][hExteriorY] = 0.0;
	ProInfo[id][hExteriorZ] = 0.0;
	ProInfo[id][hExteriorR] = 0.0;
	ProInfo[id][hExteriorA] = 0.0;
	// INTERIOR coordenadas.
	ProInfo[id][hInteriorX] = 0.0;
	ProInfo[id][hInteriorY] = 0.0;
	ProInfo[id][hInteriorZ] = 0.0;
	ProInfo[id][hInteriorR] = 0.0;
	ProInfo[id][hInteriorA] = 0.0;
	// Información. (Interior + Custom)
	ProInfo[id][hHInteriorWorld] = 0;
	ProInfo[id][hCustomInterior] = 0;
	ProInfo[id][hCustomExterior] = 0;
	// Información. (Precio, nivel y cierre).
	ProInfo[id][hValue] = -1; // Si el valor de la casa es -1, no podrá ser comprada. (Si alguien usa /comprarcasa en una casa NO CREADA).
	ProInfo[id][hLevel] = 0;
	ProInfo[id][hLock] = 0;
	// Renta. (No disponible a rentar).
	ProInfo[id][hRentable] = 0;
	ProInfo[id][hRentFee] = 0;
	// Guardado de los cambios. (No se borran los objetos)
	savePropiedades(id);
}
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
//***Armas en la espalda**
stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return 0;
}

GetWeaponType(weaponid)
{
	switch(weaponid)
	{
	    case 22,23,24,26,28,32:
	        return WEAPON_TYPE_LIGHT;

		case 3,4,16,17,18,39,10,11,12,13,14,40,41:
		    return WEAPON_TYPE_MELEE;

		case 2,5,6,7,8,9,25,27,29,30,31,33,34,35,36,37,38:
		    return WEAPON_TYPE_HEAVY;
	}
	return WEAPON_TYPE_NONE;
}

//************************
//***dni por textdraw***
public qdni(playerid)
	{
		PlayerTextDrawHide(playerid, DNI0[playerid]);
		PlayerTextDrawHide(playerid, DNI1[playerid]);
		PlayerTextDrawHide(playerid, DNI2[playerid]);
		PlayerTextDrawHide(playerid, DNI3[playerid]);
		PlayerTextDrawHide(playerid, DNI4[playerid]);
		PlayerTextDrawHide(playerid, DNI5[playerid]);
		PlayerTextDrawHide(playerid, DNI6[playerid]);
		PlayerTextDrawHide(playerid, DNI7[playerid]);
		PlayerTextDrawHide(playerid, DNI8[playerid]);
		PlayerTextDrawHide(playerid, DNI9[playerid]);
		PlayerTextDrawHide(playerid, DNI10[playerid]);
		PlayerTextDrawHide(playerid, DNI11[playerid]);
		PlayerTextDrawHide(playerid, DNI12[playerid]);
		return 1;
	}
//**********************
//***licencias por textdraw***
public qlicencia(playerid)
	{
		PlayerTextDrawHide(playerid, LICENCIA0[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA1[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA2[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA3[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA4[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA5[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA6[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA7[playerid]);
		PlayerTextDrawHide(playerid, LICENCIA8[playerid]);
		return 1;
	}
//***sistema de fire***
public Fuegoo()
{
    new fire = random(sizeof(Fuego));
    new Float:X, Float:Y, Float:Z;
    GetObjectPos(Fire[0], X, Y, Z);
    if(LugarFuego[0] != X) { LugarFuego[0] = X; }
    else if(LugarFuego[1] != Y) { LugarFuego[1] = Y; }
    else if(LugarFuego[2] != Z) { LugarFuego[2] = Z; }
    if(GetTickCount() - lugarfire > TIEMPOFIRE*1000)
    {
        if(F == false)
        {
            for(new f = 0; f < sizeof(Fire); f ++) { DestroyObject(Fire[f]); DestroyObject(Fire[f]); }
            F = true;
            Timerfire = SetTimer("Apagarfire", APAGARFIRE*1000, false);
            Fire[0] = CreateObject(18691, Fuego[fire][0], Fuego[fire][1], Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[1] = CreateObject(18691, Fuego[fire][0]+1, Fuego[fire][1], Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[2] = CreateObject(18691, Fuego[fire][0], Fuego[fire][1]+1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[3] = CreateObject(18691, Fuego[fire][0]+1, Fuego[fire][1]+1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[4] = CreateObject(18691, Fuego[fire][0]-1, Fuego[fire][1], Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[5] = CreateObject(18691, Fuego[fire][0], Fuego[fire][1]-1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            Fire[6] = CreateObject(18691, Fuego[fire][0]-1, Fuego[fire][1]-1, Fuego[fire][2]-2.5, 0.0, 0.0, 0.0);
            for(new i = 0; i < MAX_PLAYERS; i++)
            {
                if(Team_SAMD(i) && OnDuty[i] == 1) // Sistema Fire.
                {
                    new str[128];
                    format(str, sizeof(str), "HQ - S.E.C: Se ha advertido a los bomberos de un incendio, sigue el checkpoint.", Fuego[fire][0], Fuego[fire][1], Fuego[fire][2]);
                    SendClientMessage(i, 0x8D8DFFFF, str);
                    SetPlayerCheckpoint(i, Fuego[fire][0], Fuego[fire][1], Fuego[fire][2], 8.0);
                    LugarFuego[0] = Fuego[fire][0];
                    LugarFuego[1] = Fuego[fire][1];
                    LugarFuego[2] = Fuego[fire][2];
                }
            }
        }
    }
    return 1;
}

public Apagarfire()
{
    if(F == true)
    {
        for(new i = 0; i < MAX_PLAYERS; i ++)
        {
            if(Team_SAMD(i) && OnDuty[i] == 1)
            {
                SendClientMessage(i, COLOR_RED, "El fuego ha cesado, o un bombero de los santos lo ha extinguido.");
                DisablePlayerCheckpoint(i);
                llegarf[i] = false;
            }
            F = false;
            for(new f = 0; f < sizeof(Fire); f ++)
            {
                DestroyObject(Fire[f]);
                DestroyObject(Fire[f]);
            }
            lugarfire = GetTickCount();
        }
    }
    return 1;
}

public Checkfire(playerid)
{
    if(F == true)
    {
        if(GetPlayerState(playerid) == 1)
        {
            if(GetPlayerWeapon(playerid) == 42)
            {
                if(IsPlayerInRangeOfPoint(playerid, 7.0, LugarFuego[0], LugarFuego[1], LugarFuego[2]))
                {
                    if(Apagandofire[playerid] > 0)
                    {
                        Apagandofire[playerid]++;
                        SetTimerEx("Checkfire", 50, false, "i", playerid);
                        if(Apagandofire[playerid] == 13)
                        {
                            for(new f = 0; f < sizeof(Fire); f ++) { DestroyObject(Fire[f]); DestroyObject(Fire[f]); }
                            F = false;
                            GivePlayerMoney(playerid, 500);
                            for(new i = 0; i < MAX_PLAYERS; i ++)
                            {
                                llegarf[i] = false;
                                Apagandofire[i] = 0;
                                lugarfire = GetTickCount();
                                DisablePlayerCheckpoint(i);
                                KillTimer(Timerfire);
                            }
                        }
                    }
                }
            }
        }
        if(GetPlayerState(playerid) == 2)
        {
            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
            {
                if(IsPlayerInRangeOfPoint(playerid, 12.0, LugarFuego[0], LugarFuego[1], LugarFuego[2]))
                {
                    if(Apagandofire[playerid] > 0)
                    {
                        Apagandofire[playerid]++;
                        SetTimerEx("Checkfire", 750, false, "i", playerid);
                        if(Apagandofire[playerid] == 10)
                        {
                            for(new f = 0; f < sizeof(Fire); f ++) { DestroyObject(Fire[f]); DestroyObject(Fire[f]); }
                            F = false;
                            GivePlayerMoney(playerid, 500);
                            for(new i = 0; i < MAX_PLAYERS; i ++)
                            {
                                llegarf[i] = false;
                                Apagandofire[i] = 0;
                                lugarfire = GetTickCount();
                                DisablePlayerCheckpoint(i);
                                KillTimer(Timerfire);
                            }
                        }
                    }
                }
            }
        }
    }
    return 1;
}
//***sistema afk***
forward SendMessage();
public SendMessage()
{
   new Nameafk[24], string[256];
   for(new i = 0; i <= MAX_PLAYERS; i++)
   {
     if(IsPlayerConnected(i))
     {
       GetPlayerName(i, Nameafk, 24);
       if(Afk[i]==1)
       {
       TextDrawHideForAll(Text:Messageafk);
       format(string, sizeof(string), "",Nameafk);
       TextDrawSetString(Messageafk,string);
       TextDrawShowForAll(Text:Messageafk);
       SetTimer("StopMessage",6000,0);
       }
       if(Afk[i]==0)
       {
       TextDrawHideForAll(Text:Messageafk);
       format(string, sizeof(string), "",Nameafk);
       TextDrawSetString(Messageafk,string);
       TextDrawShowForAll(Text:Messageafk);
       SetTimer("StopMessage",6000,0);
       }
     }
   }
}

forward StopMessage();
public StopMessage()
{
  TextDrawHideForAll(Text:Messageafk);
}
//***velocimetro***
public SpeedoUpdate()
{
        for(new i = 0; i<MAX_PLAYERS; i++)
        {
                new Float:speed_x,Float:speed_y,Float:speed_z,Float:final_speed,final_speed_int;
                new veh = GetPlayerVehicleID(i);
                GetVehicleVelocity(veh, speed_x, speed_y, speed_z);
                final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*120.0;
                final_speed_int = floatround(final_speed,floatround_round);
                new kmh_anzahl = final_speed_int;
                new kmh[10],zustand[30],tank[10],cars[50];
                format(kmh, 10,"KM/H: %d", kmh_anzahl);
                new Float:hp;
                GetVehicleHealth(GetPlayerVehicleID(i), hp);
                if(hp > 700){format(zustand, 30,"Estado: ~g~%.0f", hp);}
                if(hp < 700){format(zustand, 30,"Estado: ~y~%.0f", hp);}
                if(hp < 350){format(zustand, 30,"Estado: ~r~%.0f", hp);}
                if(hp < 250){format(zustand, 30,"Estado: ~r~%s", "BOOM");}
                format(tank, 10,"Gas: %d", VehicleFuel[veh]);
                format(cars, 50,"Modelo: %s", GetVehicleNameEx(GetPlayerVehicleID(i)));
                //format(cars, 50,"Modelo: %s", VehicleName[GetVehicleModel(veh)-400]); //-400.
                // MACRO: GetVehicleName(%0) - VehicleName[GetVehicleModel(%0)-400]
                TextDrawSetString(Tacho_KMH[i], kmh);
                TextDrawSetString(Tacho_Zustand[i], zustand);
                TextDrawSetString(Tacho_Tank[i], tank);
                TextDrawSetString(Tacho_Car[i], cars);

        }
        return 1;
}
public Speedometer(playerid) // Nuevo Speedo.
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
	    {
			new string[32], string2[32], string3[10], string4[32], Float:vhealth;
			format(string, sizeof(string), "~g~%s", GetVehicleNameEx(GetPlayerVehicleID(i)));
			TextDrawSetString(VehicleNameX[i], string);

			format(string2, sizeof(string2), "%d", GetPlayerSpeed(i, 0));
			TextDrawSetString(VehicleSpeed[i], string2);

			GetVehicleHealth(GetPlayerVehicleID(i), vhealth);
			format(string3, sizeof(string3), "~%s~%.0f.0", DamageColor(vhealth), vhealth);
			TextDrawSetString(VehicleHealth[i], string3);
			
			format(string4, sizeof(string4), "~b~Gasolina: %d", VehicleFuel[GetPlayerVehicleID(i)]);
			TextDrawSetString(Title[i], string4);
	    }
	}
	return 1;
}
stock DamageColor(Float: health)
{
	new string[5];
	if (health <= VehicleHealthRed)
		format(string, sizeof(string), "r");
	else if (health < VehicleHealthYellow)
	    format(string, sizeof(string), "y");
	else
	    format(string, sizeof(string), "g");
	return string;
}


//*****************
public KickxD(playerid)
{
	Kick(playerid);
}
public AutoJailMG(playerid)
{
	SetPVarInt(playerid, "IsInArena", 0);
	SetPVarInt(playerid, "ArenaMode", 0);
    Info[playerid][pJailAdmin] += 1;
	Info[playerid][pJailed] = 1;
	PhoneOnline[playerid] = 1;
	Info[playerid][pJailTime] = 5*60;
	ResetPlayerWeaponsEx(playerid);
	new rand = random(sizeof(OOCJail));
	new string[120];
	LoadObjects(playerid);
	SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
	SetPlayerToTeamColor(playerid);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 1000);
	SendClientMessageEx(playerid, COLOR_GRAD2, "Has sido enviado a jail 5 minutos automáticamente por intentar usar términos no permitos en /ad. Usa /soporte para más ayuda.");
	StopAudioStreamForPlayer(playerid);
	format(string, sizeof(string), "[AdmCmd]: %s fue Autojaileado por mal uso del comando /ad.",GetPlayerNameEx(playerid));
	Log("LOGS/sancionar.log", string);
	strmid(Info[playerid][pJailedBy], "Auto-Jail", 0, strlen("Auto-Jail"), 32);
	strmid(Info[playerid][pJailReason], "Usar términos prohibidos por /ad.", 0, strlen("Usar términos prohibidos por /ad."), 64);
	format(Info[playerid][pMyAD], 120, "Ninguno");
	if(HaceMG[playerid] == 1)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Mafia).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 2)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Noob).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 3 || HaceMG[playerid] == 4)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Server).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 5)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Putos).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 6)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Admin).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 7)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Ilegal).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 8)
	{
		format(string, sizeof(string), "[AutoBan]:{FFFF00} %s fue baneado por intento de SPAM mediante el canal /ad. (Término: AdokingRP).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "El término usado ha sido más grave de lo esperado, además de ser jaileado has sido baneado.");
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		format(string, sizeof(string), "[AdmCmd]: %s fue baneado automáticamente del servidor, razón: Intento de SPAM en /ad.", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		SetTimerEx("TimerBAN",500,false,"d",playerid);
		return 1;
	}
	else if(HaceMG[playerid] == 9)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Jail OOC).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 10)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Faccion).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 11)
	{
		format(string, sizeof(string), "[AutoJail]:{FFFF00} %s fue enviado a jail por realizar mal uso del /ad. (Término: Homosexual).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		return 1;
	}
	else if(HaceMG[playerid] == 12)
	{
		format(string, sizeof(string), "[AutoBan]:{FFFF00} %s fue baneado por intento de SPAM mediante el canal /ad. (Término: ActividadRP).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "El término usado ha sido más grave de lo esperado, además de ser jaileado has sido baneado.");
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		format(string, sizeof(string), "[AdmCmd]: %s fue baneado automáticamente del servidor, razón: Intento de SPAM en /ad.", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		SetTimerEx("TimerBAN",500,false,"d",playerid);
		return 1;
	}
	else if(HaceMG[playerid] == 13)
	{
		format(string, sizeof(string), "[AutoBan]:{FFFF00} %s fue baneado por intento de SPAM mediante el canal /ad. (Término: CaliforniaRP).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "El término usado ha sido más grave de lo esperado, además de ser jaileado has sido baneado.");
		HaceMG[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		format(string, sizeof(string), "[AdmCmd]: %s fue baneado automáticamente del servidor, razón: Intento de SPAM en /ad.", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		SetTimerEx("TimerBAN",500,false,"d",playerid);
		return 1;
	}
	else {SendClientMessage(playerid, COLOR_RED, "Si usted ha sido enviado a jail por error del sistema. Avise a un administrador.");}
	return 1;
}
public AutoJailAbuso(playerid)
{
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Has sido silenciado automáticamente del canal de Ayuda por mal uso. Usa /soporte para mejor atención.");
	Info[playerid][pNMute] = 1;
	Info[playerid][pNMuteTotal]++;
	new string[120];
	if(HaceAbuso[playerid] == 1)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new. (Término: Puta).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 2)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: Asco).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 3)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: 7777).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 4)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: Faccion).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 5)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: Putos).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 6)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: Mierda).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 7)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: Gay).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 8)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: AdokingRP).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Has recibido una advertencia administrativa grave 1/2. La próxima será ban.");
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		Info[playerid][pWarn]++;
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 9)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: CaliforniaRP).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Has recibido una advertencia administrativa grave 1/2. La próxima será ban.");
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		Info[playerid][pWarn]++;
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 10)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: FenixZone).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Has recibido una advertencia administrativa grave 1/2. La próxima será ban.");
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		Info[playerid][pWarn]++;
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 11)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: ZenonCity).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Has recibido una advertencia administrativa grave 1/2. La próxima será ban.");
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		Info[playerid][pWarn]++;
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else if(HaceAbuso[playerid] == 12)
	{
		format(string, sizeof(string), "[AutoMute]:{FFFF00} %s fue silenciado por mal uso del /new (Término: ActividadRP).", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_AZULL,string,2);
		SendClientMessageEx(playerid, COLOR_GRAD2, "[AntiSpam] No es necesario que des a conocer la base de la GM, aconseja el uso de /creditos.");
		HaceAbuso[playerid] = 0; // Una vez que pone el anuncio, no se considera que haga MG.
		//Info[playerid][pWarn]++; NO ES TAN GRAVE.
		SetTimerEx("NewbieUnMuted", 300000, 0, "d", playerid);
		return 1;
	}
	else {SendClientMessage(playerid, COLOR_RED, "Si usted ha sido enviado a jail por error del sistema. Avise a un administrador.");}
	return 1;
}
public GlobalAnnouncement(playerid)
{
	{
		{
  		SendClientMessageToAll(0x7E35DA92, "INFRANET RP:{CFB3D1} Si desconoces el uso de un comando, usa /ayuda para ver el listado de comandos.");
  		SendClientMessageToAll(0x7E35DA92, "La administración está para ayudar en todo lo posible, si tienes algún problema no dudes en usar /re, /duda, /n.");
		}
	}
	return 1;
}
public GlobalAnnouncement2(playerid)
{
	{
		{
  		SendClientMessageToAll(0x7E35DA92, "INFRANET RP:{CFB3D1} Disponemos del comando /soporte, ahí quizás encuentres respuestas a tus preguntas.");
  		SendClientMessageToAll(0x7E35DA92, "Recuerda que si desea ayuda técnica, puedes reportar cualquier problema via foro (/foro).");
		}
	}
	return 1;
}
public GlobalTime()
{
new Hour, Minute, Second;
gettime(Hour, Minute, Second);
new tiempo = random(5);
if(Hour == 22) // Tiempo nublado/bueno.
{
    SendClientMessageToAll(COLOR_GREEN, "[Anuncio Radio] Buenas noches San Andreas, que tengan una agradable noche. Sigan con nosotros en la radio.");
    print("El clima del servidor fue cambiado automáticamente [22H].");
    if(tiempo == 0 || tiempo ==2 || tiempo == 4){SetWeather(10);} // El bueno.
	else {SetWeather(14);} // El Malo (Nublado).
}
if(Hour == 2) // Oscuro(Nublado) o normal.
{
    SendClientMessageToAll(COLOR_GREEN, "[Estación meteorológica]: Atención, en las próximas horas podría haber formación de borrasca, posible lluvia.");
    print("El clima del servidor fue cambiado automáticamente [2AM]");
	if(tiempo == 0 || tiempo ==2 || tiempo == 4) {SetWeather(17);} // El bueno.
	else {SetWeather(20);} // El malo (Muy nublado)
}
if(Hour == 4) // Lluvia o normal.
{
    SendClientMessageToAll(COLOR_GREEN, "[Estación meteorológica]: Atención, se espera en las próximas horas lluvias torrenciales constantes.");
    print("El clima del servidor fue cambiado automáticamente [4AM].");
	if(tiempo == 0 || tiempo ==2) {SetWeather(43);} // Muy noche.
	else {SetWeather(8);} // El malo, Lluvia. (Más posibilidades)
}
if(Hour == 6) // Niebla o normal.
{
	SendClientMessageToAll(COLOR_GREEN, "[Estación meteorológica]: Atención, se ha detectado posible formación de niebla durante las primeas horas del dia.");
    print("El clima del servidor fue cambiado automáticamente [6AM].");
    if(tiempo == 0 || tiempo ==2 || tiempo == 4) {SetWeather(4);} // El bueno, comienza el dia.
	else {SetWeather(9);} // El malo, mucha niebla.
}
if(Hour == 10) // Desaparición de toda existencia de niebla/lluvia.
{
    SendClientMessageToAll(COLOR_GREEN, "[Anuncio Radio] Buenos días San Andreas, les espera un día maravilloso. Disfruten de nuestra programación de hoy.");
    print("El clima del servidor fue cambiado automáticamente [10H].");
    if(tiempo == 0 || tiempo ==2 || tiempo == 4) {SetWeather(3);} // El bueno, comienza el dia.
	else {SetWeather(0);} // También es bueno. No habrá niebla y lluvia hasta que sea de noche.
	// HouseUpdate(); Cuando sean las 10 AM se dará revisión a las casas, horario con apenas usuarios conectados. (2AM, en Sud Am).
 	for(new h = 0; h < sizeof(HouseInfo); h++) // HouseUpdate movido a este lugar desde ahora.
    {
        if(HouseInfo[h][hOwned] != 0)
        {
            if(HouseInfo[h][hTiempo] <= 0)
            {
                new szFileStr[1024];
                ClearHouse(h);
                format(HouseInfo[h][hOwner], 128, "Nobody" ); // Renovación del propietario.
                HouseInfo[h][hTiempo] = 0; // Se pone el tiempo a 0 para evitar la existencia de posibles bugs.
                HouseInfo[h][hOwned] = 0; // Se retira el propietario de cada casa inactiva.
				DestroyDynamicPickup(HouseInfo[h][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[h][hTextID]);
				format(szFileStr, sizeof(szFileStr), "{01DF01}¡Propiedad en venta!\n{A4A4A4}Información: {FFFFFF}%s\n{A4A4A4}Precio: {FFFFFF}$%d\n{A4A4A4}Nivel: {FFFFFF}%d\n[ID: %d]\n\n{FAAC58}Para comprar usa: /comprarcasa.",HouseInfo[h][hDescription],HouseInfo[h][hValue],HouseInfo[h][hLevel],h);
				HouseInfo[h][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_GREEN2, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]+0.5,10.0);
				HouseInfo[h][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
            }
        	--HouseInfo[h][hTiempo];
        }
    }
    SaveHouses(); // Guardado de casas cada minuto.
}
return 1;
}
stock LoadMapeos()
{
	/////// Puertas para ir a la planta de arriba.
	LSPD_NEW1 = CreateDynamicObject(980, 1556.67175, -1698.34778, 4991.5, 0.00000, 0.00000, 270.00000);
	LSPD_NEW2 = CreateDynamicObject(980, 1556.77905, -1636.08850, 4991.5, 0.00000, 0.00000, 270.00000);
	////// Puertas Sur de LSPD - Planta Baja. X4
	LSPD_NEW3 = CreateDynamicObject(1495, 1562.7060, -1659.93030, 4989.41101, 0.00000, 0.00000, -90.0); // Taquillas LSPD.
	LSPD_NEW4 = CreateDynamicObject(1495, 1570.5215, -1643.77222, 4989.41101, 0.00000, 0.00000, 90.00); // Sala de Camaras.
	LSPD_NEW5 = CreateDynamicObject(1495, 1570.5500, -1649.62769, 4989.41101, 0.00000, 0.00000, 90.00); // Sospechosos (Cops).
	LSPD_NEW6 = CreateDynamicObject(1495, 1570.51929, -1661.46106, 4989.41101,0.00000, 0.00000, 90.00); // Sospechosos (Robs).
	LSPD_NEW7 = CreateDynamicObject(1557, 1569.59998, -1699.50000, 4989.57996, 0.00000, 0.0000, 90.00); // Puerta A Sala Reuniones.
	LSPD_NEW8 = CreateDynamicObject(1557, 1569.59998, -1696.50000, 4989.57996, 0.00000, 0.0000, -90.0); // Puerta B Sala Reuniones.
	LSPD_NEW9 = CreateDynamicObject(1495, 1564.73792, -1664.65930, 4989.52588,   0.00000, 0.00000, -90.00000); // Puerta Principal Izquierda
	LSPD_NEW10 = CreateDynamicObject(1495, 1564.76685, -1688.26770, 4989.52588,   0.00000, 0.00000, 90.00000); // Puerta Principal Derecha
	//////Puerta FBI /Equipo
	FBI_NEW1 = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,600); //Lobby Door Right
	/////Puerta Sistema Judicial
	SJ_NEW1 = CreateDynamicObject(1495, 1440.71216, -1469.97485, 1615.26636,   0.00000, 0.00000, 0.00000);
	SJ_NEW2 = CreateDynamicObject(1495, 1422.93811, -1469.96814, 1616.24707,   0.00000, 0.00000, 0.00000);
	//////Puerta Hitman HQ Nueva by Alexey
	HIT_NEW1 = CreateDynamicObject(1536,2118.2234, -2274.4893, 19.5600,0.0000, 0.0000, 314.9950);
}


stock LoadActors()
{
/// Actores en Grove St.
new ActorPrueba;
new ActorPrueba2;
new ActorGST;
new ActorGST2;
new ActorGST3;
new ActorGST4;
new ActorGST5;
///// Zonas Publicas
new CiudadanoPerdido;
new PizzeroActor;
new ActorOrinando;
new PoliciaUnity;
new GordoGlenPark;
//new Accidente;
new GuardaespaldasAlhambra;
new Chulo;
new Abuelita;
new PoliFuma;
new PoliCansado;
new PoliEntrada;
new PoliHabla1;
new PoliHabla2;
new ChicoBarRie;
new ChicoBar;
// Seguridad Gobierno.
ActorPrueba = CreateActor(163, 1487.998168, -1751.397827, 13.546875, 0.0);
ApplyActorAnimation(ActorPrueba, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 1, 0, 0);
SetActorInvulnerable(ActorPrueba, true);

ActorPrueba2 = CreateActor(164, 1475.281372, -1751.395751, 13.546875, 0.0);
ApplyActorAnimation(ActorPrueba2, "GRAVEYARD","prst_loopa", 4.0, 1, 0, 1, 0, 0);
SetActorInvulnerable(ActorPrueba2, false);

ActorGST = CreateActor(106, 2472.077880, -1683.179687, 13.466216, 18.715963);
ApplyActorAnimation(ActorGST, "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);

ActorGST2 = CreateActor(107, 2471.089599, -1682.367065, 13.461606, 252.850814);
ApplyActorAnimation(ActorGST2, "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);

ActorGST3 = CreateActor(19, 2487.855224, -1649.080688, 13.578062, 179.031860);
ApplyActorAnimation(ActorGST3, "MISC","SEAT_LR", 4.0, 1, 0, 1, 0, 0);

ActorGST4 = CreateActor(28, 2464.729492, -1651.682739, 13.470606, 182.333404);
ApplyActorAnimation(ActorGST4, "SMOKING","M_smklean_loop", 4.0, 1, 0, 1, 0, 0);

ActorGST5 = CreateActor(105, 2533.216796, -1668.503417, 15.166041, 90.926933);
ApplyActorAnimation(ActorGST5, "RAPPING","RAP_C_Loop", 4.0, 1, 0, 1, 0, 0);

CiudadanoPerdido = CreateActor(37, 1933.427001, -1763.058349, 13.546875, 329.391998);
ApplyActorAnimation(CiudadanoPerdido, "GANGS","smkcig_prtl", 4.0, 1, 0, 1, 0, 0);

CreateActor(155, 2101.368164, -1813.309326, 13.554687, 91.256454); // Pizzero.
// 2 Pizzeros atendiendo.
CreateActor(155, 376.714202, -117.082450, 1001.492187, 183.487182);
CreateActor(205, 374.882507, -113.622993, 1001.492187, 2.088534);

PizzeroActor = CreateActor(167, 2100.587402, -1812.249511, 13.554687, 216.068786);
ApplyActorAnimation(PizzeroActor, "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);

ActorOrinando = CreateActor(45, 2192.138916, -1716.468139, 13.619745, 234.764038);
ApplyActorAnimation(ActorOrinando, "Freeweights", "gym_free_B",4.0,1,0,1,0,0);

PoliciaUnity = CreateActor(280, 1811.891845, -1878.977905, 13.570352, 269.832733);
ApplyActorAnimation(PoliciaUnity, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 1, 0, 0);

GordoGlenPark = CreateActor(5, 1861.351074, -1377.398193, 13.562500, 92.814888);
ApplyActorAnimation(GordoGlenPark, "CRACK", "crckidle1", 4.0, 1, 0, 1, 0, 0);

//Accidente = CreateActor(16, 1928.518066, -1495.239990, 3.293456, 92.107200);
//ApplyActorAnimation(Accidente, "MISC","Hiker_Pose", 4.0, 1, 0, 1, 0, 0);

CreateActor(166, 1830.317138, -1685.308471, 13.546875, 88.788421); // Negro Alhambra.

GuardaespaldasAlhambra = CreateActor(163, 1832.002929, -1680.25, 13.315485, 182.974868);
ApplyActorAnimation(GuardaespaldasAlhambra, "POLICE","CopTraf_Come", 4.0, 1, 0, 1, 0, 0);

CreateActor(12, 1830.408691, -1648.066650, 13.546875, 144.666427); // Chica Alhambra
CreateActor(55, 1829.989746, -1649.549804, 13.546875, 356.690673); // Chica 2
Chulo = CreateActor(296, 1828.836669, -1648.052612, 13.546875, 242.322967); //Chulo
ApplyActorAnimation(Chulo, "RAPPING","RAP_A_Loop", 4.0, 1, 0, 1, 0, 0);

Abuelita = CreateActor(10, 1723.837890, -1720.298583, 13.540523, 88.080329);
ApplyActorAnimation(Abuelita, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 1, 0, 0);

PoliFuma = CreateActor(265, 1547.009277, -1668.111206, 13.566131, 131.802383);
ApplyActorAnimation(PoliFuma, "SMOKING","M_smk_in", 4.0, 1, 0, 1, 0, 0);

PoliCansado = CreateActor(266, 1541.322998, -1677.312377, 13.552323, 95.591743);
ApplyActorAnimation(PoliCansado, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 1, 0, 0);

PoliEntrada = CreateActor(280, 1552.910278, -1673.570922, 16.195312, 90.883155);
ApplyActorAnimation(PoliEntrada, "GRAVEYARD","prst_loopa", 4.0, 1, 0, 1, 0, 0);

PoliHabla1 = CreateActor(275, 1538.249633, -1644.277709, 13.546875, 178.802688);
ApplyActorAnimation(PoliHabla1, "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);

PoliHabla2 = CreateActor(281, 1538.308105, -1646.506103, 13.546875, 358.971099);
ApplyActorAnimation(PoliHabla2, "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);
/// Actors - LCN.
CreateActor(111, 1433.800781, -1880.8, 13.546875, 0.0);
CreateActor(112, 1418.787719, -1880.8, 13.546875, 0.0);

ChicoBarRie = CreateActor(20, 1575.546997, -1887.168090, 13.558238, 61.486454);
ApplyActorAnimation(ChicoBarRie, "RAPPING", "Laugh_01", 4.0, 1, 0, 1, 0, 0);

ChicoBar = CreateActor(56, 1574.649780, -1886.714355, 13.558128, 199.699783);
ApplyActorAnimation(ChicoBar, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 1, 0, 0);

/// ESP (Piscina Municipal)

CreateActor(166, 1137.372070, -1762.117431, 13.595738, 5.776687); // Guardia.
new GuardiaESP = CreateActor(164, 1062.632202, -1731.940795, 13.758134, 182.474975);
ApplyActorAnimation(GuardiaESP, "MISC","Seat_talk_01", 4.0, 1, 0, 1, 0, 0); //asiento 5

new GuardiaESP2 = CreateActor(165, 1061.490722, -1732.510620, 13.740871, 291.452056);
ApplyActorAnimation(GuardiaESP2, "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0); //  /talk

CreateActor(163, 1068.849487, -1731.774902, 13.778193, 183.165527); // Guardia Parado.

/// Ammu Nation

new SacaDinero = CreateActor(59, 1366.061767, -1296.653198, 13.546875, 277.166748);
ApplyActorAnimation(SacaDinero, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 1, 0, 0); //  /En cajero.

new Sentado = CreateActor(7, 1366.298095, -1293.704223, 13.546875, 87.244537);
ApplyActorAnimation(Sentado, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 0); //  /Sentado 7

new Sentada = CreateActor(219, 1366.180297, -1294.696166, 13.546875, 97.166923);
ApplyActorAnimation(Sentada, "MISC", "Seat_talk_01", 4.0, 1, 0, 1, 0, 0); //  /Sentada 5


new SeguridadBar = CreateActor(66, 1071.203857, -1352.627441, 13.554672, 139.341934);
ApplyActorAnimation(SeguridadBar, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 1, 0, 0);

// Seguridad LSTV
CreateActor(163, 651.197082, -1351.284667, 13.736300, 181.810470);
CreateActor(164, 647.323913, -1347.257690, 13.546875, 92.695526);

// Bancos
new Bankera = CreateActor(172, 986.138427, -1172.712402, 25.342069, 358.674102);
ApplyActorAnimation(Bankera, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 0); //  /Sentada 7

new Bankero = CreateActor(171, 989.974487, -1173.982910, 25.145936, 180.931045);
ApplyActorAnimation(Bankero, "Freeweights", "gym_free_B",4.0,1,0,1,0,0);
//

// ALHAMBRA.

    new negrobaila = CreateActor(221, 485.713531, -13.734642, 1000.679687, 272.918273);
    ApplyActorAnimation(negrobaila, "DANCING","dnce_M_d",4.0,1,0,0,0,0);

    new mujerbaila = CreateActor(12, 487.818206, -13.482046, 1000.679687, 98.703300);
    ApplyActorAnimation(mujerbaila, "DANCING","dnce_M_c",4.0,1,0,0,0,0);

    new mujerchata = CreateActor(13, 489.617431, -17.132623, 1000.679687, 105.741676);
    ApplyActorAnimation(mujerchata,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);

    new hombrechata = CreateActor(29, 488.825775, -17.310316, 1000.679687, 287.308410);
    ApplyActorAnimation(hombrechata, "RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);

    new dijey = CreateActor(67, 476.102783, -15.044513, 1003.695312, 270.075042);
    ApplyActorAnimation(dijey, "SCRATCHING","scdlulp",4.0,1,0,0,0,0);

    new papel = CreateActor(82, 487.496551, -5.009051, 1002.078125, 182.387710);
  	ApplyActorAnimation(papel, "DANCING","DAN_Left_A",4.0,1,0,0,0,0);

// Puticlub.

    new perra = CreateActor(87, -2677.779785, 1404.931274, 907.570312, 272.774627);
    ApplyActorAnimation(perra, "STRIP","strip_E",4.1,7,5,1,1,1);

    new perra2 = CreateActor(178, -2677.780273, 1412.907592, 907.576782, 270.894561);
    ApplyActorAnimation(perra2, "STRIP","strip_E",4.1,7,5,1,1,1);

    new perra3 = CreateActor(140, -2670.378662, 1410.639282, 907.570312, 275.136322);
    ApplyActorAnimation(perra3, "STRIP","strip_D",4.1,7,5,1,1,1);

    new perra4 = CreateActor(256, -2671.261962, 1428.347412, 907.360412, 92.026367);
    ApplyActorAnimation(perra4, "STRIP","strip_B",4.1,7,5,1,1,1);
    
// Estadio de Futbol

//

/*CreateActor(3, 2749.459472, -1805.089233, 2425.083496, 89.962600);
CreateActor(2, 2748.333740, -1798.408325, 2424.653808, 87.166046);
CreateActor(6, 2753.854248, -1792.601806, 2426.380615, 92.051567);
CreateActor(20, 2750.901123, -1807.013793, 2425.513427, 37.217765);
CreateActor(33, 2750.956054, -1805.819091, 2425.513427, 91.192657);
CreateActor(32, 2756.605224, -1809.115600, 2427.255615, 87.537078);
CreateActor(25, 2759.168701, -1815.720458, 2428.122802, 85.616607);
CreateActor(13, 2749.295654, -1831.950805, 2425.083496, 90.148300);
CreateActor(46, 2754.801269, -1838.712280, 2426.810546, 85.448242);
CreateActor(52, 2753.636474, -1827.329467, 2426.380615, 88.581626);
CreateActor(51, 2753.590087, -1828.407836, 2426.380615, 91.192794);
CreateActor(67, 2746.137207, -1851.546142, 2424.208740, 89.626098);
CreateActor(65, 2744.445068, -1854.051757, 2423.778564, 91.192771);
CreateActor(73, 2746.394042, -1855.090454, 2424.208740, 89.103858);
CreateActor(84, 2744.757324, -1856.175537, 2423.778564, 90.148315);
CreateActor(94, 2752.179931, -1839.126708, 2425.958740, 92.237213);
CreateActor(96, 2749.151855, -1827.661132, 2425.083496, 88.581626);
CreateActor(93, 2747.779052, -1826.192626, 2424.653808, 91.714996);
CreateActor(103, 2752.174316, -1821.432617, 2425.958740, 93.281646);
CreateActor(102, 2752.143554, -1822.977783, 2425.958740, 90.148284);
CreateActor(137, 2755.387207, -1803.064575, 2426.810546, 89.103813);
CreateActor(20, 2753.980224, -1791.544067, 2426.380615, 91.192726);
CreateActor(117, 2748.426513, -1776.305908, 2424.646240, 87.537132);
CreateActor(132, 2749.527343, -1775.266113, 2425.083496, 88.581573);
CreateActor(134, 2745.764404, -1773.692871, 2423.778564, 91.192718);
CreateActor(158, 2751.596923, -1771.391601, 2425.513427, 85.448226);
CreateActor(179, 2751.340576, -1772.940673, 2425.513427, 92.759399);
CreateActor(173, 2753.715332, -1773.293334, 2426.380615, 90.670494);
CreateActor(202, 2758.414550, -1778.980346, 2427.677978, 88.059371);
CreateActor(202, 2756.930664, -1776.170776, 2427.255615, 95.892799);
CreateActor(236, 2755.276123, -1769.137084, 2426.810546, 91.714981);
CreateActor(18, 2754.280761, -1766.969970, 2426.380615, 91.714981);
CreateActor(180, 2752.786865, -1768.460693, 2425.958740, 91.714981);
CreateActor(255, 2750.305664, -1765.139526, 2425.083496, 91.714981);
CreateActor(4, 2748.967529, -1763.339599, 2424.653808, 92.759437);
CreateActor(9, 2745.553955, -1779.948608, 2423.778564, 89.626045);
CreateActor(172, 2752.432861, -1786.065673, 2425.950927, 81.270477);
CreateActor(9, 2746.798339, -1802.926025, 2424.208740, 86.155784);
CreateActor(134, 2745.563476, -1808.841918, 2423.778564, 87.722457);
CreateActor(193, 2754.588134, -1852.420776, 2426.810546, 90.855819);
CreateActor(157, 2753.020996, -1854.527343, 2426.380615, 92.422500);
CreateActor(161, 2748.732177, -1857.624389, 2425.083496, 93.466972);
CreateActor(236, 2751.787597, -1846.184326, 2425.950927, 91.900299);
CreateActor(179, 2753.395263, -1843.009155, 2426.380615, 86.155799);
CreateActor(195, 2746.610595, -1837.311157, 2424.208740, 90.855850);
CreateActor(203, 2747.494873, -1835.576904, 2424.646240, 94.511444);
CreateActor(272, 2751.963867, -1834.813232, 2425.958740, 89.811340);
CreateActor(8, 2745.380859, -1794.106689, 2423.778564, 89.625816);
CreateActor(158, 2757.063232, -1795.183593, 2427.255615, 88.581413);
CreateActor(12, 2752.682128, -1784.729492, 2425.950927, 88.059181);
CreateActor(11, 2749.762207, -1778.763916, 2425.083496, 89.103630);*/

// Actores Ambiente.

CreateActor(300, 1552.98877, -1677.23926, 16.19531,   87.34446);
CreateActor(3, 1481.21045, -1688.51721, 14.04688,   271.51364);
CreateActor(230, 1426.84277, -1336.94800, 13.58331,   77.87505);
CreateActor(12, 2.05668, -30.70086, 1003.54944,   0.20842);
CreateActor(15, 1724.53735, -1720.40808, 13.54125,   87.73338);
CreateActor(73, 4.97653, -24.61849, 1003.54944,   88.98734);
CreateActor(15, -11.00725, -28.80951, 1003.54944,   91.26170);
CreateActor(13, 1356.53137, -1740.39392, 13.54688,   43.95754);
CreateActor(18, 1219.91589, -1691.82739, 19.73438,   89.05468);
CreateActor(97, 1222.02942, -1691.87500, 19.73438,   91.14359);
CreateActor(138, 1223.68115, -1691.80273, 19.48868,   92.71027);
CreateActor(11, 1536.07434, -1607.62097, 13.54688,   146.49971);
CreateActor(36, 1933.51807, -1762.35486, 13.54688,   171.70764);
CreateActor(5, 2102.38354, -1801.51624, 13.55469,   69.92020);
CreateActor(81, 767.51605, 14.23872, 1000.69989,   182.67555);
CreateActor(6, 2101.35254, -1801.01990, 13.55469,   245.99190);
CreateActor(61, 1752.80750, -1896.10010, 13.55733,   273.88901);
CreateActor(20, 1812.33264, -1880.33484, 13.57035,   327.32462);
CreateActor(155, 374.72815, -117.27639, 1001.49219,   182.33842);
CreateActor(241, 376.67856, -118.80289, 1001.49951,   357.78336);
CreateActor(29, 1424.59741, -1356.60510, 13.57358,   41.48078);
CreateActor(277, 1038.65942, -1937.94263, 13.10289,   235.24422);
CreateActor(121, 638.72070, -1229.37195, 18.12874,   38.71852);
CreateActor(66, 1538.03235, -1700.42957, 13.54688,   271.48062);
CreateActor(19, 763.32666, 3.75603, 1000.71326,   174.62491);
CreateActor(81, 762.98279, 2.49002, 1001.59424,   134.46159);
CreateActor(80, 758.69598, -1.93340, 1001.59424,   316.03284);
CreateActor(140, 1252.69153, -1696.45862, 13.54688,   214.42261);
CreateActor(142, 1126.06226, -1757.97021, 13.73020,   297.19318);
CreateActor(171, 761.24603, -0.24669, 1001.59424,   41.44418);
CreateActor(28, 758.69977, -3.03343, 1000.69977,   354.63232);
CreateActor(7, 762.99347, 7.92446, 1000.71552,   2.44232);
CreateActor(18, 757.61871, 13.31470, 1000.70538,   269.74149);
CreateActor(280, 253.79550, 117.35649, 1003.21875,   90.78252);
CreateActor(281, 238.65274, 112.77636, 1003.21875,   269.07068);
//CreateActor(150, 1169.67346, -1346.91162, 2423.04614,   178.85635);
CreateActor(186, 569.73688, -2648.83179, 16.16600,   177.77164);
CreateActor(194, 597.85065, -2817.67163, 1.82000,   88.28526);
CreateActor(287, 2587.95947, -2391.06567, 13.38708,   47.83321);
CreateActor(280, 1544.48499, -1631.56140, 13.38281,   357.40942);
CreateActor(179, 308.12225, -143.09073, 999.60156,   0.96307);
CreateActor(191, 316.10788, -133.38478, 999.60156,   95.32426);
CreateActor(123, 314.25903, -133.40369, 999.60156,   271.41928);
CreateActor(179, 316.22559, -139.37108, 1004.06250,   88.14099);
CreateActor(6, 300.08517, -138.47954, 1004.06250,   91.73264);
CreateActor(2, 300.08456, -137.03131, 1004.06250,   90.33427);
CreateActor(22, 300.07672, -135.62910, 1004.06250,   87.82759);
CreateActor(19, 300.08157, -133.95299, 1004.06250,   90.96095);
CreateActor(13, 300.07782, -132.51353, 1004.06250,   92.84103);
CreateActor(29, 300.07791, -130.90669, 1004.06250,   90.64767);
CreateActor(30, 300.07864, -129.48750, 1004.06250,   92.21434);
CreateActor(28, 300.07855, -127.99514, 1004.06250,   89.08098);
CreateActor(16, 656.00287, -440.30627, 16.33594,   1.09038);
CreateActor(308, 1474.09119, -1716.07153, 14.04688,   229.21333);
CreateActor(141, 749.36200, -1360.58435, 3018.71362,   183.51102);
CreateActor(141, 749.27637, -1360.58362, 3018.71362,   180.40056);
CreateActor(125, 1475.50159, -1361.62634, 11.88281,   85.87720);
CreateActor(112, 1475.49597, -1359.66956, 11.88281,   88.32782);
CreateActor(11, 1005.25885, 54.88551, 55.32212,   188.07295);
CreateActor(121, 1323.80005, -917.06146, 37.31147,   84.13039);
CreateActor(12, 1323.08618, -917.02948, 37.38039,   262.39523);
CreateActor(16, 1339.91833, -860.44214, 39.56844,   178.39757);
CreateActor(13, -22.95843, -57.34811, 1003.54688,   358.76282);
CreateActor(28, 1296.31702, -991.03534, 32.69531,   6.67591);
CreateActor(29, 1011.81708, -606.30798, 1081.57544,   355.86938);
CreateActor(120, 1458.30115, -1010.65491, 26.84375,   181.11646);
CreateActor(186, 1455.49695, -1010.88812, 26.84375,   179.18098);
CreateActor(240, 1018.94562, -606.31403, 1081.57544,   0.18557);
CreateActor(2, 1420.72705, -1663.84216, 13.54688,   271.59683);
CreateActor(15, 1419.97791, -1668.41809, 13.54688,   182.29602);
CreateActor(71, 1415.89783, -1656.09192, 13.77031,   357.93286);
CreateActor(67, 2011.94177, -1943.90625, 13.54688,   357.68219);
CreateActor(93, 2004.66772, -1942.98853, 13.54688,   31.10470);
CreateActor(4, 2003.02527, -1943.84583, 13.54688,   1.33750);
CreateActor(2, 2570.47900, 50.07784, 26.48438,   209.53697);
CreateActor(95, 2563.30396, 49.71934, 26.48438,   186.03670);
CreateActor(36, 2564.43701, 50.02462, 26.48438,   176.63669);
CreateActor(58, 2566.37158, 49.14038, 26.48438,   236.69283);
CreateActor(89, 2567.86182, 51.14838, 26.48438,   183.42572);
CreateActor(95, 2558.73950, 49.14775, 26.48438,   269.94714);
CreateActor(10, 673.20532, -620.04474, 16.33594,   265.44293);
CreateActor(13, 672.98755, -617.43872, 16.33594,   266.48740);
CreateActor(121, 672.65155, -615.63141, 16.33594,   336.98807);
CreateActor(137, 664.49738, -578.24207, 16.33594,   180.31960);
CreateActor(303, 627.24915, -573.12115, 17.80412,   270.66519);
CreateActor(11, 696.56238, -499.86850, 16.33594,   358.21402);
CreateActor(9, 702.66089, -519.64337, 16.33335,   169.50436);
CreateActor(7, 744.19830, -556.60333, 18.01293,   352.99161);
CreateActor(12, 741.96796, -552.06714, 17.26913,   217.03566);
CreateActor(109, 743.10046, -556.01526, 18.01293,   334.71365);
CreateActor(110, 745.78101, -555.64276, 18.01293,   104.40292);
CreateActor(111, 1222.35535, -1427.53442, 13.38899,   30.40660);
CreateActor(117, 1216.71484, -1426.93262, 13.38281,   350.71735);
CreateActor(112, 1225.82019, -1425.70496, 13.40738,   68.88303);
CreateActor(141, 1220.61365, -1427.82678, 13.37010,   1.16180);
CreateActor(147, 1218.00806, -1425.44006, 13.35058,   144.08371);
CreateActor(125, 1263.20142, -1415.26648, 13.48204,   352.80618);
//CreateActor(150, 1270.00232, -1413.92664, 13.32413,   88.37371);
CreateActor(193, 1349.23730, -1527.38513, 13.60586,   336.43158);
CreateActor(18, 1347.74963, -1523.90564, 13.77985,   72.87524);
CreateActor(20, 1352.33765, -1520.65369, 13.58594,   216.31937);
CreateActor(121, 1352.75403, -1518.80078, 13.58594,   212.14154);
CreateActor(66, 1354.64624, -1520.51306, 13.58594,   98.46440);
CreateActor(10, 1347.38696, -1548.01392, 13.58594,   252.01630);
CreateActor(93, 1361.38013, -1619.15405, 13.69552,   358.19702);
CreateActor(62, 1348.66504, -1650.32715, 13.61094,   298.49454);
CreateActor(96, 1366.39417, -1682.83545, 13.53533,   51.29562);
CreateActor(72, 1380.60474, -1680.44617, 13.56465,   265.25748);
CreateActor(94, 1606.91870, -1639.48059, 13.71875,   2.03798);
CreateActor(300, 1605.53748, -1642.05762, 13.71875,   219.63835);
CreateActor(265, 1604.39954, -1650.89551, 13.54688,   265.59433);
CreateActor(185, 1728.32886, -1740.94910, 13.54688,   7.95081);
CreateActor(166, 1709.02002, -1745.72192, 13.49289,   268.55917);
CreateActor(165, 1705.65381, -1747.94080, 13.66384,   83.69076);
CreateActor(17, 1753.52661, -1771.60352, 13.53582,   92.92262);
CreateActor(16, 1637.86304, -1810.34949, 13.52335,   132.27507);
CreateActor(306, 1621.87292, -1859.87354, 13.55024,   258.13177);
CreateActor(79, 1660.56201, -1904.66675, 13.55210,   4.85163);
CreateActor(57, 1684.80249, -1946.12610, 13.54688,   314.71777);
CreateActor(240, 1705.14807, -1720.86682, 13.54427,   185.80901);
CreateActor(11, 1277.46497, -1387.41382, 13.38731,   183.38333);
CreateActor(228, 1279.54749, -1387.78687, 13.39456,   182.33900);
CreateActor(166, 1282.77368, -1387.98328, 13.39889,   232.65828);
CreateActor(171, 1277.46326, -1388.13892, 13.40041,   267.12527);
CreateActor(93, 1284.11023, -1385.59070, 13.48436,   178.16997);
CreateActor(276, 1275.53613, -1389.43567, 13.42337,   268.35532);
CreateActor(131, 618.55493, -1606.86267, 16.53350,   270.65112);
CreateActor(297, 620.61566, -1609.57654, 16.45113,   343.06378);
CreateActor(18, 1009.45996, -1819.21460, 14.19604,   40.50877);
CreateActor(140, 1005.00934, -1819.27393, 14.06425,   344.79034);
CreateActor(303, 660.62329, -1387.74634, 13.66287,   181.84685);
CreateActor(16, 1732.35693, -1800.17920, 13.53036,   352.03955);
CreateActor(16, 668.09644, -623.40680, 16.33594,   180.98119);
CreateActor(284, 621.45667, -594.32123, 17.23301,   274.33240);
CreateActor(284, 622.18988, -594.31451, 17.20468,   91.34399);
CreateActor(20, 672.69159, -499.81674, 16.33594,   94.08611);
CreateActor(14, 653.97150, -496.11819, 16.33594,   91.91613);
CreateActor(10, 617.55640, -520.97107, 16.33594,   6.37532);
CreateActor(18, 1419.93591, -1683.70142, 13.54688,   98.98092);
CreateActor(240, 1513.48413, -1671.18542, 14.04688,   183.55827);
CreateActor(114, 1814.84534, -1928.22681, 13.54458,   357.44028);
CreateActor(93, 1814.88916, -1927.48547, 13.54513,   179.15234);
CreateActor(174, 1812.92175, -1846.26514, 13.57813,   3.13787);
CreateActor(175, 1953.96851, -2042.05725, 13.54688,   183.25943);
CreateActor(174, 1953.99963, -2042.78186, 13.54688,   0.29342);
CreateActor(115, 1892.32263, -2058.84985, 13.54688,   265.42780);
CreateActor(85, 1893.07971, -2058.90747, 13.54688,   84.63275);
CreateActor(116, 1875.23022, -2043.99890, 13.54688,   244.70235);
CreateActor(28, 1893.42627, -2029.81250, 13.54688,   81.91246);
CreateActor(175, 1892.70874, -2029.75220, 13.54688,   267.23917);
CreateActor(174, 1871.40039, -2021.96130, 13.54688,   266.46756);
CreateActor(114, 1871.29590, -2019.20154, 13.54688,   270.11545);
CreateActor(256, -833.80408, 471.21268, 1867.30554,   269.92926);
CreateActor(173, -830.82214, 467.76105, 1866.80005,   6.10011);
CreateActor(175, -835.02435, 467.54895, 1866.80005,   7.69013);
//CreateActor(150, 1408.47302, -1917.20288, 1227.80676,   271.29706);
CreateActor(59, 1422.38318, -1899.82874, 1227.85742,   6.19109);
CreateActor(7, 1724.80908, -1740.72400, 13.54688,   359.47250);
CreateActor(13, 1707.18042, -1721.30664, 13.54717,   190.46344);
CreateActor(269, 2067.04639, -1699.64539, 14.14844,   214.09660);
CreateActor(50, 2006.91431, -1759.73999, 13.53908,   85.97485);
CreateActor(8, 2006.16797, -1759.76477, 13.53908,   273.03668);
CreateActor(268, 1989.49133, -1796.40869, 13.34500,   184.48219);
CreateActor(211, 208.86273, -98.70287, 1005.25781,   179.85735);
CreateActor(211, 206.32083, -98.70221, 1005.25781,   182.67505);
CreateActor(19, 208.75757, -107.83284, 1005.13281,   264.11911);
CreateActor(15, 200.73225, -105.74821, 1005.13281,   89.90413);
CreateActor(10, 212.06377, -101.98929, 1005.25781,   265.34912);
CreateActor(11, -28.14210, -186.83417, 1003.54688,   3.04208);
CreateActor(115, 1829.59607, -1914.58435, 13.53012,   2.53397);
CreateActor(116, 1829.50854, -1913.85767, 13.52799,   187.06580);
CreateActor(114, 1831.62476, -1877.02930, 13.55737,   98.65313);
CreateActor(174, 1830.90063, -1877.10291, 13.57204,   281.30475);
CreateActor(152, 1865.51257, -1850.00464, 13.57853,   183.20699);
CreateActor(173, 1865.48206, -1849.30054, 13.57837,   177.27718);
CreateActor(175, 1865.46631, -1850.70691, 13.57872,   358.98877);
CreateActor(102, 1912.6198,  -1071.5687,  24.2369,    261.9615);
CreateActor(103, 1912.6183,  -1069.3643,  24.2369,  273.2416);
CreateActor(104, 1876.0912,  -1092.0065,  23.8281,  169.9132);
CreateActor(102, 1875.4800,  -1093.8484,   23.8281,   354.5408);
CreateActor(103, 1879.2865,  -1081.4923,  23.8625,  41.1319);
CreateActor(102, 1878.6489,  -1079.3983,  23.8437,  196.9326);
CreateActor(103, 1876.1730,  -1093.1143,  23.8281,  88.9500);
CreateActor(104, 1879.5817,  -1079.1329,  23.8589,  143.9521);
CreateActor(103, 1880.1063,  -1080.7006,  23.8738,  99.7717);
CreateActor(102, 1880.1393,-1079.6965,23.8707,123.8986);
//CreateActor(104, 2782.84619, -1602.85217, 10.92188,   98.74488);
//CreateActor(102, 2773.24121, -1618.13049, 10.92188,   266.61383);
//CreateActor(104, 2783.17383, -1611.63135, 10.92188,   266.67004);
//CreateActor(103, 2779.87085, -1638.38293, 21.36607,   86.50163);
//CreateActor(75, 2779.43359, -1638.48132, 21.36607,   266.38937);
//CreateActor(296, 2827.23975, -1601.35901, 11.09037,   337.15659);
//CreateActor(21, 2827.46558, -1600.69116, 11.09037,   161.11780);
//CreateActor(13, 2783.89087, -1611.61377, 10.92188,   91.89381);
//CreateActor(21, 2781.77783, -1645.43262, 21.36607,   175.91486);
//CreateActor(104, 2769.77393, -1628.46912, 12.17746,   15.02828);
//CreateActor(102, 2771.65356, -1628.63745, 12.17746,   4.57599);
CreateActor(108, 2260.13818, -1135.43909, 27.00035,   166.66739);
CreateActor(110, 2268.40479, -1136.79639, 26.96090,   178.34979);
//CreateActor(296, 2781.03760, -1645.42944, 21.36607,   185.81815);
CreateActor(109, 2293.47754, -1115.72754, 37.97656,   269.00046);
CreateActor(108, 2283.55151, -1081.34741, 47.70285,   343.29404);
CreateActor(109, 2279.84644, -1079.74231, 47.73080,   335.49347);
CreateActor(109, 2289.32813, -1105.57410, 37.97656,   168.66293);
CreateActor(110, 2286.84424, -1105.05542, 37.97656,   163.02321);
CreateActor(108, 2264.68384, -1112.13184, 37.97656,   338.40271);
CreateActor(63, 2264.92212, -1111.45972, 37.97656,   163.10274);
CreateActor(16, 2283.59497, -1667.96729, 15.12346,   357.49289);
CreateActor(11, 499.14908, -77.46836, 998.76508,   0.68242);
CreateActor(25, 505.45892, -84.36276, 998.96094,   260.48779);


}
// Garaje System.
stock TipoGarage(garageid)
{
	new string[24];
	if(!GaragesVariables[garageid][gType]) format(string, sizeof(string), "Ninguno");
    else if(GaragesVariables[garageid][gType] == 1) format(string, sizeof(string), "Pequeño");
    else if(GaragesVariables[garageid][gType] == 2) format(string, sizeof(string), "Mediano");
    else if(GaragesVariables[garageid][gType] == 3) format(string, sizeof(string), "Grande");
	return string;
}
getPlayerGaragesID(const playerid)
{
	new x;
	new Nombre[MAX_PLAYER_NAME];
    while(x < MAX_GARAGES)
	{
		if(strlen(GaragesVariables[x][gOwner]) >= 1)
		{
		    GetPlayerName(playerid, Nombre, sizeof(Nombre));
	        if(!strcmp(GaragesVariables[x][gOwner], Nombre, true)){return x;}
		}
		x++;
	}
    return 0;
}
getPlayerBusinessID(const playerid)
{
	new x;
	new Nombre[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Nombre, sizeof(Nombre));
    while(x < MAX_NEGOCIOS)
	{
		if(strlen(NegociosVariables[x][bOwner]) >= 1) // Hay texto, por lo que el negocio existe.
		{
	        if(!strcmp(NegociosVariables[x][bOwner], Nombre, true)){return x;}
	        // Si el nombre del negocio es el mismo que el nombre del Player, devolver la ID del negocio.
		}
		x++;
	}
    return 0;
}
stock businessTypeMessages(const businessid, const playerid)
{
	// Message(playerid, COLOR_WHITE, "[Tipos de negocios]: 1. 24/7 - 2. Ropa - 3. Restaurante - 4. Petrol - 5. Rentas - 6. Otros");
	switch(NegociosVariables[businessid][bType])
	{
		case 1:        	SendClientMessageEx(playerid, COLOR_GREY, "[24/7]{FFFFFF} Acerquese al mostrador y use el comando /comprar.'");
		case 2: 		SendClientMessageEx(playerid, COLOR_GREY, "[ROPA]{FFFFFF} Usa /comprar para elegir un nuevo skin, compra de toys use /ctoys.");
		case 3: 		SendClientMessageEx(playerid, COLOR_GREY, "[RSTR]{FFFFFF} Dispone del comando /comer - /comprar en este local.");
		case 4: 		SendClientMessageEx(playerid, COLOR_GREY, "[GSLN]{FFFFFF} Usa /comprar para realizar compra de bidones de gasolina.");
		case 5: 		SendClientMessageEx(playerid, COLOR_GREY, "[RNTA]{FFFFFF} Si tiene licencia de armas, podrá comprar armas, use /comprar.");
	}
	return 1;
}
stock BorrarNegocioID(id)
{
    DestroyDynamicPickup(NegociosVariables[id][bPickupID]);
	DestroyDynamic3DTextLabel(NegociosVariables[id][bLabelID]);
	if(NegociosVariables[id][bObject] != 0) {DestroyDynamicObject(NegociosVariables[id][bObject]);}
 	format(NegociosVariables[id][bOwner], MAX_PLAYER_NAME, "Sin Dueño");
 	format(NegociosVariables[id][bExtortion], MAX_PLAYER_NAME, "Nadie");
 	format(NegociosVariables[id][bName], 32, "Ninguno");
 	format(NegociosVariables[id][bInfo], 32, "Bienvenido.");
	// EXTERIOR.
	NegociosVariables[id][bExteriorPos][0] = 0.0;
	NegociosVariables[id][bExteriorPos][1] = 0.0;
	NegociosVariables[id][bExteriorPos][2] = 0.0;
	// INTERIOR.
	NegociosVariables[id][bInteriorPos][0] = 0.0;
	NegociosVariables[id][bInteriorPos][1] = 0.0;
	NegociosVariables[id][bInteriorPos][2] = 0.0;
	// Caja Fuerte.
	NegociosVariables[id][bMiscPos][0] = 0.0;
	NegociosVariables[id][bMiscPos][1] = 0.0;
	NegociosVariables[id][bMiscPos][2] = 0.0;
	NegociosVariables[id][bMiscPos][3] = 0.0;
	// Información.
	NegociosVariables[id][bInterior] = 0;
	NegociosVariables[id][bGanancias] = 0;
	NegociosVariables[id][bPrice] = 0;
	NegociosVariables[id][bLevelNeeded] = 0;
	NegociosVariables[id][bStock] = 0;
	NegociosVariables[id][bType] = 0;
	// Guardado de los cambios.
	saveNegocios(id);
}
// SpeedCam System.
stock CreateSpeedCam(newid,Float:x,Float:y,Float:z,Float:rot,range,limit,fine)
{
	new text_info[80];
	vCameraInfo[newid][vCameraPos][0] = x;
	vCameraInfo[newid][vCameraPos][1] = y;
	vCameraInfo[newid][vCameraPos][2] = z;
	vCameraInfo[newid][vCameraRot] = rot;
	vCameraInfo[newid][vCameraRange] = range;
	vCameraInfo[newid][vCameraLimit] = limit;
	vCameraInfo[newid][vCameraTicket] = fine;
	vCameraInfo[newid][vCameraStatus] = 0;
	saveSpeedCam();
	vCameraInfo[newid][vCameraObject] = CreateDynamicObject(18880, vCameraInfo[newid][vCameraPos][0],vCameraInfo[newid][vCameraPos][1],vCameraInfo[newid][vCameraPos][2],0,0,vCameraInfo[newid][vCameraRot]);
	switch(vCameraInfo[newid][vCameraStatus])
	{
	    case 0: format(text_info, sizeof(text_info), "{007AFF}[RADAR %d]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}%d{81DAF5} KM/H", newid,vCameraInfo[newid][vCameraLimit]);
		case 1: format(text_info, sizeof(text_info), "{DF0101}[RADAR %d DESCONECTADO]\n{81DAF5}VELOCIDAD MÁXIMA: {FFFFFF}0{81DAF5} KM/H", newid);
	}
	vCameraInfo[newid][vCameraLabel] = CreateDynamic3DTextLabel(text_info,-1,vCameraInfo[newid][vCameraPos][0],vCameraInfo[newid][vCameraPos][1],vCameraInfo[newid][vCameraPos][2]+8,50.0);
}
stock DeleteSpeedCam(newid)
{
	vCameraInfo[newid][vCameraPos][0] = 0.0;
	vCameraInfo[newid][vCameraPos][0] = 0.0;
	vCameraInfo[newid][vCameraPos][0] = 0.0;
	vCameraInfo[newid][vCameraRot] = 0.0;
	vCameraInfo[newid][vCameraRange] = 0;
	vCameraInfo[newid][vCameraLimit] = 0;
	vCameraInfo[newid][vCameraTicket] = 0;
	saveSpeedCam();
	DestroyDynamicObject(vCameraInfo[newid][vCameraObject]);
	DestroyDynamic3DTextLabel(vCameraInfo[newid][vCameraLabel]);
}
function RemoveFlash(playerid)
{
	TextDrawHideForPlayer(playerid,flash);
	SetPVarInt(playerid,"PlayerHasBeenFlashed",2);
}
function RemoveFlashBack(playerid)
{
	TextDrawHideForPlayer(playerid,flashback);
	Vigilando[playerid] = 1;
}
function DialogoEstado(playerid)
{
	new string[90], SituacionEs[28];
	switch(EstadoON[playerid])
	{
	    case 0: SituacionEs = "{01DF01}Activar Status";
	    case 1: SituacionEs = "{FF0000}Desactivar Status";
 	}
	format(string, sizeof(string), "Estado en uso: %s\n%s", Info[playerid][pEstadoX], SituacionEs);
	ShowPlayerDialog(playerid, DIALOG_ESTADO, DIALOG_STYLE_LIST, "Estado", string, "Seleccionar", "Salir");
}
//////// SISTEMAS DINÁMICOS DE ACTORES - Max_Actores //////////////////////////////////////////////////////////////////
stock BorrarActorID(id)
{
	DestroyDynamic3DTextLabel(iActor[id][aLabelActor]); // Destruir Label.
	DestroyActor(iActor[id][aInfo]); // Destruir Actor.
	//Posición del Actor.
	iActor[id][aPos][0] = 0.0; iActor[id][aPos][1] = 0.0; iActor[id][aPos][2] = 0.0; iActor[id][aPos][3] = 0.0;
	// Información.
	format(iActor[id][aNombre], MAX_PLAYER_NAME, "Ninguno");
	iActor[id][aSkin] = -1; // Skin ID del Actor.
	//////////////////////////////////////////////////////////////////
	iActor[id][aVW] = 0; // VirtualWorld.
	iActor[id][aINV] = 0; // Invencible.
	iActor[id][aAnim] = 0; // Animación.
	// Guardado de los cambios.
	saveActores(id);
}
function ActualizarActor(id) // Elimar objeto y label para crearlos de nuevo. (X, Y y Z ajustados previamente por CMD) y guardarlo.
{
    	new strings[80];
		DestroyDynamic3DTextLabel(iActor[id][aLabelActor]); // Destruir Label.
		DestroyActor(iActor[id][aInfo]); // Destruir Actor.
		if(iActor[id][aPos][0] != 0.0) // Se realiza ajuste si el Actor SÍ EXISTE.
		{
			switch(iActor[id][aINV]) // Solo damos ID en label a los Actores que son invencibles,
			//Motivo: Si no son invencibles, el actor podrá ser desplazado y el label quedaría en el mismo lugar, generando así un bug de sincronización.
			{
			    case 1: // Actores invencibles.
			    {
					if(!strcmp("Ninguno", iActor[id][aNombre])) // Si no tiene nombre.
       				{
   			   	 		// Si es Ninguno, no se crea el texto.
   						format(strings, sizeof(strings), "(%d)", id);
   						iActor[id][aLabelActor] = CreateDynamic3DTextLabel(strings, -1, iActor[id][aPos][0], iActor[id][aPos][1], iActor[id][aPos][2]+1, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
	   				}
					else // Si el Actor tiene nombre, se lo damos.
					{
						// Si no es Ninguno, se crea el texto.
						format(strings, sizeof(strings), "%s (%d)",iActor[id][aNombre], id);
						iActor[id][aLabelActor] = CreateDynamic3DTextLabel(strings, -1, iActor[id][aPos][0], iActor[id][aPos][1], iActor[id][aPos][2]+1, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 5.0);
					}
				}
			}
			// Se crea el actor usando la información básica: Skin, posición, rotación. Virtual World y si es invencible.
			iActor[id][aInfo] = CreateActor(iActor[id][aSkin], iActor[id][aPos][0], iActor[id][aPos][1], iActor[id][aPos][2], iActor[id][aPos][3]);
			SetActorVirtualWorld(iActor[id][aInfo], iActor[id][aVW]); SetActorInvulnerable(iActor[id][aInfo], iActor[id][aINV]); // Se ajusta VW e INV.
			SetActorHealth(iActor[id][aInfo], 100); ClearActorAnimations(iActor[id][aInfo]); // Vida a 100 y sin animaciones existentes.
			if(iActor[id][aAnim] > 0) // Si es mayor de 0. (Es decir, que está animado).
			{
  				switch(iActor[id][aAnim])
				{
					case 1:{ApplyActorAnimation(iActor[id][aInfo], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 1, 0, 0);} // Hablar.
                	case 2:{ApplyActorAnimation(iActor[id][aInfo], "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 1, 0, 0);} // Seguridad.
                	case 3:{ApplyActorAnimation(iActor[id][aInfo], "SMOKING","M_smk_in", 4.0, 1, 0, 1, 0, 0);} // Fumar.
                	case 4:{ApplyActorAnimation(iActor[id][aInfo], "MISC", "Idle_Chat_02", 4.0, 1, 0, 1, 0, 0);} // Hablar 2.
                	case 5:{ApplyActorAnimation(iActor[id][aInfo], "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 0);} // Sentado.
                	case 6:{ApplyActorAnimation(iActor[id][aInfo], "RAPPING", "Laugh_01", 4.0, 1, 0, 1, 0, 0);} // Rie.
					case 7:{ApplyActorAnimation(iActor[id][aInfo], "DEALER", "DEALER_DEAL", 4.0, 1, 0, 1, 0, 0);} //  Sacando dinero.
					case 8:{ApplyActorAnimation(iActor[id][aInfo], "RAPPING","RAP_A_Loop", 4.0, 1, 0, 1, 0, 0);} // Rapeando.
					case 9:{ApplyActorAnimation(iActor[id][aInfo], "GANGS","smkcig_prtl", 4.0, 1, 0, 1, 0, 0);} // Observando.
					case 10:{ApplyActorAnimation(iActor[id][aInfo], "STRIP","strip_E",4.1,7,5,1,1,1);} // Perrea, perrea :D
				}
			}
		} // Se cierra la creación del Actor, ya que tiene posición X.
        saveActores(id); // Se guarda los ajustes.
        return 1;
}
//////// SISTEMA DINÁMICOS DE PORTONES - Max_Portones /////////////////////////////////////////////////////////////////
stock BorrarPortonID(id)
{
	DestroyDynamic3DTextLabel(iPorton[id][pLabelID]); // Destruir Label.
	if(iPorton[id][pObject] != 0) {DestroyDynamicObject(iPorton[id][pObject]);} // Destruir Objeto.
	//Posición Inicial.
	iPorton[id][pA][0] = 0.0; iPorton[id][pA][1] = 0.0; iPorton[id][pA][2] = 0.0;
	iPorton[id][pA][3] = 0.0; iPorton[id][pA][4] = 0.0; iPorton[id][pA][5] = 0.0;
	// Posición Final.
	iPorton[id][pZ][0] = 0.0; iPorton[id][pZ][1] = 0.0; iPorton[id][pZ][2] = 0.0;
	iPorton[id][pZ][3] = 0.0; iPorton[id][pZ][4] = 0.0; iPorton[id][pZ][5] = 0.0;
	// Información.
	iPorton[id][pSpeed] = -1; iPorton[id][pFac] = 0; iPorton[id][pFam] = 0;
	iPorton[id][pObjectID] = 0; iPorton[id][pForceDoor] = 0;
	// Guardado de los cambios.
	savePortones(id);
}
function ActualizarPorton(id) // Elimar objeto y label para crearlos de nuevo. (X, Y y Z ajustados previamente por CMD) y guardarlo.
{
    	new strings[180];
		DestroyDynamic3DTextLabel(iPorton[id][pLabelID]); // Destruir Label.
		if(iPorton[id][pObject] != 0) {DestroyDynamicObject(iPorton[id][pObject]);} // Destruir Objeto.
		if(iPorton[id][pA][0] > 0.0) // Se crean portones cuya coordinada X exista. (TextLabel)
		{
			switch(iPorton[id][pForceDoor])
			{
				case 1: // Portones públicos. (Forzables por LSPD)
				{
       				if(iPorton[id][pFac] != 0) // Facción tiene nombre.
       				{
   						format(strings, sizeof(strings), "Portón de %s\nUsa /apgarage.\n[%d]",InfoFacc[iPorton[id][pFac]][gFacc], id);
   				    }
					else // Facción es 0.
					{
						format(strings, sizeof(strings), "Portón de %s\nUsa /apgarage.\n[%d]",fINFO[iPorton[id][pFam]][FamilyName], id);
					}
				}
				case 0: // Portones privados. (No forzables)
				{
       				if(iPorton[id][pFac] != 0) // Facción tiene nombre.
       				{
   						format(strings, sizeof(strings), "[Portón %d]", id);
					}
					else // Facción no tiene nombre. (Es 0)
					{
						format(strings, sizeof(strings), "[Portón %d]", id);
					}
				}
			}
		}
		if(iPorton[id][pObjectID] == 0 && iPorton[id][pA][0] != 0.0) // Si existe objeto de la puerta y tiene coordenadas iniciales, se crea el objeto.
		{
			iPorton[id][pObject] = CreateDynamicObject(iPorton[id][pObjectID], iPorton[id][pA][0],iPorton[id][pA][1],iPorton[id][pA][2],iPorton[id][pA][3],iPorton[id][pA][4],iPorton[id][pA][5]);
		}
		iPorton[id][pLabelID] = CreateDynamic3DTextLabel(strings, -1, iPorton[id][pA][0], iPorton[id][pA][1], iPorton[id][pA][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 8.0);
        savePortones(id);
        return 1;
}

////////////////////////////////////////////////////////////// TEST CONDUCIR - Autoescuela ////////////////////////////
public TestConducir(playerid)
{
	if(DrivingTest[playerid] == 2) // Si no subió al vehículo todavía.
	{
		DisablePlayerCheckpoint(playerid);
     	SendClientMessageEx(playerid,COLOR_GREY,"Tardaste mucho, el profesor se ha marchado. Tendrás que pagar otra vez para realizar el exámen de conducción.");
		DrivingTest[playerid] = 0; // Fin.
		return 1;
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && !IsALicCar(GetPlayerVehicleID(playerid))) // No es el conductor y no está en un vehículo de test. (Si sale del coche en medio del test).
    {
        DisablePlayerCheckpoint(playerid); // Evitar hacer el test con otro vehículo o a pie.
   		SendClientMessageEx(playerid,COLOR_GREY,"No estás dentro del vehículo de la Autoescuela, entra en uno e inicie el exámen de nuevo. No tardes mucho.");
		DrivingTest[playerid] = 1; // Fin.
		return SetTimerEx("TestConducir",30000,0,"d",playerid); // Si tarda más de 30 segundos en no entrar en otro vehículo de la Autoescuela, A PAGAR OTRA VEZ.
    }
	if(DrivingTest[playerid] == 10) // Aquí se inicia el test de conducción puro y duro.
	{SetPlayerCheckpoint(playerid, 2084.1243,-1829.3904,13.2, 5.0);}
	else if(DrivingTest[playerid] == 9)
	{SetPlayerCheckpoint(playerid, 2084.1243,-1829.3904,13.2, 5.0);}
	else if(DrivingTest[playerid] == 8)
	{SetPlayerCheckpoint(playerid, 2067.4231,-1809.8171,13.2, 5.0);}
	else if(DrivingTest[playerid] == 7)
	{SetPlayerCheckpoint(playerid, 1976.0070,-1809.4790,13.2, 5.0);}
	else if(DrivingTest[playerid] == 6)
	{SetPlayerCheckpoint(playerid, 1958.8334,-1827.4556,13.2, 5.0);}
	else if(DrivingTest[playerid] == 5)
	{SetPlayerCheckpoint(playerid, 1959.3459,-1917.4956,13.25, 5.0);}
	else if(DrivingTest[playerid] == 4)
	{SetPlayerCheckpoint(playerid, 1978.0740,-1935.2076,13.2, 5.0);}
	else if(DrivingTest[playerid] == 3)
	{SetPlayerCheckpoint(playerid, 2046.7155, -1934.5981, 13.2, 5.0);} // Está entrando al estacionamiento. (En la calle).
	// Aquí se inicia el test de verdad, comprobación del vehículo y lugar a estacionar.
	else if(DrivingTest[playerid] == 2)
	{
	    SetPlayerCheckpoint(playerid, 2056.5313,-1925.7705,13.2, 5.0);
	    TogglePlayerControllable(playerid, 1); // Descongelado.
	    // Se está entrando al estacionamiento, se precisará comprobar la ID del vehículo.
	}
	else if(DrivingTest[playerid] == 99)
	{
		new veh = GetPlayerVehicleID(playerid);
		if(veh == Test_Vehicle[0]){SetPlayerCheckpoint(playerid, 2052.4758, -1904.0000, 13.3424, 3.0);}
		else if(veh == Test_Vehicle[1]){SetPlayerCheckpoint(playerid, 2055.9727, -1904.0000, 13.3424, 3.0);}
		else if(veh == Test_Vehicle[2]){SetPlayerCheckpoint(playerid, 2059.2859, -1904.0000, 13.3424, 3.0);}
		else if(veh == Test_Vehicle[3]){SetPlayerCheckpoint(playerid, 2062.4067, -1904.0000, 13.3424, 3.0);}
		else if(veh == Test_Vehicle[4]){SetPlayerCheckpoint(playerid, 2065.6514, -1904.0000, 13.3424, 3.0);}
		else if(veh == Test_Vehicle[5]){SetPlayerCheckpoint(playerid, 2068.9370, -1904.0000, 13.3424, 3.0);}
		SendClientMessageEx(playerid,COLOR_GREEN,"Estacione su vehículo correctamente en el lugar indicado. Una vez estacione, espere en su lugar.");
		SendClientMessageEx(playerid,COLOR_WHITE,"Apage el motor del vehículo y espere a que su exámen práctico sea válidado.");
		TogglePlayerControllable(playerid, 1); // Descongelado.
	}
	else if(DrivingTest[playerid] == 100)
	{
		new Float:health; // Salud del vehículo para testear.
		new veh = GetPlayerVehicleID(playerid); // ID.
		GetVehicleHealth(veh, health);
		if(health >= 950.0)
		{
			SendClientMessageEx(playerid,COLOR_GREEN,"Puntuación final: Tu vehiculo se encuentra en buen estado. ¡APROBASTE!");
			SendClientMessageEx(playerid,COLOR_WHITE,"Felicidades, obtuviste la licencia de conducción. Haga buen uso de su licencia.");
			PlayerPlaySound(playerid, 1183, 0.0, 0.0, 0.0);
			Info[playerid][pCarLic] = 1; // Licencia obtenida.
			SetVehicleToRespawn(veh);
			DrivingTest[playerid] = 0; // Fin.
			SetPosEx(playerid, 2059.5881,-1914.3644,13.5469, 0, 0 ,0);
			DisablePlayerCheckpoint(playerid);
			return 1;
		}
		else if(health <= 849.0)
		{
			SendClientMessageEx(playerid,COLOR_RED,"STATUS: El vehiculo está un poco dañado, suerte para la próxima.");
			SendClientMessageEx(playerid,COLOR_WHITE,"Podrá realizar el test de nuevo entrando en las instalaciones de la Autoescuela..");
			SetVehicleToRespawn(veh);
			DrivingTest[playerid] = 0; // Fin.
			SetPosEx(playerid, 2059.5881,-1914.3644,13.5469, 0, 0 ,0);
			DisablePlayerCheckpoint(playerid);
			return 1;
		}
	}
	return 1;
}
stock CheckPlayerIP(playerid) // Multicuentas.
{
    new IP[2][16], ips = 0;
    GetPlayerIp(playerid, IP[0], 16);
    for(new i; i < MAX_PLAYERS; i++)
	{
        if(IsPlayerConnected(i))
        {
        	GetPlayerIp(i, IP[1], 16);
         	if(!strcmp(IP[0], IP[1])) ips++;
       	}
   	}
	if(ips > 1) ABroadCast(COLOR_ORANGE, "[ ! ] Cuenta peligrosa ha logeado al servidor, posible multicuenta", 2); // Este código seria obtener la IP de un usuario y compararla con el resto de conectados, pero lo que intento es que se obtengan 2 ID's y sean comparados. Pero el código creado por mi al principio no funciona.
}
/*stock TiempoContrato(playerid, targetplayerid, tiempo) // Primer ID el que lo ve, segunda ID el que se obtiene la información y su tiempo.
{
	new dias, horas, minutos, segundos;
	segundos = (tiempo - (dias * 86400));
	horas = floatround((segundos / 3600), floatround_floor);
	segundos = (segundos - (horas * 3600));
	minutos = floatround((segundos / 60), floatround_floor);
	segundos = (segundos - (minutos * 60));
    new string[128], ftext[30];
	switch(Info[targetplayerid][pMember])
 	{
  		case 0: 	{ftext = "((Si lees esto, está bug))";}
    	case 1: 	{ftext = "Los Santos Dep Policial";}
		case 2: 	{ftext = "Federal Bureau Investigation"; }
		case 3: 	{ftext = "San Andreas Ejercito Militar";}
		case 4: 	{ftext = "S.E.C - Médicos y Bomberos";}
	 	case 5:     {ftext = "Los Santos Televisión";}
		case 6:     {ftext = "Crazy Motors";}
	 	case 7:     {ftext = "Gobierno";}
  		case 8:     {ftext = "Agencia Hitman";}
 		case 9:     {ftext = "Sistema Judicial";}
		case 10:    {ftext = "Groove Street";}
		case 11:    {ftext = "Ballas the Kings";}
		case 12:    {ftext = "Latin Kings";}
		case 13:    {ftext = "Sureños 13";}
		case 14:    {ftext = "Mafia Rusa";}
		case 15:    {ftext = "La Cosa Nostra";}
		case 16:    {ftext = "Mafia Yakuza";}
		case 17:    {ftext = "ALEPH";}
		case 18:    {ftext = "Mafia Américana";}
		case 19:    {ftext = "Terroristas";}
		case 20:    {ftext = "Cartel del Golfo";}
  	}
    format(string, sizeof(string), "[OOC] Contrato laboral de %s con la facción %s.", GetPlayerNameEx(targetplayerid), ftext);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "El contrato finalizará en %d dias, %d horas, %d minutos, %d segundos.", dias, horas, minutos, segundos);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
}
**************************** Creditos Actividad -RP****************************
||===============================================||
|| Nombre: Actividad-RolePlay.                   ||
|| Programadores: Stil_Marley - Tony_Zill        ||
|| Servidor: RolePlay.                           ||
|| Mapper: Cristhian_Castillo.                   ||
|| Rol: Los Santos.                              ||
|| Version: 2.1.  Beta.                          ||
|| Base: Base ZC - Tu Vida Virtual               ||
||===============================================||
*/
